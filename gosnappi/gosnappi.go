// Open Traffic Generator API 0.6.7
// License: MIT

package gosnappi

import (
	"bytes"
	"context"
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	"github.com/ghodss/yaml"
	"github.com/golang/protobuf/proto"
	snappipb "github.com/open-traffic-generator/snappi/gosnappi/snappipb"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/types/known/emptypb"
)

type gosnappiApi struct {
	api
	grpcClient snappipb.OpenapiClient
	httpClient httpClient
}

// grpcConnect builds up a grpc connection
func (api *gosnappiApi) grpcConnect() error {
	if api.grpcClient == nil {
		conn, err := grpc.Dial(api.grpc.location, grpc.WithInsecure())
		if err != nil {
			return err
		}
		api.grpcClient = snappipb.NewOpenapiClient(conn)
	}
	return nil
}

// NewApi returns a new instance of the top level interface hierarchy
func NewApi() GosnappiApi {
	api := gosnappiApi{}
	return &api
}

// httpConnect builds up a http connection
func (api *gosnappiApi) httpConnect() error {
	if api.httpClient.client == nil {
		var verify = !api.http.verify
		client := httpClient{
			client: &http.Client{
				Transport: &http.Transport{
					TLSClientConfig: &tls.Config{InsecureSkipVerify: verify},
				},
			},
			ctx: context.Background(),
		}
		api.httpClient = client
	}
	return nil
}

func (api *gosnappiApi) httpSendRecv(urlPath string, jsonBody string, method string) (*http.Response, error) {
	err := api.httpConnect()
	if err != nil {
		return nil, err
	}
	httpClient := api.httpClient
	var bodyReader = bytes.NewReader([]byte(jsonBody))
	queryUrl, err := url.Parse(api.http.location)
	if err != nil {
		return nil, err
	}
	queryUrl, _ = queryUrl.Parse(urlPath)
	req, _ := http.NewRequest(method, queryUrl.String(), bodyReader)
	req.Header.Set("Content-Type", "application/json")
	req = req.WithContext(httpClient.ctx)
	return httpClient.client.Do(req)
}

type GosnappiApi interface {
	Api
	NewConfig() Config
	NewTransmitState() TransmitState
	NewLinkState() LinkState
	NewCaptureState() CaptureState
	NewFlowsUpdate() FlowsUpdate
	NewRouteState() RouteState
	NewPingRequest() PingRequest
	NewProtocolState() ProtocolState
	NewMetricsRequest() MetricsRequest
	NewCaptureRequest() CaptureRequest
	NewSetConfigResponse() SetConfigResponse
	NewGetConfigResponse() GetConfigResponse
	NewSetTransmitStateResponse() SetTransmitStateResponse
	NewSetLinkStateResponse() SetLinkStateResponse
	NewSetCaptureStateResponse() SetCaptureStateResponse
	NewUpdateFlowsResponse() UpdateFlowsResponse
	NewSetRouteStateResponse() SetRouteStateResponse
	NewSendPingResponse() SendPingResponse
	NewSetProtocolStateResponse() SetProtocolStateResponse
	NewGetMetricsResponse() GetMetricsResponse
	NewGetStateMetricsResponse() GetStateMetricsResponse
	NewGetCaptureResponse() GetCaptureResponse
	SetConfig(config Config) (ResponseWarning, error)
	GetConfig() (Config, error)
	SetTransmitState(transmitState TransmitState) (ResponseWarning, error)
	SetLinkState(linkState LinkState) (ResponseWarning, error)
	SetCaptureState(captureState CaptureState) (ResponseWarning, error)
	UpdateFlows(flowsUpdate FlowsUpdate) (Config, error)
	SetRouteState(routeState RouteState) (ResponseWarning, error)
	SendPing(pingRequest PingRequest) (PingResponse, error)
	SetProtocolState(protocolState ProtocolState) (ResponseWarning, error)
	GetMetrics(metricsRequest MetricsRequest) (MetricsResponse, error)
	GetStateMetrics() (StateMetrics, error)
	GetCapture(captureRequest CaptureRequest) ([]byte, error)
}

func (api *gosnappiApi) NewConfig() Config {
	newObj := &config{obj: &snappipb.Config{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewTransmitState() TransmitState {
	newObj := &transmitState{obj: &snappipb.TransmitState{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewLinkState() LinkState {
	newObj := &linkState{obj: &snappipb.LinkState{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewCaptureState() CaptureState {
	newObj := &captureState{obj: &snappipb.CaptureState{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewFlowsUpdate() FlowsUpdate {
	newObj := &flowsUpdate{obj: &snappipb.FlowsUpdate{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewRouteState() RouteState {
	newObj := &routeState{obj: &snappipb.RouteState{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewPingRequest() PingRequest {
	newObj := &pingRequest{obj: &snappipb.PingRequest{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewProtocolState() ProtocolState {
	newObj := &protocolState{obj: &snappipb.ProtocolState{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewMetricsRequest() MetricsRequest {
	newObj := &metricsRequest{obj: &snappipb.MetricsRequest{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewCaptureRequest() CaptureRequest {
	newObj := &captureRequest{obj: &snappipb.CaptureRequest{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewSetConfigResponse() SetConfigResponse {
	newObj := &setConfigResponse{obj: &snappipb.SetConfigResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewGetConfigResponse() GetConfigResponse {
	newObj := &getConfigResponse{obj: &snappipb.GetConfigResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewSetTransmitStateResponse() SetTransmitStateResponse {
	newObj := &setTransmitStateResponse{obj: &snappipb.SetTransmitStateResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewSetLinkStateResponse() SetLinkStateResponse {
	newObj := &setLinkStateResponse{obj: &snappipb.SetLinkStateResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewSetCaptureStateResponse() SetCaptureStateResponse {
	newObj := &setCaptureStateResponse{obj: &snappipb.SetCaptureStateResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewUpdateFlowsResponse() UpdateFlowsResponse {
	newObj := &updateFlowsResponse{obj: &snappipb.UpdateFlowsResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewSetRouteStateResponse() SetRouteStateResponse {
	newObj := &setRouteStateResponse{obj: &snappipb.SetRouteStateResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewSendPingResponse() SendPingResponse {
	newObj := &sendPingResponse{obj: &snappipb.SendPingResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewSetProtocolStateResponse() SetProtocolStateResponse {
	newObj := &setProtocolStateResponse{obj: &snappipb.SetProtocolStateResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewGetMetricsResponse() GetMetricsResponse {
	newObj := &getMetricsResponse{obj: &snappipb.GetMetricsResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewGetStateMetricsResponse() GetStateMetricsResponse {
	newObj := &getStateMetricsResponse{obj: &snappipb.GetStateMetricsResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) NewGetCaptureResponse() GetCaptureResponse {
	newObj := &getCaptureResponse{obj: &snappipb.GetCaptureResponse{}}
	newObj.setDefault()
	return newObj
}

func (api *gosnappiApi) SetConfig(config Config) (ResponseWarning, error) {

	err := config.Validate()
	if err != nil {
		return nil, err
	}

	if api.hasHttpTransport() {
		return api.httpSetConfig(config)
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SetConfigRequest{Config: config.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetConfig(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &responseWarning{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) GetConfig() (Config, error) {

	if api.hasHttpTransport() {
		return api.httpGetConfig()
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetConfig(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &config{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) SetTransmitState(transmitState TransmitState) (ResponseWarning, error) {

	err := transmitState.Validate()
	if err != nil {
		return nil, err
	}

	if api.hasHttpTransport() {
		return api.httpSetTransmitState(transmitState)
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SetTransmitStateRequest{TransmitState: transmitState.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetTransmitState(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &responseWarning{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) SetLinkState(linkState LinkState) (ResponseWarning, error) {

	err := linkState.Validate()
	if err != nil {
		return nil, err
	}

	if api.hasHttpTransport() {
		return api.httpSetLinkState(linkState)
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SetLinkStateRequest{LinkState: linkState.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetLinkState(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &responseWarning{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) SetCaptureState(captureState CaptureState) (ResponseWarning, error) {

	err := captureState.Validate()
	if err != nil {
		return nil, err
	}

	if api.hasHttpTransport() {
		return api.httpSetCaptureState(captureState)
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SetCaptureStateRequest{CaptureState: captureState.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetCaptureState(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &responseWarning{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) UpdateFlows(flowsUpdate FlowsUpdate) (Config, error) {

	err := flowsUpdate.Validate()
	if err != nil {
		return nil, err
	}

	if api.hasHttpTransport() {
		return api.httpUpdateFlows(flowsUpdate)
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.UpdateFlowsRequest{FlowsUpdate: flowsUpdate.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.UpdateFlows(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &config{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) SetRouteState(routeState RouteState) (ResponseWarning, error) {

	err := routeState.Validate()
	if err != nil {
		return nil, err
	}

	if api.hasHttpTransport() {
		return api.httpSetRouteState(routeState)
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SetRouteStateRequest{RouteState: routeState.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetRouteState(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &responseWarning{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) SendPing(pingRequest PingRequest) (PingResponse, error) {

	err := pingRequest.Validate()
	if err != nil {
		return nil, err
	}

	if api.hasHttpTransport() {
		return api.httpSendPing(pingRequest)
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SendPingRequest{PingRequest: pingRequest.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SendPing(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &pingResponse{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) SetProtocolState(protocolState ProtocolState) (ResponseWarning, error) {

	err := protocolState.Validate()
	if err != nil {
		return nil, err
	}

	if api.hasHttpTransport() {
		return api.httpSetProtocolState(protocolState)
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SetProtocolStateRequest{ProtocolState: protocolState.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetProtocolState(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &responseWarning{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) GetMetrics(metricsRequest MetricsRequest) (MetricsResponse, error) {

	err := metricsRequest.Validate()
	if err != nil {
		return nil, err
	}

	if api.hasHttpTransport() {
		return api.httpGetMetrics(metricsRequest)
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.GetMetricsRequest{MetricsRequest: metricsRequest.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetMetrics(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &metricsResponse{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) GetStateMetrics() (StateMetrics, error) {

	if api.hasHttpTransport() {
		return api.httpGetStateMetrics()
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetStateMetrics(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &stateMetrics{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) GetCapture(captureRequest CaptureRequest) ([]byte, error) {

	err := captureRequest.Validate()
	if err != nil {
		return nil, err
	}

	if api.hasHttpTransport() {
		return api.httpGetCapture(captureRequest)
	}

	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.GetCaptureRequest{CaptureRequest: captureRequest.Msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetCapture(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return resp.GetStatusCode_200(), nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_500())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response of 200, 400, 500 has not been implemented")
}

func (api *gosnappiApi) httpSetConfig(config Config) (ResponseWarning, error) {
	resp, err := api.httpSendRecv("config", config.ToJson(), "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetConfigResponse()
		if err := obj.StatusCode200().FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		err := obj.Validate()
		if err != nil {
			return nil, err
		}
		return obj.StatusCode200(), nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) httpGetConfig() (Config, error) {
	resp, err := api.httpSendRecv("config", "", "GET")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetConfigResponse()
		if err := obj.StatusCode200().FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		err := obj.Validate()
		if err != nil {
			return nil, err
		}
		return obj.StatusCode200(), nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) httpSetTransmitState(transmitState TransmitState) (ResponseWarning, error) {
	resp, err := api.httpSendRecv("control/transmit", transmitState.ToJson(), "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetTransmitStateResponse()
		if err := obj.StatusCode200().FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		err := obj.Validate()
		if err != nil {
			return nil, err
		}
		return obj.StatusCode200(), nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) httpSetLinkState(linkState LinkState) (ResponseWarning, error) {
	resp, err := api.httpSendRecv("control/link", linkState.ToJson(), "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetLinkStateResponse()
		if err := obj.StatusCode200().FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		err := obj.Validate()
		if err != nil {
			return nil, err
		}
		return obj.StatusCode200(), nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) httpSetCaptureState(captureState CaptureState) (ResponseWarning, error) {
	resp, err := api.httpSendRecv("control/capture", captureState.ToJson(), "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetCaptureStateResponse()
		if err := obj.StatusCode200().FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		err := obj.Validate()
		if err != nil {
			return nil, err
		}
		return obj.StatusCode200(), nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) httpUpdateFlows(flowsUpdate FlowsUpdate) (Config, error) {
	resp, err := api.httpSendRecv("control/flows", flowsUpdate.ToJson(), "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewUpdateFlowsResponse()
		if err := obj.StatusCode200().FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		err := obj.Validate()
		if err != nil {
			return nil, err
		}
		return obj.StatusCode200(), nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) httpSetRouteState(routeState RouteState) (ResponseWarning, error) {
	resp, err := api.httpSendRecv("control/routes", routeState.ToJson(), "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetRouteStateResponse()
		if err := obj.StatusCode200().FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		err := obj.Validate()
		if err != nil {
			return nil, err
		}
		return obj.StatusCode200(), nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) httpSendPing(pingRequest PingRequest) (PingResponse, error) {
	resp, err := api.httpSendRecv("control/ping", pingRequest.ToJson(), "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSendPingResponse()
		if err := obj.StatusCode200().FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		err := obj.Validate()
		if err != nil {
			return nil, err
		}
		return obj.StatusCode200(), nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) httpSetProtocolState(protocolState ProtocolState) (ResponseWarning, error) {
	resp, err := api.httpSendRecv("control/protocols", protocolState.ToJson(), "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewSetProtocolStateResponse()
		if err := obj.StatusCode200().FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		err := obj.Validate()
		if err != nil {
			return nil, err
		}
		return obj.StatusCode200(), nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) httpGetMetrics(metricsRequest MetricsRequest) (MetricsResponse, error) {
	resp, err := api.httpSendRecv("results/metrics", metricsRequest.ToJson(), "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetMetricsResponse()
		if err := obj.StatusCode200().FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		err := obj.Validate()
		if err != nil {
			return nil, err
		}
		return obj.StatusCode200(), nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) httpGetStateMetrics() (StateMetrics, error) {
	resp, err := api.httpSendRecv("/results/state", "", "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		obj := api.NewGetStateMetricsResponse()
		if err := obj.StatusCode200().FromJson(string(bodyBytes)); err != nil {
			return nil, err
		}
		err := obj.Validate()
		if err != nil {
			return nil, err
		}
		return obj.StatusCode200(), nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) httpGetCapture(captureRequest CaptureRequest) ([]byte, error) {
	resp, err := api.httpSendRecv("results/capture", captureRequest.ToJson(), "POST")
	if err != nil {
		return nil, err
	}
	bodyBytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		return nil, err
	}
	if resp.StatusCode == 200 {
		return bodyBytes, nil
	}
	if resp.StatusCode == 400 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	if resp.StatusCode == 500 {
		return nil, fmt.Errorf(string(bodyBytes))
	}
	return nil, fmt.Errorf("response not implemented")
}

type config struct {
	obj *snappipb.Config
}

func NewConfig() Config {
	obj := config{obj: &snappipb.Config{}}
	obj.setDefault()
	return &obj
}

func (obj *config) Msg() *snappipb.Config {
	return obj.obj
}

func (obj *config) SetMsg(msg *snappipb.Config) Config {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *config) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *config) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *config) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *config) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *config) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *config) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *config) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Config interface {
	Msg() *snappipb.Config
	SetMsg(*snappipb.Config) Config
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Ports() ConfigPortIter
	Lags() ConfigLagIter
	Layer1() ConfigLayer1Iter
	Captures() ConfigCaptureIter
	Devices() ConfigDeviceIter
	Flows() ConfigFlowIter
	Events() Event
	SetEvents(value Event) Config
	HasEvents() bool
	Options() ConfigOptions
	SetOptions(value ConfigOptions) Config
	HasOptions() bool
}

// Ports returns a []Port
//  The ports that will be configured on the traffic generator.
func (obj *config) Ports() ConfigPortIter {
	if obj.obj.Ports == nil {
		obj.obj.Ports = []*snappipb.Port{}
	}
	return &configPortIter{obj: obj}
}

type configPortIter struct {
	obj *config
}

type ConfigPortIter interface {
	Add() Port
	Items() []Port
}

func (obj *configPortIter) Add() Port {
	newObj := &snappipb.Port{}
	obj.obj.obj.Ports = append(obj.obj.obj.Ports, newObj)
	newLibObj := &port{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *configPortIter) Items() []Port {
	slice := []Port{}
	for _, item := range obj.obj.obj.Ports {
		slice = append(slice, &port{obj: item})
	}
	return slice
}

// Lags returns a []Lag
//  The LAGs that will be configured on the traffic generator.
func (obj *config) Lags() ConfigLagIter {
	if obj.obj.Lags == nil {
		obj.obj.Lags = []*snappipb.Lag{}
	}
	return &configLagIter{obj: obj}
}

type configLagIter struct {
	obj *config
}

type ConfigLagIter interface {
	Add() Lag
	Items() []Lag
}

func (obj *configLagIter) Add() Lag {
	newObj := &snappipb.Lag{}
	obj.obj.obj.Lags = append(obj.obj.obj.Lags, newObj)
	newLibObj := &lag{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *configLagIter) Items() []Lag {
	slice := []Lag{}
	for _, item := range obj.obj.obj.Lags {
		slice = append(slice, &lag{obj: item})
	}
	return slice
}

// Layer1 returns a []Layer1
//  The layer1 settings that will be configured on the traffic generator.
func (obj *config) Layer1() ConfigLayer1Iter {
	if obj.obj.Layer1 == nil {
		obj.obj.Layer1 = []*snappipb.Layer1{}
	}
	return &configLayer1Iter{obj: obj}
}

type configLayer1Iter struct {
	obj *config
}

type ConfigLayer1Iter interface {
	Add() Layer1
	Items() []Layer1
}

func (obj *configLayer1Iter) Add() Layer1 {
	newObj := &snappipb.Layer1{}
	obj.obj.obj.Layer1 = append(obj.obj.obj.Layer1, newObj)
	newLibObj := &layer1{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *configLayer1Iter) Items() []Layer1 {
	slice := []Layer1{}
	for _, item := range obj.obj.obj.Layer1 {
		slice = append(slice, &layer1{obj: item})
	}
	return slice
}

// Captures returns a []Capture
//  The capture settings that will be configured on the traffic generator.
func (obj *config) Captures() ConfigCaptureIter {
	if obj.obj.Captures == nil {
		obj.obj.Captures = []*snappipb.Capture{}
	}
	return &configCaptureIter{obj: obj}
}

type configCaptureIter struct {
	obj *config
}

type ConfigCaptureIter interface {
	Add() Capture
	Items() []Capture
}

func (obj *configCaptureIter) Add() Capture {
	newObj := &snappipb.Capture{}
	obj.obj.obj.Captures = append(obj.obj.obj.Captures, newObj)
	newLibObj := &capture{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *configCaptureIter) Items() []Capture {
	slice := []Capture{}
	for _, item := range obj.obj.obj.Captures {
		slice = append(slice, &capture{obj: item})
	}
	return slice
}

// Devices returns a []Device
//  The emulated devices that will be configured on the traffic generator.
//  Each device contains configurations for network interfaces and
//  protocols running on top of those interfaces.
func (obj *config) Devices() ConfigDeviceIter {
	if obj.obj.Devices == nil {
		obj.obj.Devices = []*snappipb.Device{}
	}
	return &configDeviceIter{obj: obj}
}

type configDeviceIter struct {
	obj *config
}

type ConfigDeviceIter interface {
	Add() Device
	Items() []Device
}

func (obj *configDeviceIter) Add() Device {
	newObj := &snappipb.Device{}
	obj.obj.obj.Devices = append(obj.obj.obj.Devices, newObj)
	newLibObj := &device{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *configDeviceIter) Items() []Device {
	slice := []Device{}
	for _, item := range obj.obj.obj.Devices {
		slice = append(slice, &device{obj: item})
	}
	return slice
}

// Flows returns a []Flow
//  The flows that will be configured on the traffic generator.
func (obj *config) Flows() ConfigFlowIter {
	if obj.obj.Flows == nil {
		obj.obj.Flows = []*snappipb.Flow{}
	}
	return &configFlowIter{obj: obj}
}

type configFlowIter struct {
	obj *config
}

type ConfigFlowIter interface {
	Add() Flow
	Items() []Flow
}

func (obj *configFlowIter) Add() Flow {
	newObj := &snappipb.Flow{}
	obj.obj.obj.Flows = append(obj.obj.obj.Flows, newObj)
	newLibObj := &flow{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *configFlowIter) Items() []Flow {
	slice := []Flow{}
	for _, item := range obj.obj.obj.Flows {
		slice = append(slice, &flow{obj: item})
	}
	return slice
}

// Events returns a Event
//  description is TBD
func (obj *config) Events() Event {
	if obj.obj.Events == nil {
		obj.obj.Events = NewEvent().Msg()
	}
	return &event{obj: obj.obj.Events}
}

// Events returns a Event
//  description is TBD
func (obj *config) HasEvents() bool {
	return obj.obj.Events != nil
}

// SetEvents sets the Event value in the Config object
//  description is TBD
func (obj *config) SetEvents(value Event) Config {
	obj.Events().SetMsg(value.Msg())

	return obj
}

// Options returns a ConfigOptions
//  description is TBD
func (obj *config) Options() ConfigOptions {
	if obj.obj.Options == nil {
		obj.obj.Options = NewConfigOptions().Msg()
	}
	return &configOptions{obj: obj.obj.Options}
}

// Options returns a ConfigOptions
//  description is TBD
func (obj *config) HasOptions() bool {
	return obj.obj.Options != nil
}

// SetOptions sets the ConfigOptions value in the Config object
//  description is TBD
func (obj *config) SetOptions(value ConfigOptions) Config {
	obj.Options().SetMsg(value.Msg())

	return obj
}

func (obj *config) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.Ports != nil {
		for _, item := range obj.Ports().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Lags != nil {
		for _, item := range obj.Lags().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Layer1 != nil {
		for _, item := range obj.Layer1().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Captures != nil {
		for _, item := range obj.Captures().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Devices != nil {
		for _, item := range obj.Devices().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Flows != nil {
		for _, item := range obj.Flows().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Events != nil {
		obj.Events().validateObj(set_default)
	}

	if obj.obj.Options != nil {
		obj.Options().validateObj(set_default)
	}
}

func (obj *config) setDefault() {

}

type transmitState struct {
	obj *snappipb.TransmitState
}

func NewTransmitState() TransmitState {
	obj := transmitState{obj: &snappipb.TransmitState{}}
	obj.setDefault()
	return &obj
}

func (obj *transmitState) Msg() *snappipb.TransmitState {
	return obj.obj
}

func (obj *transmitState) SetMsg(msg *snappipb.TransmitState) TransmitState {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *transmitState) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *transmitState) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *transmitState) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *transmitState) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *transmitState) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *transmitState) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *transmitState) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type TransmitState interface {
	Msg() *snappipb.TransmitState
	SetMsg(*snappipb.TransmitState) TransmitState
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	FlowNames() []string
	SetFlowNames(value []string) TransmitState
	State() TransmitStateStateEnum
	SetState(value TransmitStateStateEnum) TransmitState
}

// FlowNames returns a []string
//  The names of flows to which the transmit state will be applied to. If the list of flow_names is empty or null the state will be applied to all configured flows.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
func (obj *transmitState) FlowNames() []string {
	if obj.obj.FlowNames == nil {
		obj.obj.FlowNames = make([]string, 0)
	}
	return obj.obj.FlowNames
}

// SetFlowNames sets the []string value in the TransmitState object
//  The names of flows to which the transmit state will be applied to. If the list of flow_names is empty or null the state will be applied to all configured flows.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
func (obj *transmitState) SetFlowNames(value []string) TransmitState {
	if obj.obj.FlowNames == nil {
		obj.obj.FlowNames = make([]string, 0)
	}
	obj.obj.FlowNames = value

	return obj
}

type TransmitStateStateEnum string

var TransmitStateState = struct {
	START TransmitStateStateEnum
	STOP  TransmitStateStateEnum
	PAUSE TransmitStateStateEnum
}{
	START: TransmitStateStateEnum("start"),
	STOP:  TransmitStateStateEnum("stop"),
	PAUSE: TransmitStateStateEnum("pause"),
}

func (obj *transmitState) State() TransmitStateStateEnum {
	return TransmitStateStateEnum(obj.obj.State.Enum().String())
}

func (obj *transmitState) SetState(value TransmitStateStateEnum) TransmitState {
	intValue, ok := snappipb.TransmitState_State_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on TransmitStateStateEnum", string(value)))
		return obj
	}
	obj.obj.State = snappipb.TransmitState_State_Enum(intValue)

	return obj
}

func (obj *transmitState) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// State required
	if obj.obj.State.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("State is required field on TransmitState and got value %s", obj.obj.State.String()))
	}

}

func (obj *transmitState) setDefault() {

}

type linkState struct {
	obj *snappipb.LinkState
}

func NewLinkState() LinkState {
	obj := linkState{obj: &snappipb.LinkState{}}
	obj.setDefault()
	return &obj
}

func (obj *linkState) Msg() *snappipb.LinkState {
	return obj.obj
}

func (obj *linkState) SetMsg(msg *snappipb.LinkState) LinkState {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *linkState) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *linkState) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *linkState) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *linkState) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *linkState) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *linkState) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *linkState) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type LinkState interface {
	Msg() *snappipb.LinkState
	SetMsg(*snappipb.LinkState) LinkState
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PortNames() []string
	SetPortNames(value []string) LinkState
	State() LinkStateStateEnum
	SetState(value LinkStateStateEnum) LinkState
}

// PortNames returns a []string
//  The names of port objects to. An empty or null list will control all port objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *linkState) PortNames() []string {
	if obj.obj.PortNames == nil {
		obj.obj.PortNames = make([]string, 0)
	}
	return obj.obj.PortNames
}

// SetPortNames sets the []string value in the LinkState object
//  The names of port objects to. An empty or null list will control all port objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *linkState) SetPortNames(value []string) LinkState {
	if obj.obj.PortNames == nil {
		obj.obj.PortNames = make([]string, 0)
	}
	obj.obj.PortNames = value

	return obj
}

type LinkStateStateEnum string

var LinkStateState = struct {
	UP   LinkStateStateEnum
	DOWN LinkStateStateEnum
}{
	UP:   LinkStateStateEnum("up"),
	DOWN: LinkStateStateEnum("down"),
}

func (obj *linkState) State() LinkStateStateEnum {
	return LinkStateStateEnum(obj.obj.State.Enum().String())
}

func (obj *linkState) SetState(value LinkStateStateEnum) LinkState {
	intValue, ok := snappipb.LinkState_State_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on LinkStateStateEnum", string(value)))
		return obj
	}
	obj.obj.State = snappipb.LinkState_State_Enum(intValue)

	return obj
}

func (obj *linkState) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// State required
	if obj.obj.State.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("State is required field on LinkState and got value %s", obj.obj.State.String()))
	}

}

func (obj *linkState) setDefault() {

}

type captureState struct {
	obj *snappipb.CaptureState
}

func NewCaptureState() CaptureState {
	obj := captureState{obj: &snappipb.CaptureState{}}
	obj.setDefault()
	return &obj
}

func (obj *captureState) Msg() *snappipb.CaptureState {
	return obj.obj
}

func (obj *captureState) SetMsg(msg *snappipb.CaptureState) CaptureState {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureState) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *captureState) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureState) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureState) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureState) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureState) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *captureState) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type CaptureState interface {
	Msg() *snappipb.CaptureState
	SetMsg(*snappipb.CaptureState) CaptureState
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PortNames() []string
	SetPortNames(value []string) CaptureState
	State() CaptureStateStateEnum
	SetState(value CaptureStateStateEnum) CaptureState
}

// PortNames returns a []string
//  The name of ports to start capturing packets on. An empty or null list will control all port objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *captureState) PortNames() []string {
	if obj.obj.PortNames == nil {
		obj.obj.PortNames = make([]string, 0)
	}
	return obj.obj.PortNames
}

// SetPortNames sets the []string value in the CaptureState object
//  The name of ports to start capturing packets on. An empty or null list will control all port objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *captureState) SetPortNames(value []string) CaptureState {
	if obj.obj.PortNames == nil {
		obj.obj.PortNames = make([]string, 0)
	}
	obj.obj.PortNames = value

	return obj
}

type CaptureStateStateEnum string

var CaptureStateState = struct {
	START CaptureStateStateEnum
	STOP  CaptureStateStateEnum
}{
	START: CaptureStateStateEnum("start"),
	STOP:  CaptureStateStateEnum("stop"),
}

func (obj *captureState) State() CaptureStateStateEnum {
	return CaptureStateStateEnum(obj.obj.State.Enum().String())
}

func (obj *captureState) SetState(value CaptureStateStateEnum) CaptureState {
	intValue, ok := snappipb.CaptureState_State_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on CaptureStateStateEnum", string(value)))
		return obj
	}
	obj.obj.State = snappipb.CaptureState_State_Enum(intValue)

	return obj
}

func (obj *captureState) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// State required
	if obj.obj.State.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("State is required field on CaptureState and got value %s", obj.obj.State.String()))
	}

}

func (obj *captureState) setDefault() {

}

type flowsUpdate struct {
	obj *snappipb.FlowsUpdate
}

func NewFlowsUpdate() FlowsUpdate {
	obj := flowsUpdate{obj: &snappipb.FlowsUpdate{}}
	obj.setDefault()
	return &obj
}

func (obj *flowsUpdate) Msg() *snappipb.FlowsUpdate {
	return obj.obj
}

func (obj *flowsUpdate) SetMsg(msg *snappipb.FlowsUpdate) FlowsUpdate {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowsUpdate) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowsUpdate) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowsUpdate) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowsUpdate) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowsUpdate) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowsUpdate) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowsUpdate) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowsUpdate interface {
	Msg() *snappipb.FlowsUpdate
	SetMsg(*snappipb.FlowsUpdate) FlowsUpdate
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PropertyNames() []FlowsUpdatePropertyNamesEnum
	SetPropertyNames(value []FlowsUpdatePropertyNamesEnum) FlowsUpdate
	Flows() FlowsUpdateFlowIter
}

type FlowsUpdatePropertyNamesEnum string

var FlowsUpdatePropertyNames = struct {
	RATE FlowsUpdatePropertyNamesEnum
	SIZE FlowsUpdatePropertyNamesEnum
}{
	RATE: FlowsUpdatePropertyNamesEnum("rate"),
	SIZE: FlowsUpdatePropertyNamesEnum("size"),
}

func (obj *flowsUpdate) PropertyNames() []FlowsUpdatePropertyNamesEnum {
	items := []FlowsUpdatePropertyNamesEnum{}
	for _, item := range obj.obj.PropertyNames {
		items = append(items, FlowsUpdatePropertyNamesEnum(item.String()))
	}
	return items
}

// SetPropertyNames sets the []string value in the FlowsUpdate object
//  Flow properties to be updated without affecting the transmit state
func (obj *flowsUpdate) SetPropertyNames(value []FlowsUpdatePropertyNamesEnum) FlowsUpdate {
	items := []snappipb.FlowsUpdate_PropertyNames_Enum{}
	for _, item := range value {
		intValue := snappipb.FlowsUpdate_PropertyNames_Enum_value[string(item)]
		items = append(items, snappipb.FlowsUpdate_PropertyNames_Enum(intValue))
	}
	obj.obj.PropertyNames = items

	return obj
}

// Flows returns a []Flow
//  The list of configured flows for which given property will be updated.
func (obj *flowsUpdate) Flows() FlowsUpdateFlowIter {
	if obj.obj.Flows == nil {
		obj.obj.Flows = []*snappipb.Flow{}
	}
	return &flowsUpdateFlowIter{obj: obj}
}

type flowsUpdateFlowIter struct {
	obj *flowsUpdate
}

type FlowsUpdateFlowIter interface {
	Add() Flow
	Items() []Flow
}

func (obj *flowsUpdateFlowIter) Add() Flow {
	newObj := &snappipb.Flow{}
	obj.obj.obj.Flows = append(obj.obj.obj.Flows, newObj)
	newLibObj := &flow{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *flowsUpdateFlowIter) Items() []Flow {
	slice := []Flow{}
	for _, item := range obj.obj.obj.Flows {
		slice = append(slice, &flow{obj: item})
	}
	return slice
}

func (obj *flowsUpdate) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// PropertyNames required
	if obj.obj.PropertyNames == nil {
		validation = append(validation, "PropertyNames is required field on FlowsUpdate")
	}

	if obj.obj.Flows != nil {
		for _, item := range obj.Flows().Items() {
			item.validateObj(set_default)
		}
	}

}

func (obj *flowsUpdate) setDefault() {

}

type routeState struct {
	obj *snappipb.RouteState
}

func NewRouteState() RouteState {
	obj := routeState{obj: &snappipb.RouteState{}}
	obj.setDefault()
	return &obj
}

func (obj *routeState) Msg() *snappipb.RouteState {
	return obj.obj
}

func (obj *routeState) SetMsg(msg *snappipb.RouteState) RouteState {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *routeState) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *routeState) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *routeState) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *routeState) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *routeState) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *routeState) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *routeState) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type RouteState interface {
	Msg() *snappipb.RouteState
	SetMsg(*snappipb.RouteState) RouteState
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Names() []string
	SetNames(value []string) RouteState
	State() RouteStateStateEnum
	SetState(value RouteStateStateEnum) RouteState
}

// Names returns a []string
//  The names of device route objects to control. If no names are specified then all route objects that match the x-constraint will be affected.
//
//  x-constraint:
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
func (obj *routeState) Names() []string {
	if obj.obj.Names == nil {
		obj.obj.Names = make([]string, 0)
	}
	return obj.obj.Names
}

// SetNames sets the []string value in the RouteState object
//  The names of device route objects to control. If no names are specified then all route objects that match the x-constraint will be affected.
//
//  x-constraint:
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
func (obj *routeState) SetNames(value []string) RouteState {
	if obj.obj.Names == nil {
		obj.obj.Names = make([]string, 0)
	}
	obj.obj.Names = value

	return obj
}

type RouteStateStateEnum string

var RouteStateState = struct {
	WITHDRAW  RouteStateStateEnum
	ADVERTISE RouteStateStateEnum
}{
	WITHDRAW:  RouteStateStateEnum("withdraw"),
	ADVERTISE: RouteStateStateEnum("advertise"),
}

func (obj *routeState) State() RouteStateStateEnum {
	return RouteStateStateEnum(obj.obj.State.Enum().String())
}

func (obj *routeState) SetState(value RouteStateStateEnum) RouteState {
	intValue, ok := snappipb.RouteState_State_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on RouteStateStateEnum", string(value)))
		return obj
	}
	obj.obj.State = snappipb.RouteState_State_Enum(intValue)

	return obj
}

func (obj *routeState) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// State required
	if obj.obj.State.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("State is required field on RouteState and got value %s", obj.obj.State.String()))
	}

}

func (obj *routeState) setDefault() {

}

type pingRequest struct {
	obj *snappipb.PingRequest
}

func NewPingRequest() PingRequest {
	obj := pingRequest{obj: &snappipb.PingRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *pingRequest) Msg() *snappipb.PingRequest {
	return obj.obj
}

func (obj *pingRequest) SetMsg(msg *snappipb.PingRequest) PingRequest {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pingRequest) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *pingRequest) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pingRequest) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *pingRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pingRequest) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *pingRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *pingRequest) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PingRequest interface {
	Msg() *snappipb.PingRequest
	SetMsg(*snappipb.PingRequest) PingRequest
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Endpoints() PingRequestPingIter
}

// Endpoints returns a []Ping
//  Array of ping requests
func (obj *pingRequest) Endpoints() PingRequestPingIter {
	if obj.obj.Endpoints == nil {
		obj.obj.Endpoints = []*snappipb.Ping{}
	}
	return &pingRequestPingIter{obj: obj}
}

type pingRequestPingIter struct {
	obj *pingRequest
}

type PingRequestPingIter interface {
	Add() Ping
	Items() []Ping
}

func (obj *pingRequestPingIter) Add() Ping {
	newObj := &snappipb.Ping{}
	obj.obj.obj.Endpoints = append(obj.obj.obj.Endpoints, newObj)
	newLibObj := &ping{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *pingRequestPingIter) Items() []Ping {
	slice := []Ping{}
	for _, item := range obj.obj.obj.Endpoints {
		slice = append(slice, &ping{obj: item})
	}
	return slice
}

func (obj *pingRequest) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.Endpoints != nil {
		for _, item := range obj.Endpoints().Items() {
			item.validateObj(set_default)
		}
	}

}

func (obj *pingRequest) setDefault() {

}

type protocolState struct {
	obj *snappipb.ProtocolState
}

func NewProtocolState() ProtocolState {
	obj := protocolState{obj: &snappipb.ProtocolState{}}
	obj.setDefault()
	return &obj
}

func (obj *protocolState) Msg() *snappipb.ProtocolState {
	return obj.obj
}

func (obj *protocolState) SetMsg(msg *snappipb.ProtocolState) ProtocolState {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *protocolState) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *protocolState) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *protocolState) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *protocolState) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *protocolState) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *protocolState) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *protocolState) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type ProtocolState interface {
	Msg() *snappipb.ProtocolState
	SetMsg(*snappipb.ProtocolState) ProtocolState
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	State() ProtocolStateStateEnum
	SetState(value ProtocolStateStateEnum) ProtocolState
}

type ProtocolStateStateEnum string

var ProtocolStateState = struct {
	START ProtocolStateStateEnum
	STOP  ProtocolStateStateEnum
}{
	START: ProtocolStateStateEnum("start"),
	STOP:  ProtocolStateStateEnum("stop"),
}

func (obj *protocolState) State() ProtocolStateStateEnum {
	return ProtocolStateStateEnum(obj.obj.State.Enum().String())
}

func (obj *protocolState) SetState(value ProtocolStateStateEnum) ProtocolState {
	intValue, ok := snappipb.ProtocolState_State_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on ProtocolStateStateEnum", string(value)))
		return obj
	}
	obj.obj.State = snappipb.ProtocolState_State_Enum(intValue)

	return obj
}

func (obj *protocolState) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// State required
	if obj.obj.State.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("State is required field on ProtocolState and got value %s", obj.obj.State.String()))
	}

}

func (obj *protocolState) setDefault() {

}

type metricsRequest struct {
	obj *snappipb.MetricsRequest
}

func NewMetricsRequest() MetricsRequest {
	obj := metricsRequest{obj: &snappipb.MetricsRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *metricsRequest) Msg() *snappipb.MetricsRequest {
	return obj.obj
}

func (obj *metricsRequest) SetMsg(msg *snappipb.MetricsRequest) MetricsRequest {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *metricsRequest) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *metricsRequest) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *metricsRequest) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *metricsRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *metricsRequest) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *metricsRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *metricsRequest) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type MetricsRequest interface {
	Msg() *snappipb.MetricsRequest
	SetMsg(*snappipb.MetricsRequest) MetricsRequest
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() MetricsRequestChoiceEnum
	SetChoice(value MetricsRequestChoiceEnum) MetricsRequest
	HasChoice() bool
	Port() PortMetricsRequest
	SetPort(value PortMetricsRequest) MetricsRequest
	HasPort() bool
	Flow() FlowMetricsRequest
	SetFlow(value FlowMetricsRequest) MetricsRequest
	HasFlow() bool
	Bgpv4() Bgpv4MetricsRequest
	SetBgpv4(value Bgpv4MetricsRequest) MetricsRequest
	HasBgpv4() bool
	Bgpv6() Bgpv6MetricsRequest
	SetBgpv6(value Bgpv6MetricsRequest) MetricsRequest
	HasBgpv6() bool
	Isis() IsisMetricsRequest
	SetIsis(value IsisMetricsRequest) MetricsRequest
	HasIsis() bool
}

type MetricsRequestChoiceEnum string

var MetricsRequestChoice = struct {
	PORT  MetricsRequestChoiceEnum
	FLOW  MetricsRequestChoiceEnum
	BGPV4 MetricsRequestChoiceEnum
	BGPV6 MetricsRequestChoiceEnum
	ISIS  MetricsRequestChoiceEnum
}{
	PORT:  MetricsRequestChoiceEnum("port"),
	FLOW:  MetricsRequestChoiceEnum("flow"),
	BGPV4: MetricsRequestChoiceEnum("bgpv4"),
	BGPV6: MetricsRequestChoiceEnum("bgpv6"),
	ISIS:  MetricsRequestChoiceEnum("isis"),
}

func (obj *metricsRequest) Choice() MetricsRequestChoiceEnum {
	return MetricsRequestChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *metricsRequest) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *metricsRequest) SetChoice(value MetricsRequestChoiceEnum) MetricsRequest {
	intValue, ok := snappipb.MetricsRequest_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on MetricsRequestChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.MetricsRequest_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "port" {
		obj.obj.Port = nil
	}

	if string(value) != "flow" {
		obj.obj.Flow = nil
	}

	if string(value) != "bgpv4" {
		obj.obj.Bgpv4 = nil
	}

	if string(value) != "bgpv6" {
		obj.obj.Bgpv6 = nil
	}

	if string(value) != "isis" {
		obj.obj.Isis = nil
	}

	return obj
}

// Port returns a PortMetricsRequest
//  description is TBD
func (obj *metricsRequest) Port() PortMetricsRequest {
	obj.SetChoice(MetricsRequestChoice.PORT)
	if obj.obj.Port == nil {
		obj.obj.Port = NewPortMetricsRequest().Msg()
	}
	return &portMetricsRequest{obj: obj.obj.Port}
}

// Port returns a PortMetricsRequest
//  description is TBD
func (obj *metricsRequest) HasPort() bool {
	return obj.obj.Port != nil
}

// SetPort sets the PortMetricsRequest value in the MetricsRequest object
//  description is TBD
func (obj *metricsRequest) SetPort(value PortMetricsRequest) MetricsRequest {
	obj.Port().SetMsg(value.Msg())
	obj.SetChoice(MetricsRequestChoice.PORT)
	return obj
}

// Flow returns a FlowMetricsRequest
//  description is TBD
func (obj *metricsRequest) Flow() FlowMetricsRequest {
	obj.SetChoice(MetricsRequestChoice.FLOW)
	if obj.obj.Flow == nil {
		obj.obj.Flow = NewFlowMetricsRequest().Msg()
	}
	return &flowMetricsRequest{obj: obj.obj.Flow}
}

// Flow returns a FlowMetricsRequest
//  description is TBD
func (obj *metricsRequest) HasFlow() bool {
	return obj.obj.Flow != nil
}

// SetFlow sets the FlowMetricsRequest value in the MetricsRequest object
//  description is TBD
func (obj *metricsRequest) SetFlow(value FlowMetricsRequest) MetricsRequest {
	obj.Flow().SetMsg(value.Msg())
	obj.SetChoice(MetricsRequestChoice.FLOW)
	return obj
}

// Bgpv4 returns a Bgpv4MetricsRequest
//  description is TBD
func (obj *metricsRequest) Bgpv4() Bgpv4MetricsRequest {
	obj.SetChoice(MetricsRequestChoice.BGPV4)
	if obj.obj.Bgpv4 == nil {
		obj.obj.Bgpv4 = NewBgpv4MetricsRequest().Msg()
	}
	return &bgpv4MetricsRequest{obj: obj.obj.Bgpv4}
}

// Bgpv4 returns a Bgpv4MetricsRequest
//  description is TBD
func (obj *metricsRequest) HasBgpv4() bool {
	return obj.obj.Bgpv4 != nil
}

// SetBgpv4 sets the Bgpv4MetricsRequest value in the MetricsRequest object
//  description is TBD
func (obj *metricsRequest) SetBgpv4(value Bgpv4MetricsRequest) MetricsRequest {
	obj.Bgpv4().SetMsg(value.Msg())
	obj.SetChoice(MetricsRequestChoice.BGPV4)
	return obj
}

// Bgpv6 returns a Bgpv6MetricsRequest
//  description is TBD
func (obj *metricsRequest) Bgpv6() Bgpv6MetricsRequest {
	obj.SetChoice(MetricsRequestChoice.BGPV6)
	if obj.obj.Bgpv6 == nil {
		obj.obj.Bgpv6 = NewBgpv6MetricsRequest().Msg()
	}
	return &bgpv6MetricsRequest{obj: obj.obj.Bgpv6}
}

// Bgpv6 returns a Bgpv6MetricsRequest
//  description is TBD
func (obj *metricsRequest) HasBgpv6() bool {
	return obj.obj.Bgpv6 != nil
}

// SetBgpv6 sets the Bgpv6MetricsRequest value in the MetricsRequest object
//  description is TBD
func (obj *metricsRequest) SetBgpv6(value Bgpv6MetricsRequest) MetricsRequest {
	obj.Bgpv6().SetMsg(value.Msg())
	obj.SetChoice(MetricsRequestChoice.BGPV6)
	return obj
}

// Isis returns a IsisMetricsRequest
//  description is TBD
func (obj *metricsRequest) Isis() IsisMetricsRequest {
	obj.SetChoice(MetricsRequestChoice.ISIS)
	if obj.obj.Isis == nil {
		obj.obj.Isis = NewIsisMetricsRequest().Msg()
	}
	return &isisMetricsRequest{obj: obj.obj.Isis}
}

// Isis returns a IsisMetricsRequest
//  description is TBD
func (obj *metricsRequest) HasIsis() bool {
	return obj.obj.Isis != nil
}

// SetIsis sets the IsisMetricsRequest value in the MetricsRequest object
//  description is TBD
func (obj *metricsRequest) SetIsis(value IsisMetricsRequest) MetricsRequest {
	obj.Isis().SetMsg(value.Msg())
	obj.SetChoice(MetricsRequestChoice.ISIS)
	return obj
}

func (obj *metricsRequest) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Port != nil {
		obj.Port().validateObj(set_default)
	}

	if obj.obj.Flow != nil {
		obj.Flow().validateObj(set_default)
	}

	if obj.obj.Bgpv4 != nil {
		obj.Bgpv4().validateObj(set_default)
	}

	if obj.obj.Bgpv6 != nil {
		obj.Bgpv6().validateObj(set_default)
	}

	if obj.obj.Isis != nil {
		obj.Isis().validateObj(set_default)
	}
}

func (obj *metricsRequest) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(MetricsRequestChoice.PORT)
		obj.Port()
	}

}

type captureRequest struct {
	obj *snappipb.CaptureRequest
}

func NewCaptureRequest() CaptureRequest {
	obj := captureRequest{obj: &snappipb.CaptureRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *captureRequest) Msg() *snappipb.CaptureRequest {
	return obj.obj
}

func (obj *captureRequest) SetMsg(msg *snappipb.CaptureRequest) CaptureRequest {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureRequest) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *captureRequest) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureRequest) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureRequest) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *captureRequest) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type CaptureRequest interface {
	Msg() *snappipb.CaptureRequest
	SetMsg(*snappipb.CaptureRequest) CaptureRequest
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PortName() string
	SetPortName(value string) CaptureRequest
}

// PortName returns a string
//  The name of a port a capture is started on.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *captureRequest) PortName() string {

	return obj.obj.PortName
}

// SetPortName sets the string value in the CaptureRequest object
//  The name of a port a capture is started on.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *captureRequest) SetPortName(value string) CaptureRequest {
	obj.obj.PortName = value

	return obj
}

func (obj *captureRequest) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// PortName required
	if obj.obj.PortName == "" {
		validation = append(validation, "PortName is required field on interface CaptureRequest")
	}
}

func (obj *captureRequest) setDefault() {

}

type setConfigResponse struct {
	obj *snappipb.SetConfigResponse
}

func NewSetConfigResponse() SetConfigResponse {
	obj := setConfigResponse{obj: &snappipb.SetConfigResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setConfigResponse) Msg() *snappipb.SetConfigResponse {
	return obj.obj
}

func (obj *setConfigResponse) SetMsg(msg *snappipb.SetConfigResponse) SetConfigResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setConfigResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *setConfigResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setConfigResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setConfigResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setConfigResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setConfigResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *setConfigResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type SetConfigResponse interface {
	Msg() *snappipb.SetConfigResponse
	SetMsg(*snappipb.SetConfigResponse) SetConfigResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() ResponseWarning
	SetStatusCode200(value ResponseWarning) SetConfigResponse
	HasStatusCode200() bool
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) SetConfigResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) SetConfigResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setConfigResponse) StatusCode200() ResponseWarning {
	if obj.obj.StatusCode_200 == nil {
		obj.obj.StatusCode_200 = NewResponseWarning().Msg()
	}
	return &responseWarning{obj: obj.obj.StatusCode_200}
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setConfigResponse) HasStatusCode200() bool {
	return obj.obj.StatusCode_200 != nil
}

// SetStatusCode200 sets the ResponseWarning value in the SetConfigResponse object
//  description is TBD
func (obj *setConfigResponse) SetStatusCode200(value ResponseWarning) SetConfigResponse {
	obj.StatusCode200().SetMsg(value.Msg())

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setConfigResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setConfigResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the SetConfigResponse object
//  description is TBD
func (obj *setConfigResponse) SetStatusCode400(value ResponseError) SetConfigResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setConfigResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setConfigResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the SetConfigResponse object
//  description is TBD
func (obj *setConfigResponse) SetStatusCode500(value ResponseError) SetConfigResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *setConfigResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_200 != nil {
		obj.StatusCode200().validateObj(set_default)
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *setConfigResponse) setDefault() {

}

type getConfigResponse struct {
	obj *snappipb.GetConfigResponse
}

func NewGetConfigResponse() GetConfigResponse {
	obj := getConfigResponse{obj: &snappipb.GetConfigResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getConfigResponse) Msg() *snappipb.GetConfigResponse {
	return obj.obj
}

func (obj *getConfigResponse) SetMsg(msg *snappipb.GetConfigResponse) GetConfigResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getConfigResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *getConfigResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getConfigResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getConfigResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getConfigResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getConfigResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *getConfigResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type GetConfigResponse interface {
	Msg() *snappipb.GetConfigResponse
	SetMsg(*snappipb.GetConfigResponse) GetConfigResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() Config
	SetStatusCode200(value Config) GetConfigResponse
	HasStatusCode200() bool
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) GetConfigResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) GetConfigResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a Config
//  description is TBD
func (obj *getConfigResponse) StatusCode200() Config {
	if obj.obj.StatusCode_200 == nil {
		obj.obj.StatusCode_200 = NewConfig().Msg()
	}
	return &config{obj: obj.obj.StatusCode_200}
}

// StatusCode200 returns a Config
//  description is TBD
func (obj *getConfigResponse) HasStatusCode200() bool {
	return obj.obj.StatusCode_200 != nil
}

// SetStatusCode200 sets the Config value in the GetConfigResponse object
//  description is TBD
func (obj *getConfigResponse) SetStatusCode200(value Config) GetConfigResponse {
	obj.StatusCode200().SetMsg(value.Msg())

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *getConfigResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *getConfigResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the GetConfigResponse object
//  description is TBD
func (obj *getConfigResponse) SetStatusCode400(value ResponseError) GetConfigResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *getConfigResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *getConfigResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the GetConfigResponse object
//  description is TBD
func (obj *getConfigResponse) SetStatusCode500(value ResponseError) GetConfigResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *getConfigResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_200 != nil {
		obj.StatusCode200().validateObj(set_default)
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *getConfigResponse) setDefault() {

}

type setTransmitStateResponse struct {
	obj *snappipb.SetTransmitStateResponse
}

func NewSetTransmitStateResponse() SetTransmitStateResponse {
	obj := setTransmitStateResponse{obj: &snappipb.SetTransmitStateResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setTransmitStateResponse) Msg() *snappipb.SetTransmitStateResponse {
	return obj.obj
}

func (obj *setTransmitStateResponse) SetMsg(msg *snappipb.SetTransmitStateResponse) SetTransmitStateResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setTransmitStateResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *setTransmitStateResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setTransmitStateResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setTransmitStateResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setTransmitStateResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setTransmitStateResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *setTransmitStateResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type SetTransmitStateResponse interface {
	Msg() *snappipb.SetTransmitStateResponse
	SetMsg(*snappipb.SetTransmitStateResponse) SetTransmitStateResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() ResponseWarning
	SetStatusCode200(value ResponseWarning) SetTransmitStateResponse
	HasStatusCode200() bool
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) SetTransmitStateResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) SetTransmitStateResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setTransmitStateResponse) StatusCode200() ResponseWarning {
	if obj.obj.StatusCode_200 == nil {
		obj.obj.StatusCode_200 = NewResponseWarning().Msg()
	}
	return &responseWarning{obj: obj.obj.StatusCode_200}
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setTransmitStateResponse) HasStatusCode200() bool {
	return obj.obj.StatusCode_200 != nil
}

// SetStatusCode200 sets the ResponseWarning value in the SetTransmitStateResponse object
//  description is TBD
func (obj *setTransmitStateResponse) SetStatusCode200(value ResponseWarning) SetTransmitStateResponse {
	obj.StatusCode200().SetMsg(value.Msg())

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setTransmitStateResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setTransmitStateResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the SetTransmitStateResponse object
//  description is TBD
func (obj *setTransmitStateResponse) SetStatusCode400(value ResponseError) SetTransmitStateResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setTransmitStateResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setTransmitStateResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the SetTransmitStateResponse object
//  description is TBD
func (obj *setTransmitStateResponse) SetStatusCode500(value ResponseError) SetTransmitStateResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *setTransmitStateResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_200 != nil {
		obj.StatusCode200().validateObj(set_default)
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *setTransmitStateResponse) setDefault() {

}

type setLinkStateResponse struct {
	obj *snappipb.SetLinkStateResponse
}

func NewSetLinkStateResponse() SetLinkStateResponse {
	obj := setLinkStateResponse{obj: &snappipb.SetLinkStateResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setLinkStateResponse) Msg() *snappipb.SetLinkStateResponse {
	return obj.obj
}

func (obj *setLinkStateResponse) SetMsg(msg *snappipb.SetLinkStateResponse) SetLinkStateResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setLinkStateResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *setLinkStateResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setLinkStateResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setLinkStateResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setLinkStateResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setLinkStateResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *setLinkStateResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type SetLinkStateResponse interface {
	Msg() *snappipb.SetLinkStateResponse
	SetMsg(*snappipb.SetLinkStateResponse) SetLinkStateResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() ResponseWarning
	SetStatusCode200(value ResponseWarning) SetLinkStateResponse
	HasStatusCode200() bool
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) SetLinkStateResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) SetLinkStateResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setLinkStateResponse) StatusCode200() ResponseWarning {
	if obj.obj.StatusCode_200 == nil {
		obj.obj.StatusCode_200 = NewResponseWarning().Msg()
	}
	return &responseWarning{obj: obj.obj.StatusCode_200}
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setLinkStateResponse) HasStatusCode200() bool {
	return obj.obj.StatusCode_200 != nil
}

// SetStatusCode200 sets the ResponseWarning value in the SetLinkStateResponse object
//  description is TBD
func (obj *setLinkStateResponse) SetStatusCode200(value ResponseWarning) SetLinkStateResponse {
	obj.StatusCode200().SetMsg(value.Msg())

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setLinkStateResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setLinkStateResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the SetLinkStateResponse object
//  description is TBD
func (obj *setLinkStateResponse) SetStatusCode400(value ResponseError) SetLinkStateResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setLinkStateResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setLinkStateResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the SetLinkStateResponse object
//  description is TBD
func (obj *setLinkStateResponse) SetStatusCode500(value ResponseError) SetLinkStateResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *setLinkStateResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_200 != nil {
		obj.StatusCode200().validateObj(set_default)
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *setLinkStateResponse) setDefault() {

}

type setCaptureStateResponse struct {
	obj *snappipb.SetCaptureStateResponse
}

func NewSetCaptureStateResponse() SetCaptureStateResponse {
	obj := setCaptureStateResponse{obj: &snappipb.SetCaptureStateResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setCaptureStateResponse) Msg() *snappipb.SetCaptureStateResponse {
	return obj.obj
}

func (obj *setCaptureStateResponse) SetMsg(msg *snappipb.SetCaptureStateResponse) SetCaptureStateResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setCaptureStateResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *setCaptureStateResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setCaptureStateResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setCaptureStateResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setCaptureStateResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setCaptureStateResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *setCaptureStateResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type SetCaptureStateResponse interface {
	Msg() *snappipb.SetCaptureStateResponse
	SetMsg(*snappipb.SetCaptureStateResponse) SetCaptureStateResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() ResponseWarning
	SetStatusCode200(value ResponseWarning) SetCaptureStateResponse
	HasStatusCode200() bool
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) SetCaptureStateResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) SetCaptureStateResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setCaptureStateResponse) StatusCode200() ResponseWarning {
	if obj.obj.StatusCode_200 == nil {
		obj.obj.StatusCode_200 = NewResponseWarning().Msg()
	}
	return &responseWarning{obj: obj.obj.StatusCode_200}
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setCaptureStateResponse) HasStatusCode200() bool {
	return obj.obj.StatusCode_200 != nil
}

// SetStatusCode200 sets the ResponseWarning value in the SetCaptureStateResponse object
//  description is TBD
func (obj *setCaptureStateResponse) SetStatusCode200(value ResponseWarning) SetCaptureStateResponse {
	obj.StatusCode200().SetMsg(value.Msg())

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setCaptureStateResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setCaptureStateResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the SetCaptureStateResponse object
//  description is TBD
func (obj *setCaptureStateResponse) SetStatusCode400(value ResponseError) SetCaptureStateResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setCaptureStateResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setCaptureStateResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the SetCaptureStateResponse object
//  description is TBD
func (obj *setCaptureStateResponse) SetStatusCode500(value ResponseError) SetCaptureStateResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *setCaptureStateResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_200 != nil {
		obj.StatusCode200().validateObj(set_default)
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *setCaptureStateResponse) setDefault() {

}

type updateFlowsResponse struct {
	obj *snappipb.UpdateFlowsResponse
}

func NewUpdateFlowsResponse() UpdateFlowsResponse {
	obj := updateFlowsResponse{obj: &snappipb.UpdateFlowsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *updateFlowsResponse) Msg() *snappipb.UpdateFlowsResponse {
	return obj.obj
}

func (obj *updateFlowsResponse) SetMsg(msg *snappipb.UpdateFlowsResponse) UpdateFlowsResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *updateFlowsResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *updateFlowsResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *updateFlowsResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *updateFlowsResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *updateFlowsResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *updateFlowsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *updateFlowsResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type UpdateFlowsResponse interface {
	Msg() *snappipb.UpdateFlowsResponse
	SetMsg(*snappipb.UpdateFlowsResponse) UpdateFlowsResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() Config
	SetStatusCode200(value Config) UpdateFlowsResponse
	HasStatusCode200() bool
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) UpdateFlowsResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) UpdateFlowsResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a Config
//  description is TBD
func (obj *updateFlowsResponse) StatusCode200() Config {
	if obj.obj.StatusCode_200 == nil {
		obj.obj.StatusCode_200 = NewConfig().Msg()
	}
	return &config{obj: obj.obj.StatusCode_200}
}

// StatusCode200 returns a Config
//  description is TBD
func (obj *updateFlowsResponse) HasStatusCode200() bool {
	return obj.obj.StatusCode_200 != nil
}

// SetStatusCode200 sets the Config value in the UpdateFlowsResponse object
//  description is TBD
func (obj *updateFlowsResponse) SetStatusCode200(value Config) UpdateFlowsResponse {
	obj.StatusCode200().SetMsg(value.Msg())

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *updateFlowsResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *updateFlowsResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the UpdateFlowsResponse object
//  description is TBD
func (obj *updateFlowsResponse) SetStatusCode400(value ResponseError) UpdateFlowsResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *updateFlowsResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *updateFlowsResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the UpdateFlowsResponse object
//  description is TBD
func (obj *updateFlowsResponse) SetStatusCode500(value ResponseError) UpdateFlowsResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *updateFlowsResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_200 != nil {
		obj.StatusCode200().validateObj(set_default)
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *updateFlowsResponse) setDefault() {

}

type setRouteStateResponse struct {
	obj *snappipb.SetRouteStateResponse
}

func NewSetRouteStateResponse() SetRouteStateResponse {
	obj := setRouteStateResponse{obj: &snappipb.SetRouteStateResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setRouteStateResponse) Msg() *snappipb.SetRouteStateResponse {
	return obj.obj
}

func (obj *setRouteStateResponse) SetMsg(msg *snappipb.SetRouteStateResponse) SetRouteStateResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setRouteStateResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *setRouteStateResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setRouteStateResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setRouteStateResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setRouteStateResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setRouteStateResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *setRouteStateResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type SetRouteStateResponse interface {
	Msg() *snappipb.SetRouteStateResponse
	SetMsg(*snappipb.SetRouteStateResponse) SetRouteStateResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() ResponseWarning
	SetStatusCode200(value ResponseWarning) SetRouteStateResponse
	HasStatusCode200() bool
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) SetRouteStateResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) SetRouteStateResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setRouteStateResponse) StatusCode200() ResponseWarning {
	if obj.obj.StatusCode_200 == nil {
		obj.obj.StatusCode_200 = NewResponseWarning().Msg()
	}
	return &responseWarning{obj: obj.obj.StatusCode_200}
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setRouteStateResponse) HasStatusCode200() bool {
	return obj.obj.StatusCode_200 != nil
}

// SetStatusCode200 sets the ResponseWarning value in the SetRouteStateResponse object
//  description is TBD
func (obj *setRouteStateResponse) SetStatusCode200(value ResponseWarning) SetRouteStateResponse {
	obj.StatusCode200().SetMsg(value.Msg())

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setRouteStateResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setRouteStateResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the SetRouteStateResponse object
//  description is TBD
func (obj *setRouteStateResponse) SetStatusCode400(value ResponseError) SetRouteStateResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setRouteStateResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setRouteStateResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the SetRouteStateResponse object
//  description is TBD
func (obj *setRouteStateResponse) SetStatusCode500(value ResponseError) SetRouteStateResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *setRouteStateResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_200 != nil {
		obj.StatusCode200().validateObj(set_default)
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *setRouteStateResponse) setDefault() {

}

type sendPingResponse struct {
	obj *snappipb.SendPingResponse
}

func NewSendPingResponse() SendPingResponse {
	obj := sendPingResponse{obj: &snappipb.SendPingResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *sendPingResponse) Msg() *snappipb.SendPingResponse {
	return obj.obj
}

func (obj *sendPingResponse) SetMsg(msg *snappipb.SendPingResponse) SendPingResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *sendPingResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *sendPingResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *sendPingResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *sendPingResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *sendPingResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *sendPingResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *sendPingResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type SendPingResponse interface {
	Msg() *snappipb.SendPingResponse
	SetMsg(*snappipb.SendPingResponse) SendPingResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() PingResponse
	SetStatusCode200(value PingResponse) SendPingResponse
	HasStatusCode200() bool
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) SendPingResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) SendPingResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a PingResponse
//  description is TBD
func (obj *sendPingResponse) StatusCode200() PingResponse {
	if obj.obj.StatusCode_200 == nil {
		obj.obj.StatusCode_200 = NewPingResponse().Msg()
	}
	return &pingResponse{obj: obj.obj.StatusCode_200}
}

// StatusCode200 returns a PingResponse
//  description is TBD
func (obj *sendPingResponse) HasStatusCode200() bool {
	return obj.obj.StatusCode_200 != nil
}

// SetStatusCode200 sets the PingResponse value in the SendPingResponse object
//  description is TBD
func (obj *sendPingResponse) SetStatusCode200(value PingResponse) SendPingResponse {
	obj.StatusCode200().SetMsg(value.Msg())

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *sendPingResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *sendPingResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the SendPingResponse object
//  description is TBD
func (obj *sendPingResponse) SetStatusCode400(value ResponseError) SendPingResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *sendPingResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *sendPingResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the SendPingResponse object
//  description is TBD
func (obj *sendPingResponse) SetStatusCode500(value ResponseError) SendPingResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *sendPingResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_200 != nil {
		obj.StatusCode200().validateObj(set_default)
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *sendPingResponse) setDefault() {

}

type setProtocolStateResponse struct {
	obj *snappipb.SetProtocolStateResponse
}

func NewSetProtocolStateResponse() SetProtocolStateResponse {
	obj := setProtocolStateResponse{obj: &snappipb.SetProtocolStateResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *setProtocolStateResponse) Msg() *snappipb.SetProtocolStateResponse {
	return obj.obj
}

func (obj *setProtocolStateResponse) SetMsg(msg *snappipb.SetProtocolStateResponse) SetProtocolStateResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *setProtocolStateResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *setProtocolStateResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setProtocolStateResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setProtocolStateResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *setProtocolStateResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setProtocolStateResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *setProtocolStateResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type SetProtocolStateResponse interface {
	Msg() *snappipb.SetProtocolStateResponse
	SetMsg(*snappipb.SetProtocolStateResponse) SetProtocolStateResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() ResponseWarning
	SetStatusCode200(value ResponseWarning) SetProtocolStateResponse
	HasStatusCode200() bool
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) SetProtocolStateResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) SetProtocolStateResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setProtocolStateResponse) StatusCode200() ResponseWarning {
	if obj.obj.StatusCode_200 == nil {
		obj.obj.StatusCode_200 = NewResponseWarning().Msg()
	}
	return &responseWarning{obj: obj.obj.StatusCode_200}
}

// StatusCode200 returns a ResponseWarning
//  description is TBD
func (obj *setProtocolStateResponse) HasStatusCode200() bool {
	return obj.obj.StatusCode_200 != nil
}

// SetStatusCode200 sets the ResponseWarning value in the SetProtocolStateResponse object
//  description is TBD
func (obj *setProtocolStateResponse) SetStatusCode200(value ResponseWarning) SetProtocolStateResponse {
	obj.StatusCode200().SetMsg(value.Msg())

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setProtocolStateResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *setProtocolStateResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the SetProtocolStateResponse object
//  description is TBD
func (obj *setProtocolStateResponse) SetStatusCode400(value ResponseError) SetProtocolStateResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setProtocolStateResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *setProtocolStateResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the SetProtocolStateResponse object
//  description is TBD
func (obj *setProtocolStateResponse) SetStatusCode500(value ResponseError) SetProtocolStateResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *setProtocolStateResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_200 != nil {
		obj.StatusCode200().validateObj(set_default)
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *setProtocolStateResponse) setDefault() {

}

type getMetricsResponse struct {
	obj *snappipb.GetMetricsResponse
}

func NewGetMetricsResponse() GetMetricsResponse {
	obj := getMetricsResponse{obj: &snappipb.GetMetricsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getMetricsResponse) Msg() *snappipb.GetMetricsResponse {
	return obj.obj
}

func (obj *getMetricsResponse) SetMsg(msg *snappipb.GetMetricsResponse) GetMetricsResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getMetricsResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *getMetricsResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getMetricsResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getMetricsResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getMetricsResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getMetricsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *getMetricsResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type GetMetricsResponse interface {
	Msg() *snappipb.GetMetricsResponse
	SetMsg(*snappipb.GetMetricsResponse) GetMetricsResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() MetricsResponse
	SetStatusCode200(value MetricsResponse) GetMetricsResponse
	HasStatusCode200() bool
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) GetMetricsResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) GetMetricsResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a MetricsResponse
//  description is TBD
func (obj *getMetricsResponse) StatusCode200() MetricsResponse {
	if obj.obj.StatusCode_200 == nil {
		obj.obj.StatusCode_200 = NewMetricsResponse().Msg()
	}
	return &metricsResponse{obj: obj.obj.StatusCode_200}
}

// StatusCode200 returns a MetricsResponse
//  description is TBD
func (obj *getMetricsResponse) HasStatusCode200() bool {
	return obj.obj.StatusCode_200 != nil
}

// SetStatusCode200 sets the MetricsResponse value in the GetMetricsResponse object
//  description is TBD
func (obj *getMetricsResponse) SetStatusCode200(value MetricsResponse) GetMetricsResponse {
	obj.StatusCode200().SetMsg(value.Msg())

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *getMetricsResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *getMetricsResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the GetMetricsResponse object
//  description is TBD
func (obj *getMetricsResponse) SetStatusCode400(value ResponseError) GetMetricsResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *getMetricsResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *getMetricsResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the GetMetricsResponse object
//  description is TBD
func (obj *getMetricsResponse) SetStatusCode500(value ResponseError) GetMetricsResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *getMetricsResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_200 != nil {
		obj.StatusCode200().validateObj(set_default)
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *getMetricsResponse) setDefault() {

}

type getStateMetricsResponse struct {
	obj *snappipb.GetStateMetricsResponse
}

func NewGetStateMetricsResponse() GetStateMetricsResponse {
	obj := getStateMetricsResponse{obj: &snappipb.GetStateMetricsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getStateMetricsResponse) Msg() *snappipb.GetStateMetricsResponse {
	return obj.obj
}

func (obj *getStateMetricsResponse) SetMsg(msg *snappipb.GetStateMetricsResponse) GetStateMetricsResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getStateMetricsResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *getStateMetricsResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getStateMetricsResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getStateMetricsResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getStateMetricsResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getStateMetricsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *getStateMetricsResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type GetStateMetricsResponse interface {
	Msg() *snappipb.GetStateMetricsResponse
	SetMsg(*snappipb.GetStateMetricsResponse) GetStateMetricsResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() StateMetrics
	SetStatusCode200(value StateMetrics) GetStateMetricsResponse
	HasStatusCode200() bool
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) GetStateMetricsResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) GetStateMetricsResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a StateMetrics
//  description is TBD
func (obj *getStateMetricsResponse) StatusCode200() StateMetrics {
	if obj.obj.StatusCode_200 == nil {
		obj.obj.StatusCode_200 = NewStateMetrics().Msg()
	}
	return &stateMetrics{obj: obj.obj.StatusCode_200}
}

// StatusCode200 returns a StateMetrics
//  description is TBD
func (obj *getStateMetricsResponse) HasStatusCode200() bool {
	return obj.obj.StatusCode_200 != nil
}

// SetStatusCode200 sets the StateMetrics value in the GetStateMetricsResponse object
//  description is TBD
func (obj *getStateMetricsResponse) SetStatusCode200(value StateMetrics) GetStateMetricsResponse {
	obj.StatusCode200().SetMsg(value.Msg())

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *getStateMetricsResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *getStateMetricsResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the GetStateMetricsResponse object
//  description is TBD
func (obj *getStateMetricsResponse) SetStatusCode400(value ResponseError) GetStateMetricsResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *getStateMetricsResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *getStateMetricsResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the GetStateMetricsResponse object
//  description is TBD
func (obj *getStateMetricsResponse) SetStatusCode500(value ResponseError) GetStateMetricsResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *getStateMetricsResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_200 != nil {
		obj.StatusCode200().validateObj(set_default)
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *getStateMetricsResponse) setDefault() {

}

type getCaptureResponse struct {
	obj *snappipb.GetCaptureResponse
}

func NewGetCaptureResponse() GetCaptureResponse {
	obj := getCaptureResponse{obj: &snappipb.GetCaptureResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *getCaptureResponse) Msg() *snappipb.GetCaptureResponse {
	return obj.obj
}

func (obj *getCaptureResponse) SetMsg(msg *snappipb.GetCaptureResponse) GetCaptureResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *getCaptureResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *getCaptureResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getCaptureResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getCaptureResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *getCaptureResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getCaptureResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *getCaptureResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type GetCaptureResponse interface {
	Msg() *snappipb.GetCaptureResponse
	SetMsg(*snappipb.GetCaptureResponse) GetCaptureResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	StatusCode200() []byte
	SetStatusCode200(value []byte) GetCaptureResponse
	StatusCode400() ResponseError
	SetStatusCode400(value ResponseError) GetCaptureResponse
	HasStatusCode400() bool
	StatusCode500() ResponseError
	SetStatusCode500(value ResponseError) GetCaptureResponse
	HasStatusCode500() bool
}

// StatusCode200 returns a []byte
//  description is TBD
func (obj *getCaptureResponse) StatusCode200() []byte {

	return obj.obj.StatusCode_200
}

// SetStatusCode200 sets the []byte value in the GetCaptureResponse object
//  description is TBD
func (obj *getCaptureResponse) SetStatusCode200(value []byte) GetCaptureResponse {
	obj.obj.StatusCode_200 = value

	return obj
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *getCaptureResponse) StatusCode400() ResponseError {
	if obj.obj.StatusCode_400 == nil {
		obj.obj.StatusCode_400 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_400}
}

// StatusCode400 returns a ResponseError
//  description is TBD
func (obj *getCaptureResponse) HasStatusCode400() bool {
	return obj.obj.StatusCode_400 != nil
}

// SetStatusCode400 sets the ResponseError value in the GetCaptureResponse object
//  description is TBD
func (obj *getCaptureResponse) SetStatusCode400(value ResponseError) GetCaptureResponse {
	obj.StatusCode400().SetMsg(value.Msg())

	return obj
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *getCaptureResponse) StatusCode500() ResponseError {
	if obj.obj.StatusCode_500 == nil {
		obj.obj.StatusCode_500 = NewResponseError().Msg()
	}
	return &responseError{obj: obj.obj.StatusCode_500}
}

// StatusCode500 returns a ResponseError
//  description is TBD
func (obj *getCaptureResponse) HasStatusCode500() bool {
	return obj.obj.StatusCode_500 != nil
}

// SetStatusCode500 sets the ResponseError value in the GetCaptureResponse object
//  description is TBD
func (obj *getCaptureResponse) SetStatusCode500(value ResponseError) GetCaptureResponse {
	obj.StatusCode500().SetMsg(value.Msg())

	return obj
}

func (obj *getCaptureResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.StatusCode_400 != nil {
		obj.StatusCode400().validateObj(set_default)
	}

	if obj.obj.StatusCode_500 != nil {
		obj.StatusCode500().validateObj(set_default)
	}
}

func (obj *getCaptureResponse) setDefault() {

}

type port struct {
	obj *snappipb.Port
}

func NewPort() Port {
	obj := port{obj: &snappipb.Port{}}
	obj.setDefault()
	return &obj
}

func (obj *port) Msg() *snappipb.Port {
	return obj.obj
}

func (obj *port) SetMsg(msg *snappipb.Port) Port {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *port) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *port) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *port) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *port) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *port) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *port) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *port) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Port interface {
	Msg() *snappipb.Port
	SetMsg(*snappipb.Port) Port
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Location() string
	SetLocation(value string) Port
	HasLocation() bool
	Name() string
	SetName(value string) Port
}

// Location returns a string
//  The location of a test port.  It is the endpoint where packets will emit from.
//  Test port locations can be the following:
//  - physical appliance with multiple ports
//  - physical chassis with multiple cards and ports
//  - local interface
//  - virtual machine, docker container, kubernetes cluster
//
//  The test port location format is implementation specific. Use the /results/capabilities API to determine what formats an  implementation supports for the location property.
//  Get the configured location state by using the /results/port API.
func (obj *port) Location() string {

	return *obj.obj.Location

}

// Location returns a string
//  The location of a test port.  It is the endpoint where packets will emit from.
//  Test port locations can be the following:
//  - physical appliance with multiple ports
//  - physical chassis with multiple cards and ports
//  - local interface
//  - virtual machine, docker container, kubernetes cluster
//
//  The test port location format is implementation specific. Use the /results/capabilities API to determine what formats an  implementation supports for the location property.
//  Get the configured location state by using the /results/port API.
func (obj *port) HasLocation() bool {
	return obj.obj.Location != nil
}

// SetLocation sets the string value in the Port object
//  The location of a test port.  It is the endpoint where packets will emit from.
//  Test port locations can be the following:
//  - physical appliance with multiple ports
//  - physical chassis with multiple cards and ports
//  - local interface
//  - virtual machine, docker container, kubernetes cluster
//
//  The test port location format is implementation specific. Use the /results/capabilities API to determine what formats an  implementation supports for the location property.
//  Get the configured location state by using the /results/port API.
func (obj *port) SetLocation(value string) Port {
	obj.obj.Location = &value

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *port) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the Port object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *port) SetName(value string) Port {
	obj.obj.Name = value

	return obj
}

func (obj *port) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface Port")
	}
}

func (obj *port) setDefault() {

}

type lag struct {
	obj *snappipb.Lag
}

func NewLag() Lag {
	obj := lag{obj: &snappipb.Lag{}}
	obj.setDefault()
	return &obj
}

func (obj *lag) Msg() *snappipb.Lag {
	return obj.obj
}

func (obj *lag) SetMsg(msg *snappipb.Lag) Lag {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *lag) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *lag) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *lag) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *lag) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lag) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *lag) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Lag interface {
	Msg() *snappipb.Lag
	SetMsg(*snappipb.Lag) Lag
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Ports() LagLagPortIter
	Name() string
	SetName(value string) Lag
}

// Ports returns a []LagPort
//  description is TBD
func (obj *lag) Ports() LagLagPortIter {
	if obj.obj.Ports == nil {
		obj.obj.Ports = []*snappipb.LagPort{}
	}
	return &lagLagPortIter{obj: obj}
}

type lagLagPortIter struct {
	obj *lag
}

type LagLagPortIter interface {
	Add() LagPort
	Items() []LagPort
}

func (obj *lagLagPortIter) Add() LagPort {
	newObj := &snappipb.LagPort{}
	obj.obj.obj.Ports = append(obj.obj.obj.Ports, newObj)
	newLibObj := &lagPort{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *lagLagPortIter) Items() []LagPort {
	slice := []LagPort{}
	for _, item := range obj.obj.obj.Ports {
		slice = append(slice, &lagPort{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *lag) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the Lag object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *lag) SetName(value string) Lag {
	obj.obj.Name = value

	return obj
}

func (obj *lag) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.Ports != nil {
		for _, item := range obj.Ports().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface Lag")
	}
}

func (obj *lag) setDefault() {

}

type layer1 struct {
	obj *snappipb.Layer1
}

func NewLayer1() Layer1 {
	obj := layer1{obj: &snappipb.Layer1{}}
	obj.setDefault()
	return &obj
}

func (obj *layer1) Msg() *snappipb.Layer1 {
	return obj.obj
}

func (obj *layer1) SetMsg(msg *snappipb.Layer1) Layer1 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *layer1) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *layer1) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *layer1) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *layer1) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *layer1) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Layer1 interface {
	Msg() *snappipb.Layer1
	SetMsg(*snappipb.Layer1) Layer1
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PortNames() []string
	SetPortNames(value []string) Layer1
	Speed() Layer1SpeedEnum
	SetSpeed(value Layer1SpeedEnum) Layer1
	HasSpeed() bool
	Media() Layer1MediaEnum
	SetMedia(value Layer1MediaEnum) Layer1
	HasMedia() bool
	Promiscuous() bool
	SetPromiscuous(value bool) Layer1
	HasPromiscuous() bool
	Mtu() int32
	SetMtu(value int32) Layer1
	HasMtu() bool
	IeeeMediaDefaults() bool
	SetIeeeMediaDefaults(value bool) Layer1
	HasIeeeMediaDefaults() bool
	AutoNegotiate() bool
	SetAutoNegotiate(value bool) Layer1
	HasAutoNegotiate() bool
	AutoNegotiation() Layer1AutoNegotiation
	SetAutoNegotiation(value Layer1AutoNegotiation) Layer1
	HasAutoNegotiation() bool
	FlowControl() Layer1FlowControl
	SetFlowControl(value Layer1FlowControl) Layer1
	HasFlowControl() bool
	Name() string
	SetName(value string) Layer1
}

// PortNames returns a []string
//  A list of unique names of port objects that will share the
//  choice settings.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *layer1) PortNames() []string {
	if obj.obj.PortNames == nil {
		obj.obj.PortNames = make([]string, 0)
	}
	return obj.obj.PortNames
}

// SetPortNames sets the []string value in the Layer1 object
//  A list of unique names of port objects that will share the
//  choice settings.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *layer1) SetPortNames(value []string) Layer1 {
	if obj.obj.PortNames == nil {
		obj.obj.PortNames = make([]string, 0)
	}
	obj.obj.PortNames = value

	return obj
}

type Layer1SpeedEnum string

var Layer1Speed = struct {
	SPEED_10_FD_MBPS  Layer1SpeedEnum
	SPEED_10_HD_MBPS  Layer1SpeedEnum
	SPEED_100_FD_MBPS Layer1SpeedEnum
	SPEED_100_HD_MBPS Layer1SpeedEnum
	SPEED_1_GBPS      Layer1SpeedEnum
	SPEED_10_GBPS     Layer1SpeedEnum
	SPEED_25_GBPS     Layer1SpeedEnum
	SPEED_40_GBPS     Layer1SpeedEnum
	SPEED_100_GBPS    Layer1SpeedEnum
	SPEED_200_GBPS    Layer1SpeedEnum
	SPEED_400_GBPS    Layer1SpeedEnum
}{
	SPEED_10_FD_MBPS:  Layer1SpeedEnum("speed_10_fd_mbps"),
	SPEED_10_HD_MBPS:  Layer1SpeedEnum("speed_10_hd_mbps"),
	SPEED_100_FD_MBPS: Layer1SpeedEnum("speed_100_fd_mbps"),
	SPEED_100_HD_MBPS: Layer1SpeedEnum("speed_100_hd_mbps"),
	SPEED_1_GBPS:      Layer1SpeedEnum("speed_1_gbps"),
	SPEED_10_GBPS:     Layer1SpeedEnum("speed_10_gbps"),
	SPEED_25_GBPS:     Layer1SpeedEnum("speed_25_gbps"),
	SPEED_40_GBPS:     Layer1SpeedEnum("speed_40_gbps"),
	SPEED_100_GBPS:    Layer1SpeedEnum("speed_100_gbps"),
	SPEED_200_GBPS:    Layer1SpeedEnum("speed_200_gbps"),
	SPEED_400_GBPS:    Layer1SpeedEnum("speed_400_gbps"),
}

func (obj *layer1) Speed() Layer1SpeedEnum {
	return Layer1SpeedEnum(obj.obj.Speed.Enum().String())
}

// Speed returns a string
//  Set the speed if supported.
func (obj *layer1) HasSpeed() bool {
	return obj.obj.Speed != nil
}

func (obj *layer1) SetSpeed(value Layer1SpeedEnum) Layer1 {
	intValue, ok := snappipb.Layer1_Speed_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on Layer1SpeedEnum", string(value)))
		return obj
	}
	enumValue := snappipb.Layer1_Speed_Enum(intValue)
	obj.obj.Speed = &enumValue

	return obj
}

type Layer1MediaEnum string

var Layer1Media = struct {
	COPPER Layer1MediaEnum
	FIBER  Layer1MediaEnum
	SGMII  Layer1MediaEnum
}{
	COPPER: Layer1MediaEnum("copper"),
	FIBER:  Layer1MediaEnum("fiber"),
	SGMII:  Layer1MediaEnum("sgmii"),
}

func (obj *layer1) Media() Layer1MediaEnum {
	return Layer1MediaEnum(obj.obj.Media.Enum().String())
}

// Media returns a string
//  Set the type of media interface if supported.
func (obj *layer1) HasMedia() bool {
	return obj.obj.Media != nil
}

func (obj *layer1) SetMedia(value Layer1MediaEnum) Layer1 {
	intValue, ok := snappipb.Layer1_Media_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on Layer1MediaEnum", string(value)))
		return obj
	}
	enumValue := snappipb.Layer1_Media_Enum(intValue)
	obj.obj.Media = &enumValue

	return obj
}

// Promiscuous returns a bool
//  Enable promiscuous mode if supported.
func (obj *layer1) Promiscuous() bool {

	if obj.obj.Promiscuous == nil {
		*obj.obj.Promiscuous = true
	}

	return *obj.obj.Promiscuous

}

// Promiscuous returns a bool
//  Enable promiscuous mode if supported.
func (obj *layer1) HasPromiscuous() bool {
	return obj.obj.Promiscuous != nil
}

// SetPromiscuous sets the bool value in the Layer1 object
//  Enable promiscuous mode if supported.
func (obj *layer1) SetPromiscuous(value bool) Layer1 {
	obj.obj.Promiscuous = &value

	return obj
}

// Mtu returns a int32
//  Set the maximum transmission unit size if supported.
func (obj *layer1) Mtu() int32 {

	if obj.obj.Mtu == nil {
		*obj.obj.Mtu = 1500
	}

	return *obj.obj.Mtu

}

// Mtu returns a int32
//  Set the maximum transmission unit size if supported.
func (obj *layer1) HasMtu() bool {
	return obj.obj.Mtu != nil
}

// SetMtu sets the int32 value in the Layer1 object
//  Set the maximum transmission unit size if supported.
func (obj *layer1) SetMtu(value int32) Layer1 {
	obj.obj.Mtu = &value

	return obj
}

// IeeeMediaDefaults returns a bool
//  Set to true to override the auto_negotiate, link_training
//  and rs_fec settings for gigabit ethernet interfaces.
func (obj *layer1) IeeeMediaDefaults() bool {

	return *obj.obj.IeeeMediaDefaults

}

// IeeeMediaDefaults returns a bool
//  Set to true to override the auto_negotiate, link_training
//  and rs_fec settings for gigabit ethernet interfaces.
func (obj *layer1) HasIeeeMediaDefaults() bool {
	return obj.obj.IeeeMediaDefaults != nil
}

// SetIeeeMediaDefaults sets the bool value in the Layer1 object
//  Set to true to override the auto_negotiate, link_training
//  and rs_fec settings for gigabit ethernet interfaces.
func (obj *layer1) SetIeeeMediaDefaults(value bool) Layer1 {
	obj.obj.IeeeMediaDefaults = &value

	return obj
}

// AutoNegotiate returns a bool
//  Enable/disable auto negotiation.
func (obj *layer1) AutoNegotiate() bool {

	return *obj.obj.AutoNegotiate

}

// AutoNegotiate returns a bool
//  Enable/disable auto negotiation.
func (obj *layer1) HasAutoNegotiate() bool {
	return obj.obj.AutoNegotiate != nil
}

// SetAutoNegotiate sets the bool value in the Layer1 object
//  Enable/disable auto negotiation.
func (obj *layer1) SetAutoNegotiate(value bool) Layer1 {
	obj.obj.AutoNegotiate = &value

	return obj
}

// AutoNegotiation returns a Layer1AutoNegotiation
//  description is TBD
func (obj *layer1) AutoNegotiation() Layer1AutoNegotiation {
	if obj.obj.AutoNegotiation == nil {
		obj.obj.AutoNegotiation = NewLayer1AutoNegotiation().Msg()
	}
	return &layer1AutoNegotiation{obj: obj.obj.AutoNegotiation}
}

// AutoNegotiation returns a Layer1AutoNegotiation
//  description is TBD
func (obj *layer1) HasAutoNegotiation() bool {
	return obj.obj.AutoNegotiation != nil
}

// SetAutoNegotiation sets the Layer1AutoNegotiation value in the Layer1 object
//  description is TBD
func (obj *layer1) SetAutoNegotiation(value Layer1AutoNegotiation) Layer1 {
	obj.AutoNegotiation().SetMsg(value.Msg())

	return obj
}

// FlowControl returns a Layer1FlowControl
//  description is TBD
func (obj *layer1) FlowControl() Layer1FlowControl {
	if obj.obj.FlowControl == nil {
		obj.obj.FlowControl = NewLayer1FlowControl().Msg()
	}
	return &layer1FlowControl{obj: obj.obj.FlowControl}
}

// FlowControl returns a Layer1FlowControl
//  description is TBD
func (obj *layer1) HasFlowControl() bool {
	return obj.obj.FlowControl != nil
}

// SetFlowControl sets the Layer1FlowControl value in the Layer1 object
//  description is TBD
func (obj *layer1) SetFlowControl(value Layer1FlowControl) Layer1 {
	obj.FlowControl().SetMsg(value.Msg())

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *layer1) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the Layer1 object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *layer1) SetName(value string) Layer1 {
	obj.obj.Name = value

	return obj
}

func (obj *layer1) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// PortNames required
	if obj.obj.PortNames == nil {
		validation = append(validation, "PortNames is required field on interface Layer1")
	}

	if obj.obj.Mtu != nil {
		if *obj.obj.Mtu < 64 || *obj.obj.Mtu > 9000 {
			validation = append(
				validation, fmt.Sprintf("64 <= Layer1.Mtu <= 9000 but Got %d", *obj.obj.Mtu))
		}

	}

	if obj.obj.AutoNegotiation != nil {
		obj.AutoNegotiation().validateObj(set_default)
	}

	if obj.obj.FlowControl != nil {
		obj.FlowControl().validateObj(set_default)
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface Layer1")
	}
}

func (obj *layer1) setDefault() {
	if obj.obj.Speed == nil {
		obj.SetSpeed(Layer1Speed.SPEED_10_GBPS)

	}
	if obj.obj.Promiscuous == nil {
		obj.SetPromiscuous(true)
	}
	if obj.obj.Mtu == nil {
		obj.SetMtu(1500)
	}

}

type capture struct {
	obj *snappipb.Capture
}

func NewCapture() Capture {
	obj := capture{obj: &snappipb.Capture{}}
	obj.setDefault()
	return &obj
}

func (obj *capture) Msg() *snappipb.Capture {
	return obj.obj
}

func (obj *capture) SetMsg(msg *snappipb.Capture) Capture {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *capture) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *capture) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *capture) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *capture) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *capture) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *capture) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *capture) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Capture interface {
	Msg() *snappipb.Capture
	SetMsg(*snappipb.Capture) Capture
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PortNames() []string
	SetPortNames(value []string) Capture
	Filters() CaptureCaptureFilterIter
	Overwrite() bool
	SetOverwrite(value bool) Capture
	HasOverwrite() bool
	PacketSize() int32
	SetPacketSize(value int32) Capture
	HasPacketSize() bool
	Format() CaptureFormatEnum
	SetFormat(value CaptureFormatEnum) Capture
	HasFormat() bool
	Name() string
	SetName(value string) Capture
}

// PortNames returns a []string
//  The unique names of ports that the capture settings will apply to. Port_names cannot be duplicated between capture objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *capture) PortNames() []string {
	if obj.obj.PortNames == nil {
		obj.obj.PortNames = make([]string, 0)
	}
	return obj.obj.PortNames
}

// SetPortNames sets the []string value in the Capture object
//  The unique names of ports that the capture settings will apply to. Port_names cannot be duplicated between capture objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *capture) SetPortNames(value []string) Capture {
	if obj.obj.PortNames == nil {
		obj.obj.PortNames = make([]string, 0)
	}
	obj.obj.PortNames = value

	return obj
}

// Filters returns a []CaptureFilter
//  A list of filters to apply to the capturing ports. If no filters are specified then all packets will be captured. A capture can have multiple filters. The number of filters supported is determined by the implementation which can be retrieved using the capabilities API.
//  When multiple filters are specified the capture implementation  must && (and) all the filters.
func (obj *capture) Filters() CaptureCaptureFilterIter {
	if obj.obj.Filters == nil {
		obj.obj.Filters = []*snappipb.CaptureFilter{}
	}
	return &captureCaptureFilterIter{obj: obj}
}

type captureCaptureFilterIter struct {
	obj *capture
}

type CaptureCaptureFilterIter interface {
	Add() CaptureFilter
	Items() []CaptureFilter
}

func (obj *captureCaptureFilterIter) Add() CaptureFilter {
	newObj := &snappipb.CaptureFilter{}
	obj.obj.obj.Filters = append(obj.obj.obj.Filters, newObj)
	newLibObj := &captureFilter{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *captureCaptureFilterIter) Items() []CaptureFilter {
	slice := []CaptureFilter{}
	for _, item := range obj.obj.obj.Filters {
		slice = append(slice, &captureFilter{obj: item})
	}
	return slice
}

// Overwrite returns a bool
//  Overwrite the capture buffer.
func (obj *capture) Overwrite() bool {

	if obj.obj.Overwrite == nil {
		*obj.obj.Overwrite = true
	}

	return *obj.obj.Overwrite

}

// Overwrite returns a bool
//  Overwrite the capture buffer.
func (obj *capture) HasOverwrite() bool {
	return obj.obj.Overwrite != nil
}

// SetOverwrite sets the bool value in the Capture object
//  Overwrite the capture buffer.
func (obj *capture) SetOverwrite(value bool) Capture {
	obj.obj.Overwrite = &value

	return obj
}

// PacketSize returns a int32
//  The maximum size of each captured packet. If no value is specified or it is null then the entire packet will be captured.
func (obj *capture) PacketSize() int32 {

	return *obj.obj.PacketSize

}

// PacketSize returns a int32
//  The maximum size of each captured packet. If no value is specified or it is null then the entire packet will be captured.
func (obj *capture) HasPacketSize() bool {
	return obj.obj.PacketSize != nil
}

// SetPacketSize sets the int32 value in the Capture object
//  The maximum size of each captured packet. If no value is specified or it is null then the entire packet will be captured.
func (obj *capture) SetPacketSize(value int32) Capture {
	obj.obj.PacketSize = &value

	return obj
}

type CaptureFormatEnum string

var CaptureFormat = struct {
	PCAP   CaptureFormatEnum
	PCAPNG CaptureFormatEnum
}{
	PCAP:   CaptureFormatEnum("pcap"),
	PCAPNG: CaptureFormatEnum("pcapng"),
}

func (obj *capture) Format() CaptureFormatEnum {
	return CaptureFormatEnum(obj.obj.Format.Enum().String())
}

// Format returns a string
//  The format of the capture file.
func (obj *capture) HasFormat() bool {
	return obj.obj.Format != nil
}

func (obj *capture) SetFormat(value CaptureFormatEnum) Capture {
	intValue, ok := snappipb.Capture_Format_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on CaptureFormatEnum", string(value)))
		return obj
	}
	enumValue := snappipb.Capture_Format_Enum(intValue)
	obj.obj.Format = &enumValue

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *capture) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the Capture object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *capture) SetName(value string) Capture {
	obj.obj.Name = value

	return obj
}

func (obj *capture) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// PortNames required
	if obj.obj.PortNames == nil {
		validation = append(validation, "PortNames is required field on interface Capture")
	}
	if obj.obj.Filters != nil {
		for _, item := range obj.Filters().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface Capture")
	}
}

func (obj *capture) setDefault() {
	if obj.obj.Overwrite == nil {
		obj.SetOverwrite(true)
	}
	if obj.obj.Format == nil {
		obj.SetFormat(CaptureFormat.PCAP)

	}

}

type device struct {
	obj *snappipb.Device
}

func NewDevice() Device {
	obj := device{obj: &snappipb.Device{}}
	obj.setDefault()
	return &obj
}

func (obj *device) Msg() *snappipb.Device {
	return obj.obj
}

func (obj *device) SetMsg(msg *snappipb.Device) Device {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *device) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *device) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *device) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *device) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *device) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *device) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *device) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Device interface {
	Msg() *snappipb.Device
	SetMsg(*snappipb.Device) Device
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Ethernets() DeviceDeviceEthernetIter
	Ipv4Loopbacks() DeviceDeviceIpv4LoopbackIter
	Ipv6Loopbacks() DeviceDeviceIpv6LoopbackIter
	Isis() DeviceIsisRouter
	SetIsis(value DeviceIsisRouter) Device
	HasIsis() bool
	Bgp() DeviceBgpRouter
	SetBgp(value DeviceBgpRouter) Device
	HasBgp() bool
	Name() string
	SetName(value string) Device
}

// Ethernets returns a []DeviceEthernet
//  Ethernet configuration for one or more emulated network interfaces.
func (obj *device) Ethernets() DeviceDeviceEthernetIter {
	if obj.obj.Ethernets == nil {
		obj.obj.Ethernets = []*snappipb.DeviceEthernet{}
	}
	return &deviceDeviceEthernetIter{obj: obj}
}

type deviceDeviceEthernetIter struct {
	obj *device
}

type DeviceDeviceEthernetIter interface {
	Add() DeviceEthernet
	Items() []DeviceEthernet
}

func (obj *deviceDeviceEthernetIter) Add() DeviceEthernet {
	newObj := &snappipb.DeviceEthernet{}
	obj.obj.obj.Ethernets = append(obj.obj.obj.Ethernets, newObj)
	newLibObj := &deviceEthernet{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceDeviceEthernetIter) Items() []DeviceEthernet {
	slice := []DeviceEthernet{}
	for _, item := range obj.obj.obj.Ethernets {
		slice = append(slice, &deviceEthernet{obj: item})
	}
	return slice
}

// Ipv4Loopbacks returns a []DeviceIpv4Loopback
//  IPv4 Loopback interface that can be attached to an Ethernet in the same device  or to an Ethernet in another device.
func (obj *device) Ipv4Loopbacks() DeviceDeviceIpv4LoopbackIter {
	if obj.obj.Ipv4Loopbacks == nil {
		obj.obj.Ipv4Loopbacks = []*snappipb.DeviceIpv4Loopback{}
	}
	return &deviceDeviceIpv4LoopbackIter{obj: obj}
}

type deviceDeviceIpv4LoopbackIter struct {
	obj *device
}

type DeviceDeviceIpv4LoopbackIter interface {
	Add() DeviceIpv4Loopback
	Items() []DeviceIpv4Loopback
}

func (obj *deviceDeviceIpv4LoopbackIter) Add() DeviceIpv4Loopback {
	newObj := &snappipb.DeviceIpv4Loopback{}
	obj.obj.obj.Ipv4Loopbacks = append(obj.obj.obj.Ipv4Loopbacks, newObj)
	newLibObj := &deviceIpv4Loopback{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceDeviceIpv4LoopbackIter) Items() []DeviceIpv4Loopback {
	slice := []DeviceIpv4Loopback{}
	for _, item := range obj.obj.obj.Ipv4Loopbacks {
		slice = append(slice, &deviceIpv4Loopback{obj: item})
	}
	return slice
}

// Ipv6Loopbacks returns a []DeviceIpv6Loopback
//  IPv6 Loopback interface that can be attached to an Ethernet in the same device  or to an Ethernet in another device.
func (obj *device) Ipv6Loopbacks() DeviceDeviceIpv6LoopbackIter {
	if obj.obj.Ipv6Loopbacks == nil {
		obj.obj.Ipv6Loopbacks = []*snappipb.DeviceIpv6Loopback{}
	}
	return &deviceDeviceIpv6LoopbackIter{obj: obj}
}

type deviceDeviceIpv6LoopbackIter struct {
	obj *device
}

type DeviceDeviceIpv6LoopbackIter interface {
	Add() DeviceIpv6Loopback
	Items() []DeviceIpv6Loopback
}

func (obj *deviceDeviceIpv6LoopbackIter) Add() DeviceIpv6Loopback {
	newObj := &snappipb.DeviceIpv6Loopback{}
	obj.obj.obj.Ipv6Loopbacks = append(obj.obj.obj.Ipv6Loopbacks, newObj)
	newLibObj := &deviceIpv6Loopback{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceDeviceIpv6LoopbackIter) Items() []DeviceIpv6Loopback {
	slice := []DeviceIpv6Loopback{}
	for _, item := range obj.obj.obj.Ipv6Loopbacks {
		slice = append(slice, &deviceIpv6Loopback{obj: item})
	}
	return slice
}

// Isis returns a DeviceIsisRouter
//  The properties of an IS-IS router and its children,  such as IS-IS interfaces and route ranges.
func (obj *device) Isis() DeviceIsisRouter {
	if obj.obj.Isis == nil {
		obj.obj.Isis = NewDeviceIsisRouter().Msg()
	}
	return &deviceIsisRouter{obj: obj.obj.Isis}
}

// Isis returns a DeviceIsisRouter
//  The properties of an IS-IS router and its children,  such as IS-IS interfaces and route ranges.
func (obj *device) HasIsis() bool {
	return obj.obj.Isis != nil
}

// SetIsis sets the DeviceIsisRouter value in the Device object
//  The properties of an IS-IS router and its children,  such as IS-IS interfaces and route ranges.
func (obj *device) SetIsis(value DeviceIsisRouter) Device {
	obj.Isis().SetMsg(value.Msg())

	return obj
}

// Bgp returns a DeviceBgpRouter
//  The properties of BGP router and its children,  such as BGPv4, BGPv6 peers and their route ranges.
func (obj *device) Bgp() DeviceBgpRouter {
	if obj.obj.Bgp == nil {
		obj.obj.Bgp = NewDeviceBgpRouter().Msg()
	}
	return &deviceBgpRouter{obj: obj.obj.Bgp}
}

// Bgp returns a DeviceBgpRouter
//  The properties of BGP router and its children,  such as BGPv4, BGPv6 peers and their route ranges.
func (obj *device) HasBgp() bool {
	return obj.obj.Bgp != nil
}

// SetBgp sets the DeviceBgpRouter value in the Device object
//  The properties of BGP router and its children,  such as BGPv4, BGPv6 peers and their route ranges.
func (obj *device) SetBgp(value DeviceBgpRouter) Device {
	obj.Bgp().SetMsg(value.Msg())

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *device) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the Device object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *device) SetName(value string) Device {
	obj.obj.Name = value

	return obj
}

func (obj *device) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.Ethernets != nil {
		for _, item := range obj.Ethernets().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Ipv4Loopbacks != nil {
		for _, item := range obj.Ipv4Loopbacks().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Ipv6Loopbacks != nil {
		for _, item := range obj.Ipv6Loopbacks().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Isis != nil {
		obj.Isis().validateObj(set_default)
	}

	if obj.obj.Bgp != nil {
		obj.Bgp().validateObj(set_default)
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface Device")
	}
}

func (obj *device) setDefault() {

}

type flow struct {
	obj *snappipb.Flow
}

func NewFlow() Flow {
	obj := flow{obj: &snappipb.Flow{}}
	obj.setDefault()
	return &obj
}

func (obj *flow) Msg() *snappipb.Flow {
	return obj.obj
}

func (obj *flow) SetMsg(msg *snappipb.Flow) Flow {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flow) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flow) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flow) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flow) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flow) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flow) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flow) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Flow interface {
	Msg() *snappipb.Flow
	SetMsg(*snappipb.Flow) Flow
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	TxRx() FlowTxRx
	SetTxRx(value FlowTxRx) Flow
	Packet() FlowFlowHeaderIter
	Size() FlowSize
	SetSize(value FlowSize) Flow
	HasSize() bool
	Rate() FlowRate
	SetRate(value FlowRate) Flow
	HasRate() bool
	Duration() FlowDuration
	SetDuration(value FlowDuration) Flow
	HasDuration() bool
	Metrics() FlowMetrics
	SetMetrics(value FlowMetrics) Flow
	HasMetrics() bool
	Name() string
	SetName(value string) Flow
}

// TxRx returns a FlowTxRx
//  The transmit and receive endpoints.
func (obj *flow) TxRx() FlowTxRx {
	if obj.obj.TxRx == nil {
		obj.obj.TxRx = NewFlowTxRx().Msg()
	}
	return &flowTxRx{obj: obj.obj.TxRx}
}

// SetTxRx sets the FlowTxRx value in the Flow object
//  The transmit and receive endpoints.
func (obj *flow) SetTxRx(value FlowTxRx) Flow {
	obj.TxRx().SetMsg(value.Msg())

	return obj
}

// Packet returns a []FlowHeader
//  The header is a list of traffic protocol headers.
//
//  The order of traffic protocol headers assigned to the list is the
//  order they will appear on the wire.
//
//  In the case of an empty list the keyword/value of minItems: 1
//  indicates that an implementation MUST provide at least one
//  Flow.Header object.
//
//  The default value for the Flow.Header choice property is ethernet
//  which will result in an implementation by default providing at least
//  one ethernet packet header.
func (obj *flow) Packet() FlowFlowHeaderIter {
	if obj.obj.Packet == nil {
		obj.obj.Packet = []*snappipb.FlowHeader{}
	}
	return &flowFlowHeaderIter{obj: obj}
}

type flowFlowHeaderIter struct {
	obj *flow
}

type FlowFlowHeaderIter interface {
	Add() FlowHeader
	Items() []FlowHeader
}

func (obj *flowFlowHeaderIter) Add() FlowHeader {
	newObj := &snappipb.FlowHeader{}
	obj.obj.obj.Packet = append(obj.obj.obj.Packet, newObj)
	newLibObj := &flowHeader{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *flowFlowHeaderIter) Items() []FlowHeader {
	slice := []FlowHeader{}
	for _, item := range obj.obj.obj.Packet {
		slice = append(slice, &flowHeader{obj: item})
	}
	return slice
}

// Size returns a FlowSize
//  The size of the packets.
func (obj *flow) Size() FlowSize {
	if obj.obj.Size == nil {
		obj.obj.Size = NewFlowSize().Msg()
	}
	return &flowSize{obj: obj.obj.Size}
}

// Size returns a FlowSize
//  The size of the packets.
func (obj *flow) HasSize() bool {
	return obj.obj.Size != nil
}

// SetSize sets the FlowSize value in the Flow object
//  The size of the packets.
func (obj *flow) SetSize(value FlowSize) Flow {
	obj.Size().SetMsg(value.Msg())

	return obj
}

// Rate returns a FlowRate
//  The transmit rate of the packets.
func (obj *flow) Rate() FlowRate {
	if obj.obj.Rate == nil {
		obj.obj.Rate = NewFlowRate().Msg()
	}
	return &flowRate{obj: obj.obj.Rate}
}

// Rate returns a FlowRate
//  The transmit rate of the packets.
func (obj *flow) HasRate() bool {
	return obj.obj.Rate != nil
}

// SetRate sets the FlowRate value in the Flow object
//  The transmit rate of the packets.
func (obj *flow) SetRate(value FlowRate) Flow {
	obj.Rate().SetMsg(value.Msg())

	return obj
}

// Duration returns a FlowDuration
//  The transmit duration of the packets.
func (obj *flow) Duration() FlowDuration {
	if obj.obj.Duration == nil {
		obj.obj.Duration = NewFlowDuration().Msg()
	}
	return &flowDuration{obj: obj.obj.Duration}
}

// Duration returns a FlowDuration
//  The transmit duration of the packets.
func (obj *flow) HasDuration() bool {
	return obj.obj.Duration != nil
}

// SetDuration sets the FlowDuration value in the Flow object
//  The transmit duration of the packets.
func (obj *flow) SetDuration(value FlowDuration) Flow {
	obj.Duration().SetMsg(value.Msg())

	return obj
}

// Metrics returns a FlowMetrics
//  Flow metrics.
func (obj *flow) Metrics() FlowMetrics {
	if obj.obj.Metrics == nil {
		obj.obj.Metrics = NewFlowMetrics().Msg()
	}
	return &flowMetrics{obj: obj.obj.Metrics}
}

// Metrics returns a FlowMetrics
//  Flow metrics.
func (obj *flow) HasMetrics() bool {
	return obj.obj.Metrics != nil
}

// SetMetrics sets the FlowMetrics value in the Flow object
//  Flow metrics.
func (obj *flow) SetMetrics(value FlowMetrics) Flow {
	obj.Metrics().SetMsg(value.Msg())

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *flow) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the Flow object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *flow) SetName(value string) Flow {
	obj.obj.Name = value

	return obj
}

func (obj *flow) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.TxRx != nil {
		obj.TxRx().validateObj(set_default)
	} else {
		validation = append(validation, "TxRx is required field on interface Flow")
	}

	if obj.obj.Packet != nil {
		for _, item := range obj.Packet().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Size != nil {
		obj.Size().validateObj(set_default)
	}

	if obj.obj.Rate != nil {
		obj.Rate().validateObj(set_default)
	}

	if obj.obj.Duration != nil {
		obj.Duration().validateObj(set_default)
	}

	if obj.obj.Metrics != nil {
		obj.Metrics().validateObj(set_default)
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface Flow")
	}
}

func (obj *flow) setDefault() {

}

type event struct {
	obj *snappipb.Event
}

func NewEvent() Event {
	obj := event{obj: &snappipb.Event{}}
	obj.setDefault()
	return &obj
}

func (obj *event) Msg() *snappipb.Event {
	return obj.obj
}

func (obj *event) SetMsg(msg *snappipb.Event) Event {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *event) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *event) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *event) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *event) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *event) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *event) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *event) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Event interface {
	Msg() *snappipb.Event
	SetMsg(*snappipb.Event) Event
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Enable() bool
	SetEnable(value bool) Event
	HasEnable() bool
	Link() EventLink
	SetLink(value EventLink) Event
	HasLink() bool
	RxRateThreshold() EventRxRateThreshold
	SetRxRateThreshold(value EventRxRateThreshold) Event
	HasRxRateThreshold() bool
	RouteAdvertiseWithdraw() EventRouteAdvertiseWithdraw
	SetRouteAdvertiseWithdraw(value EventRouteAdvertiseWithdraw) Event
	HasRouteAdvertiseWithdraw() bool
}

// Enable returns a bool
//  True to enable all events.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *event) Enable() bool {

	if obj.obj.Enable == nil {
		*obj.obj.Enable = false
	}

	return *obj.obj.Enable

}

// Enable returns a bool
//  True to enable all events.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *event) HasEnable() bool {
	return obj.obj.Enable != nil
}

// SetEnable sets the bool value in the Event object
//  True to enable all events.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *event) SetEnable(value bool) Event {
	obj.obj.Enable = &value

	return obj
}

// Link returns a EventLink
//  description is TBD
func (obj *event) Link() EventLink {
	if obj.obj.Link == nil {
		obj.obj.Link = NewEventLink().Msg()
	}
	return &eventLink{obj: obj.obj.Link}
}

// Link returns a EventLink
//  description is TBD
func (obj *event) HasLink() bool {
	return obj.obj.Link != nil
}

// SetLink sets the EventLink value in the Event object
//  description is TBD
func (obj *event) SetLink(value EventLink) Event {
	obj.Link().SetMsg(value.Msg())

	return obj
}

// RxRateThreshold returns a EventRxRateThreshold
//  description is TBD
func (obj *event) RxRateThreshold() EventRxRateThreshold {
	if obj.obj.RxRateThreshold == nil {
		obj.obj.RxRateThreshold = NewEventRxRateThreshold().Msg()
	}
	return &eventRxRateThreshold{obj: obj.obj.RxRateThreshold}
}

// RxRateThreshold returns a EventRxRateThreshold
//  description is TBD
func (obj *event) HasRxRateThreshold() bool {
	return obj.obj.RxRateThreshold != nil
}

// SetRxRateThreshold sets the EventRxRateThreshold value in the Event object
//  description is TBD
func (obj *event) SetRxRateThreshold(value EventRxRateThreshold) Event {
	obj.RxRateThreshold().SetMsg(value.Msg())

	return obj
}

// RouteAdvertiseWithdraw returns a EventRouteAdvertiseWithdraw
//  description is TBD
func (obj *event) RouteAdvertiseWithdraw() EventRouteAdvertiseWithdraw {
	if obj.obj.RouteAdvertiseWithdraw == nil {
		obj.obj.RouteAdvertiseWithdraw = NewEventRouteAdvertiseWithdraw().Msg()
	}
	return &eventRouteAdvertiseWithdraw{obj: obj.obj.RouteAdvertiseWithdraw}
}

// RouteAdvertiseWithdraw returns a EventRouteAdvertiseWithdraw
//  description is TBD
func (obj *event) HasRouteAdvertiseWithdraw() bool {
	return obj.obj.RouteAdvertiseWithdraw != nil
}

// SetRouteAdvertiseWithdraw sets the EventRouteAdvertiseWithdraw value in the Event object
//  description is TBD
func (obj *event) SetRouteAdvertiseWithdraw(value EventRouteAdvertiseWithdraw) Event {
	obj.RouteAdvertiseWithdraw().SetMsg(value.Msg())

	return obj
}

func (obj *event) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Link != nil {
		obj.Link().validateObj(set_default)
	}

	if obj.obj.RxRateThreshold != nil {
		obj.RxRateThreshold().validateObj(set_default)
	}

	if obj.obj.RouteAdvertiseWithdraw != nil {
		obj.RouteAdvertiseWithdraw().validateObj(set_default)
	}
}

func (obj *event) setDefault() {
	if obj.obj.Enable == nil {
		obj.SetEnable(false)
	}

}

type configOptions struct {
	obj *snappipb.ConfigOptions
}

func NewConfigOptions() ConfigOptions {
	obj := configOptions{obj: &snappipb.ConfigOptions{}}
	obj.setDefault()
	return &obj
}

func (obj *configOptions) Msg() *snappipb.ConfigOptions {
	return obj.obj
}

func (obj *configOptions) SetMsg(msg *snappipb.ConfigOptions) ConfigOptions {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *configOptions) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *configOptions) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configOptions) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *configOptions) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *configOptions) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *configOptions) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *configOptions) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type ConfigOptions interface {
	Msg() *snappipb.ConfigOptions
	SetMsg(*snappipb.ConfigOptions) ConfigOptions
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PortOptions() PortOptions
	SetPortOptions(value PortOptions) ConfigOptions
	HasPortOptions() bool
}

// PortOptions returns a PortOptions
//  description is TBD
func (obj *configOptions) PortOptions() PortOptions {
	if obj.obj.PortOptions == nil {
		obj.obj.PortOptions = NewPortOptions().Msg()
	}
	return &portOptions{obj: obj.obj.PortOptions}
}

// PortOptions returns a PortOptions
//  description is TBD
func (obj *configOptions) HasPortOptions() bool {
	return obj.obj.PortOptions != nil
}

// SetPortOptions sets the PortOptions value in the ConfigOptions object
//  description is TBD
func (obj *configOptions) SetPortOptions(value PortOptions) ConfigOptions {
	obj.PortOptions().SetMsg(value.Msg())

	return obj
}

func (obj *configOptions) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PortOptions != nil {
		obj.PortOptions().validateObj(set_default)
	}
}

func (obj *configOptions) setDefault() {

}

type ping struct {
	obj *snappipb.Ping
}

func NewPing() Ping {
	obj := ping{obj: &snappipb.Ping{}}
	obj.setDefault()
	return &obj
}

func (obj *ping) Msg() *snappipb.Ping {
	return obj.obj
}

func (obj *ping) SetMsg(msg *snappipb.Ping) Ping {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *ping) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *ping) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *ping) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *ping) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *ping) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *ping) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *ping) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Ping interface {
	Msg() *snappipb.Ping
	SetMsg(*snappipb.Ping) Ping
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PingChoiceEnum
	SetChoice(value PingChoiceEnum) Ping
	HasChoice() bool
	Ipv4() PingIpv4
	SetIpv4(value PingIpv4) Ping
	HasIpv4() bool
	Ipv6() PingIpv6
	SetIpv6(value PingIpv6) Ping
	HasIpv6() bool
}

type PingChoiceEnum string

var PingChoice = struct {
	IPV4 PingChoiceEnum
	IPV6 PingChoiceEnum
}{
	IPV4: PingChoiceEnum("ipv4"),
	IPV6: PingChoiceEnum("ipv6"),
}

func (obj *ping) Choice() PingChoiceEnum {
	return PingChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  IPv4 or IPv6 ping.
func (obj *ping) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *ping) SetChoice(value PingChoiceEnum) Ping {
	intValue, ok := snappipb.Ping_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PingChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.Ping_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "ipv4" {
		obj.obj.Ipv4 = nil
	}

	if string(value) != "ipv6" {
		obj.obj.Ipv6 = nil
	}

	return obj
}

// Ipv4 returns a PingIpv4
//  description is TBD
func (obj *ping) Ipv4() PingIpv4 {
	obj.SetChoice(PingChoice.IPV4)
	if obj.obj.Ipv4 == nil {
		obj.obj.Ipv4 = NewPingIpv4().Msg()
	}
	return &pingIpv4{obj: obj.obj.Ipv4}
}

// Ipv4 returns a PingIpv4
//  description is TBD
func (obj *ping) HasIpv4() bool {
	return obj.obj.Ipv4 != nil
}

// SetIpv4 sets the PingIpv4 value in the Ping object
//  description is TBD
func (obj *ping) SetIpv4(value PingIpv4) Ping {
	obj.Ipv4().SetMsg(value.Msg())
	obj.SetChoice(PingChoice.IPV4)
	return obj
}

// Ipv6 returns a PingIpv6
//  description is TBD
func (obj *ping) Ipv6() PingIpv6 {
	obj.SetChoice(PingChoice.IPV6)
	if obj.obj.Ipv6 == nil {
		obj.obj.Ipv6 = NewPingIpv6().Msg()
	}
	return &pingIpv6{obj: obj.obj.Ipv6}
}

// Ipv6 returns a PingIpv6
//  description is TBD
func (obj *ping) HasIpv6() bool {
	return obj.obj.Ipv6 != nil
}

// SetIpv6 sets the PingIpv6 value in the Ping object
//  description is TBD
func (obj *ping) SetIpv6(value PingIpv6) Ping {
	obj.Ipv6().SetMsg(value.Msg())
	obj.SetChoice(PingChoice.IPV6)
	return obj
}

func (obj *ping) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Ipv4 != nil {
		obj.Ipv4().validateObj(set_default)
	}

	if obj.obj.Ipv6 != nil {
		obj.Ipv6().validateObj(set_default)
	}
}

func (obj *ping) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PingChoice.IPV4)
		obj.Ipv4()
	}

}

type portMetricsRequest struct {
	obj *snappipb.PortMetricsRequest
}

func NewPortMetricsRequest() PortMetricsRequest {
	obj := portMetricsRequest{obj: &snappipb.PortMetricsRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *portMetricsRequest) Msg() *snappipb.PortMetricsRequest {
	return obj.obj
}

func (obj *portMetricsRequest) SetMsg(msg *snappipb.PortMetricsRequest) PortMetricsRequest {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portMetricsRequest) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *portMetricsRequest) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portMetricsRequest) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portMetricsRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portMetricsRequest) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portMetricsRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *portMetricsRequest) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PortMetricsRequest interface {
	Msg() *snappipb.PortMetricsRequest
	SetMsg(*snappipb.PortMetricsRequest) PortMetricsRequest
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PortNames() []string
	SetPortNames(value []string) PortMetricsRequest
	ColumnNames() []PortMetricsRequestColumnNamesEnum
	SetColumnNames(value []PortMetricsRequestColumnNamesEnum) PortMetricsRequest
}

// PortNames returns a []string
//  The names of objects to return results for. An empty list will return all port row results.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *portMetricsRequest) PortNames() []string {
	if obj.obj.PortNames == nil {
		obj.obj.PortNames = make([]string, 0)
	}
	return obj.obj.PortNames
}

// SetPortNames sets the []string value in the PortMetricsRequest object
//  The names of objects to return results for. An empty list will return all port row results.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *portMetricsRequest) SetPortNames(value []string) PortMetricsRequest {
	if obj.obj.PortNames == nil {
		obj.obj.PortNames = make([]string, 0)
	}
	obj.obj.PortNames = value

	return obj
}

type PortMetricsRequestColumnNamesEnum string

var PortMetricsRequestColumnNames = struct {
	TRANSMIT       PortMetricsRequestColumnNamesEnum
	LOCATION       PortMetricsRequestColumnNamesEnum
	LINK           PortMetricsRequestColumnNamesEnum
	CAPTURE        PortMetricsRequestColumnNamesEnum
	FRAMES_TX      PortMetricsRequestColumnNamesEnum
	FRAMES_RX      PortMetricsRequestColumnNamesEnum
	BYTES_TX       PortMetricsRequestColumnNamesEnum
	BYTES_RX       PortMetricsRequestColumnNamesEnum
	FRAMES_TX_RATE PortMetricsRequestColumnNamesEnum
	FRAMES_RX_RATE PortMetricsRequestColumnNamesEnum
	BYTES_TX_RATE  PortMetricsRequestColumnNamesEnum
	BYTES_RX_RATE  PortMetricsRequestColumnNamesEnum
}{
	TRANSMIT:       PortMetricsRequestColumnNamesEnum("transmit"),
	LOCATION:       PortMetricsRequestColumnNamesEnum("location"),
	LINK:           PortMetricsRequestColumnNamesEnum("link"),
	CAPTURE:        PortMetricsRequestColumnNamesEnum("capture"),
	FRAMES_TX:      PortMetricsRequestColumnNamesEnum("frames_tx"),
	FRAMES_RX:      PortMetricsRequestColumnNamesEnum("frames_rx"),
	BYTES_TX:       PortMetricsRequestColumnNamesEnum("bytes_tx"),
	BYTES_RX:       PortMetricsRequestColumnNamesEnum("bytes_rx"),
	FRAMES_TX_RATE: PortMetricsRequestColumnNamesEnum("frames_tx_rate"),
	FRAMES_RX_RATE: PortMetricsRequestColumnNamesEnum("frames_rx_rate"),
	BYTES_TX_RATE:  PortMetricsRequestColumnNamesEnum("bytes_tx_rate"),
	BYTES_RX_RATE:  PortMetricsRequestColumnNamesEnum("bytes_rx_rate"),
}

func (obj *portMetricsRequest) ColumnNames() []PortMetricsRequestColumnNamesEnum {
	items := []PortMetricsRequestColumnNamesEnum{}
	for _, item := range obj.obj.ColumnNames {
		items = append(items, PortMetricsRequestColumnNamesEnum(item.String()))
	}
	return items
}

// SetColumnNames sets the []string value in the PortMetricsRequest object
//  The list of column names that the returned result set will contain. If the list is empty then all columns will be returned. The name of the port cannot be excluded.
func (obj *portMetricsRequest) SetColumnNames(value []PortMetricsRequestColumnNamesEnum) PortMetricsRequest {
	items := []snappipb.PortMetricsRequest_ColumnNames_Enum{}
	for _, item := range value {
		intValue := snappipb.PortMetricsRequest_ColumnNames_Enum_value[string(item)]
		items = append(items, snappipb.PortMetricsRequest_ColumnNames_Enum(intValue))
	}
	obj.obj.ColumnNames = items

	return obj
}

func (obj *portMetricsRequest) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *portMetricsRequest) setDefault() {

}

type flowMetricsRequest struct {
	obj *snappipb.FlowMetricsRequest
}

func NewFlowMetricsRequest() FlowMetricsRequest {
	obj := flowMetricsRequest{obj: &snappipb.FlowMetricsRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *flowMetricsRequest) Msg() *snappipb.FlowMetricsRequest {
	return obj.obj
}

func (obj *flowMetricsRequest) SetMsg(msg *snappipb.FlowMetricsRequest) FlowMetricsRequest {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowMetricsRequest) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowMetricsRequest) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowMetricsRequest) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetricsRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowMetricsRequest) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetricsRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowMetricsRequest) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowMetricsRequest interface {
	Msg() *snappipb.FlowMetricsRequest
	SetMsg(*snappipb.FlowMetricsRequest) FlowMetricsRequest
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	FlowNames() []string
	SetFlowNames(value []string) FlowMetricsRequest
	MetricGroups() FlowMetricGroupRequest
	SetMetricGroups(value FlowMetricGroupRequest) FlowMetricsRequest
	HasMetricGroups() bool
	MetricNames() []FlowMetricsRequestMetricNamesEnum
	SetMetricNames(value []FlowMetricsRequestMetricNamesEnum) FlowMetricsRequest
}

// FlowNames returns a []string
//  Flow metrics will be retrieved for these flow names.
//  If no flow names are specified then all flows will be returned.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
func (obj *flowMetricsRequest) FlowNames() []string {
	if obj.obj.FlowNames == nil {
		obj.obj.FlowNames = make([]string, 0)
	}
	return obj.obj.FlowNames
}

// SetFlowNames sets the []string value in the FlowMetricsRequest object
//  Flow metrics will be retrieved for these flow names.
//  If no flow names are specified then all flows will be returned.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
func (obj *flowMetricsRequest) SetFlowNames(value []string) FlowMetricsRequest {
	if obj.obj.FlowNames == nil {
		obj.obj.FlowNames = make([]string, 0)
	}
	obj.obj.FlowNames = value

	return obj
}

// MetricGroups returns a FlowMetricGroupRequest
//  A list of metric groups used to disaggregate flows. A metric group that does not exist for a flow group MUST return an error.
func (obj *flowMetricsRequest) MetricGroups() FlowMetricGroupRequest {
	if obj.obj.MetricGroups == nil {
		obj.obj.MetricGroups = NewFlowMetricGroupRequest().Msg()
	}
	return &flowMetricGroupRequest{obj: obj.obj.MetricGroups}
}

// MetricGroups returns a FlowMetricGroupRequest
//  A list of metric groups used to disaggregate flows. A metric group that does not exist for a flow group MUST return an error.
func (obj *flowMetricsRequest) HasMetricGroups() bool {
	return obj.obj.MetricGroups != nil
}

// SetMetricGroups sets the FlowMetricGroupRequest value in the FlowMetricsRequest object
//  A list of metric groups used to disaggregate flows. A metric group that does not exist for a flow group MUST return an error.
func (obj *flowMetricsRequest) SetMetricGroups(value FlowMetricGroupRequest) FlowMetricsRequest {
	obj.MetricGroups().SetMsg(value.Msg())

	return obj
}

type FlowMetricsRequestMetricNamesEnum string

var FlowMetricsRequestMetricNames = struct {
	TRANSMIT       FlowMetricsRequestMetricNamesEnum
	FRAMES_TX      FlowMetricsRequestMetricNamesEnum
	FRAMES_RX      FlowMetricsRequestMetricNamesEnum
	BYTES_TX       FlowMetricsRequestMetricNamesEnum
	BYTES_RX       FlowMetricsRequestMetricNamesEnum
	FRAMES_TX_RATE FlowMetricsRequestMetricNamesEnum
	FRAMES_RX_RATE FlowMetricsRequestMetricNamesEnum
}{
	TRANSMIT:       FlowMetricsRequestMetricNamesEnum("transmit"),
	FRAMES_TX:      FlowMetricsRequestMetricNamesEnum("frames_tx"),
	FRAMES_RX:      FlowMetricsRequestMetricNamesEnum("frames_rx"),
	BYTES_TX:       FlowMetricsRequestMetricNamesEnum("bytes_tx"),
	BYTES_RX:       FlowMetricsRequestMetricNamesEnum("bytes_rx"),
	FRAMES_TX_RATE: FlowMetricsRequestMetricNamesEnum("frames_tx_rate"),
	FRAMES_RX_RATE: FlowMetricsRequestMetricNamesEnum("frames_rx_rate"),
}

func (obj *flowMetricsRequest) MetricNames() []FlowMetricsRequestMetricNamesEnum {
	items := []FlowMetricsRequestMetricNamesEnum{}
	for _, item := range obj.obj.MetricNames {
		items = append(items, FlowMetricsRequestMetricNamesEnum(item.String()))
	}
	return items
}

// SetMetricNames sets the []string value in the FlowMetricsRequest object
//  The list of metric names that the returned result set will contain. If the list is empty then all metrics will be returned.
func (obj *flowMetricsRequest) SetMetricNames(value []FlowMetricsRequestMetricNamesEnum) FlowMetricsRequest {
	items := []snappipb.FlowMetricsRequest_MetricNames_Enum{}
	for _, item := range value {
		intValue := snappipb.FlowMetricsRequest_MetricNames_Enum_value[string(item)]
		items = append(items, snappipb.FlowMetricsRequest_MetricNames_Enum(intValue))
	}
	obj.obj.MetricNames = items

	return obj
}

func (obj *flowMetricsRequest) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.MetricGroups != nil {
		obj.MetricGroups().validateObj(set_default)
	}
}

func (obj *flowMetricsRequest) setDefault() {

}

type bgpv4MetricsRequest struct {
	obj *snappipb.Bgpv4MetricsRequest
}

func NewBgpv4MetricsRequest() Bgpv4MetricsRequest {
	obj := bgpv4MetricsRequest{obj: &snappipb.Bgpv4MetricsRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpv4MetricsRequest) Msg() *snappipb.Bgpv4MetricsRequest {
	return obj.obj
}

func (obj *bgpv4MetricsRequest) SetMsg(msg *snappipb.Bgpv4MetricsRequest) Bgpv4MetricsRequest {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpv4MetricsRequest) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpv4MetricsRequest) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpv4MetricsRequest) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv4MetricsRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpv4MetricsRequest) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv4MetricsRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpv4MetricsRequest) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Bgpv4MetricsRequest interface {
	Msg() *snappipb.Bgpv4MetricsRequest
	SetMsg(*snappipb.Bgpv4MetricsRequest) Bgpv4MetricsRequest
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PeerNames() []string
	SetPeerNames(value []string) Bgpv4MetricsRequest
	ColumnNames() []Bgpv4MetricsRequestColumnNamesEnum
	SetColumnNames(value []Bgpv4MetricsRequestColumnNamesEnum) Bgpv4MetricsRequest
}

// PeerNames returns a []string
//  The names of BGPv4 peers to return results for. An empty list will return results for all BGPv4 peers.
//
//  x-constraint:
//  - /components/schemas/Bgp.V4peer/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Bgp.V4peer/properties/name
//
func (obj *bgpv4MetricsRequest) PeerNames() []string {
	if obj.obj.PeerNames == nil {
		obj.obj.PeerNames = make([]string, 0)
	}
	return obj.obj.PeerNames
}

// SetPeerNames sets the []string value in the Bgpv4MetricsRequest object
//  The names of BGPv4 peers to return results for. An empty list will return results for all BGPv4 peers.
//
//  x-constraint:
//  - /components/schemas/Bgp.V4peer/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Bgp.V4peer/properties/name
//
func (obj *bgpv4MetricsRequest) SetPeerNames(value []string) Bgpv4MetricsRequest {
	if obj.obj.PeerNames == nil {
		obj.obj.PeerNames = make([]string, 0)
	}
	obj.obj.PeerNames = value

	return obj
}

type Bgpv4MetricsRequestColumnNamesEnum string

var Bgpv4MetricsRequestColumnNames = struct {
	SESSION_STATE            Bgpv4MetricsRequestColumnNamesEnum
	SESSION_FLAP_COUNT       Bgpv4MetricsRequestColumnNamesEnum
	ROUTES_ADVERTISED        Bgpv4MetricsRequestColumnNamesEnum
	ROUTES_RECEIVED          Bgpv4MetricsRequestColumnNamesEnum
	ROUTE_WITHDRAWS_SENT     Bgpv4MetricsRequestColumnNamesEnum
	ROUTE_WITHDRAWS_RECEIVED Bgpv4MetricsRequestColumnNamesEnum
	UPDATES_SENT             Bgpv4MetricsRequestColumnNamesEnum
	UPDATES_RECEIVED         Bgpv4MetricsRequestColumnNamesEnum
	OPENS_SENT               Bgpv4MetricsRequestColumnNamesEnum
	OPENS_RECEIVED           Bgpv4MetricsRequestColumnNamesEnum
	KEEPALIVES_SENT          Bgpv4MetricsRequestColumnNamesEnum
	KEEPALIVES_RECEIVED      Bgpv4MetricsRequestColumnNamesEnum
	NOTIFICATIONS_SENT       Bgpv4MetricsRequestColumnNamesEnum
	NOTIFICATIONS_RECEIVED   Bgpv4MetricsRequestColumnNamesEnum
}{
	SESSION_STATE:            Bgpv4MetricsRequestColumnNamesEnum("session_state"),
	SESSION_FLAP_COUNT:       Bgpv4MetricsRequestColumnNamesEnum("session_flap_count"),
	ROUTES_ADVERTISED:        Bgpv4MetricsRequestColumnNamesEnum("routes_advertised"),
	ROUTES_RECEIVED:          Bgpv4MetricsRequestColumnNamesEnum("routes_received"),
	ROUTE_WITHDRAWS_SENT:     Bgpv4MetricsRequestColumnNamesEnum("route_withdraws_sent"),
	ROUTE_WITHDRAWS_RECEIVED: Bgpv4MetricsRequestColumnNamesEnum("route_withdraws_received"),
	UPDATES_SENT:             Bgpv4MetricsRequestColumnNamesEnum("updates_sent"),
	UPDATES_RECEIVED:         Bgpv4MetricsRequestColumnNamesEnum("updates_received"),
	OPENS_SENT:               Bgpv4MetricsRequestColumnNamesEnum("opens_sent"),
	OPENS_RECEIVED:           Bgpv4MetricsRequestColumnNamesEnum("opens_received"),
	KEEPALIVES_SENT:          Bgpv4MetricsRequestColumnNamesEnum("keepalives_sent"),
	KEEPALIVES_RECEIVED:      Bgpv4MetricsRequestColumnNamesEnum("keepalives_received"),
	NOTIFICATIONS_SENT:       Bgpv4MetricsRequestColumnNamesEnum("notifications_sent"),
	NOTIFICATIONS_RECEIVED:   Bgpv4MetricsRequestColumnNamesEnum("notifications_received"),
}

func (obj *bgpv4MetricsRequest) ColumnNames() []Bgpv4MetricsRequestColumnNamesEnum {
	items := []Bgpv4MetricsRequestColumnNamesEnum{}
	for _, item := range obj.obj.ColumnNames {
		items = append(items, Bgpv4MetricsRequestColumnNamesEnum(item.String()))
	}
	return items
}

// SetColumnNames sets the []string value in the Bgpv4MetricsRequest object
//  The list of column names that the returned result set will contain. If the list is empty then all columns will be returned except for any result_groups. The name of the BGPv4 peer cannot be excluded.
func (obj *bgpv4MetricsRequest) SetColumnNames(value []Bgpv4MetricsRequestColumnNamesEnum) Bgpv4MetricsRequest {
	items := []snappipb.Bgpv4MetricsRequest_ColumnNames_Enum{}
	for _, item := range value {
		intValue := snappipb.Bgpv4MetricsRequest_ColumnNames_Enum_value[string(item)]
		items = append(items, snappipb.Bgpv4MetricsRequest_ColumnNames_Enum(intValue))
	}
	obj.obj.ColumnNames = items

	return obj
}

func (obj *bgpv4MetricsRequest) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpv4MetricsRequest) setDefault() {

}

type bgpv6MetricsRequest struct {
	obj *snappipb.Bgpv6MetricsRequest
}

func NewBgpv6MetricsRequest() Bgpv6MetricsRequest {
	obj := bgpv6MetricsRequest{obj: &snappipb.Bgpv6MetricsRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpv6MetricsRequest) Msg() *snappipb.Bgpv6MetricsRequest {
	return obj.obj
}

func (obj *bgpv6MetricsRequest) SetMsg(msg *snappipb.Bgpv6MetricsRequest) Bgpv6MetricsRequest {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpv6MetricsRequest) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpv6MetricsRequest) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpv6MetricsRequest) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv6MetricsRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpv6MetricsRequest) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv6MetricsRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpv6MetricsRequest) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Bgpv6MetricsRequest interface {
	Msg() *snappipb.Bgpv6MetricsRequest
	SetMsg(*snappipb.Bgpv6MetricsRequest) Bgpv6MetricsRequest
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PeerNames() []string
	SetPeerNames(value []string) Bgpv6MetricsRequest
	ColumnNames() []Bgpv6MetricsRequestColumnNamesEnum
	SetColumnNames(value []Bgpv6MetricsRequestColumnNamesEnum) Bgpv6MetricsRequest
}

// PeerNames returns a []string
//  The names of BGPv6 peers to return results for. An empty list will return results for all BGPv6 peers.
//
//  x-constraint:
//  - /components/schemas/Bgp.V6peer/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Bgp.V6peer/properties/name
//
func (obj *bgpv6MetricsRequest) PeerNames() []string {
	if obj.obj.PeerNames == nil {
		obj.obj.PeerNames = make([]string, 0)
	}
	return obj.obj.PeerNames
}

// SetPeerNames sets the []string value in the Bgpv6MetricsRequest object
//  The names of BGPv6 peers to return results for. An empty list will return results for all BGPv6 peers.
//
//  x-constraint:
//  - /components/schemas/Bgp.V6peer/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Bgp.V6peer/properties/name
//
func (obj *bgpv6MetricsRequest) SetPeerNames(value []string) Bgpv6MetricsRequest {
	if obj.obj.PeerNames == nil {
		obj.obj.PeerNames = make([]string, 0)
	}
	obj.obj.PeerNames = value

	return obj
}

type Bgpv6MetricsRequestColumnNamesEnum string

var Bgpv6MetricsRequestColumnNames = struct {
	SESSION_STATE            Bgpv6MetricsRequestColumnNamesEnum
	SESSION_FLAP_COUNT       Bgpv6MetricsRequestColumnNamesEnum
	ROUTES_ADVERTISED        Bgpv6MetricsRequestColumnNamesEnum
	ROUTES_RECEIVED          Bgpv6MetricsRequestColumnNamesEnum
	ROUTE_WITHDRAWS_SENT     Bgpv6MetricsRequestColumnNamesEnum
	ROUTE_WITHDRAWS_RECEIVED Bgpv6MetricsRequestColumnNamesEnum
	UPDATES_SENT             Bgpv6MetricsRequestColumnNamesEnum
	UPDATES_RECEIVED         Bgpv6MetricsRequestColumnNamesEnum
	OPENS_SENT               Bgpv6MetricsRequestColumnNamesEnum
	OPENS_RECEIVED           Bgpv6MetricsRequestColumnNamesEnum
	KEEPALIVES_SENT          Bgpv6MetricsRequestColumnNamesEnum
	KEEPALIVES_RECEIVED      Bgpv6MetricsRequestColumnNamesEnum
	NOTIFICATIONS_SENT       Bgpv6MetricsRequestColumnNamesEnum
	NOTIFICATIONS_RECEIVED   Bgpv6MetricsRequestColumnNamesEnum
}{
	SESSION_STATE:            Bgpv6MetricsRequestColumnNamesEnum("session_state"),
	SESSION_FLAP_COUNT:       Bgpv6MetricsRequestColumnNamesEnum("session_flap_count"),
	ROUTES_ADVERTISED:        Bgpv6MetricsRequestColumnNamesEnum("routes_advertised"),
	ROUTES_RECEIVED:          Bgpv6MetricsRequestColumnNamesEnum("routes_received"),
	ROUTE_WITHDRAWS_SENT:     Bgpv6MetricsRequestColumnNamesEnum("route_withdraws_sent"),
	ROUTE_WITHDRAWS_RECEIVED: Bgpv6MetricsRequestColumnNamesEnum("route_withdraws_received"),
	UPDATES_SENT:             Bgpv6MetricsRequestColumnNamesEnum("updates_sent"),
	UPDATES_RECEIVED:         Bgpv6MetricsRequestColumnNamesEnum("updates_received"),
	OPENS_SENT:               Bgpv6MetricsRequestColumnNamesEnum("opens_sent"),
	OPENS_RECEIVED:           Bgpv6MetricsRequestColumnNamesEnum("opens_received"),
	KEEPALIVES_SENT:          Bgpv6MetricsRequestColumnNamesEnum("keepalives_sent"),
	KEEPALIVES_RECEIVED:      Bgpv6MetricsRequestColumnNamesEnum("keepalives_received"),
	NOTIFICATIONS_SENT:       Bgpv6MetricsRequestColumnNamesEnum("notifications_sent"),
	NOTIFICATIONS_RECEIVED:   Bgpv6MetricsRequestColumnNamesEnum("notifications_received"),
}

func (obj *bgpv6MetricsRequest) ColumnNames() []Bgpv6MetricsRequestColumnNamesEnum {
	items := []Bgpv6MetricsRequestColumnNamesEnum{}
	for _, item := range obj.obj.ColumnNames {
		items = append(items, Bgpv6MetricsRequestColumnNamesEnum(item.String()))
	}
	return items
}

// SetColumnNames sets the []string value in the Bgpv6MetricsRequest object
//  The list of column names that the returned result set will contain. If the list is empty then all columns will be returned except for any result_groups. The name of the BGPv6 peer cannot be excluded.
func (obj *bgpv6MetricsRequest) SetColumnNames(value []Bgpv6MetricsRequestColumnNamesEnum) Bgpv6MetricsRequest {
	items := []snappipb.Bgpv6MetricsRequest_ColumnNames_Enum{}
	for _, item := range value {
		intValue := snappipb.Bgpv6MetricsRequest_ColumnNames_Enum_value[string(item)]
		items = append(items, snappipb.Bgpv6MetricsRequest_ColumnNames_Enum(intValue))
	}
	obj.obj.ColumnNames = items

	return obj
}

func (obj *bgpv6MetricsRequest) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpv6MetricsRequest) setDefault() {

}

type isisMetricsRequest struct {
	obj *snappipb.IsisMetricsRequest
}

func NewIsisMetricsRequest() IsisMetricsRequest {
	obj := isisMetricsRequest{obj: &snappipb.IsisMetricsRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *isisMetricsRequest) Msg() *snappipb.IsisMetricsRequest {
	return obj.obj
}

func (obj *isisMetricsRequest) SetMsg(msg *snappipb.IsisMetricsRequest) IsisMetricsRequest {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisMetricsRequest) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisMetricsRequest) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisMetricsRequest) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisMetricsRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisMetricsRequest) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisMetricsRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisMetricsRequest) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisMetricsRequest interface {
	Msg() *snappipb.IsisMetricsRequest
	SetMsg(*snappipb.IsisMetricsRequest) IsisMetricsRequest
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	RouterNames() []string
	SetRouterNames(value []string) IsisMetricsRequest
	ColumnNames() []IsisMetricsRequestColumnNamesEnum
	SetColumnNames(value []IsisMetricsRequestColumnNamesEnum) IsisMetricsRequest
}

// RouterNames returns a []string
//  The names of ISIS Routers to return results for. An empty list will return results for all ISIS router.
//
//  x-constraint:
//  - /components/schemas/Device.IsisRouter/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.IsisRouter/properties/name
//
func (obj *isisMetricsRequest) RouterNames() []string {
	if obj.obj.RouterNames == nil {
		obj.obj.RouterNames = make([]string, 0)
	}
	return obj.obj.RouterNames
}

// SetRouterNames sets the []string value in the IsisMetricsRequest object
//  The names of ISIS Routers to return results for. An empty list will return results for all ISIS router.
//
//  x-constraint:
//  - /components/schemas/Device.IsisRouter/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.IsisRouter/properties/name
//
func (obj *isisMetricsRequest) SetRouterNames(value []string) IsisMetricsRequest {
	if obj.obj.RouterNames == nil {
		obj.obj.RouterNames = make([]string, 0)
	}
	obj.obj.RouterNames = value

	return obj
}

type IsisMetricsRequestColumnNamesEnum string

var IsisMetricsRequestColumnNames = struct {
	L1_SESSIONS_UP                    IsisMetricsRequestColumnNamesEnum
	L1_SESSION_FLAP                   IsisMetricsRequestColumnNamesEnum
	L1_DATABASE_SIZE                  IsisMetricsRequestColumnNamesEnum
	L1_BROADCAST_HELLOS_SENT          IsisMetricsRequestColumnNamesEnum
	L1_BROADCAST_HELLOS_RECEIVED      IsisMetricsRequestColumnNamesEnum
	L1_POINT_TO_POINT_HELLOS_SENT     IsisMetricsRequestColumnNamesEnum
	L1_POINT_TO_POINT_HELLOS_RECEIVED IsisMetricsRequestColumnNamesEnum
	L1_PSNP_SENT                      IsisMetricsRequestColumnNamesEnum
	L1_PSNP_RECEIVED                  IsisMetricsRequestColumnNamesEnum
	L1_CSNP_SENT                      IsisMetricsRequestColumnNamesEnum
	L1_CSNP_RECEIVED                  IsisMetricsRequestColumnNamesEnum
	L1_LSP_SENT                       IsisMetricsRequestColumnNamesEnum
	L1_LSP_RECEIVED                   IsisMetricsRequestColumnNamesEnum
	L2_SESSIONS_UP                    IsisMetricsRequestColumnNamesEnum
	L2_SESSION_FLAP                   IsisMetricsRequestColumnNamesEnum
	L2_DATABASE_SIZE                  IsisMetricsRequestColumnNamesEnum
	L2_BROADCAST_HELLOS_SENT          IsisMetricsRequestColumnNamesEnum
	L2_BROADCAST_HELLOS_RECEIVED      IsisMetricsRequestColumnNamesEnum
	L2_POINT_TO_POINT_HELLOS_SENT     IsisMetricsRequestColumnNamesEnum
	L2_POINT_TO_POINT_HELLOS_RECEIVED IsisMetricsRequestColumnNamesEnum
	L2_PSNP_SENT                      IsisMetricsRequestColumnNamesEnum
	L2_PSNP_RECEIVED                  IsisMetricsRequestColumnNamesEnum
	L2_CSNP_SENT                      IsisMetricsRequestColumnNamesEnum
	L2_CSNP_RECEIVED                  IsisMetricsRequestColumnNamesEnum
	L2_LSP_SENT                       IsisMetricsRequestColumnNamesEnum
	L2_LSP_RECEIVED                   IsisMetricsRequestColumnNamesEnum
}{
	L1_SESSIONS_UP:                    IsisMetricsRequestColumnNamesEnum("l1_sessions_up"),
	L1_SESSION_FLAP:                   IsisMetricsRequestColumnNamesEnum("l1_session_flap"),
	L1_DATABASE_SIZE:                  IsisMetricsRequestColumnNamesEnum("l1_database_size"),
	L1_BROADCAST_HELLOS_SENT:          IsisMetricsRequestColumnNamesEnum("l1_broadcast_hellos_sent"),
	L1_BROADCAST_HELLOS_RECEIVED:      IsisMetricsRequestColumnNamesEnum("l1_broadcast_hellos_received"),
	L1_POINT_TO_POINT_HELLOS_SENT:     IsisMetricsRequestColumnNamesEnum("l1_point_to_point_hellos_sent"),
	L1_POINT_TO_POINT_HELLOS_RECEIVED: IsisMetricsRequestColumnNamesEnum("l1_point_to_point_hellos_received"),
	L1_PSNP_SENT:                      IsisMetricsRequestColumnNamesEnum("l1_psnp_sent"),
	L1_PSNP_RECEIVED:                  IsisMetricsRequestColumnNamesEnum("l1_psnp_received"),
	L1_CSNP_SENT:                      IsisMetricsRequestColumnNamesEnum("l1_csnp_sent"),
	L1_CSNP_RECEIVED:                  IsisMetricsRequestColumnNamesEnum("l1_csnp_received"),
	L1_LSP_SENT:                       IsisMetricsRequestColumnNamesEnum("l1_lsp_sent"),
	L1_LSP_RECEIVED:                   IsisMetricsRequestColumnNamesEnum("l1_lsp_received"),
	L2_SESSIONS_UP:                    IsisMetricsRequestColumnNamesEnum("l2_sessions_up"),
	L2_SESSION_FLAP:                   IsisMetricsRequestColumnNamesEnum("l2_session_flap"),
	L2_DATABASE_SIZE:                  IsisMetricsRequestColumnNamesEnum("l2_database_size"),
	L2_BROADCAST_HELLOS_SENT:          IsisMetricsRequestColumnNamesEnum("l2_broadcast_hellos_sent"),
	L2_BROADCAST_HELLOS_RECEIVED:      IsisMetricsRequestColumnNamesEnum("l2_broadcast_hellos_received"),
	L2_POINT_TO_POINT_HELLOS_SENT:     IsisMetricsRequestColumnNamesEnum("l2_point_to_point_hellos_sent"),
	L2_POINT_TO_POINT_HELLOS_RECEIVED: IsisMetricsRequestColumnNamesEnum("l2_point_to_point_hellos_received"),
	L2_PSNP_SENT:                      IsisMetricsRequestColumnNamesEnum("l2_psnp_sent"),
	L2_PSNP_RECEIVED:                  IsisMetricsRequestColumnNamesEnum("l2_psnp_received"),
	L2_CSNP_SENT:                      IsisMetricsRequestColumnNamesEnum("l2_csnp_sent"),
	L2_CSNP_RECEIVED:                  IsisMetricsRequestColumnNamesEnum("l2_csnp_received"),
	L2_LSP_SENT:                       IsisMetricsRequestColumnNamesEnum("l2_lsp_sent"),
	L2_LSP_RECEIVED:                   IsisMetricsRequestColumnNamesEnum("l2_lsp_received"),
}

func (obj *isisMetricsRequest) ColumnNames() []IsisMetricsRequestColumnNamesEnum {
	items := []IsisMetricsRequestColumnNamesEnum{}
	for _, item := range obj.obj.ColumnNames {
		items = append(items, IsisMetricsRequestColumnNamesEnum(item.String()))
	}
	return items
}

// SetColumnNames sets the []string value in the IsisMetricsRequest object
//  The list of column names that the returned result set will contain. If the list is empty then all columns will be returned except for any result_groups. The name of the ISIS Router cannot be excluded.
func (obj *isisMetricsRequest) SetColumnNames(value []IsisMetricsRequestColumnNamesEnum) IsisMetricsRequest {
	items := []snappipb.IsisMetricsRequest_ColumnNames_Enum{}
	for _, item := range value {
		intValue := snappipb.IsisMetricsRequest_ColumnNames_Enum_value[string(item)]
		items = append(items, snappipb.IsisMetricsRequest_ColumnNames_Enum(intValue))
	}
	obj.obj.ColumnNames = items

	return obj
}

func (obj *isisMetricsRequest) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *isisMetricsRequest) setDefault() {

}

type responseWarning struct {
	obj *snappipb.ResponseWarning
}

func NewResponseWarning() ResponseWarning {
	obj := responseWarning{obj: &snappipb.ResponseWarning{}}
	obj.setDefault()
	return &obj
}

func (obj *responseWarning) Msg() *snappipb.ResponseWarning {
	return obj.obj
}

func (obj *responseWarning) SetMsg(msg *snappipb.ResponseWarning) ResponseWarning {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseWarning) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *responseWarning) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseWarning) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *responseWarning) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseWarning) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *responseWarning) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *responseWarning) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type ResponseWarning interface {
	Msg() *snappipb.ResponseWarning
	SetMsg(*snappipb.ResponseWarning) ResponseWarning
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Warnings() []string
	SetWarnings(value []string) ResponseWarning
}

// Warnings returns a []string
//  A list of any system specific warnings that have occurred while
//  executing the request.
func (obj *responseWarning) Warnings() []string {
	if obj.obj.Warnings == nil {
		obj.obj.Warnings = make([]string, 0)
	}
	return obj.obj.Warnings
}

// SetWarnings sets the []string value in the ResponseWarning object
//  A list of any system specific warnings that have occurred while
//  executing the request.
func (obj *responseWarning) SetWarnings(value []string) ResponseWarning {
	if obj.obj.Warnings == nil {
		obj.obj.Warnings = make([]string, 0)
	}
	obj.obj.Warnings = value

	return obj
}

func (obj *responseWarning) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *responseWarning) setDefault() {

}

type responseError struct {
	obj *snappipb.ResponseError
}

func NewResponseError() ResponseError {
	obj := responseError{obj: &snappipb.ResponseError{}}
	obj.setDefault()
	return &obj
}

func (obj *responseError) Msg() *snappipb.ResponseError {
	return obj.obj
}

func (obj *responseError) SetMsg(msg *snappipb.ResponseError) ResponseError {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *responseError) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *responseError) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseError) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *responseError) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *responseError) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *responseError) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *responseError) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type ResponseError interface {
	Msg() *snappipb.ResponseError
	SetMsg(*snappipb.ResponseError) ResponseError
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Errors() []string
	SetErrors(value []string) ResponseError
}

// Errors returns a []string
//  A list of any system specific errors that have occurred while
//  executing the request.
func (obj *responseError) Errors() []string {
	if obj.obj.Errors == nil {
		obj.obj.Errors = make([]string, 0)
	}
	return obj.obj.Errors
}

// SetErrors sets the []string value in the ResponseError object
//  A list of any system specific errors that have occurred while
//  executing the request.
func (obj *responseError) SetErrors(value []string) ResponseError {
	if obj.obj.Errors == nil {
		obj.obj.Errors = make([]string, 0)
	}
	obj.obj.Errors = value

	return obj
}

func (obj *responseError) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *responseError) setDefault() {

}

type pingResponse struct {
	obj *snappipb.PingResponse
}

func NewPingResponse() PingResponse {
	obj := pingResponse{obj: &snappipb.PingResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *pingResponse) Msg() *snappipb.PingResponse {
	return obj.obj
}

func (obj *pingResponse) SetMsg(msg *snappipb.PingResponse) PingResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pingResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *pingResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pingResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *pingResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pingResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *pingResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *pingResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PingResponse interface {
	Msg() *snappipb.PingResponse
	SetMsg(*snappipb.PingResponse) PingResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Responses() PingResponseResponseIter
}

// Responses returns a []Response
//  description is TBD
func (obj *pingResponse) Responses() PingResponseResponseIter {
	if obj.obj.Responses == nil {
		obj.obj.Responses = []*snappipb.Response{}
	}
	return &pingResponseResponseIter{obj: obj}
}

type pingResponseResponseIter struct {
	obj *pingResponse
}

type PingResponseResponseIter interface {
	Add() Response
	Items() []Response
}

func (obj *pingResponseResponseIter) Add() Response {
	newObj := &snappipb.Response{}
	obj.obj.obj.Responses = append(obj.obj.obj.Responses, newObj)
	newLibObj := &response{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *pingResponseResponseIter) Items() []Response {
	slice := []Response{}
	for _, item := range obj.obj.obj.Responses {
		slice = append(slice, &response{obj: item})
	}
	return slice
}

func (obj *pingResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.Responses != nil {
		for _, item := range obj.Responses().Items() {
			item.validateObj(set_default)
		}
	}

}

func (obj *pingResponse) setDefault() {

}

type metricsResponse struct {
	obj *snappipb.MetricsResponse
}

func NewMetricsResponse() MetricsResponse {
	obj := metricsResponse{obj: &snappipb.MetricsResponse{}}
	obj.setDefault()
	return &obj
}

func (obj *metricsResponse) Msg() *snappipb.MetricsResponse {
	return obj.obj
}

func (obj *metricsResponse) SetMsg(msg *snappipb.MetricsResponse) MetricsResponse {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *metricsResponse) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *metricsResponse) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *metricsResponse) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *metricsResponse) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *metricsResponse) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *metricsResponse) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *metricsResponse) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type MetricsResponse interface {
	Msg() *snappipb.MetricsResponse
	SetMsg(*snappipb.MetricsResponse) MetricsResponse
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() MetricsResponseChoiceEnum
	SetChoice(value MetricsResponseChoiceEnum) MetricsResponse
	HasChoice() bool
	PortMetrics() MetricsResponsePortMetricIter
	FlowMetrics() MetricsResponseFlowMetricIter
	Bgpv4Metrics() MetricsResponseBgpv4MetricIter
	Bgpv6Metrics() MetricsResponseBgpv6MetricIter
	IsisMetrics() MetricsResponseIsisMetricIter
}

type MetricsResponseChoiceEnum string

var MetricsResponseChoice = struct {
	FLOW_METRICS  MetricsResponseChoiceEnum
	PORT_METRICS  MetricsResponseChoiceEnum
	BGPV4_METRICS MetricsResponseChoiceEnum
	BGPV6_METRICS MetricsResponseChoiceEnum
	ISIS_METRICS  MetricsResponseChoiceEnum
}{
	FLOW_METRICS:  MetricsResponseChoiceEnum("flow_metrics"),
	PORT_METRICS:  MetricsResponseChoiceEnum("port_metrics"),
	BGPV4_METRICS: MetricsResponseChoiceEnum("bgpv4_metrics"),
	BGPV6_METRICS: MetricsResponseChoiceEnum("bgpv6_metrics"),
	ISIS_METRICS:  MetricsResponseChoiceEnum("isis_metrics"),
}

func (obj *metricsResponse) Choice() MetricsResponseChoiceEnum {
	return MetricsResponseChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *metricsResponse) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *metricsResponse) SetChoice(value MetricsResponseChoiceEnum) MetricsResponse {
	intValue, ok := snappipb.MetricsResponse_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on MetricsResponseChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.MetricsResponse_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "flow_metrics" {
		obj.obj.FlowMetrics = nil
	}

	if string(value) != "port_metrics" {
		obj.obj.PortMetrics = nil
	}

	if string(value) != "bgpv4_metrics" {
		obj.obj.Bgpv4Metrics = nil
	}

	if string(value) != "bgpv6_metrics" {
		obj.obj.Bgpv6Metrics = nil
	}

	if string(value) != "isis_metrics" {
		obj.obj.IsisMetrics = nil
	}

	return obj
}

// PortMetrics returns a []PortMetric
//  description is TBD
func (obj *metricsResponse) PortMetrics() MetricsResponsePortMetricIter {
	if obj.obj.PortMetrics == nil {
		obj.obj.PortMetrics = []*snappipb.PortMetric{}
	}
	return &metricsResponsePortMetricIter{obj: obj}
}

type metricsResponsePortMetricIter struct {
	obj *metricsResponse
}

type MetricsResponsePortMetricIter interface {
	Add() PortMetric
	Items() []PortMetric
}

func (obj *metricsResponsePortMetricIter) Add() PortMetric {
	newObj := &snappipb.PortMetric{}
	obj.obj.obj.PortMetrics = append(obj.obj.obj.PortMetrics, newObj)
	newLibObj := &portMetric{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *metricsResponsePortMetricIter) Items() []PortMetric {
	slice := []PortMetric{}
	for _, item := range obj.obj.obj.PortMetrics {
		slice = append(slice, &portMetric{obj: item})
	}
	return slice
}

// FlowMetrics returns a []FlowMetric
//  description is TBD
func (obj *metricsResponse) FlowMetrics() MetricsResponseFlowMetricIter {
	if obj.obj.FlowMetrics == nil {
		obj.obj.FlowMetrics = []*snappipb.FlowMetric{}
	}
	return &metricsResponseFlowMetricIter{obj: obj}
}

type metricsResponseFlowMetricIter struct {
	obj *metricsResponse
}

type MetricsResponseFlowMetricIter interface {
	Add() FlowMetric
	Items() []FlowMetric
}

func (obj *metricsResponseFlowMetricIter) Add() FlowMetric {
	newObj := &snappipb.FlowMetric{}
	obj.obj.obj.FlowMetrics = append(obj.obj.obj.FlowMetrics, newObj)
	newLibObj := &flowMetric{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *metricsResponseFlowMetricIter) Items() []FlowMetric {
	slice := []FlowMetric{}
	for _, item := range obj.obj.obj.FlowMetrics {
		slice = append(slice, &flowMetric{obj: item})
	}
	return slice
}

// Bgpv4Metrics returns a []Bgpv4Metric
//  description is TBD
func (obj *metricsResponse) Bgpv4Metrics() MetricsResponseBgpv4MetricIter {
	if obj.obj.Bgpv4Metrics == nil {
		obj.obj.Bgpv4Metrics = []*snappipb.Bgpv4Metric{}
	}
	return &metricsResponseBgpv4MetricIter{obj: obj}
}

type metricsResponseBgpv4MetricIter struct {
	obj *metricsResponse
}

type MetricsResponseBgpv4MetricIter interface {
	Add() Bgpv4Metric
	Items() []Bgpv4Metric
}

func (obj *metricsResponseBgpv4MetricIter) Add() Bgpv4Metric {
	newObj := &snappipb.Bgpv4Metric{}
	obj.obj.obj.Bgpv4Metrics = append(obj.obj.obj.Bgpv4Metrics, newObj)
	newLibObj := &bgpv4Metric{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *metricsResponseBgpv4MetricIter) Items() []Bgpv4Metric {
	slice := []Bgpv4Metric{}
	for _, item := range obj.obj.obj.Bgpv4Metrics {
		slice = append(slice, &bgpv4Metric{obj: item})
	}
	return slice
}

// Bgpv6Metrics returns a []Bgpv6Metric
//  description is TBD
func (obj *metricsResponse) Bgpv6Metrics() MetricsResponseBgpv6MetricIter {
	if obj.obj.Bgpv6Metrics == nil {
		obj.obj.Bgpv6Metrics = []*snappipb.Bgpv6Metric{}
	}
	return &metricsResponseBgpv6MetricIter{obj: obj}
}

type metricsResponseBgpv6MetricIter struct {
	obj *metricsResponse
}

type MetricsResponseBgpv6MetricIter interface {
	Add() Bgpv6Metric
	Items() []Bgpv6Metric
}

func (obj *metricsResponseBgpv6MetricIter) Add() Bgpv6Metric {
	newObj := &snappipb.Bgpv6Metric{}
	obj.obj.obj.Bgpv6Metrics = append(obj.obj.obj.Bgpv6Metrics, newObj)
	newLibObj := &bgpv6Metric{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *metricsResponseBgpv6MetricIter) Items() []Bgpv6Metric {
	slice := []Bgpv6Metric{}
	for _, item := range obj.obj.obj.Bgpv6Metrics {
		slice = append(slice, &bgpv6Metric{obj: item})
	}
	return slice
}

// IsisMetrics returns a []IsisMetric
//  description is TBD
func (obj *metricsResponse) IsisMetrics() MetricsResponseIsisMetricIter {
	if obj.obj.IsisMetrics == nil {
		obj.obj.IsisMetrics = []*snappipb.IsisMetric{}
	}
	return &metricsResponseIsisMetricIter{obj: obj}
}

type metricsResponseIsisMetricIter struct {
	obj *metricsResponse
}

type MetricsResponseIsisMetricIter interface {
	Add() IsisMetric
	Items() []IsisMetric
}

func (obj *metricsResponseIsisMetricIter) Add() IsisMetric {
	newObj := &snappipb.IsisMetric{}
	obj.obj.obj.IsisMetrics = append(obj.obj.obj.IsisMetrics, newObj)
	newLibObj := &isisMetric{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *metricsResponseIsisMetricIter) Items() []IsisMetric {
	slice := []IsisMetric{}
	for _, item := range obj.obj.obj.IsisMetrics {
		slice = append(slice, &isisMetric{obj: item})
	}
	return slice
}

func (obj *metricsResponse) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.PortMetrics != nil {
		for _, item := range obj.PortMetrics().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.FlowMetrics != nil {
		for _, item := range obj.FlowMetrics().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Bgpv4Metrics != nil {
		for _, item := range obj.Bgpv4Metrics().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Bgpv6Metrics != nil {
		for _, item := range obj.Bgpv6Metrics().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.IsisMetrics != nil {
		for _, item := range obj.IsisMetrics().Items() {
			item.validateObj(set_default)
		}
	}

}

func (obj *metricsResponse) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(MetricsResponseChoice.PORT_METRICS)
		obj.PortMetrics()
	}

}

type stateMetrics struct {
	obj *snappipb.StateMetrics
}

func NewStateMetrics() StateMetrics {
	obj := stateMetrics{obj: &snappipb.StateMetrics{}}
	obj.setDefault()
	return &obj
}

func (obj *stateMetrics) Msg() *snappipb.StateMetrics {
	return obj.obj
}

func (obj *stateMetrics) SetMsg(msg *snappipb.StateMetrics) StateMetrics {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *stateMetrics) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *stateMetrics) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *stateMetrics) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *stateMetrics) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *stateMetrics) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *stateMetrics) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *stateMetrics) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type StateMetrics interface {
	Msg() *snappipb.StateMetrics
	SetMsg(*snappipb.StateMetrics) StateMetrics
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PortState() StateMetricsPortStateIter
	FlowState() StateMetricsFlowStateIter
}

// PortState returns a []PortState
//  description is TBD
func (obj *stateMetrics) PortState() StateMetricsPortStateIter {
	if obj.obj.PortState == nil {
		obj.obj.PortState = []*snappipb.PortState{}
	}
	return &stateMetricsPortStateIter{obj: obj}
}

type stateMetricsPortStateIter struct {
	obj *stateMetrics
}

type StateMetricsPortStateIter interface {
	Add() PortState
	Items() []PortState
}

func (obj *stateMetricsPortStateIter) Add() PortState {
	newObj := &snappipb.PortState{}
	obj.obj.obj.PortState = append(obj.obj.obj.PortState, newObj)
	newLibObj := &portState{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *stateMetricsPortStateIter) Items() []PortState {
	slice := []PortState{}
	for _, item := range obj.obj.obj.PortState {
		slice = append(slice, &portState{obj: item})
	}
	return slice
}

// FlowState returns a []FlowState
//  description is TBD
func (obj *stateMetrics) FlowState() StateMetricsFlowStateIter {
	if obj.obj.FlowState == nil {
		obj.obj.FlowState = []*snappipb.FlowState{}
	}
	return &stateMetricsFlowStateIter{obj: obj}
}

type stateMetricsFlowStateIter struct {
	obj *stateMetrics
}

type StateMetricsFlowStateIter interface {
	Add() FlowState
	Items() []FlowState
}

func (obj *stateMetricsFlowStateIter) Add() FlowState {
	newObj := &snappipb.FlowState{}
	obj.obj.obj.FlowState = append(obj.obj.obj.FlowState, newObj)
	newLibObj := &flowState{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *stateMetricsFlowStateIter) Items() []FlowState {
	slice := []FlowState{}
	for _, item := range obj.obj.obj.FlowState {
		slice = append(slice, &flowState{obj: item})
	}
	return slice
}

func (obj *stateMetrics) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.PortState != nil {
		for _, item := range obj.PortState().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.FlowState != nil {
		for _, item := range obj.FlowState().Items() {
			item.validateObj(set_default)
		}
	}

}

func (obj *stateMetrics) setDefault() {

}

type lagPort struct {
	obj *snappipb.LagPort
}

func NewLagPort() LagPort {
	obj := lagPort{obj: &snappipb.LagPort{}}
	obj.setDefault()
	return &obj
}

func (obj *lagPort) Msg() *snappipb.LagPort {
	return obj.obj
}

func (obj *lagPort) SetMsg(msg *snappipb.LagPort) LagPort {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *lagPort) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *lagPort) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *lagPort) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *lagPort) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagPort) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *lagPort) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type LagPort interface {
	Msg() *snappipb.LagPort
	SetMsg(*snappipb.LagPort) LagPort
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PortName() string
	SetPortName(value string) LagPort
	Protocol() LagProtocol
	SetProtocol(value LagProtocol) LagPort
	Ethernet() DeviceEthernetBase
	SetEthernet(value DeviceEthernetBase) LagPort
}

// PortName returns a string
//  The name of a port object that will be part of the LAG.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *lagPort) PortName() string {

	return obj.obj.PortName
}

// SetPortName sets the string value in the LagPort object
//  The name of a port object that will be part of the LAG.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *lagPort) SetPortName(value string) LagPort {
	obj.obj.PortName = value

	return obj
}

// Protocol returns a LagProtocol
//  description is TBD
func (obj *lagPort) Protocol() LagProtocol {
	if obj.obj.Protocol == nil {
		obj.obj.Protocol = NewLagProtocol().Msg()
	}
	return &lagProtocol{obj: obj.obj.Protocol}
}

// SetProtocol sets the LagProtocol value in the LagPort object
//  description is TBD
func (obj *lagPort) SetProtocol(value LagProtocol) LagPort {
	obj.Protocol().SetMsg(value.Msg())

	return obj
}

// Ethernet returns a DeviceEthernetBase
//  description is TBD
func (obj *lagPort) Ethernet() DeviceEthernetBase {
	if obj.obj.Ethernet == nil {
		obj.obj.Ethernet = NewDeviceEthernetBase().Msg()
	}
	return &deviceEthernetBase{obj: obj.obj.Ethernet}
}

// SetEthernet sets the DeviceEthernetBase value in the LagPort object
//  description is TBD
func (obj *lagPort) SetEthernet(value DeviceEthernetBase) LagPort {
	obj.Ethernet().SetMsg(value.Msg())

	return obj
}

func (obj *lagPort) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// PortName required
	if obj.obj.PortName == "" {
		validation = append(validation, "PortName is required field on interface LagPort")
	}

	if obj.obj.Protocol != nil {
		obj.Protocol().validateObj(set_default)
	} else {
		validation = append(validation, "Protocol is required field on interface LagPort")
	}

	if obj.obj.Ethernet != nil {
		obj.Ethernet().validateObj(set_default)
	} else {
		validation = append(validation, "Ethernet is required field on interface LagPort")
	}

}

func (obj *lagPort) setDefault() {

}

type layer1AutoNegotiation struct {
	obj *snappipb.Layer1AutoNegotiation
}

func NewLayer1AutoNegotiation() Layer1AutoNegotiation {
	obj := layer1AutoNegotiation{obj: &snappipb.Layer1AutoNegotiation{}}
	obj.setDefault()
	return &obj
}

func (obj *layer1AutoNegotiation) Msg() *snappipb.Layer1AutoNegotiation {
	return obj.obj
}

func (obj *layer1AutoNegotiation) SetMsg(msg *snappipb.Layer1AutoNegotiation) Layer1AutoNegotiation {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *layer1AutoNegotiation) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *layer1AutoNegotiation) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *layer1AutoNegotiation) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1AutoNegotiation) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *layer1AutoNegotiation) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1AutoNegotiation) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *layer1AutoNegotiation) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Layer1AutoNegotiation interface {
	Msg() *snappipb.Layer1AutoNegotiation
	SetMsg(*snappipb.Layer1AutoNegotiation) Layer1AutoNegotiation
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Advertise1000Mbps() bool
	SetAdvertise1000Mbps(value bool) Layer1AutoNegotiation
	HasAdvertise1000Mbps() bool
	Advertise100FdMbps() bool
	SetAdvertise100FdMbps(value bool) Layer1AutoNegotiation
	HasAdvertise100FdMbps() bool
	Advertise100HdMbps() bool
	SetAdvertise100HdMbps(value bool) Layer1AutoNegotiation
	HasAdvertise100HdMbps() bool
	Advertise10FdMbps() bool
	SetAdvertise10FdMbps(value bool) Layer1AutoNegotiation
	HasAdvertise10FdMbps() bool
	Advertise10HdMbps() bool
	SetAdvertise10HdMbps(value bool) Layer1AutoNegotiation
	HasAdvertise10HdMbps() bool
	LinkTraining() bool
	SetLinkTraining(value bool) Layer1AutoNegotiation
	HasLinkTraining() bool
	RsFec() bool
	SetRsFec(value bool) Layer1AutoNegotiation
	HasRsFec() bool
}

// Advertise1000Mbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) Advertise1000Mbps() bool {

	if obj.obj.Advertise_1000Mbps == nil {
		*obj.obj.Advertise_1000Mbps = true
	}

	return *obj.obj.Advertise_1000Mbps

}

// Advertise1000Mbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) HasAdvertise1000Mbps() bool {
	return obj.obj.Advertise_1000Mbps != nil
}

// SetAdvertise1000Mbps sets the bool value in the Layer1AutoNegotiation object
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) SetAdvertise1000Mbps(value bool) Layer1AutoNegotiation {
	obj.obj.Advertise_1000Mbps = &value

	return obj
}

// Advertise100FdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) Advertise100FdMbps() bool {

	if obj.obj.Advertise_100FdMbps == nil {
		*obj.obj.Advertise_100FdMbps = true
	}

	return *obj.obj.Advertise_100FdMbps

}

// Advertise100FdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) HasAdvertise100FdMbps() bool {
	return obj.obj.Advertise_100FdMbps != nil
}

// SetAdvertise100FdMbps sets the bool value in the Layer1AutoNegotiation object
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) SetAdvertise100FdMbps(value bool) Layer1AutoNegotiation {
	obj.obj.Advertise_100FdMbps = &value

	return obj
}

// Advertise100HdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) Advertise100HdMbps() bool {

	if obj.obj.Advertise_100HdMbps == nil {
		*obj.obj.Advertise_100HdMbps = true
	}

	return *obj.obj.Advertise_100HdMbps

}

// Advertise100HdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) HasAdvertise100HdMbps() bool {
	return obj.obj.Advertise_100HdMbps != nil
}

// SetAdvertise100HdMbps sets the bool value in the Layer1AutoNegotiation object
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) SetAdvertise100HdMbps(value bool) Layer1AutoNegotiation {
	obj.obj.Advertise_100HdMbps = &value

	return obj
}

// Advertise10FdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) Advertise10FdMbps() bool {

	if obj.obj.Advertise_10FdMbps == nil {
		*obj.obj.Advertise_10FdMbps = true
	}

	return *obj.obj.Advertise_10FdMbps

}

// Advertise10FdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) HasAdvertise10FdMbps() bool {
	return obj.obj.Advertise_10FdMbps != nil
}

// SetAdvertise10FdMbps sets the bool value in the Layer1AutoNegotiation object
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) SetAdvertise10FdMbps(value bool) Layer1AutoNegotiation {
	obj.obj.Advertise_10FdMbps = &value

	return obj
}

// Advertise10HdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) Advertise10HdMbps() bool {

	if obj.obj.Advertise_10HdMbps == nil {
		*obj.obj.Advertise_10HdMbps = true
	}

	return *obj.obj.Advertise_10HdMbps

}

// Advertise10HdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) HasAdvertise10HdMbps() bool {
	return obj.obj.Advertise_10HdMbps != nil
}

// SetAdvertise10HdMbps sets the bool value in the Layer1AutoNegotiation object
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) SetAdvertise10HdMbps(value bool) Layer1AutoNegotiation {
	obj.obj.Advertise_10HdMbps = &value

	return obj
}

// LinkTraining returns a bool
//  Enable/disable gigabit ethernet link training.
func (obj *layer1AutoNegotiation) LinkTraining() bool {

	if obj.obj.LinkTraining == nil {
		*obj.obj.LinkTraining = false
	}

	return *obj.obj.LinkTraining

}

// LinkTraining returns a bool
//  Enable/disable gigabit ethernet link training.
func (obj *layer1AutoNegotiation) HasLinkTraining() bool {
	return obj.obj.LinkTraining != nil
}

// SetLinkTraining sets the bool value in the Layer1AutoNegotiation object
//  Enable/disable gigabit ethernet link training.
func (obj *layer1AutoNegotiation) SetLinkTraining(value bool) Layer1AutoNegotiation {
	obj.obj.LinkTraining = &value

	return obj
}

// RsFec returns a bool
//  Enable/disable gigabit ethernet reed solomon forward error correction (RS FEC).
func (obj *layer1AutoNegotiation) RsFec() bool {

	if obj.obj.RsFec == nil {
		*obj.obj.RsFec = false
	}

	return *obj.obj.RsFec

}

// RsFec returns a bool
//  Enable/disable gigabit ethernet reed solomon forward error correction (RS FEC).
func (obj *layer1AutoNegotiation) HasRsFec() bool {
	return obj.obj.RsFec != nil
}

// SetRsFec sets the bool value in the Layer1AutoNegotiation object
//  Enable/disable gigabit ethernet reed solomon forward error correction (RS FEC).
func (obj *layer1AutoNegotiation) SetRsFec(value bool) Layer1AutoNegotiation {
	obj.obj.RsFec = &value

	return obj
}

func (obj *layer1AutoNegotiation) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *layer1AutoNegotiation) setDefault() {
	if obj.obj.Advertise_1000Mbps == nil {
		obj.SetAdvertise1000Mbps(true)
	}
	if obj.obj.Advertise_100FdMbps == nil {
		obj.SetAdvertise100FdMbps(true)
	}
	if obj.obj.Advertise_100HdMbps == nil {
		obj.SetAdvertise100HdMbps(true)
	}
	if obj.obj.Advertise_10FdMbps == nil {
		obj.SetAdvertise10FdMbps(true)
	}
	if obj.obj.Advertise_10HdMbps == nil {
		obj.SetAdvertise10HdMbps(true)
	}
	if obj.obj.LinkTraining == nil {
		obj.SetLinkTraining(false)
	}
	if obj.obj.RsFec == nil {
		obj.SetRsFec(false)
	}

}

type layer1FlowControl struct {
	obj *snappipb.Layer1FlowControl
}

func NewLayer1FlowControl() Layer1FlowControl {
	obj := layer1FlowControl{obj: &snappipb.Layer1FlowControl{}}
	obj.setDefault()
	return &obj
}

func (obj *layer1FlowControl) Msg() *snappipb.Layer1FlowControl {
	return obj.obj
}

func (obj *layer1FlowControl) SetMsg(msg *snappipb.Layer1FlowControl) Layer1FlowControl {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *layer1FlowControl) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *layer1FlowControl) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *layer1FlowControl) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1FlowControl) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *layer1FlowControl) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1FlowControl) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *layer1FlowControl) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Layer1FlowControl interface {
	Msg() *snappipb.Layer1FlowControl
	SetMsg(*snappipb.Layer1FlowControl) Layer1FlowControl
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	DirectedAddress() string
	SetDirectedAddress(value string) Layer1FlowControl
	HasDirectedAddress() bool
	Choice() Layer1FlowControlChoiceEnum
	SetChoice(value Layer1FlowControlChoiceEnum) Layer1FlowControl
	HasChoice() bool
	Ieee8021Qbb() Layer1Ieee8021Qbb
	SetIeee8021Qbb(value Layer1Ieee8021Qbb) Layer1FlowControl
	HasIeee8021Qbb() bool
	Ieee8023X() Layer1Ieee8023X
	SetIeee8023X(value Layer1Ieee8023X) Layer1FlowControl
	HasIeee8023X() bool
}

// DirectedAddress returns a string
//  The 48bit mac address that the layer1 port names will listen on
//  for a directed pause.
func (obj *layer1FlowControl) DirectedAddress() string {

	if obj.obj.DirectedAddress == nil {
		*obj.obj.DirectedAddress = "01:80:C2:00:00:01"
	}

	return *obj.obj.DirectedAddress

}

// DirectedAddress returns a string
//  The 48bit mac address that the layer1 port names will listen on
//  for a directed pause.
func (obj *layer1FlowControl) HasDirectedAddress() bool {
	return obj.obj.DirectedAddress != nil
}

// SetDirectedAddress sets the string value in the Layer1FlowControl object
//  The 48bit mac address that the layer1 port names will listen on
//  for a directed pause.
func (obj *layer1FlowControl) SetDirectedAddress(value string) Layer1FlowControl {
	obj.obj.DirectedAddress = &value

	return obj
}

type Layer1FlowControlChoiceEnum string

var Layer1FlowControlChoice = struct {
	IEEE_802_1QBB Layer1FlowControlChoiceEnum
	IEEE_802_3X   Layer1FlowControlChoiceEnum
}{
	IEEE_802_1QBB: Layer1FlowControlChoiceEnum("ieee_802_1qbb"),
	IEEE_802_3X:   Layer1FlowControlChoiceEnum("ieee_802_3x"),
}

func (obj *layer1FlowControl) Choice() Layer1FlowControlChoiceEnum {
	return Layer1FlowControlChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  The type of priority flow control.
func (obj *layer1FlowControl) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *layer1FlowControl) SetChoice(value Layer1FlowControlChoiceEnum) Layer1FlowControl {
	intValue, ok := snappipb.Layer1FlowControl_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on Layer1FlowControlChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.Layer1FlowControl_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "ieee_802_1qbb" {
		obj.obj.Ieee_802_1Qbb = nil
	}

	if string(value) != "ieee_802_3x" {
		obj.obj.Ieee_802_3X = nil
	}

	return obj
}

// Ieee8021Qbb returns a Layer1Ieee8021Qbb
//  description is TBD
func (obj *layer1FlowControl) Ieee8021Qbb() Layer1Ieee8021Qbb {
	obj.SetChoice(Layer1FlowControlChoice.IEEE_802_1QBB)
	if obj.obj.Ieee_802_1Qbb == nil {
		obj.obj.Ieee_802_1Qbb = NewLayer1Ieee8021Qbb().Msg()
	}
	return &layer1Ieee8021Qbb{obj: obj.obj.Ieee_802_1Qbb}
}

// Ieee8021Qbb returns a Layer1Ieee8021Qbb
//  description is TBD
func (obj *layer1FlowControl) HasIeee8021Qbb() bool {
	return obj.obj.Ieee_802_1Qbb != nil
}

// SetIeee8021Qbb sets the Layer1Ieee8021Qbb value in the Layer1FlowControl object
//  description is TBD
func (obj *layer1FlowControl) SetIeee8021Qbb(value Layer1Ieee8021Qbb) Layer1FlowControl {
	obj.Ieee8021Qbb().SetMsg(value.Msg())
	obj.SetChoice(Layer1FlowControlChoice.IEEE_802_1QBB)
	return obj
}

// Ieee8023X returns a Layer1Ieee8023X
//  description is TBD
func (obj *layer1FlowControl) Ieee8023X() Layer1Ieee8023X {
	obj.SetChoice(Layer1FlowControlChoice.IEEE_802_3X)
	if obj.obj.Ieee_802_3X == nil {
		obj.obj.Ieee_802_3X = NewLayer1Ieee8023X().Msg()
	}
	return &layer1Ieee8023X{obj: obj.obj.Ieee_802_3X}
}

// Ieee8023X returns a Layer1Ieee8023X
//  description is TBD
func (obj *layer1FlowControl) HasIeee8023X() bool {
	return obj.obj.Ieee_802_3X != nil
}

// SetIeee8023X sets the Layer1Ieee8023X value in the Layer1FlowControl object
//  description is TBD
func (obj *layer1FlowControl) SetIeee8023X(value Layer1Ieee8023X) Layer1FlowControl {
	obj.Ieee8023X().SetMsg(value.Msg())
	obj.SetChoice(Layer1FlowControlChoice.IEEE_802_3X)
	return obj
}

func (obj *layer1FlowControl) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.DirectedAddress != nil {
		err := validateMac(obj.DirectedAddress())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on DirectedAddress Layer1FlowControl"))
		}
	}

	if obj.obj.Ieee_802_1Qbb != nil {
		obj.Ieee8021Qbb().validateObj(set_default)
	}

	if obj.obj.Ieee_802_3X != nil {
		obj.Ieee8023X().validateObj(set_default)
	}
}

func (obj *layer1FlowControl) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(Layer1FlowControlChoice.IEEE_802_1QBB)

	}
	if obj.obj.DirectedAddress == nil {
		obj.SetDirectedAddress("01:80:C2:00:00:01")
	}

}

type captureFilter struct {
	obj *snappipb.CaptureFilter
}

func NewCaptureFilter() CaptureFilter {
	obj := captureFilter{obj: &snappipb.CaptureFilter{}}
	obj.setDefault()
	return &obj
}

func (obj *captureFilter) Msg() *snappipb.CaptureFilter {
	return obj.obj
}

func (obj *captureFilter) SetMsg(msg *snappipb.CaptureFilter) CaptureFilter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureFilter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *captureFilter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureFilter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureFilter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureFilter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureFilter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *captureFilter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type CaptureFilter interface {
	Msg() *snappipb.CaptureFilter
	SetMsg(*snappipb.CaptureFilter) CaptureFilter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() CaptureFilterChoiceEnum
	SetChoice(value CaptureFilterChoiceEnum) CaptureFilter
	HasChoice() bool
	Custom() CaptureCustom
	SetCustom(value CaptureCustom) CaptureFilter
	HasCustom() bool
	Ethernet() CaptureEthernet
	SetEthernet(value CaptureEthernet) CaptureFilter
	HasEthernet() bool
	Vlan() CaptureVlan
	SetVlan(value CaptureVlan) CaptureFilter
	HasVlan() bool
	Ipv4() CaptureIpv4
	SetIpv4(value CaptureIpv4) CaptureFilter
	HasIpv4() bool
	Ipv6() CaptureIpv6
	SetIpv6(value CaptureIpv6) CaptureFilter
	HasIpv6() bool
}

type CaptureFilterChoiceEnum string

var CaptureFilterChoice = struct {
	CUSTOM   CaptureFilterChoiceEnum
	ETHERNET CaptureFilterChoiceEnum
	VLAN     CaptureFilterChoiceEnum
	IPV4     CaptureFilterChoiceEnum
	IPV6     CaptureFilterChoiceEnum
}{
	CUSTOM:   CaptureFilterChoiceEnum("custom"),
	ETHERNET: CaptureFilterChoiceEnum("ethernet"),
	VLAN:     CaptureFilterChoiceEnum("vlan"),
	IPV4:     CaptureFilterChoiceEnum("ipv4"),
	IPV6:     CaptureFilterChoiceEnum("ipv6"),
}

func (obj *captureFilter) Choice() CaptureFilterChoiceEnum {
	return CaptureFilterChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  The type of capture filter.
func (obj *captureFilter) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *captureFilter) SetChoice(value CaptureFilterChoiceEnum) CaptureFilter {
	intValue, ok := snappipb.CaptureFilter_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on CaptureFilterChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.CaptureFilter_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "custom" {
		obj.obj.Custom = nil
	}

	if string(value) != "ethernet" {
		obj.obj.Ethernet = nil
	}

	if string(value) != "vlan" {
		obj.obj.Vlan = nil
	}

	if string(value) != "ipv4" {
		obj.obj.Ipv4 = nil
	}

	if string(value) != "ipv6" {
		obj.obj.Ipv6 = nil
	}

	return obj
}

// Custom returns a CaptureCustom
//  Offset from last filter in the list. If no filters are present it is offset from position 0. Multiple custom filters can be present, the length of each custom filter is the length of the value being filtered.
func (obj *captureFilter) Custom() CaptureCustom {
	obj.SetChoice(CaptureFilterChoice.CUSTOM)
	if obj.obj.Custom == nil {
		obj.obj.Custom = NewCaptureCustom().Msg()
	}
	return &captureCustom{obj: obj.obj.Custom}
}

// Custom returns a CaptureCustom
//  Offset from last filter in the list. If no filters are present it is offset from position 0. Multiple custom filters can be present, the length of each custom filter is the length of the value being filtered.
func (obj *captureFilter) HasCustom() bool {
	return obj.obj.Custom != nil
}

// SetCustom sets the CaptureCustom value in the CaptureFilter object
//  Offset from last filter in the list. If no filters are present it is offset from position 0. Multiple custom filters can be present, the length of each custom filter is the length of the value being filtered.
func (obj *captureFilter) SetCustom(value CaptureCustom) CaptureFilter {
	obj.Custom().SetMsg(value.Msg())
	obj.SetChoice(CaptureFilterChoice.CUSTOM)
	return obj
}

// Ethernet returns a CaptureEthernet
//  description is TBD
func (obj *captureFilter) Ethernet() CaptureEthernet {
	obj.SetChoice(CaptureFilterChoice.ETHERNET)
	if obj.obj.Ethernet == nil {
		obj.obj.Ethernet = NewCaptureEthernet().Msg()
	}
	return &captureEthernet{obj: obj.obj.Ethernet}
}

// Ethernet returns a CaptureEthernet
//  description is TBD
func (obj *captureFilter) HasEthernet() bool {
	return obj.obj.Ethernet != nil
}

// SetEthernet sets the CaptureEthernet value in the CaptureFilter object
//  description is TBD
func (obj *captureFilter) SetEthernet(value CaptureEthernet) CaptureFilter {
	obj.Ethernet().SetMsg(value.Msg())
	obj.SetChoice(CaptureFilterChoice.ETHERNET)
	return obj
}

// Vlan returns a CaptureVlan
//  description is TBD
func (obj *captureFilter) Vlan() CaptureVlan {
	obj.SetChoice(CaptureFilterChoice.VLAN)
	if obj.obj.Vlan == nil {
		obj.obj.Vlan = NewCaptureVlan().Msg()
	}
	return &captureVlan{obj: obj.obj.Vlan}
}

// Vlan returns a CaptureVlan
//  description is TBD
func (obj *captureFilter) HasVlan() bool {
	return obj.obj.Vlan != nil
}

// SetVlan sets the CaptureVlan value in the CaptureFilter object
//  description is TBD
func (obj *captureFilter) SetVlan(value CaptureVlan) CaptureFilter {
	obj.Vlan().SetMsg(value.Msg())
	obj.SetChoice(CaptureFilterChoice.VLAN)
	return obj
}

// Ipv4 returns a CaptureIpv4
//  description is TBD
func (obj *captureFilter) Ipv4() CaptureIpv4 {
	obj.SetChoice(CaptureFilterChoice.IPV4)
	if obj.obj.Ipv4 == nil {
		obj.obj.Ipv4 = NewCaptureIpv4().Msg()
	}
	return &captureIpv4{obj: obj.obj.Ipv4}
}

// Ipv4 returns a CaptureIpv4
//  description is TBD
func (obj *captureFilter) HasIpv4() bool {
	return obj.obj.Ipv4 != nil
}

// SetIpv4 sets the CaptureIpv4 value in the CaptureFilter object
//  description is TBD
func (obj *captureFilter) SetIpv4(value CaptureIpv4) CaptureFilter {
	obj.Ipv4().SetMsg(value.Msg())
	obj.SetChoice(CaptureFilterChoice.IPV4)
	return obj
}

// Ipv6 returns a CaptureIpv6
//  description is TBD
func (obj *captureFilter) Ipv6() CaptureIpv6 {
	obj.SetChoice(CaptureFilterChoice.IPV6)
	if obj.obj.Ipv6 == nil {
		obj.obj.Ipv6 = NewCaptureIpv6().Msg()
	}
	return &captureIpv6{obj: obj.obj.Ipv6}
}

// Ipv6 returns a CaptureIpv6
//  description is TBD
func (obj *captureFilter) HasIpv6() bool {
	return obj.obj.Ipv6 != nil
}

// SetIpv6 sets the CaptureIpv6 value in the CaptureFilter object
//  description is TBD
func (obj *captureFilter) SetIpv6(value CaptureIpv6) CaptureFilter {
	obj.Ipv6().SetMsg(value.Msg())
	obj.SetChoice(CaptureFilterChoice.IPV6)
	return obj
}

func (obj *captureFilter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Custom != nil {
		obj.Custom().validateObj(set_default)
	}

	if obj.obj.Ethernet != nil {
		obj.Ethernet().validateObj(set_default)
	}

	if obj.obj.Vlan != nil {
		obj.Vlan().validateObj(set_default)
	}

	if obj.obj.Ipv4 != nil {
		obj.Ipv4().validateObj(set_default)
	}

	if obj.obj.Ipv6 != nil {
		obj.Ipv6().validateObj(set_default)
	}
}

func (obj *captureFilter) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(CaptureFilterChoice.CUSTOM)
		obj.Custom()
	}

}

type deviceEthernet struct {
	obj *snappipb.DeviceEthernet
}

func NewDeviceEthernet() DeviceEthernet {
	obj := deviceEthernet{obj: &snappipb.DeviceEthernet{}}
	obj.setDefault()
	return &obj
}

func (obj *deviceEthernet) Msg() *snappipb.DeviceEthernet {
	return obj.obj
}

func (obj *deviceEthernet) SetMsg(msg *snappipb.DeviceEthernet) DeviceEthernet {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *deviceEthernet) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *deviceEthernet) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceEthernet) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceEthernet) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceEthernet) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceEthernet) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *deviceEthernet) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type DeviceEthernet interface {
	Msg() *snappipb.DeviceEthernet
	SetMsg(*snappipb.DeviceEthernet) DeviceEthernet
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PortName() string
	SetPortName(value string) DeviceEthernet
	Ipv4Addresses() DeviceEthernetDeviceIpv4Iter
	Ipv6Addresses() DeviceEthernetDeviceIpv6Iter
	Mac() string
	SetMac(value string) DeviceEthernet
	Mtu() int32
	SetMtu(value int32) DeviceEthernet
	HasMtu() bool
	Vlans() DeviceEthernetDeviceVlanIter
	Name() string
	SetName(value string) DeviceEthernet
}

// PortName returns a string
//  The unique name of a Port or a LAG that will emulate this interface.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *deviceEthernet) PortName() string {

	return obj.obj.PortName
}

// SetPortName sets the string value in the DeviceEthernet object
//  The unique name of a Port or a LAG that will emulate this interface.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *deviceEthernet) SetPortName(value string) DeviceEthernet {
	obj.obj.PortName = value

	return obj
}

// Ipv4Addresses returns a []DeviceIpv4
//  List of IPv4 addresses and their gateways.
func (obj *deviceEthernet) Ipv4Addresses() DeviceEthernetDeviceIpv4Iter {
	if obj.obj.Ipv4Addresses == nil {
		obj.obj.Ipv4Addresses = []*snappipb.DeviceIpv4{}
	}
	return &deviceEthernetDeviceIpv4Iter{obj: obj}
}

type deviceEthernetDeviceIpv4Iter struct {
	obj *deviceEthernet
}

type DeviceEthernetDeviceIpv4Iter interface {
	Add() DeviceIpv4
	Items() []DeviceIpv4
}

func (obj *deviceEthernetDeviceIpv4Iter) Add() DeviceIpv4 {
	newObj := &snappipb.DeviceIpv4{}
	obj.obj.obj.Ipv4Addresses = append(obj.obj.obj.Ipv4Addresses, newObj)
	newLibObj := &deviceIpv4{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceEthernetDeviceIpv4Iter) Items() []DeviceIpv4 {
	slice := []DeviceIpv4{}
	for _, item := range obj.obj.obj.Ipv4Addresses {
		slice = append(slice, &deviceIpv4{obj: item})
	}
	return slice
}

// Ipv6Addresses returns a []DeviceIpv6
//  List of global IPv6 addresses and their gateways.
//  The Link Local IPv6 address will be automatically generated.
func (obj *deviceEthernet) Ipv6Addresses() DeviceEthernetDeviceIpv6Iter {
	if obj.obj.Ipv6Addresses == nil {
		obj.obj.Ipv6Addresses = []*snappipb.DeviceIpv6{}
	}
	return &deviceEthernetDeviceIpv6Iter{obj: obj}
}

type deviceEthernetDeviceIpv6Iter struct {
	obj *deviceEthernet
}

type DeviceEthernetDeviceIpv6Iter interface {
	Add() DeviceIpv6
	Items() []DeviceIpv6
}

func (obj *deviceEthernetDeviceIpv6Iter) Add() DeviceIpv6 {
	newObj := &snappipb.DeviceIpv6{}
	obj.obj.obj.Ipv6Addresses = append(obj.obj.obj.Ipv6Addresses, newObj)
	newLibObj := &deviceIpv6{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceEthernetDeviceIpv6Iter) Items() []DeviceIpv6 {
	slice := []DeviceIpv6{}
	for _, item := range obj.obj.obj.Ipv6Addresses {
		slice = append(slice, &deviceIpv6{obj: item})
	}
	return slice
}

// Mac returns a string
//  Media Access Control address.
func (obj *deviceEthernet) Mac() string {

	return obj.obj.Mac
}

// SetMac sets the string value in the DeviceEthernet object
//  Media Access Control address.
func (obj *deviceEthernet) SetMac(value string) DeviceEthernet {
	obj.obj.Mac = value

	return obj
}

// Mtu returns a int32
//  Maximum Transmission Unit.
func (obj *deviceEthernet) Mtu() int32 {

	if obj.obj.Mtu == nil {
		*obj.obj.Mtu = 1500
	}

	return *obj.obj.Mtu

}

// Mtu returns a int32
//  Maximum Transmission Unit.
func (obj *deviceEthernet) HasMtu() bool {
	return obj.obj.Mtu != nil
}

// SetMtu sets the int32 value in the DeviceEthernet object
//  Maximum Transmission Unit.
func (obj *deviceEthernet) SetMtu(value int32) DeviceEthernet {
	obj.obj.Mtu = &value

	return obj
}

// Vlans returns a []DeviceVlan
//  List of VLANs
func (obj *deviceEthernet) Vlans() DeviceEthernetDeviceVlanIter {
	if obj.obj.Vlans == nil {
		obj.obj.Vlans = []*snappipb.DeviceVlan{}
	}
	return &deviceEthernetDeviceVlanIter{obj: obj}
}

type deviceEthernetDeviceVlanIter struct {
	obj *deviceEthernet
}

type DeviceEthernetDeviceVlanIter interface {
	Add() DeviceVlan
	Items() []DeviceVlan
}

func (obj *deviceEthernetDeviceVlanIter) Add() DeviceVlan {
	newObj := &snappipb.DeviceVlan{}
	obj.obj.obj.Vlans = append(obj.obj.obj.Vlans, newObj)
	newLibObj := &deviceVlan{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceEthernetDeviceVlanIter) Items() []DeviceVlan {
	slice := []DeviceVlan{}
	for _, item := range obj.obj.obj.Vlans {
		slice = append(slice, &deviceVlan{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceEthernet) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the DeviceEthernet object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceEthernet) SetName(value string) DeviceEthernet {
	obj.obj.Name = value

	return obj
}

func (obj *deviceEthernet) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// PortName required
	if obj.obj.PortName == "" {
		validation = append(validation, "PortName is required field on interface DeviceEthernet")
	}
	if obj.obj.Ipv4Addresses != nil {
		for _, item := range obj.Ipv4Addresses().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Ipv6Addresses != nil {
		for _, item := range obj.Ipv6Addresses().Items() {
			item.validateObj(set_default)
		}
	}

	// Mac required
	if obj.obj.Mac == "" {
		validation = append(validation, "Mac is required field on interface DeviceEthernet")
	} else {
		err := validateMac(obj.Mac())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Mac DeviceEthernet"))
		}
	}

	if obj.obj.Mtu != nil {
		if *obj.obj.Mtu < 0 || *obj.obj.Mtu > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= DeviceEthernet.Mtu <= 65535 but Got %d", *obj.obj.Mtu))
		}

	}

	if obj.obj.Vlans != nil {
		for _, item := range obj.Vlans().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface DeviceEthernet")
	}
}

func (obj *deviceEthernet) setDefault() {
	if obj.obj.Mtu == nil {
		obj.SetMtu(1500)
	}

}

type deviceIpv4Loopback struct {
	obj *snappipb.DeviceIpv4Loopback
}

func NewDeviceIpv4Loopback() DeviceIpv4Loopback {
	obj := deviceIpv4Loopback{obj: &snappipb.DeviceIpv4Loopback{}}
	obj.setDefault()
	return &obj
}

func (obj *deviceIpv4Loopback) Msg() *snappipb.DeviceIpv4Loopback {
	return obj.obj
}

func (obj *deviceIpv4Loopback) SetMsg(msg *snappipb.DeviceIpv4Loopback) DeviceIpv4Loopback {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *deviceIpv4Loopback) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *deviceIpv4Loopback) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIpv4Loopback) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv4Loopback) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIpv4Loopback) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv4Loopback) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *deviceIpv4Loopback) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type DeviceIpv4Loopback interface {
	Msg() *snappipb.DeviceIpv4Loopback
	SetMsg(*snappipb.DeviceIpv4Loopback) DeviceIpv4Loopback
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	EthName() string
	SetEthName(value string) DeviceIpv4Loopback
	Address() string
	SetAddress(value string) DeviceIpv4Loopback
	HasAddress() bool
	Name() string
	SetName(value string) DeviceIpv4Loopback
}

// EthName returns a string
//  The unique name of the Ethernet interface behind which this Loopback  interface will be created.
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
func (obj *deviceIpv4Loopback) EthName() string {

	return obj.obj.EthName
}

// SetEthName sets the string value in the DeviceIpv4Loopback object
//  The unique name of the Ethernet interface behind which this Loopback  interface will be created.
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
func (obj *deviceIpv4Loopback) SetEthName(value string) DeviceIpv4Loopback {
	obj.obj.EthName = value

	return obj
}

// Address returns a string
//  The IPv4 Loopback address with prefix length of 32.
func (obj *deviceIpv4Loopback) Address() string {

	if obj.obj.Address == nil {
		*obj.obj.Address = "0.0.0.0"
	}

	return *obj.obj.Address

}

// Address returns a string
//  The IPv4 Loopback address with prefix length of 32.
func (obj *deviceIpv4Loopback) HasAddress() bool {
	return obj.obj.Address != nil
}

// SetAddress sets the string value in the DeviceIpv4Loopback object
//  The IPv4 Loopback address with prefix length of 32.
func (obj *deviceIpv4Loopback) SetAddress(value string) DeviceIpv4Loopback {
	obj.obj.Address = &value

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv4Loopback) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the DeviceIpv4Loopback object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv4Loopback) SetName(value string) DeviceIpv4Loopback {
	obj.obj.Name = value

	return obj
}

func (obj *deviceIpv4Loopback) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// EthName required
	if obj.obj.EthName == "" {
		validation = append(validation, "EthName is required field on interface DeviceIpv4Loopback")
	}

	if obj.obj.Address != nil {
		err := validateIpv4(obj.Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Address DeviceIpv4Loopback"))
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface DeviceIpv4Loopback")
	}
}

func (obj *deviceIpv4Loopback) setDefault() {
	if obj.obj.Address == nil {
		obj.SetAddress("0.0.0.0")
	}

}

type deviceIpv6Loopback struct {
	obj *snappipb.DeviceIpv6Loopback
}

func NewDeviceIpv6Loopback() DeviceIpv6Loopback {
	obj := deviceIpv6Loopback{obj: &snappipb.DeviceIpv6Loopback{}}
	obj.setDefault()
	return &obj
}

func (obj *deviceIpv6Loopback) Msg() *snappipb.DeviceIpv6Loopback {
	return obj.obj
}

func (obj *deviceIpv6Loopback) SetMsg(msg *snappipb.DeviceIpv6Loopback) DeviceIpv6Loopback {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *deviceIpv6Loopback) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *deviceIpv6Loopback) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIpv6Loopback) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv6Loopback) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIpv6Loopback) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv6Loopback) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *deviceIpv6Loopback) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type DeviceIpv6Loopback interface {
	Msg() *snappipb.DeviceIpv6Loopback
	SetMsg(*snappipb.DeviceIpv6Loopback) DeviceIpv6Loopback
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	EthName() string
	SetEthName(value string) DeviceIpv6Loopback
	Address() string
	SetAddress(value string) DeviceIpv6Loopback
	HasAddress() bool
	Name() string
	SetName(value string) DeviceIpv6Loopback
}

// EthName returns a string
//  The unique name of the Ethernet interface behind which this Loopback
//  interface will be created.
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
func (obj *deviceIpv6Loopback) EthName() string {

	return obj.obj.EthName
}

// SetEthName sets the string value in the DeviceIpv6Loopback object
//  The unique name of the Ethernet interface behind which this Loopback
//  interface will be created.
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
func (obj *deviceIpv6Loopback) SetEthName(value string) DeviceIpv6Loopback {
	obj.obj.EthName = value

	return obj
}

// Address returns a string
//  The IPv6 Loopback address with prefix length of 128.
func (obj *deviceIpv6Loopback) Address() string {

	if obj.obj.Address == nil {
		*obj.obj.Address = "::0"
	}

	return *obj.obj.Address

}

// Address returns a string
//  The IPv6 Loopback address with prefix length of 128.
func (obj *deviceIpv6Loopback) HasAddress() bool {
	return obj.obj.Address != nil
}

// SetAddress sets the string value in the DeviceIpv6Loopback object
//  The IPv6 Loopback address with prefix length of 128.
func (obj *deviceIpv6Loopback) SetAddress(value string) DeviceIpv6Loopback {
	obj.obj.Address = &value

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv6Loopback) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the DeviceIpv6Loopback object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv6Loopback) SetName(value string) DeviceIpv6Loopback {
	obj.obj.Name = value

	return obj
}

func (obj *deviceIpv6Loopback) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// EthName required
	if obj.obj.EthName == "" {
		validation = append(validation, "EthName is required field on interface DeviceIpv6Loopback")
	}

	if obj.obj.Address != nil {
		err := validateIpv6(obj.Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Address DeviceIpv6Loopback"))
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface DeviceIpv6Loopback")
	}
}

func (obj *deviceIpv6Loopback) setDefault() {
	if obj.obj.Address == nil {
		obj.SetAddress("::0")
	}

}

type deviceIsisRouter struct {
	obj *snappipb.DeviceIsisRouter
}

func NewDeviceIsisRouter() DeviceIsisRouter {
	obj := deviceIsisRouter{obj: &snappipb.DeviceIsisRouter{}}
	obj.setDefault()
	return &obj
}

func (obj *deviceIsisRouter) Msg() *snappipb.DeviceIsisRouter {
	return obj.obj
}

func (obj *deviceIsisRouter) SetMsg(msg *snappipb.DeviceIsisRouter) DeviceIsisRouter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *deviceIsisRouter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *deviceIsisRouter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIsisRouter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIsisRouter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIsisRouter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIsisRouter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *deviceIsisRouter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type DeviceIsisRouter interface {
	Msg() *snappipb.DeviceIsisRouter
	SetMsg(*snappipb.DeviceIsisRouter) DeviceIsisRouter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Instance() DeviceIsisMultiInstance
	SetInstance(value DeviceIsisMultiInstance) DeviceIsisRouter
	HasInstance() bool
	SystemId() string
	SetSystemId(value string) DeviceIsisRouter
	Interfaces() DeviceIsisRouterIsisInterfaceIter
	Basic() IsisBasic
	SetBasic(value IsisBasic) DeviceIsisRouter
	HasBasic() bool
	Advanced() IsisAdvanced
	SetAdvanced(value IsisAdvanced) DeviceIsisRouter
	HasAdvanced() bool
	RouterAuth() IsisAuthentication
	SetRouterAuth(value IsisAuthentication) DeviceIsisRouter
	HasRouterAuth() bool
	V4Routes() DeviceIsisRouterIsisV4RouteRangeIter
	V6Routes() DeviceIsisRouterIsisV6RouteRangeIter
	Name() string
	SetName(value string) DeviceIsisRouter
}

// Instance returns a DeviceIsisMultiInstance
//  This contains the properties of a Multi-Instance-capable routers or MI-RTR. Each router can emulate one ISIS instance at a time.
func (obj *deviceIsisRouter) Instance() DeviceIsisMultiInstance {
	if obj.obj.Instance == nil {
		obj.obj.Instance = NewDeviceIsisMultiInstance().Msg()
	}
	return &deviceIsisMultiInstance{obj: obj.obj.Instance}
}

// Instance returns a DeviceIsisMultiInstance
//  This contains the properties of a Multi-Instance-capable routers or MI-RTR. Each router can emulate one ISIS instance at a time.
func (obj *deviceIsisRouter) HasInstance() bool {
	return obj.obj.Instance != nil
}

// SetInstance sets the DeviceIsisMultiInstance value in the DeviceIsisRouter object
//  This contains the properties of a Multi-Instance-capable routers or MI-RTR. Each router can emulate one ISIS instance at a time.
func (obj *deviceIsisRouter) SetInstance(value DeviceIsisMultiInstance) DeviceIsisRouter {
	obj.Instance().SetMsg(value.Msg())

	return obj
}

// SystemId returns a string
//  The System ID for this emulated ISIS router, e.g. "640100010000".
func (obj *deviceIsisRouter) SystemId() string {

	return obj.obj.SystemId
}

// SetSystemId sets the string value in the DeviceIsisRouter object
//  The System ID for this emulated ISIS router, e.g. "640100010000".
func (obj *deviceIsisRouter) SetSystemId(value string) DeviceIsisRouter {
	obj.obj.SystemId = value

	return obj
}

// Interfaces returns a []IsisInterface
//  List of ISIS interfaces for this router.
func (obj *deviceIsisRouter) Interfaces() DeviceIsisRouterIsisInterfaceIter {
	if obj.obj.Interfaces == nil {
		obj.obj.Interfaces = []*snappipb.IsisInterface{}
	}
	return &deviceIsisRouterIsisInterfaceIter{obj: obj}
}

type deviceIsisRouterIsisInterfaceIter struct {
	obj *deviceIsisRouter
}

type DeviceIsisRouterIsisInterfaceIter interface {
	Add() IsisInterface
	Items() []IsisInterface
}

func (obj *deviceIsisRouterIsisInterfaceIter) Add() IsisInterface {
	newObj := &snappipb.IsisInterface{}
	obj.obj.obj.Interfaces = append(obj.obj.obj.Interfaces, newObj)
	newLibObj := &isisInterface{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceIsisRouterIsisInterfaceIter) Items() []IsisInterface {
	slice := []IsisInterface{}
	for _, item := range obj.obj.obj.Interfaces {
		slice = append(slice, &isisInterface{obj: item})
	}
	return slice
}

// Basic returns a IsisBasic
//  Contains basic properties of an ISIS Router.
func (obj *deviceIsisRouter) Basic() IsisBasic {
	if obj.obj.Basic == nil {
		obj.obj.Basic = NewIsisBasic().Msg()
	}
	return &isisBasic{obj: obj.obj.Basic}
}

// Basic returns a IsisBasic
//  Contains basic properties of an ISIS Router.
func (obj *deviceIsisRouter) HasBasic() bool {
	return obj.obj.Basic != nil
}

// SetBasic sets the IsisBasic value in the DeviceIsisRouter object
//  Contains basic properties of an ISIS Router.
func (obj *deviceIsisRouter) SetBasic(value IsisBasic) DeviceIsisRouter {
	obj.Basic().SetMsg(value.Msg())

	return obj
}

// Advanced returns a IsisAdvanced
//  Contains advance properties of an ISIS Router..
func (obj *deviceIsisRouter) Advanced() IsisAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = NewIsisAdvanced().Msg()
	}
	return &isisAdvanced{obj: obj.obj.Advanced}
}

// Advanced returns a IsisAdvanced
//  Contains advance properties of an ISIS Router..
func (obj *deviceIsisRouter) HasAdvanced() bool {
	return obj.obj.Advanced != nil
}

// SetAdvanced sets the IsisAdvanced value in the DeviceIsisRouter object
//  Contains advance properties of an ISIS Router..
func (obj *deviceIsisRouter) SetAdvanced(value IsisAdvanced) DeviceIsisRouter {
	obj.Advanced().SetMsg(value.Msg())

	return obj
}

// RouterAuth returns a IsisAuthentication
//  ISIS Router authentication properties.
func (obj *deviceIsisRouter) RouterAuth() IsisAuthentication {
	if obj.obj.RouterAuth == nil {
		obj.obj.RouterAuth = NewIsisAuthentication().Msg()
	}
	return &isisAuthentication{obj: obj.obj.RouterAuth}
}

// RouterAuth returns a IsisAuthentication
//  ISIS Router authentication properties.
func (obj *deviceIsisRouter) HasRouterAuth() bool {
	return obj.obj.RouterAuth != nil
}

// SetRouterAuth sets the IsisAuthentication value in the DeviceIsisRouter object
//  ISIS Router authentication properties.
func (obj *deviceIsisRouter) SetRouterAuth(value IsisAuthentication) DeviceIsisRouter {
	obj.RouterAuth().SetMsg(value.Msg())

	return obj
}

// V4Routes returns a []IsisV4RouteRange
//  Emulated ISIS IPv4 routes.
func (obj *deviceIsisRouter) V4Routes() DeviceIsisRouterIsisV4RouteRangeIter {
	if obj.obj.V4Routes == nil {
		obj.obj.V4Routes = []*snappipb.IsisV4RouteRange{}
	}
	return &deviceIsisRouterIsisV4RouteRangeIter{obj: obj}
}

type deviceIsisRouterIsisV4RouteRangeIter struct {
	obj *deviceIsisRouter
}

type DeviceIsisRouterIsisV4RouteRangeIter interface {
	Add() IsisV4RouteRange
	Items() []IsisV4RouteRange
}

func (obj *deviceIsisRouterIsisV4RouteRangeIter) Add() IsisV4RouteRange {
	newObj := &snappipb.IsisV4RouteRange{}
	obj.obj.obj.V4Routes = append(obj.obj.obj.V4Routes, newObj)
	newLibObj := &isisV4RouteRange{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceIsisRouterIsisV4RouteRangeIter) Items() []IsisV4RouteRange {
	slice := []IsisV4RouteRange{}
	for _, item := range obj.obj.obj.V4Routes {
		slice = append(slice, &isisV4RouteRange{obj: item})
	}
	return slice
}

// V6Routes returns a []IsisV6RouteRange
//  Emulated ISIS IPv6 routes.
func (obj *deviceIsisRouter) V6Routes() DeviceIsisRouterIsisV6RouteRangeIter {
	if obj.obj.V6Routes == nil {
		obj.obj.V6Routes = []*snappipb.IsisV6RouteRange{}
	}
	return &deviceIsisRouterIsisV6RouteRangeIter{obj: obj}
}

type deviceIsisRouterIsisV6RouteRangeIter struct {
	obj *deviceIsisRouter
}

type DeviceIsisRouterIsisV6RouteRangeIter interface {
	Add() IsisV6RouteRange
	Items() []IsisV6RouteRange
}

func (obj *deviceIsisRouterIsisV6RouteRangeIter) Add() IsisV6RouteRange {
	newObj := &snappipb.IsisV6RouteRange{}
	obj.obj.obj.V6Routes = append(obj.obj.obj.V6Routes, newObj)
	newLibObj := &isisV6RouteRange{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceIsisRouterIsisV6RouteRangeIter) Items() []IsisV6RouteRange {
	slice := []IsisV6RouteRange{}
	for _, item := range obj.obj.obj.V6Routes {
		slice = append(slice, &isisV6RouteRange{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIsisRouter) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the DeviceIsisRouter object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIsisRouter) SetName(value string) DeviceIsisRouter {
	obj.obj.Name = value

	return obj
}

func (obj *deviceIsisRouter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Instance != nil {
		obj.Instance().validateObj(set_default)
	}

	// SystemId required
	if obj.obj.SystemId == "" {
		validation = append(validation, "SystemId is required field on interface DeviceIsisRouter")
	} else {
		err := validateHex(obj.SystemId())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on SystemId DeviceIsisRouter"))
		}
	}

	if obj.obj.Interfaces != nil {
		for _, item := range obj.Interfaces().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Basic != nil {
		obj.Basic().validateObj(set_default)
	}

	if obj.obj.Advanced != nil {
		obj.Advanced().validateObj(set_default)
	}

	if obj.obj.RouterAuth != nil {
		obj.RouterAuth().validateObj(set_default)
	}
	if obj.obj.V4Routes != nil {
		for _, item := range obj.V4Routes().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.V6Routes != nil {
		for _, item := range obj.V6Routes().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface DeviceIsisRouter")
	}
}

func (obj *deviceIsisRouter) setDefault() {

}

type deviceBgpRouter struct {
	obj *snappipb.DeviceBgpRouter
}

func NewDeviceBgpRouter() DeviceBgpRouter {
	obj := deviceBgpRouter{obj: &snappipb.DeviceBgpRouter{}}
	obj.setDefault()
	return &obj
}

func (obj *deviceBgpRouter) Msg() *snappipb.DeviceBgpRouter {
	return obj.obj
}

func (obj *deviceBgpRouter) SetMsg(msg *snappipb.DeviceBgpRouter) DeviceBgpRouter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *deviceBgpRouter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *deviceBgpRouter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceBgpRouter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpRouter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceBgpRouter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpRouter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *deviceBgpRouter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type DeviceBgpRouter interface {
	Msg() *snappipb.DeviceBgpRouter
	SetMsg(*snappipb.DeviceBgpRouter) DeviceBgpRouter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	RouterId() string
	SetRouterId(value string) DeviceBgpRouter
	Ipv4Interfaces() DeviceBgpRouterBgpV4InterfaceIter
	Ipv6Interfaces() DeviceBgpRouterBgpV6InterfaceIter
}

// RouterId returns a string
//  The BGP router ID is a unique identifier used by BGP. It is a 32-bit value that is often represented by an IPv4 address.
func (obj *deviceBgpRouter) RouterId() string {

	return obj.obj.RouterId
}

// SetRouterId sets the string value in the DeviceBgpRouter object
//  The BGP router ID is a unique identifier used by BGP. It is a 32-bit value that is often represented by an IPv4 address.
func (obj *deviceBgpRouter) SetRouterId(value string) DeviceBgpRouter {
	obj.obj.RouterId = value

	return obj
}

// Ipv4Interfaces returns a []BgpV4Interface
//  This contains an array of references to IPv4 interfaces,  each of which will have list of peers to different destinations.
func (obj *deviceBgpRouter) Ipv4Interfaces() DeviceBgpRouterBgpV4InterfaceIter {
	if obj.obj.Ipv4Interfaces == nil {
		obj.obj.Ipv4Interfaces = []*snappipb.BgpV4Interface{}
	}
	return &deviceBgpRouterBgpV4InterfaceIter{obj: obj}
}

type deviceBgpRouterBgpV4InterfaceIter struct {
	obj *deviceBgpRouter
}

type DeviceBgpRouterBgpV4InterfaceIter interface {
	Add() BgpV4Interface
	Items() []BgpV4Interface
}

func (obj *deviceBgpRouterBgpV4InterfaceIter) Add() BgpV4Interface {
	newObj := &snappipb.BgpV4Interface{}
	obj.obj.obj.Ipv4Interfaces = append(obj.obj.obj.Ipv4Interfaces, newObj)
	newLibObj := &bgpV4Interface{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceBgpRouterBgpV4InterfaceIter) Items() []BgpV4Interface {
	slice := []BgpV4Interface{}
	for _, item := range obj.obj.obj.Ipv4Interfaces {
		slice = append(slice, &bgpV4Interface{obj: item})
	}
	return slice
}

// Ipv6Interfaces returns a []BgpV6Interface
//  This contains an array of references to IPv6 interfaces,  each of which will have list of peers to different destinations.
func (obj *deviceBgpRouter) Ipv6Interfaces() DeviceBgpRouterBgpV6InterfaceIter {
	if obj.obj.Ipv6Interfaces == nil {
		obj.obj.Ipv6Interfaces = []*snappipb.BgpV6Interface{}
	}
	return &deviceBgpRouterBgpV6InterfaceIter{obj: obj}
}

type deviceBgpRouterBgpV6InterfaceIter struct {
	obj *deviceBgpRouter
}

type DeviceBgpRouterBgpV6InterfaceIter interface {
	Add() BgpV6Interface
	Items() []BgpV6Interface
}

func (obj *deviceBgpRouterBgpV6InterfaceIter) Add() BgpV6Interface {
	newObj := &snappipb.BgpV6Interface{}
	obj.obj.obj.Ipv6Interfaces = append(obj.obj.obj.Ipv6Interfaces, newObj)
	newLibObj := &bgpV6Interface{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceBgpRouterBgpV6InterfaceIter) Items() []BgpV6Interface {
	slice := []BgpV6Interface{}
	for _, item := range obj.obj.obj.Ipv6Interfaces {
		slice = append(slice, &bgpV6Interface{obj: item})
	}
	return slice
}

func (obj *deviceBgpRouter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// RouterId required
	if obj.obj.RouterId == "" {
		validation = append(validation, "RouterId is required field on interface DeviceBgpRouter")
	} else {
		err := validateIpv4(obj.RouterId())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on RouterId DeviceBgpRouter"))
		}
	}

	if obj.obj.Ipv4Interfaces != nil {
		for _, item := range obj.Ipv4Interfaces().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Ipv6Interfaces != nil {
		for _, item := range obj.Ipv6Interfaces().Items() {
			item.validateObj(set_default)
		}
	}

}

func (obj *deviceBgpRouter) setDefault() {

}

type flowTxRx struct {
	obj *snappipb.FlowTxRx
}

func NewFlowTxRx() FlowTxRx {
	obj := flowTxRx{obj: &snappipb.FlowTxRx{}}
	obj.setDefault()
	return &obj
}

func (obj *flowTxRx) Msg() *snappipb.FlowTxRx {
	return obj.obj
}

func (obj *flowTxRx) SetMsg(msg *snappipb.FlowTxRx) FlowTxRx {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowTxRx) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowTxRx) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowTxRx) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowTxRx) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowTxRx) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowTxRx) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowTxRx) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowTxRx interface {
	Msg() *snappipb.FlowTxRx
	SetMsg(*snappipb.FlowTxRx) FlowTxRx
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() FlowTxRxChoiceEnum
	SetChoice(value FlowTxRxChoiceEnum) FlowTxRx
	HasChoice() bool
	Port() FlowPort
	SetPort(value FlowPort) FlowTxRx
	HasPort() bool
	Device() FlowRouter
	SetDevice(value FlowRouter) FlowTxRx
	HasDevice() bool
}

type FlowTxRxChoiceEnum string

var FlowTxRxChoice = struct {
	PORT   FlowTxRxChoiceEnum
	DEVICE FlowTxRxChoiceEnum
}{
	PORT:   FlowTxRxChoiceEnum("port"),
	DEVICE: FlowTxRxChoiceEnum("device"),
}

func (obj *flowTxRx) Choice() FlowTxRxChoiceEnum {
	return FlowTxRxChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  The type of transmit and receive container used by the flow.
func (obj *flowTxRx) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *flowTxRx) SetChoice(value FlowTxRxChoiceEnum) FlowTxRx {
	intValue, ok := snappipb.FlowTxRx_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowTxRxChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowTxRx_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "port" {
		obj.obj.Port = nil
	}

	if string(value) != "device" {
		obj.obj.Device = nil
	}

	return obj
}

// Port returns a FlowPort
//  description is TBD
func (obj *flowTxRx) Port() FlowPort {
	obj.SetChoice(FlowTxRxChoice.PORT)
	if obj.obj.Port == nil {
		obj.obj.Port = NewFlowPort().Msg()
	}
	return &flowPort{obj: obj.obj.Port}
}

// Port returns a FlowPort
//  description is TBD
func (obj *flowTxRx) HasPort() bool {
	return obj.obj.Port != nil
}

// SetPort sets the FlowPort value in the FlowTxRx object
//  description is TBD
func (obj *flowTxRx) SetPort(value FlowPort) FlowTxRx {
	obj.Port().SetMsg(value.Msg())
	obj.SetChoice(FlowTxRxChoice.PORT)
	return obj
}

// Device returns a FlowRouter
//  description is TBD
func (obj *flowTxRx) Device() FlowRouter {
	obj.SetChoice(FlowTxRxChoice.DEVICE)
	if obj.obj.Device == nil {
		obj.obj.Device = NewFlowRouter().Msg()
	}
	return &flowRouter{obj: obj.obj.Device}
}

// Device returns a FlowRouter
//  description is TBD
func (obj *flowTxRx) HasDevice() bool {
	return obj.obj.Device != nil
}

// SetDevice sets the FlowRouter value in the FlowTxRx object
//  description is TBD
func (obj *flowTxRx) SetDevice(value FlowRouter) FlowTxRx {
	obj.Device().SetMsg(value.Msg())
	obj.SetChoice(FlowTxRxChoice.DEVICE)
	return obj
}

func (obj *flowTxRx) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Port != nil {
		obj.Port().validateObj(set_default)
	}

	if obj.obj.Device != nil {
		obj.Device().validateObj(set_default)
	}
}

func (obj *flowTxRx) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(FlowTxRxChoice.PORT)
		obj.Port()
	}

}

type flowHeader struct {
	obj *snappipb.FlowHeader
}

func NewFlowHeader() FlowHeader {
	obj := flowHeader{obj: &snappipb.FlowHeader{}}
	obj.setDefault()
	return &obj
}

func (obj *flowHeader) Msg() *snappipb.FlowHeader {
	return obj.obj
}

func (obj *flowHeader) SetMsg(msg *snappipb.FlowHeader) FlowHeader {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowHeader) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowHeader) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowHeader) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowHeader) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowHeader) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowHeader) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowHeader) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowHeader interface {
	Msg() *snappipb.FlowHeader
	SetMsg(*snappipb.FlowHeader) FlowHeader
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() FlowHeaderChoiceEnum
	SetChoice(value FlowHeaderChoiceEnum) FlowHeader
	HasChoice() bool
	Custom() FlowCustom
	SetCustom(value FlowCustom) FlowHeader
	HasCustom() bool
	Ethernet() FlowEthernet
	SetEthernet(value FlowEthernet) FlowHeader
	HasEthernet() bool
	Vlan() FlowVlan
	SetVlan(value FlowVlan) FlowHeader
	HasVlan() bool
	Vxlan() FlowVxlan
	SetVxlan(value FlowVxlan) FlowHeader
	HasVxlan() bool
	Ipv4() FlowIpv4
	SetIpv4(value FlowIpv4) FlowHeader
	HasIpv4() bool
	Ipv6() FlowIpv6
	SetIpv6(value FlowIpv6) FlowHeader
	HasIpv6() bool
	Pfcpause() FlowPfcPause
	SetPfcpause(value FlowPfcPause) FlowHeader
	HasPfcpause() bool
	Ethernetpause() FlowEthernetPause
	SetEthernetpause(value FlowEthernetPause) FlowHeader
	HasEthernetpause() bool
	Tcp() FlowTcp
	SetTcp(value FlowTcp) FlowHeader
	HasTcp() bool
	Udp() FlowUdp
	SetUdp(value FlowUdp) FlowHeader
	HasUdp() bool
	Gre() FlowGre
	SetGre(value FlowGre) FlowHeader
	HasGre() bool
	Gtpv1() FlowGtpv1
	SetGtpv1(value FlowGtpv1) FlowHeader
	HasGtpv1() bool
	Gtpv2() FlowGtpv2
	SetGtpv2(value FlowGtpv2) FlowHeader
	HasGtpv2() bool
	Arp() FlowArp
	SetArp(value FlowArp) FlowHeader
	HasArp() bool
	Icmp() FlowIcmp
	SetIcmp(value FlowIcmp) FlowHeader
	HasIcmp() bool
	Icmpv6() FlowIcmpv6
	SetIcmpv6(value FlowIcmpv6) FlowHeader
	HasIcmpv6() bool
	Ppp() FlowPpp
	SetPpp(value FlowPpp) FlowHeader
	HasPpp() bool
	Igmpv1() FlowIgmpv1
	SetIgmpv1(value FlowIgmpv1) FlowHeader
	HasIgmpv1() bool
}

type FlowHeaderChoiceEnum string

var FlowHeaderChoice = struct {
	CUSTOM        FlowHeaderChoiceEnum
	ETHERNET      FlowHeaderChoiceEnum
	VLAN          FlowHeaderChoiceEnum
	VXLAN         FlowHeaderChoiceEnum
	IPV4          FlowHeaderChoiceEnum
	IPV6          FlowHeaderChoiceEnum
	PFCPAUSE      FlowHeaderChoiceEnum
	ETHERNETPAUSE FlowHeaderChoiceEnum
	TCP           FlowHeaderChoiceEnum
	UDP           FlowHeaderChoiceEnum
	GRE           FlowHeaderChoiceEnum
	GTPV1         FlowHeaderChoiceEnum
	GTPV2         FlowHeaderChoiceEnum
	ARP           FlowHeaderChoiceEnum
	ICMP          FlowHeaderChoiceEnum
	ICMPV6        FlowHeaderChoiceEnum
	PPP           FlowHeaderChoiceEnum
	IGMPV1        FlowHeaderChoiceEnum
}{
	CUSTOM:        FlowHeaderChoiceEnum("custom"),
	ETHERNET:      FlowHeaderChoiceEnum("ethernet"),
	VLAN:          FlowHeaderChoiceEnum("vlan"),
	VXLAN:         FlowHeaderChoiceEnum("vxlan"),
	IPV4:          FlowHeaderChoiceEnum("ipv4"),
	IPV6:          FlowHeaderChoiceEnum("ipv6"),
	PFCPAUSE:      FlowHeaderChoiceEnum("pfcpause"),
	ETHERNETPAUSE: FlowHeaderChoiceEnum("ethernetpause"),
	TCP:           FlowHeaderChoiceEnum("tcp"),
	UDP:           FlowHeaderChoiceEnum("udp"),
	GRE:           FlowHeaderChoiceEnum("gre"),
	GTPV1:         FlowHeaderChoiceEnum("gtpv1"),
	GTPV2:         FlowHeaderChoiceEnum("gtpv2"),
	ARP:           FlowHeaderChoiceEnum("arp"),
	ICMP:          FlowHeaderChoiceEnum("icmp"),
	ICMPV6:        FlowHeaderChoiceEnum("icmpv6"),
	PPP:           FlowHeaderChoiceEnum("ppp"),
	IGMPV1:        FlowHeaderChoiceEnum("igmpv1"),
}

func (obj *flowHeader) Choice() FlowHeaderChoiceEnum {
	return FlowHeaderChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  The available types of flow headers. If one is not provided the
//  default ethernet packet header MUST be provided.
func (obj *flowHeader) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *flowHeader) SetChoice(value FlowHeaderChoiceEnum) FlowHeader {
	intValue, ok := snappipb.FlowHeader_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowHeaderChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowHeader_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "custom" {
		obj.obj.Custom = nil
	}

	if string(value) != "ethernet" {
		obj.obj.Ethernet = nil
	}

	if string(value) != "vlan" {
		obj.obj.Vlan = nil
	}

	if string(value) != "vxlan" {
		obj.obj.Vxlan = nil
	}

	if string(value) != "ipv4" {
		obj.obj.Ipv4 = nil
	}

	if string(value) != "ipv6" {
		obj.obj.Ipv6 = nil
	}

	if string(value) != "pfcpause" {
		obj.obj.Pfcpause = nil
	}

	if string(value) != "ethernetpause" {
		obj.obj.Ethernetpause = nil
	}

	if string(value) != "tcp" {
		obj.obj.Tcp = nil
	}

	if string(value) != "udp" {
		obj.obj.Udp = nil
	}

	if string(value) != "gre" {
		obj.obj.Gre = nil
	}

	if string(value) != "gtpv1" {
		obj.obj.Gtpv1 = nil
	}

	if string(value) != "gtpv2" {
		obj.obj.Gtpv2 = nil
	}

	if string(value) != "arp" {
		obj.obj.Arp = nil
	}

	if string(value) != "icmp" {
		obj.obj.Icmp = nil
	}

	if string(value) != "icmpv6" {
		obj.obj.Icmpv6 = nil
	}

	if string(value) != "ppp" {
		obj.obj.Ppp = nil
	}

	if string(value) != "igmpv1" {
		obj.obj.Igmpv1 = nil
	}

	return obj
}

// Custom returns a FlowCustom
//  description is TBD
func (obj *flowHeader) Custom() FlowCustom {
	obj.SetChoice(FlowHeaderChoice.CUSTOM)
	if obj.obj.Custom == nil {
		obj.obj.Custom = NewFlowCustom().Msg()
	}
	return &flowCustom{obj: obj.obj.Custom}
}

// Custom returns a FlowCustom
//  description is TBD
func (obj *flowHeader) HasCustom() bool {
	return obj.obj.Custom != nil
}

// SetCustom sets the FlowCustom value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetCustom(value FlowCustom) FlowHeader {
	obj.Custom().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.CUSTOM)
	return obj
}

// Ethernet returns a FlowEthernet
//  description is TBD
func (obj *flowHeader) Ethernet() FlowEthernet {
	obj.SetChoice(FlowHeaderChoice.ETHERNET)
	if obj.obj.Ethernet == nil {
		obj.obj.Ethernet = NewFlowEthernet().Msg()
	}
	return &flowEthernet{obj: obj.obj.Ethernet}
}

// Ethernet returns a FlowEthernet
//  description is TBD
func (obj *flowHeader) HasEthernet() bool {
	return obj.obj.Ethernet != nil
}

// SetEthernet sets the FlowEthernet value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetEthernet(value FlowEthernet) FlowHeader {
	obj.Ethernet().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.ETHERNET)
	return obj
}

// Vlan returns a FlowVlan
//  description is TBD
func (obj *flowHeader) Vlan() FlowVlan {
	obj.SetChoice(FlowHeaderChoice.VLAN)
	if obj.obj.Vlan == nil {
		obj.obj.Vlan = NewFlowVlan().Msg()
	}
	return &flowVlan{obj: obj.obj.Vlan}
}

// Vlan returns a FlowVlan
//  description is TBD
func (obj *flowHeader) HasVlan() bool {
	return obj.obj.Vlan != nil
}

// SetVlan sets the FlowVlan value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetVlan(value FlowVlan) FlowHeader {
	obj.Vlan().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.VLAN)
	return obj
}

// Vxlan returns a FlowVxlan
//  description is TBD
func (obj *flowHeader) Vxlan() FlowVxlan {
	obj.SetChoice(FlowHeaderChoice.VXLAN)
	if obj.obj.Vxlan == nil {
		obj.obj.Vxlan = NewFlowVxlan().Msg()
	}
	return &flowVxlan{obj: obj.obj.Vxlan}
}

// Vxlan returns a FlowVxlan
//  description is TBD
func (obj *flowHeader) HasVxlan() bool {
	return obj.obj.Vxlan != nil
}

// SetVxlan sets the FlowVxlan value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetVxlan(value FlowVxlan) FlowHeader {
	obj.Vxlan().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.VXLAN)
	return obj
}

// Ipv4 returns a FlowIpv4
//  description is TBD
func (obj *flowHeader) Ipv4() FlowIpv4 {
	obj.SetChoice(FlowHeaderChoice.IPV4)
	if obj.obj.Ipv4 == nil {
		obj.obj.Ipv4 = NewFlowIpv4().Msg()
	}
	return &flowIpv4{obj: obj.obj.Ipv4}
}

// Ipv4 returns a FlowIpv4
//  description is TBD
func (obj *flowHeader) HasIpv4() bool {
	return obj.obj.Ipv4 != nil
}

// SetIpv4 sets the FlowIpv4 value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetIpv4(value FlowIpv4) FlowHeader {
	obj.Ipv4().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.IPV4)
	return obj
}

// Ipv6 returns a FlowIpv6
//  description is TBD
func (obj *flowHeader) Ipv6() FlowIpv6 {
	obj.SetChoice(FlowHeaderChoice.IPV6)
	if obj.obj.Ipv6 == nil {
		obj.obj.Ipv6 = NewFlowIpv6().Msg()
	}
	return &flowIpv6{obj: obj.obj.Ipv6}
}

// Ipv6 returns a FlowIpv6
//  description is TBD
func (obj *flowHeader) HasIpv6() bool {
	return obj.obj.Ipv6 != nil
}

// SetIpv6 sets the FlowIpv6 value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetIpv6(value FlowIpv6) FlowHeader {
	obj.Ipv6().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.IPV6)
	return obj
}

// Pfcpause returns a FlowPfcPause
//  description is TBD
func (obj *flowHeader) Pfcpause() FlowPfcPause {
	obj.SetChoice(FlowHeaderChoice.PFCPAUSE)
	if obj.obj.Pfcpause == nil {
		obj.obj.Pfcpause = NewFlowPfcPause().Msg()
	}
	return &flowPfcPause{obj: obj.obj.Pfcpause}
}

// Pfcpause returns a FlowPfcPause
//  description is TBD
func (obj *flowHeader) HasPfcpause() bool {
	return obj.obj.Pfcpause != nil
}

// SetPfcpause sets the FlowPfcPause value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetPfcpause(value FlowPfcPause) FlowHeader {
	obj.Pfcpause().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.PFCPAUSE)
	return obj
}

// Ethernetpause returns a FlowEthernetPause
//  description is TBD
func (obj *flowHeader) Ethernetpause() FlowEthernetPause {
	obj.SetChoice(FlowHeaderChoice.ETHERNETPAUSE)
	if obj.obj.Ethernetpause == nil {
		obj.obj.Ethernetpause = NewFlowEthernetPause().Msg()
	}
	return &flowEthernetPause{obj: obj.obj.Ethernetpause}
}

// Ethernetpause returns a FlowEthernetPause
//  description is TBD
func (obj *flowHeader) HasEthernetpause() bool {
	return obj.obj.Ethernetpause != nil
}

// SetEthernetpause sets the FlowEthernetPause value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetEthernetpause(value FlowEthernetPause) FlowHeader {
	obj.Ethernetpause().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.ETHERNETPAUSE)
	return obj
}

// Tcp returns a FlowTcp
//  description is TBD
func (obj *flowHeader) Tcp() FlowTcp {
	obj.SetChoice(FlowHeaderChoice.TCP)
	if obj.obj.Tcp == nil {
		obj.obj.Tcp = NewFlowTcp().Msg()
	}
	return &flowTcp{obj: obj.obj.Tcp}
}

// Tcp returns a FlowTcp
//  description is TBD
func (obj *flowHeader) HasTcp() bool {
	return obj.obj.Tcp != nil
}

// SetTcp sets the FlowTcp value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetTcp(value FlowTcp) FlowHeader {
	obj.Tcp().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.TCP)
	return obj
}

// Udp returns a FlowUdp
//  description is TBD
func (obj *flowHeader) Udp() FlowUdp {
	obj.SetChoice(FlowHeaderChoice.UDP)
	if obj.obj.Udp == nil {
		obj.obj.Udp = NewFlowUdp().Msg()
	}
	return &flowUdp{obj: obj.obj.Udp}
}

// Udp returns a FlowUdp
//  description is TBD
func (obj *flowHeader) HasUdp() bool {
	return obj.obj.Udp != nil
}

// SetUdp sets the FlowUdp value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetUdp(value FlowUdp) FlowHeader {
	obj.Udp().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.UDP)
	return obj
}

// Gre returns a FlowGre
//  description is TBD
func (obj *flowHeader) Gre() FlowGre {
	obj.SetChoice(FlowHeaderChoice.GRE)
	if obj.obj.Gre == nil {
		obj.obj.Gre = NewFlowGre().Msg()
	}
	return &flowGre{obj: obj.obj.Gre}
}

// Gre returns a FlowGre
//  description is TBD
func (obj *flowHeader) HasGre() bool {
	return obj.obj.Gre != nil
}

// SetGre sets the FlowGre value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetGre(value FlowGre) FlowHeader {
	obj.Gre().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.GRE)
	return obj
}

// Gtpv1 returns a FlowGtpv1
//  description is TBD
func (obj *flowHeader) Gtpv1() FlowGtpv1 {
	obj.SetChoice(FlowHeaderChoice.GTPV1)
	if obj.obj.Gtpv1 == nil {
		obj.obj.Gtpv1 = NewFlowGtpv1().Msg()
	}
	return &flowGtpv1{obj: obj.obj.Gtpv1}
}

// Gtpv1 returns a FlowGtpv1
//  description is TBD
func (obj *flowHeader) HasGtpv1() bool {
	return obj.obj.Gtpv1 != nil
}

// SetGtpv1 sets the FlowGtpv1 value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetGtpv1(value FlowGtpv1) FlowHeader {
	obj.Gtpv1().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.GTPV1)
	return obj
}

// Gtpv2 returns a FlowGtpv2
//  description is TBD
func (obj *flowHeader) Gtpv2() FlowGtpv2 {
	obj.SetChoice(FlowHeaderChoice.GTPV2)
	if obj.obj.Gtpv2 == nil {
		obj.obj.Gtpv2 = NewFlowGtpv2().Msg()
	}
	return &flowGtpv2{obj: obj.obj.Gtpv2}
}

// Gtpv2 returns a FlowGtpv2
//  description is TBD
func (obj *flowHeader) HasGtpv2() bool {
	return obj.obj.Gtpv2 != nil
}

// SetGtpv2 sets the FlowGtpv2 value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetGtpv2(value FlowGtpv2) FlowHeader {
	obj.Gtpv2().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.GTPV2)
	return obj
}

// Arp returns a FlowArp
//  description is TBD
func (obj *flowHeader) Arp() FlowArp {
	obj.SetChoice(FlowHeaderChoice.ARP)
	if obj.obj.Arp == nil {
		obj.obj.Arp = NewFlowArp().Msg()
	}
	return &flowArp{obj: obj.obj.Arp}
}

// Arp returns a FlowArp
//  description is TBD
func (obj *flowHeader) HasArp() bool {
	return obj.obj.Arp != nil
}

// SetArp sets the FlowArp value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetArp(value FlowArp) FlowHeader {
	obj.Arp().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.ARP)
	return obj
}

// Icmp returns a FlowIcmp
//  description is TBD
func (obj *flowHeader) Icmp() FlowIcmp {
	obj.SetChoice(FlowHeaderChoice.ICMP)
	if obj.obj.Icmp == nil {
		obj.obj.Icmp = NewFlowIcmp().Msg()
	}
	return &flowIcmp{obj: obj.obj.Icmp}
}

// Icmp returns a FlowIcmp
//  description is TBD
func (obj *flowHeader) HasIcmp() bool {
	return obj.obj.Icmp != nil
}

// SetIcmp sets the FlowIcmp value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetIcmp(value FlowIcmp) FlowHeader {
	obj.Icmp().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.ICMP)
	return obj
}

// Icmpv6 returns a FlowIcmpv6
//  description is TBD
func (obj *flowHeader) Icmpv6() FlowIcmpv6 {
	obj.SetChoice(FlowHeaderChoice.ICMPV6)
	if obj.obj.Icmpv6 == nil {
		obj.obj.Icmpv6 = NewFlowIcmpv6().Msg()
	}
	return &flowIcmpv6{obj: obj.obj.Icmpv6}
}

// Icmpv6 returns a FlowIcmpv6
//  description is TBD
func (obj *flowHeader) HasIcmpv6() bool {
	return obj.obj.Icmpv6 != nil
}

// SetIcmpv6 sets the FlowIcmpv6 value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetIcmpv6(value FlowIcmpv6) FlowHeader {
	obj.Icmpv6().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.ICMPV6)
	return obj
}

// Ppp returns a FlowPpp
//  description is TBD
func (obj *flowHeader) Ppp() FlowPpp {
	obj.SetChoice(FlowHeaderChoice.PPP)
	if obj.obj.Ppp == nil {
		obj.obj.Ppp = NewFlowPpp().Msg()
	}
	return &flowPpp{obj: obj.obj.Ppp}
}

// Ppp returns a FlowPpp
//  description is TBD
func (obj *flowHeader) HasPpp() bool {
	return obj.obj.Ppp != nil
}

// SetPpp sets the FlowPpp value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetPpp(value FlowPpp) FlowHeader {
	obj.Ppp().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.PPP)
	return obj
}

// Igmpv1 returns a FlowIgmpv1
//  description is TBD
func (obj *flowHeader) Igmpv1() FlowIgmpv1 {
	obj.SetChoice(FlowHeaderChoice.IGMPV1)
	if obj.obj.Igmpv1 == nil {
		obj.obj.Igmpv1 = NewFlowIgmpv1().Msg()
	}
	return &flowIgmpv1{obj: obj.obj.Igmpv1}
}

// Igmpv1 returns a FlowIgmpv1
//  description is TBD
func (obj *flowHeader) HasIgmpv1() bool {
	return obj.obj.Igmpv1 != nil
}

// SetIgmpv1 sets the FlowIgmpv1 value in the FlowHeader object
//  description is TBD
func (obj *flowHeader) SetIgmpv1(value FlowIgmpv1) FlowHeader {
	obj.Igmpv1().SetMsg(value.Msg())
	obj.SetChoice(FlowHeaderChoice.IGMPV1)
	return obj
}

func (obj *flowHeader) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Custom != nil {
		obj.Custom().validateObj(set_default)
	}

	if obj.obj.Ethernet != nil {
		obj.Ethernet().validateObj(set_default)
	}

	if obj.obj.Vlan != nil {
		obj.Vlan().validateObj(set_default)
	}

	if obj.obj.Vxlan != nil {
		obj.Vxlan().validateObj(set_default)
	}

	if obj.obj.Ipv4 != nil {
		obj.Ipv4().validateObj(set_default)
	}

	if obj.obj.Ipv6 != nil {
		obj.Ipv6().validateObj(set_default)
	}

	if obj.obj.Pfcpause != nil {
		obj.Pfcpause().validateObj(set_default)
	}

	if obj.obj.Ethernetpause != nil {
		obj.Ethernetpause().validateObj(set_default)
	}

	if obj.obj.Tcp != nil {
		obj.Tcp().validateObj(set_default)
	}

	if obj.obj.Udp != nil {
		obj.Udp().validateObj(set_default)
	}

	if obj.obj.Gre != nil {
		obj.Gre().validateObj(set_default)
	}

	if obj.obj.Gtpv1 != nil {
		obj.Gtpv1().validateObj(set_default)
	}

	if obj.obj.Gtpv2 != nil {
		obj.Gtpv2().validateObj(set_default)
	}

	if obj.obj.Arp != nil {
		obj.Arp().validateObj(set_default)
	}

	if obj.obj.Icmp != nil {
		obj.Icmp().validateObj(set_default)
	}

	if obj.obj.Icmpv6 != nil {
		obj.Icmpv6().validateObj(set_default)
	}

	if obj.obj.Ppp != nil {
		obj.Ppp().validateObj(set_default)
	}

	if obj.obj.Igmpv1 != nil {
		obj.Igmpv1().validateObj(set_default)
	}
}

func (obj *flowHeader) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(FlowHeaderChoice.ETHERNET)
		obj.Ethernet()
	}

}

type flowSize struct {
	obj *snappipb.FlowSize
}

func NewFlowSize() FlowSize {
	obj := flowSize{obj: &snappipb.FlowSize{}}
	obj.setDefault()
	return &obj
}

func (obj *flowSize) Msg() *snappipb.FlowSize {
	return obj.obj
}

func (obj *flowSize) SetMsg(msg *snappipb.FlowSize) FlowSize {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowSize) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowSize) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowSize) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSize) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowSize) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSize) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowSize) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowSize interface {
	Msg() *snappipb.FlowSize
	SetMsg(*snappipb.FlowSize) FlowSize
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() FlowSizeChoiceEnum
	SetChoice(value FlowSizeChoiceEnum) FlowSize
	HasChoice() bool
	Fixed() int32
	SetFixed(value int32) FlowSize
	HasFixed() bool
	Increment() FlowSizeIncrement
	SetIncrement(value FlowSizeIncrement) FlowSize
	HasIncrement() bool
	Random() FlowSizeRandom
	SetRandom(value FlowSizeRandom) FlowSize
	HasRandom() bool
}

type FlowSizeChoiceEnum string

var FlowSizeChoice = struct {
	FIXED     FlowSizeChoiceEnum
	INCREMENT FlowSizeChoiceEnum
	RANDOM    FlowSizeChoiceEnum
}{
	FIXED:     FlowSizeChoiceEnum("fixed"),
	INCREMENT: FlowSizeChoiceEnum("increment"),
	RANDOM:    FlowSizeChoiceEnum("random"),
}

func (obj *flowSize) Choice() FlowSizeChoiceEnum {
	return FlowSizeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *flowSize) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *flowSize) SetChoice(value FlowSizeChoiceEnum) FlowSize {
	intValue, ok := snappipb.FlowSize_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowSizeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowSize_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "fixed" {
		obj.obj.Fixed = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "random" {
		obj.obj.Random = nil
	}

	return obj
}

// Fixed returns a int32
//  description is TBD
func (obj *flowSize) Fixed() int32 {

	if obj.obj.Fixed == nil {
		*obj.obj.Fixed = 64
	}

	return *obj.obj.Fixed

}

// Fixed returns a int32
//  description is TBD
func (obj *flowSize) HasFixed() bool {
	return obj.obj.Fixed != nil
}

// SetFixed sets the int32 value in the FlowSize object
//  description is TBD
func (obj *flowSize) SetFixed(value int32) FlowSize {
	obj.obj.Fixed = &value
	obj.SetChoice(FlowSizeChoice.FIXED)
	return obj
}

// Increment returns a FlowSizeIncrement
//  description is TBD
func (obj *flowSize) Increment() FlowSizeIncrement {
	obj.SetChoice(FlowSizeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewFlowSizeIncrement().Msg()
	}
	return &flowSizeIncrement{obj: obj.obj.Increment}
}

// Increment returns a FlowSizeIncrement
//  description is TBD
func (obj *flowSize) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the FlowSizeIncrement value in the FlowSize object
//  description is TBD
func (obj *flowSize) SetIncrement(value FlowSizeIncrement) FlowSize {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(FlowSizeChoice.INCREMENT)
	return obj
}

// Random returns a FlowSizeRandom
//  description is TBD
func (obj *flowSize) Random() FlowSizeRandom {
	obj.SetChoice(FlowSizeChoice.RANDOM)
	if obj.obj.Random == nil {
		obj.obj.Random = NewFlowSizeRandom().Msg()
	}
	return &flowSizeRandom{obj: obj.obj.Random}
}

// Random returns a FlowSizeRandom
//  description is TBD
func (obj *flowSize) HasRandom() bool {
	return obj.obj.Random != nil
}

// SetRandom sets the FlowSizeRandom value in the FlowSize object
//  description is TBD
func (obj *flowSize) SetRandom(value FlowSizeRandom) FlowSize {
	obj.Random().SetMsg(value.Msg())
	obj.SetChoice(FlowSizeChoice.RANDOM)
	return obj
}

func (obj *flowSize) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Random != nil {
		obj.Random().validateObj(set_default)
	}
}

func (obj *flowSize) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(FlowSizeChoice.FIXED)
		obj.SetFixed(64)
	}

}

type flowRate struct {
	obj *snappipb.FlowRate
}

func NewFlowRate() FlowRate {
	obj := flowRate{obj: &snappipb.FlowRate{}}
	obj.setDefault()
	return &obj
}

func (obj *flowRate) Msg() *snappipb.FlowRate {
	return obj.obj
}

func (obj *flowRate) SetMsg(msg *snappipb.FlowRate) FlowRate {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowRate) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowRate) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowRate) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowRate) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowRate) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowRate) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowRate) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowRate interface {
	Msg() *snappipb.FlowRate
	SetMsg(*snappipb.FlowRate) FlowRate
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() FlowRateChoiceEnum
	SetChoice(value FlowRateChoiceEnum) FlowRate
	HasChoice() bool
	Pps() int64
	SetPps(value int64) FlowRate
	HasPps() bool
	Bps() int64
	SetBps(value int64) FlowRate
	HasBps() bool
	Kbps() int64
	SetKbps(value int64) FlowRate
	HasKbps() bool
	Mbps() int64
	SetMbps(value int64) FlowRate
	HasMbps() bool
	Gbps() int32
	SetGbps(value int32) FlowRate
	HasGbps() bool
	Percentage() float32
	SetPercentage(value float32) FlowRate
	HasPercentage() bool
}

type FlowRateChoiceEnum string

var FlowRateChoice = struct {
	PPS        FlowRateChoiceEnum
	BPS        FlowRateChoiceEnum
	KBPS       FlowRateChoiceEnum
	MBPS       FlowRateChoiceEnum
	GBPS       FlowRateChoiceEnum
	PERCENTAGE FlowRateChoiceEnum
}{
	PPS:        FlowRateChoiceEnum("pps"),
	BPS:        FlowRateChoiceEnum("bps"),
	KBPS:       FlowRateChoiceEnum("kbps"),
	MBPS:       FlowRateChoiceEnum("mbps"),
	GBPS:       FlowRateChoiceEnum("gbps"),
	PERCENTAGE: FlowRateChoiceEnum("percentage"),
}

func (obj *flowRate) Choice() FlowRateChoiceEnum {
	return FlowRateChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  The available types of flow rate.
func (obj *flowRate) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *flowRate) SetChoice(value FlowRateChoiceEnum) FlowRate {
	intValue, ok := snappipb.FlowRate_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowRateChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowRate_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "pps" {
		obj.obj.Pps = nil
	}

	if string(value) != "bps" {
		obj.obj.Bps = nil
	}

	if string(value) != "kbps" {
		obj.obj.Kbps = nil
	}

	if string(value) != "mbps" {
		obj.obj.Mbps = nil
	}

	if string(value) != "gbps" {
		obj.obj.Gbps = nil
	}

	if string(value) != "percentage" {
		obj.obj.Percentage = nil
	}

	return obj
}

// Pps returns a int64
//  Packets per second.
func (obj *flowRate) Pps() int64 {

	if obj.obj.Pps == nil {
		*obj.obj.Pps = 1000
	}

	return *obj.obj.Pps

}

// Pps returns a int64
//  Packets per second.
func (obj *flowRate) HasPps() bool {
	return obj.obj.Pps != nil
}

// SetPps sets the int64 value in the FlowRate object
//  Packets per second.
func (obj *flowRate) SetPps(value int64) FlowRate {
	obj.obj.Pps = &value
	obj.SetChoice(FlowRateChoice.PPS)
	return obj
}

// Bps returns a int64
//  Bits per second.
func (obj *flowRate) Bps() int64 {

	if obj.obj.Bps == nil {
		*obj.obj.Bps = 1000000000
	}

	return *obj.obj.Bps

}

// Bps returns a int64
//  Bits per second.
func (obj *flowRate) HasBps() bool {
	return obj.obj.Bps != nil
}

// SetBps sets the int64 value in the FlowRate object
//  Bits per second.
func (obj *flowRate) SetBps(value int64) FlowRate {
	obj.obj.Bps = &value
	obj.SetChoice(FlowRateChoice.BPS)
	return obj
}

// Kbps returns a int64
//  Kilobits per second.
func (obj *flowRate) Kbps() int64 {

	if obj.obj.Kbps == nil {
		*obj.obj.Kbps = 1000000
	}

	return *obj.obj.Kbps

}

// Kbps returns a int64
//  Kilobits per second.
func (obj *flowRate) HasKbps() bool {
	return obj.obj.Kbps != nil
}

// SetKbps sets the int64 value in the FlowRate object
//  Kilobits per second.
func (obj *flowRate) SetKbps(value int64) FlowRate {
	obj.obj.Kbps = &value
	obj.SetChoice(FlowRateChoice.KBPS)
	return obj
}

// Mbps returns a int64
//  Megabits per second.
func (obj *flowRate) Mbps() int64 {

	if obj.obj.Mbps == nil {
		*obj.obj.Mbps = 1000
	}

	return *obj.obj.Mbps

}

// Mbps returns a int64
//  Megabits per second.
func (obj *flowRate) HasMbps() bool {
	return obj.obj.Mbps != nil
}

// SetMbps sets the int64 value in the FlowRate object
//  Megabits per second.
func (obj *flowRate) SetMbps(value int64) FlowRate {
	obj.obj.Mbps = &value
	obj.SetChoice(FlowRateChoice.MBPS)
	return obj
}

// Gbps returns a int32
//  Gigabits per second.
func (obj *flowRate) Gbps() int32 {

	if obj.obj.Gbps == nil {
		*obj.obj.Gbps = 1
	}

	return *obj.obj.Gbps

}

// Gbps returns a int32
//  Gigabits per second.
func (obj *flowRate) HasGbps() bool {
	return obj.obj.Gbps != nil
}

// SetGbps sets the int32 value in the FlowRate object
//  Gigabits per second.
func (obj *flowRate) SetGbps(value int32) FlowRate {
	obj.obj.Gbps = &value
	obj.SetChoice(FlowRateChoice.GBPS)
	return obj
}

// Percentage returns a float32
//  The percentage of a port location's available bandwidth.
func (obj *flowRate) Percentage() float32 {

	if obj.obj.Percentage == nil {
		*obj.obj.Percentage = 100
	}

	return *obj.obj.Percentage

}

// Percentage returns a float32
//  The percentage of a port location's available bandwidth.
func (obj *flowRate) HasPercentage() bool {
	return obj.obj.Percentage != nil
}

// SetPercentage sets the float32 value in the FlowRate object
//  The percentage of a port location's available bandwidth.
func (obj *flowRate) SetPercentage(value float32) FlowRate {
	obj.obj.Percentage = &value
	obj.SetChoice(FlowRateChoice.PERCENTAGE)
	return obj
}

func (obj *flowRate) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Pps != nil {
		if *obj.obj.Pps < 1 {
			validation = append(
				validation, fmt.Sprintf("1 <= FlowRate.Pps <= any but Got %d", *obj.obj.Pps))
		}

	}

	if obj.obj.Bps != nil {
		if *obj.obj.Bps < 672 {
			validation = append(
				validation, fmt.Sprintf("672 <= FlowRate.Bps <= any but Got %d", *obj.obj.Bps))
		}

	}

	if obj.obj.Kbps != nil {
		if *obj.obj.Kbps < 1 {
			validation = append(
				validation, fmt.Sprintf("1 <= FlowRate.Kbps <= any but Got %d", *obj.obj.Kbps))
		}

	}

	if obj.obj.Mbps != nil {
		if *obj.obj.Mbps < 1 {
			validation = append(
				validation, fmt.Sprintf("1 <= FlowRate.Mbps <= any but Got %d", *obj.obj.Mbps))
		}

	}

	if obj.obj.Gbps != nil {
		if *obj.obj.Gbps < 1 {
			validation = append(
				validation, fmt.Sprintf("1 <= FlowRate.Gbps <= any but Got %d", *obj.obj.Gbps))
		}

	}

}

func (obj *flowRate) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(FlowRateChoice.PPS)
		obj.SetPps(1000)
	}

}

type flowDuration struct {
	obj *snappipb.FlowDuration
}

func NewFlowDuration() FlowDuration {
	obj := flowDuration{obj: &snappipb.FlowDuration{}}
	obj.setDefault()
	return &obj
}

func (obj *flowDuration) Msg() *snappipb.FlowDuration {
	return obj.obj
}

func (obj *flowDuration) SetMsg(msg *snappipb.FlowDuration) FlowDuration {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowDuration) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowDuration) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowDuration) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDuration) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowDuration) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDuration) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowDuration) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowDuration interface {
	Msg() *snappipb.FlowDuration
	SetMsg(*snappipb.FlowDuration) FlowDuration
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() FlowDurationChoiceEnum
	SetChoice(value FlowDurationChoiceEnum) FlowDuration
	HasChoice() bool
	FixedPackets() FlowFixedPackets
	SetFixedPackets(value FlowFixedPackets) FlowDuration
	HasFixedPackets() bool
	FixedSeconds() FlowFixedSeconds
	SetFixedSeconds(value FlowFixedSeconds) FlowDuration
	HasFixedSeconds() bool
	Burst() FlowBurst
	SetBurst(value FlowBurst) FlowDuration
	HasBurst() bool
	Continuous() FlowContinuous
	SetContinuous(value FlowContinuous) FlowDuration
	HasContinuous() bool
}

type FlowDurationChoiceEnum string

var FlowDurationChoice = struct {
	FIXED_PACKETS FlowDurationChoiceEnum
	FIXED_SECONDS FlowDurationChoiceEnum
	BURST         FlowDurationChoiceEnum
	CONTINUOUS    FlowDurationChoiceEnum
}{
	FIXED_PACKETS: FlowDurationChoiceEnum("fixed_packets"),
	FIXED_SECONDS: FlowDurationChoiceEnum("fixed_seconds"),
	BURST:         FlowDurationChoiceEnum("burst"),
	CONTINUOUS:    FlowDurationChoiceEnum("continuous"),
}

func (obj *flowDuration) Choice() FlowDurationChoiceEnum {
	return FlowDurationChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  A choice used to determine the type of duration.
func (obj *flowDuration) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *flowDuration) SetChoice(value FlowDurationChoiceEnum) FlowDuration {
	intValue, ok := snappipb.FlowDuration_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowDurationChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowDuration_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "fixed_packets" {
		obj.obj.FixedPackets = nil
	}

	if string(value) != "fixed_seconds" {
		obj.obj.FixedSeconds = nil
	}

	if string(value) != "burst" {
		obj.obj.Burst = nil
	}

	if string(value) != "continuous" {
		obj.obj.Continuous = nil
	}

	return obj
}

// FixedPackets returns a FlowFixedPackets
//  description is TBD
func (obj *flowDuration) FixedPackets() FlowFixedPackets {
	obj.SetChoice(FlowDurationChoice.FIXED_PACKETS)
	if obj.obj.FixedPackets == nil {
		obj.obj.FixedPackets = NewFlowFixedPackets().Msg()
	}
	return &flowFixedPackets{obj: obj.obj.FixedPackets}
}

// FixedPackets returns a FlowFixedPackets
//  description is TBD
func (obj *flowDuration) HasFixedPackets() bool {
	return obj.obj.FixedPackets != nil
}

// SetFixedPackets sets the FlowFixedPackets value in the FlowDuration object
//  description is TBD
func (obj *flowDuration) SetFixedPackets(value FlowFixedPackets) FlowDuration {
	obj.FixedPackets().SetMsg(value.Msg())
	obj.SetChoice(FlowDurationChoice.FIXED_PACKETS)
	return obj
}

// FixedSeconds returns a FlowFixedSeconds
//  description is TBD
func (obj *flowDuration) FixedSeconds() FlowFixedSeconds {
	obj.SetChoice(FlowDurationChoice.FIXED_SECONDS)
	if obj.obj.FixedSeconds == nil {
		obj.obj.FixedSeconds = NewFlowFixedSeconds().Msg()
	}
	return &flowFixedSeconds{obj: obj.obj.FixedSeconds}
}

// FixedSeconds returns a FlowFixedSeconds
//  description is TBD
func (obj *flowDuration) HasFixedSeconds() bool {
	return obj.obj.FixedSeconds != nil
}

// SetFixedSeconds sets the FlowFixedSeconds value in the FlowDuration object
//  description is TBD
func (obj *flowDuration) SetFixedSeconds(value FlowFixedSeconds) FlowDuration {
	obj.FixedSeconds().SetMsg(value.Msg())
	obj.SetChoice(FlowDurationChoice.FIXED_SECONDS)
	return obj
}

// Burst returns a FlowBurst
//  description is TBD
func (obj *flowDuration) Burst() FlowBurst {
	obj.SetChoice(FlowDurationChoice.BURST)
	if obj.obj.Burst == nil {
		obj.obj.Burst = NewFlowBurst().Msg()
	}
	return &flowBurst{obj: obj.obj.Burst}
}

// Burst returns a FlowBurst
//  description is TBD
func (obj *flowDuration) HasBurst() bool {
	return obj.obj.Burst != nil
}

// SetBurst sets the FlowBurst value in the FlowDuration object
//  description is TBD
func (obj *flowDuration) SetBurst(value FlowBurst) FlowDuration {
	obj.Burst().SetMsg(value.Msg())
	obj.SetChoice(FlowDurationChoice.BURST)
	return obj
}

// Continuous returns a FlowContinuous
//  description is TBD
func (obj *flowDuration) Continuous() FlowContinuous {
	obj.SetChoice(FlowDurationChoice.CONTINUOUS)
	if obj.obj.Continuous == nil {
		obj.obj.Continuous = NewFlowContinuous().Msg()
	}
	return &flowContinuous{obj: obj.obj.Continuous}
}

// Continuous returns a FlowContinuous
//  description is TBD
func (obj *flowDuration) HasContinuous() bool {
	return obj.obj.Continuous != nil
}

// SetContinuous sets the FlowContinuous value in the FlowDuration object
//  description is TBD
func (obj *flowDuration) SetContinuous(value FlowContinuous) FlowDuration {
	obj.Continuous().SetMsg(value.Msg())
	obj.SetChoice(FlowDurationChoice.CONTINUOUS)
	return obj
}

func (obj *flowDuration) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.FixedPackets != nil {
		obj.FixedPackets().validateObj(set_default)
	}

	if obj.obj.FixedSeconds != nil {
		obj.FixedSeconds().validateObj(set_default)
	}

	if obj.obj.Burst != nil {
		obj.Burst().validateObj(set_default)
	}

	if obj.obj.Continuous != nil {
		obj.Continuous().validateObj(set_default)
	}
}

func (obj *flowDuration) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(FlowDurationChoice.CONTINUOUS)
		obj.Continuous()
	}

}

type flowMetrics struct {
	obj *snappipb.FlowMetrics
}

func NewFlowMetrics() FlowMetrics {
	obj := flowMetrics{obj: &snappipb.FlowMetrics{}}
	obj.setDefault()
	return &obj
}

func (obj *flowMetrics) Msg() *snappipb.FlowMetrics {
	return obj.obj
}

func (obj *flowMetrics) SetMsg(msg *snappipb.FlowMetrics) FlowMetrics {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowMetrics) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowMetrics) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowMetrics) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetrics) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowMetrics) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetrics) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowMetrics) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowMetrics interface {
	Msg() *snappipb.FlowMetrics
	SetMsg(*snappipb.FlowMetrics) FlowMetrics
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Enable() bool
	SetEnable(value bool) FlowMetrics
	HasEnable() bool
	Loss() bool
	SetLoss(value bool) FlowMetrics
	HasLoss() bool
	Timestamps() bool
	SetTimestamps(value bool) FlowMetrics
	HasTimestamps() bool
	Latency() FlowLatencyMetrics
	SetLatency(value FlowLatencyMetrics) FlowMetrics
	HasLatency() bool
}

// Enable returns a bool
//  Enables flow metrics.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *flowMetrics) Enable() bool {

	if obj.obj.Enable == nil {
		*obj.obj.Enable = false
	}

	return *obj.obj.Enable

}

// Enable returns a bool
//  Enables flow metrics.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *flowMetrics) HasEnable() bool {
	return obj.obj.Enable != nil
}

// SetEnable sets the bool value in the FlowMetrics object
//  Enables flow metrics.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *flowMetrics) SetEnable(value bool) FlowMetrics {
	obj.obj.Enable = &value

	return obj
}

// Loss returns a bool
//  Enables additional flow metric loss calculation.
func (obj *flowMetrics) Loss() bool {

	if obj.obj.Loss == nil {
		*obj.obj.Loss = false
	}

	return *obj.obj.Loss

}

// Loss returns a bool
//  Enables additional flow metric loss calculation.
func (obj *flowMetrics) HasLoss() bool {
	return obj.obj.Loss != nil
}

// SetLoss sets the bool value in the FlowMetrics object
//  Enables additional flow metric loss calculation.
func (obj *flowMetrics) SetLoss(value bool) FlowMetrics {
	obj.obj.Loss = &value

	return obj
}

// Timestamps returns a bool
//  Enables additional flow metric first and last timestamps.
func (obj *flowMetrics) Timestamps() bool {

	if obj.obj.Timestamps == nil {
		*obj.obj.Timestamps = false
	}

	return *obj.obj.Timestamps

}

// Timestamps returns a bool
//  Enables additional flow metric first and last timestamps.
func (obj *flowMetrics) HasTimestamps() bool {
	return obj.obj.Timestamps != nil
}

// SetTimestamps sets the bool value in the FlowMetrics object
//  Enables additional flow metric first and last timestamps.
func (obj *flowMetrics) SetTimestamps(value bool) FlowMetrics {
	obj.obj.Timestamps = &value

	return obj
}

// Latency returns a FlowLatencyMetrics
//  Latency metrics.
func (obj *flowMetrics) Latency() FlowLatencyMetrics {
	if obj.obj.Latency == nil {
		obj.obj.Latency = NewFlowLatencyMetrics().Msg()
	}
	return &flowLatencyMetrics{obj: obj.obj.Latency}
}

// Latency returns a FlowLatencyMetrics
//  Latency metrics.
func (obj *flowMetrics) HasLatency() bool {
	return obj.obj.Latency != nil
}

// SetLatency sets the FlowLatencyMetrics value in the FlowMetrics object
//  Latency metrics.
func (obj *flowMetrics) SetLatency(value FlowLatencyMetrics) FlowMetrics {
	obj.Latency().SetMsg(value.Msg())

	return obj
}

func (obj *flowMetrics) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Latency != nil {
		obj.Latency().validateObj(set_default)
	}
}

func (obj *flowMetrics) setDefault() {
	if obj.obj.Enable == nil {
		obj.SetEnable(false)
	}
	if obj.obj.Loss == nil {
		obj.SetLoss(false)
	}
	if obj.obj.Timestamps == nil {
		obj.SetTimestamps(false)
	}

}

type eventLink struct {
	obj *snappipb.EventLink
}

func NewEventLink() EventLink {
	obj := eventLink{obj: &snappipb.EventLink{}}
	obj.setDefault()
	return &obj
}

func (obj *eventLink) Msg() *snappipb.EventLink {
	return obj.obj
}

func (obj *eventLink) SetMsg(msg *snappipb.EventLink) EventLink {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *eventLink) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *eventLink) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *eventLink) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventLink) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *eventLink) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventLink) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *eventLink) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type EventLink interface {
	Msg() *snappipb.EventLink
	SetMsg(*snappipb.EventLink) EventLink
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Enable() bool
	SetEnable(value bool) EventLink
	HasEnable() bool
}

// Enable returns a bool
//  True to enable notifications when a link up/down event occurs.
func (obj *eventLink) Enable() bool {

	if obj.obj.Enable == nil {
		*obj.obj.Enable = false
	}

	return *obj.obj.Enable

}

// Enable returns a bool
//  True to enable notifications when a link up/down event occurs.
func (obj *eventLink) HasEnable() bool {
	return obj.obj.Enable != nil
}

// SetEnable sets the bool value in the EventLink object
//  True to enable notifications when a link up/down event occurs.
func (obj *eventLink) SetEnable(value bool) EventLink {
	obj.obj.Enable = &value

	return obj
}

func (obj *eventLink) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *eventLink) setDefault() {
	if obj.obj.Enable == nil {
		obj.SetEnable(false)
	}

}

type eventRxRateThreshold struct {
	obj *snappipb.EventRxRateThreshold
}

func NewEventRxRateThreshold() EventRxRateThreshold {
	obj := eventRxRateThreshold{obj: &snappipb.EventRxRateThreshold{}}
	obj.setDefault()
	return &obj
}

func (obj *eventRxRateThreshold) Msg() *snappipb.EventRxRateThreshold {
	return obj.obj
}

func (obj *eventRxRateThreshold) SetMsg(msg *snappipb.EventRxRateThreshold) EventRxRateThreshold {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *eventRxRateThreshold) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *eventRxRateThreshold) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *eventRxRateThreshold) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventRxRateThreshold) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *eventRxRateThreshold) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventRxRateThreshold) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *eventRxRateThreshold) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type EventRxRateThreshold interface {
	Msg() *snappipb.EventRxRateThreshold
	SetMsg(*snappipb.EventRxRateThreshold) EventRxRateThreshold
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Enable() bool
	SetEnable(value bool) EventRxRateThreshold
	HasEnable() bool
	Threshold() float32
	SetThreshold(value float32) EventRxRateThreshold
	HasThreshold() bool
}

// Enable returns a bool
//  True to enable the rx_rate_threshold event.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *eventRxRateThreshold) Enable() bool {

	if obj.obj.Enable == nil {
		*obj.obj.Enable = false
	}

	return *obj.obj.Enable

}

// Enable returns a bool
//  True to enable the rx_rate_threshold event.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *eventRxRateThreshold) HasEnable() bool {
	return obj.obj.Enable != nil
}

// SetEnable sets the bool value in the EventRxRateThreshold object
//  True to enable the rx_rate_threshold event.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *eventRxRateThreshold) SetEnable(value bool) EventRxRateThreshold {
	obj.obj.Enable = &value

	return obj
}

// Threshold returns a float32
//  True to enable notifications when the rx rate of a flow passes above
//  or below the threshold value.
func (obj *eventRxRateThreshold) Threshold() float32 {

	if obj.obj.Threshold == nil {
		*obj.obj.Threshold = 95
	}

	return *obj.obj.Threshold

}

// Threshold returns a float32
//  True to enable notifications when the rx rate of a flow passes above
//  or below the threshold value.
func (obj *eventRxRateThreshold) HasThreshold() bool {
	return obj.obj.Threshold != nil
}

// SetThreshold sets the float32 value in the EventRxRateThreshold object
//  True to enable notifications when the rx rate of a flow passes above
//  or below the threshold value.
func (obj *eventRxRateThreshold) SetThreshold(value float32) EventRxRateThreshold {
	obj.obj.Threshold = &value

	return obj
}

func (obj *eventRxRateThreshold) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *eventRxRateThreshold) setDefault() {
	if obj.obj.Enable == nil {
		obj.SetEnable(false)
	}
	if obj.obj.Threshold == nil {
		obj.SetThreshold(95)
	}

}

type eventRouteAdvertiseWithdraw struct {
	obj *snappipb.EventRouteAdvertiseWithdraw
}

func NewEventRouteAdvertiseWithdraw() EventRouteAdvertiseWithdraw {
	obj := eventRouteAdvertiseWithdraw{obj: &snappipb.EventRouteAdvertiseWithdraw{}}
	obj.setDefault()
	return &obj
}

func (obj *eventRouteAdvertiseWithdraw) Msg() *snappipb.EventRouteAdvertiseWithdraw {
	return obj.obj
}

func (obj *eventRouteAdvertiseWithdraw) SetMsg(msg *snappipb.EventRouteAdvertiseWithdraw) EventRouteAdvertiseWithdraw {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *eventRouteAdvertiseWithdraw) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *eventRouteAdvertiseWithdraw) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *eventRouteAdvertiseWithdraw) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventRouteAdvertiseWithdraw) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *eventRouteAdvertiseWithdraw) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventRouteAdvertiseWithdraw) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *eventRouteAdvertiseWithdraw) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type EventRouteAdvertiseWithdraw interface {
	Msg() *snappipb.EventRouteAdvertiseWithdraw
	SetMsg(*snappipb.EventRouteAdvertiseWithdraw) EventRouteAdvertiseWithdraw
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Enable() bool
	SetEnable(value bool) EventRouteAdvertiseWithdraw
	HasEnable() bool
}

// Enable returns a bool
//  True to enable notifications when a route advertise/withdraw
//  event occurs.
func (obj *eventRouteAdvertiseWithdraw) Enable() bool {

	if obj.obj.Enable == nil {
		*obj.obj.Enable = false
	}

	return *obj.obj.Enable

}

// Enable returns a bool
//  True to enable notifications when a route advertise/withdraw
//  event occurs.
func (obj *eventRouteAdvertiseWithdraw) HasEnable() bool {
	return obj.obj.Enable != nil
}

// SetEnable sets the bool value in the EventRouteAdvertiseWithdraw object
//  True to enable notifications when a route advertise/withdraw
//  event occurs.
func (obj *eventRouteAdvertiseWithdraw) SetEnable(value bool) EventRouteAdvertiseWithdraw {
	obj.obj.Enable = &value

	return obj
}

func (obj *eventRouteAdvertiseWithdraw) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *eventRouteAdvertiseWithdraw) setDefault() {
	if obj.obj.Enable == nil {
		obj.SetEnable(false)
	}

}

type portOptions struct {
	obj *snappipb.PortOptions
}

func NewPortOptions() PortOptions {
	obj := portOptions{obj: &snappipb.PortOptions{}}
	obj.setDefault()
	return &obj
}

func (obj *portOptions) Msg() *snappipb.PortOptions {
	return obj.obj
}

func (obj *portOptions) SetMsg(msg *snappipb.PortOptions) PortOptions {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portOptions) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *portOptions) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portOptions) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portOptions) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portOptions) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portOptions) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *portOptions) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PortOptions interface {
	Msg() *snappipb.PortOptions
	SetMsg(*snappipb.PortOptions) PortOptions
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	LocationPreemption() bool
	SetLocationPreemption(value bool) PortOptions
	HasLocationPreemption() bool
}

// LocationPreemption returns a bool
//  Preempt all the test port locations as defined by the  Port.Port.properties.location. If the test ports defined by their location values are in use and  this value is true, the test ports will be preempted.
func (obj *portOptions) LocationPreemption() bool {

	if obj.obj.LocationPreemption == nil {
		*obj.obj.LocationPreemption = false
	}

	return *obj.obj.LocationPreemption

}

// LocationPreemption returns a bool
//  Preempt all the test port locations as defined by the  Port.Port.properties.location. If the test ports defined by their location values are in use and  this value is true, the test ports will be preempted.
func (obj *portOptions) HasLocationPreemption() bool {
	return obj.obj.LocationPreemption != nil
}

// SetLocationPreemption sets the bool value in the PortOptions object
//  Preempt all the test port locations as defined by the  Port.Port.properties.location. If the test ports defined by their location values are in use and  this value is true, the test ports will be preempted.
func (obj *portOptions) SetLocationPreemption(value bool) PortOptions {
	obj.obj.LocationPreemption = &value

	return obj
}

func (obj *portOptions) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *portOptions) setDefault() {
	if obj.obj.LocationPreemption == nil {
		obj.SetLocationPreemption(false)
	}

}

type pingIpv4 struct {
	obj *snappipb.PingIpv4
}

func NewPingIpv4() PingIpv4 {
	obj := pingIpv4{obj: &snappipb.PingIpv4{}}
	obj.setDefault()
	return &obj
}

func (obj *pingIpv4) Msg() *snappipb.PingIpv4 {
	return obj.obj
}

func (obj *pingIpv4) SetMsg(msg *snappipb.PingIpv4) PingIpv4 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pingIpv4) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *pingIpv4) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pingIpv4) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *pingIpv4) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pingIpv4) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *pingIpv4) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *pingIpv4) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PingIpv4 interface {
	Msg() *snappipb.PingIpv4
	SetMsg(*snappipb.PingIpv4) PingIpv4
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	SrcName() string
	SetSrcName(value string) PingIpv4
	HasSrcName() bool
	DstIp() string
	SetDstIp(value string) PingIpv4
	HasDstIp() bool
}

// SrcName returns a string
//  A base IPv4 interface
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//
func (obj *pingIpv4) SrcName() string {

	return *obj.obj.SrcName

}

// SrcName returns a string
//  A base IPv4 interface
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//
func (obj *pingIpv4) HasSrcName() bool {
	return obj.obj.SrcName != nil
}

// SetSrcName sets the string value in the PingIpv4 object
//  A base IPv4 interface
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//
func (obj *pingIpv4) SetSrcName(value string) PingIpv4 {
	obj.obj.SrcName = &value

	return obj
}

// DstIp returns a string
//  IPv4 address to ping
func (obj *pingIpv4) DstIp() string {

	return *obj.obj.DstIp

}

// DstIp returns a string
//  IPv4 address to ping
func (obj *pingIpv4) HasDstIp() bool {
	return obj.obj.DstIp != nil
}

// SetDstIp sets the string value in the PingIpv4 object
//  IPv4 address to ping
func (obj *pingIpv4) SetDstIp(value string) PingIpv4 {
	obj.obj.DstIp = &value

	return obj
}

func (obj *pingIpv4) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.DstIp != nil {
		err := validateIpv4(obj.DstIp())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on DstIp PingIpv4"))
		}
	}

}

func (obj *pingIpv4) setDefault() {

}

type pingIpv6 struct {
	obj *snappipb.PingIpv6
}

func NewPingIpv6() PingIpv6 {
	obj := pingIpv6{obj: &snappipb.PingIpv6{}}
	obj.setDefault()
	return &obj
}

func (obj *pingIpv6) Msg() *snappipb.PingIpv6 {
	return obj.obj
}

func (obj *pingIpv6) SetMsg(msg *snappipb.PingIpv6) PingIpv6 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *pingIpv6) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *pingIpv6) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pingIpv6) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *pingIpv6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *pingIpv6) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *pingIpv6) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *pingIpv6) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PingIpv6 interface {
	Msg() *snappipb.PingIpv6
	SetMsg(*snappipb.PingIpv6) PingIpv6
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	SrcName() string
	SetSrcName(value string) PingIpv6
	HasSrcName() bool
	DstIp() string
	SetDstIp(value string) PingIpv6
	HasDstIp() bool
}

// SrcName returns a string
//  A base IPv6 interface
//
//  x-constraint:
//  - /components/schemas/Device.Ipv6Base/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv6Base/properties/name
//
func (obj *pingIpv6) SrcName() string {

	return *obj.obj.SrcName

}

// SrcName returns a string
//  A base IPv6 interface
//
//  x-constraint:
//  - /components/schemas/Device.Ipv6Base/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv6Base/properties/name
//
func (obj *pingIpv6) HasSrcName() bool {
	return obj.obj.SrcName != nil
}

// SetSrcName sets the string value in the PingIpv6 object
//  A base IPv6 interface
//
//  x-constraint:
//  - /components/schemas/Device.Ipv6Base/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv6Base/properties/name
//
func (obj *pingIpv6) SetSrcName(value string) PingIpv6 {
	obj.obj.SrcName = &value

	return obj
}

// DstIp returns a string
//  IPv6 addresses to ping.
func (obj *pingIpv6) DstIp() string {

	return *obj.obj.DstIp

}

// DstIp returns a string
//  IPv6 addresses to ping.
func (obj *pingIpv6) HasDstIp() bool {
	return obj.obj.DstIp != nil
}

// SetDstIp sets the string value in the PingIpv6 object
//  IPv6 addresses to ping.
func (obj *pingIpv6) SetDstIp(value string) PingIpv6 {
	obj.obj.DstIp = &value

	return obj
}

func (obj *pingIpv6) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.DstIp != nil {
		err := validateIpv6(obj.DstIp())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on DstIp PingIpv6"))
		}
	}

}

func (obj *pingIpv6) setDefault() {

}

type flowMetricGroupRequest struct {
	obj *snappipb.FlowMetricGroupRequest
}

func NewFlowMetricGroupRequest() FlowMetricGroupRequest {
	obj := flowMetricGroupRequest{obj: &snappipb.FlowMetricGroupRequest{}}
	obj.setDefault()
	return &obj
}

func (obj *flowMetricGroupRequest) Msg() *snappipb.FlowMetricGroupRequest {
	return obj.obj
}

func (obj *flowMetricGroupRequest) SetMsg(msg *snappipb.FlowMetricGroupRequest) FlowMetricGroupRequest {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowMetricGroupRequest) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowMetricGroupRequest) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowMetricGroupRequest) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetricGroupRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowMetricGroupRequest) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetricGroupRequest) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowMetricGroupRequest) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowMetricGroupRequest interface {
	Msg() *snappipb.FlowMetricGroupRequest
	SetMsg(*snappipb.FlowMetricGroupRequest) FlowMetricGroupRequest
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() FlowMetricGroupRequestChoiceEnum
	SetChoice(value FlowMetricGroupRequestChoiceEnum) FlowMetricGroupRequest
	HasChoice() bool
	Ingress() []string
	SetIngress(value []string) FlowMetricGroupRequest
	Egress() []string
	SetEgress(value []string) FlowMetricGroupRequest
}

type FlowMetricGroupRequestChoiceEnum string

var FlowMetricGroupRequestChoice = struct {
	INGRESS FlowMetricGroupRequestChoiceEnum
	EGRESS  FlowMetricGroupRequestChoiceEnum
}{
	INGRESS: FlowMetricGroupRequestChoiceEnum("ingress"),
	EGRESS:  FlowMetricGroupRequestChoiceEnum("egress"),
}

func (obj *flowMetricGroupRequest) Choice() FlowMetricGroupRequestChoiceEnum {
	return FlowMetricGroupRequestChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  The type of disaggregation to be applied to the flow metrics.
func (obj *flowMetricGroupRequest) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *flowMetricGroupRequest) SetChoice(value FlowMetricGroupRequestChoiceEnum) FlowMetricGroupRequest {
	intValue, ok := snappipb.FlowMetricGroupRequest_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowMetricGroupRequestChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowMetricGroupRequest_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "ingress" {
		obj.obj.Ingress = nil
	}

	if string(value) != "egress" {
		obj.obj.Egress = nil
	}

	return obj
}

// Ingress returns a []string
//  Disaggregate the flow metrics by ingress packet header field names.
//  If the items is empty then no disaggregation will be done.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/packet/../metric_group
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/packet/../metric_group
//
func (obj *flowMetricGroupRequest) Ingress() []string {
	if obj.obj.Ingress == nil {
		obj.obj.Ingress = make([]string, 0)
	}
	return obj.obj.Ingress
}

// SetIngress sets the []string value in the FlowMetricGroupRequest object
//  Disaggregate the flow metrics by ingress packet header field names.
//  If the items is empty then no disaggregation will be done.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/packet/../metric_group
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/packet/../metric_group
//
func (obj *flowMetricGroupRequest) SetIngress(value []string) FlowMetricGroupRequest {
	if obj.obj.Ingress == nil {
		obj.obj.Ingress = make([]string, 0)
	}
	obj.obj.Ingress = value

	obj.SetChoice(FlowMetricGroupRequestChoice.INGRESS)
	return obj
}

// Egress returns a []string
//  Disaggregate the flow metrics by egress packet header field names
//  If the items is empty then no disaggregation will be done.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/egress/../metric_group
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/egress/../metric_group
//
func (obj *flowMetricGroupRequest) Egress() []string {
	if obj.obj.Egress == nil {
		obj.obj.Egress = make([]string, 0)
	}
	return obj.obj.Egress
}

// SetEgress sets the []string value in the FlowMetricGroupRequest object
//  Disaggregate the flow metrics by egress packet header field names
//  If the items is empty then no disaggregation will be done.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/egress/../metric_group
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/egress/../metric_group
//
func (obj *flowMetricGroupRequest) SetEgress(value []string) FlowMetricGroupRequest {
	if obj.obj.Egress == nil {
		obj.obj.Egress = make([]string, 0)
	}
	obj.obj.Egress = value

	obj.SetChoice(FlowMetricGroupRequestChoice.EGRESS)
	return obj
}

func (obj *flowMetricGroupRequest) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *flowMetricGroupRequest) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(FlowMetricGroupRequestChoice.INGRESS)
		obj.SetIngress([]string{})
	}

}

type response struct {
	obj *snappipb.Response
}

func NewResponse() Response {
	obj := response{obj: &snappipb.Response{}}
	obj.setDefault()
	return &obj
}

func (obj *response) Msg() *snappipb.Response {
	return obj.obj
}

func (obj *response) SetMsg(msg *snappipb.Response) Response {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *response) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *response) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *response) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *response) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *response) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *response) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *response) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Response interface {
	Msg() *snappipb.Response
	SetMsg(*snappipb.Response) Response
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	SrcName() string
	SetSrcName(value string) Response
	HasSrcName() bool
	DstIp() string
	SetDstIp(value string) Response
	HasDstIp() bool
	Result() ResponseResultEnum
	SetResult(value ResponseResultEnum) Response
	HasResult() bool
}

// SrcName returns a string
//  The name of the source IPv4 or IPv6 interface from which ping was sent.
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//  - /components/schemas/Device.Ipv6Base/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//  - /components/schemas/Device.Ipv6Base/properties/name
//
func (obj *response) SrcName() string {

	return *obj.obj.SrcName

}

// SrcName returns a string
//  The name of the source IPv4 or IPv6 interface from which ping was sent.
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//  - /components/schemas/Device.Ipv6Base/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//  - /components/schemas/Device.Ipv6Base/properties/name
//
func (obj *response) HasSrcName() bool {
	return obj.obj.SrcName != nil
}

// SetSrcName sets the string value in the Response object
//  The name of the source IPv4 or IPv6 interface from which ping was sent.
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//  - /components/schemas/Device.Ipv6Base/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4Base/properties/name
//  - /components/schemas/Device.Ipv6Base/properties/name
//
func (obj *response) SetSrcName(value string) Response {
	obj.obj.SrcName = &value

	return obj
}

// DstIp returns a string
//  Destination address.
func (obj *response) DstIp() string {

	return *obj.obj.DstIp

}

// DstIp returns a string
//  Destination address.
func (obj *response) HasDstIp() bool {
	return obj.obj.DstIp != nil
}

// SetDstIp sets the string value in the Response object
//  Destination address.
func (obj *response) SetDstIp(value string) Response {
	obj.obj.DstIp = &value

	return obj
}

type ResponseResultEnum string

var ResponseResult = struct {
	SUCCESS ResponseResultEnum
	FAILURE ResponseResultEnum
}{
	SUCCESS: ResponseResultEnum("success"),
	FAILURE: ResponseResultEnum("failure"),
}

func (obj *response) Result() ResponseResultEnum {
	return ResponseResultEnum(obj.obj.Result.Enum().String())
}

// Result returns a string
//  Result of the ping request.
func (obj *response) HasResult() bool {
	return obj.obj.Result != nil
}

func (obj *response) SetResult(value ResponseResultEnum) Response {
	intValue, ok := snappipb.Response_Result_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on ResponseResultEnum", string(value)))
		return obj
	}
	enumValue := snappipb.Response_Result_Enum(intValue)
	obj.obj.Result = &enumValue

	return obj
}

func (obj *response) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *response) setDefault() {
	if obj.obj.Result == nil {
		obj.SetResult(ResponseResult.FAILURE)

	}

}

type portMetric struct {
	obj *snappipb.PortMetric
}

func NewPortMetric() PortMetric {
	obj := portMetric{obj: &snappipb.PortMetric{}}
	obj.setDefault()
	return &obj
}

func (obj *portMetric) Msg() *snappipb.PortMetric {
	return obj.obj
}

func (obj *portMetric) SetMsg(msg *snappipb.PortMetric) PortMetric {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portMetric) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *portMetric) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portMetric) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portMetric) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portMetric) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portMetric) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *portMetric) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PortMetric interface {
	Msg() *snappipb.PortMetric
	SetMsg(*snappipb.PortMetric) PortMetric
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Name() string
	SetName(value string) PortMetric
	HasName() bool
	Location() string
	SetLocation(value string) PortMetric
	HasLocation() bool
	Link() PortMetricLinkEnum
	SetLink(value PortMetricLinkEnum) PortMetric
	HasLink() bool
	Capture() PortMetricCaptureEnum
	SetCapture(value PortMetricCaptureEnum) PortMetric
	HasCapture() bool
	FramesTx() int32
	SetFramesTx(value int32) PortMetric
	HasFramesTx() bool
	FramesRx() int32
	SetFramesRx(value int32) PortMetric
	HasFramesRx() bool
	BytesTx() int32
	SetBytesTx(value int32) PortMetric
	HasBytesTx() bool
	BytesRx() int32
	SetBytesRx(value int32) PortMetric
	HasBytesRx() bool
	FramesTxRate() float32
	SetFramesTxRate(value float32) PortMetric
	HasFramesTxRate() bool
	FramesRxRate() float32
	SetFramesRxRate(value float32) PortMetric
	HasFramesRxRate() bool
	BytesTxRate() float32
	SetBytesTxRate(value float32) PortMetric
	HasBytesTxRate() bool
	BytesRxRate() float32
	SetBytesRxRate(value float32) PortMetric
	HasBytesRxRate() bool
}

// Name returns a string
//  The name of a configured port
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *portMetric) Name() string {

	return *obj.obj.Name

}

// Name returns a string
//  The name of a configured port
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *portMetric) HasName() bool {
	return obj.obj.Name != nil
}

// SetName sets the string value in the PortMetric object
//  The name of a configured port
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *portMetric) SetName(value string) PortMetric {
	obj.obj.Name = &value

	return obj
}

// Location returns a string
//  The state of the connection to the test port location. The format should be the configured port location along with  any custom connection state message.
func (obj *portMetric) Location() string {

	return *obj.obj.Location

}

// Location returns a string
//  The state of the connection to the test port location. The format should be the configured port location along with  any custom connection state message.
func (obj *portMetric) HasLocation() bool {
	return obj.obj.Location != nil
}

// SetLocation sets the string value in the PortMetric object
//  The state of the connection to the test port location. The format should be the configured port location along with  any custom connection state message.
func (obj *portMetric) SetLocation(value string) PortMetric {
	obj.obj.Location = &value

	return obj
}

type PortMetricLinkEnum string

var PortMetricLink = struct {
	UP   PortMetricLinkEnum
	DOWN PortMetricLinkEnum
}{
	UP:   PortMetricLinkEnum("up"),
	DOWN: PortMetricLinkEnum("down"),
}

func (obj *portMetric) Link() PortMetricLinkEnum {
	return PortMetricLinkEnum(obj.obj.Link.Enum().String())
}

// Link returns a string
//  The state of the test port link The string can be up, down or a custom error message.
func (obj *portMetric) HasLink() bool {
	return obj.obj.Link != nil
}

func (obj *portMetric) SetLink(value PortMetricLinkEnum) PortMetric {
	intValue, ok := snappipb.PortMetric_Link_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PortMetricLinkEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PortMetric_Link_Enum(intValue)
	obj.obj.Link = &enumValue

	return obj
}

type PortMetricCaptureEnum string

var PortMetricCapture = struct {
	STARTED PortMetricCaptureEnum
	STOPPED PortMetricCaptureEnum
}{
	STARTED: PortMetricCaptureEnum("started"),
	STOPPED: PortMetricCaptureEnum("stopped"),
}

func (obj *portMetric) Capture() PortMetricCaptureEnum {
	return PortMetricCaptureEnum(obj.obj.Capture.Enum().String())
}

// Capture returns a string
//  The state of the test port capture infrastructure. The string can be started, stopped or a custom error message.
func (obj *portMetric) HasCapture() bool {
	return obj.obj.Capture != nil
}

func (obj *portMetric) SetCapture(value PortMetricCaptureEnum) PortMetric {
	intValue, ok := snappipb.PortMetric_Capture_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PortMetricCaptureEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PortMetric_Capture_Enum(intValue)
	obj.obj.Capture = &enumValue

	return obj
}

// FramesTx returns a int32
//  The current total number of frames transmitted
func (obj *portMetric) FramesTx() int32 {

	return *obj.obj.FramesTx

}

// FramesTx returns a int32
//  The current total number of frames transmitted
func (obj *portMetric) HasFramesTx() bool {
	return obj.obj.FramesTx != nil
}

// SetFramesTx sets the int32 value in the PortMetric object
//  The current total number of frames transmitted
func (obj *portMetric) SetFramesTx(value int32) PortMetric {
	obj.obj.FramesTx = &value

	return obj
}

// FramesRx returns a int32
//  The current total number of valid frames received
func (obj *portMetric) FramesRx() int32 {

	return *obj.obj.FramesRx

}

// FramesRx returns a int32
//  The current total number of valid frames received
func (obj *portMetric) HasFramesRx() bool {
	return obj.obj.FramesRx != nil
}

// SetFramesRx sets the int32 value in the PortMetric object
//  The current total number of valid frames received
func (obj *portMetric) SetFramesRx(value int32) PortMetric {
	obj.obj.FramesRx = &value

	return obj
}

// BytesTx returns a int32
//  The current total number of bytes transmitted
func (obj *portMetric) BytesTx() int32 {

	return *obj.obj.BytesTx

}

// BytesTx returns a int32
//  The current total number of bytes transmitted
func (obj *portMetric) HasBytesTx() bool {
	return obj.obj.BytesTx != nil
}

// SetBytesTx sets the int32 value in the PortMetric object
//  The current total number of bytes transmitted
func (obj *portMetric) SetBytesTx(value int32) PortMetric {
	obj.obj.BytesTx = &value

	return obj
}

// BytesRx returns a int32
//  The current total number of valid bytes received
func (obj *portMetric) BytesRx() int32 {

	return *obj.obj.BytesRx

}

// BytesRx returns a int32
//  The current total number of valid bytes received
func (obj *portMetric) HasBytesRx() bool {
	return obj.obj.BytesRx != nil
}

// SetBytesRx sets the int32 value in the PortMetric object
//  The current total number of valid bytes received
func (obj *portMetric) SetBytesRx(value int32) PortMetric {
	obj.obj.BytesRx = &value

	return obj
}

// FramesTxRate returns a float32
//  The current rate of frames transmitted
func (obj *portMetric) FramesTxRate() float32 {

	return *obj.obj.FramesTxRate

}

// FramesTxRate returns a float32
//  The current rate of frames transmitted
func (obj *portMetric) HasFramesTxRate() bool {
	return obj.obj.FramesTxRate != nil
}

// SetFramesTxRate sets the float32 value in the PortMetric object
//  The current rate of frames transmitted
func (obj *portMetric) SetFramesTxRate(value float32) PortMetric {
	obj.obj.FramesTxRate = &value

	return obj
}

// FramesRxRate returns a float32
//  The current rate of valid frames received
func (obj *portMetric) FramesRxRate() float32 {

	return *obj.obj.FramesRxRate

}

// FramesRxRate returns a float32
//  The current rate of valid frames received
func (obj *portMetric) HasFramesRxRate() bool {
	return obj.obj.FramesRxRate != nil
}

// SetFramesRxRate sets the float32 value in the PortMetric object
//  The current rate of valid frames received
func (obj *portMetric) SetFramesRxRate(value float32) PortMetric {
	obj.obj.FramesRxRate = &value

	return obj
}

// BytesTxRate returns a float32
//  The current rate of bytes transmitted
func (obj *portMetric) BytesTxRate() float32 {

	return *obj.obj.BytesTxRate

}

// BytesTxRate returns a float32
//  The current rate of bytes transmitted
func (obj *portMetric) HasBytesTxRate() bool {
	return obj.obj.BytesTxRate != nil
}

// SetBytesTxRate sets the float32 value in the PortMetric object
//  The current rate of bytes transmitted
func (obj *portMetric) SetBytesTxRate(value float32) PortMetric {
	obj.obj.BytesTxRate = &value

	return obj
}

// BytesRxRate returns a float32
//  The current rate of bytes received
func (obj *portMetric) BytesRxRate() float32 {

	return *obj.obj.BytesRxRate

}

// BytesRxRate returns a float32
//  The current rate of bytes received
func (obj *portMetric) HasBytesRxRate() bool {
	return obj.obj.BytesRxRate != nil
}

// SetBytesRxRate sets the float32 value in the PortMetric object
//  The current rate of bytes received
func (obj *portMetric) SetBytesRxRate(value float32) PortMetric {
	obj.obj.BytesRxRate = &value

	return obj
}

func (obj *portMetric) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *portMetric) setDefault() {

}

type flowMetric struct {
	obj *snappipb.FlowMetric
}

func NewFlowMetric() FlowMetric {
	obj := flowMetric{obj: &snappipb.FlowMetric{}}
	obj.setDefault()
	return &obj
}

func (obj *flowMetric) Msg() *snappipb.FlowMetric {
	return obj.obj
}

func (obj *flowMetric) SetMsg(msg *snappipb.FlowMetric) FlowMetric {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowMetric) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowMetric) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowMetric) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetric) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowMetric) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetric) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowMetric) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowMetric interface {
	Msg() *snappipb.FlowMetric
	SetMsg(*snappipb.FlowMetric) FlowMetric
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Name() string
	SetName(value string) FlowMetric
	HasName() bool
	PortTx() string
	SetPortTx(value string) FlowMetric
	HasPortTx() bool
	PortRx() string
	SetPortRx(value string) FlowMetric
	HasPortRx() bool
	MetricGroups() FlowMetricFlowMetricGroupIter
	Transmit() FlowMetricTransmitEnum
	SetTransmit(value FlowMetricTransmitEnum) FlowMetric
	HasTransmit() bool
	FramesTx() int32
	SetFramesTx(value int32) FlowMetric
	HasFramesTx() bool
	FramesRx() int32
	SetFramesRx(value int32) FlowMetric
	HasFramesRx() bool
	BytesTx() int32
	SetBytesTx(value int32) FlowMetric
	HasBytesTx() bool
	BytesRx() int32
	SetBytesRx(value int32) FlowMetric
	HasBytesRx() bool
	FramesTxRate() float32
	SetFramesTxRate(value float32) FlowMetric
	HasFramesTxRate() bool
	FramesRxRate() float32
	SetFramesRxRate(value float32) FlowMetric
	HasFramesRxRate() bool
	Loss() float32
	SetLoss(value float32) FlowMetric
	HasLoss() bool
	Timestamps() MetricTimestamp
	SetTimestamps(value MetricTimestamp) FlowMetric
	HasTimestamps() bool
	Latency() MetricLatency
	SetLatency(value MetricLatency) FlowMetric
	HasLatency() bool
}

// Name returns a string
//  The name of the flow
func (obj *flowMetric) Name() string {

	return *obj.obj.Name

}

// Name returns a string
//  The name of the flow
func (obj *flowMetric) HasName() bool {
	return obj.obj.Name != nil
}

// SetName sets the string value in the FlowMetric object
//  The name of the flow
func (obj *flowMetric) SetName(value string) FlowMetric {
	obj.obj.Name = &value

	return obj
}

// PortTx returns a string
//  The name of the transmit port
func (obj *flowMetric) PortTx() string {

	return *obj.obj.PortTx

}

// PortTx returns a string
//  The name of the transmit port
func (obj *flowMetric) HasPortTx() bool {
	return obj.obj.PortTx != nil
}

// SetPortTx sets the string value in the FlowMetric object
//  The name of the transmit port
func (obj *flowMetric) SetPortTx(value string) FlowMetric {
	obj.obj.PortTx = &value

	return obj
}

// PortRx returns a string
//  The name of the receive port
func (obj *flowMetric) PortRx() string {

	return *obj.obj.PortRx

}

// PortRx returns a string
//  The name of the receive port
func (obj *flowMetric) HasPortRx() bool {
	return obj.obj.PortRx != nil
}

// SetPortRx sets the string value in the FlowMetric object
//  The name of the receive port
func (obj *flowMetric) SetPortRx(value string) FlowMetric {
	obj.obj.PortRx = &value

	return obj
}

// MetricGroups returns a []FlowMetricGroup
//  Flow disaggregation groups.
func (obj *flowMetric) MetricGroups() FlowMetricFlowMetricGroupIter {
	if obj.obj.MetricGroups == nil {
		obj.obj.MetricGroups = []*snappipb.FlowMetricGroup{}
	}
	return &flowMetricFlowMetricGroupIter{obj: obj}
}

type flowMetricFlowMetricGroupIter struct {
	obj *flowMetric
}

type FlowMetricFlowMetricGroupIter interface {
	Add() FlowMetricGroup
	Items() []FlowMetricGroup
}

func (obj *flowMetricFlowMetricGroupIter) Add() FlowMetricGroup {
	newObj := &snappipb.FlowMetricGroup{}
	obj.obj.obj.MetricGroups = append(obj.obj.obj.MetricGroups, newObj)
	newLibObj := &flowMetricGroup{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *flowMetricFlowMetricGroupIter) Items() []FlowMetricGroup {
	slice := []FlowMetricGroup{}
	for _, item := range obj.obj.obj.MetricGroups {
		slice = append(slice, &flowMetricGroup{obj: item})
	}
	return slice
}

type FlowMetricTransmitEnum string

var FlowMetricTransmit = struct {
	STARTED FlowMetricTransmitEnum
	STOPPED FlowMetricTransmitEnum
	PAUSED  FlowMetricTransmitEnum
}{
	STARTED: FlowMetricTransmitEnum("started"),
	STOPPED: FlowMetricTransmitEnum("stopped"),
	PAUSED:  FlowMetricTransmitEnum("paused"),
}

func (obj *flowMetric) Transmit() FlowMetricTransmitEnum {
	return FlowMetricTransmitEnum(obj.obj.Transmit.Enum().String())
}

// Transmit returns a string
//  The transmit state of the flow.
func (obj *flowMetric) HasTransmit() bool {
	return obj.obj.Transmit != nil
}

func (obj *flowMetric) SetTransmit(value FlowMetricTransmitEnum) FlowMetric {
	intValue, ok := snappipb.FlowMetric_Transmit_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowMetricTransmitEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowMetric_Transmit_Enum(intValue)
	obj.obj.Transmit = &enumValue

	return obj
}

// FramesTx returns a int32
//  The current total number of frames transmitted
func (obj *flowMetric) FramesTx() int32 {

	return *obj.obj.FramesTx

}

// FramesTx returns a int32
//  The current total number of frames transmitted
func (obj *flowMetric) HasFramesTx() bool {
	return obj.obj.FramesTx != nil
}

// SetFramesTx sets the int32 value in the FlowMetric object
//  The current total number of frames transmitted
func (obj *flowMetric) SetFramesTx(value int32) FlowMetric {
	obj.obj.FramesTx = &value

	return obj
}

// FramesRx returns a int32
//  The current total number of valid frames received
func (obj *flowMetric) FramesRx() int32 {

	return *obj.obj.FramesRx

}

// FramesRx returns a int32
//  The current total number of valid frames received
func (obj *flowMetric) HasFramesRx() bool {
	return obj.obj.FramesRx != nil
}

// SetFramesRx sets the int32 value in the FlowMetric object
//  The current total number of valid frames received
func (obj *flowMetric) SetFramesRx(value int32) FlowMetric {
	obj.obj.FramesRx = &value

	return obj
}

// BytesTx returns a int32
//  The current total number of bytes transmitted
func (obj *flowMetric) BytesTx() int32 {

	return *obj.obj.BytesTx

}

// BytesTx returns a int32
//  The current total number of bytes transmitted
func (obj *flowMetric) HasBytesTx() bool {
	return obj.obj.BytesTx != nil
}

// SetBytesTx sets the int32 value in the FlowMetric object
//  The current total number of bytes transmitted
func (obj *flowMetric) SetBytesTx(value int32) FlowMetric {
	obj.obj.BytesTx = &value

	return obj
}

// BytesRx returns a int32
//  The current total number of bytes received
func (obj *flowMetric) BytesRx() int32 {

	return *obj.obj.BytesRx

}

// BytesRx returns a int32
//  The current total number of bytes received
func (obj *flowMetric) HasBytesRx() bool {
	return obj.obj.BytesRx != nil
}

// SetBytesRx sets the int32 value in the FlowMetric object
//  The current total number of bytes received
func (obj *flowMetric) SetBytesRx(value int32) FlowMetric {
	obj.obj.BytesRx = &value

	return obj
}

// FramesTxRate returns a float32
//  The current rate of frames transmitted
func (obj *flowMetric) FramesTxRate() float32 {

	return *obj.obj.FramesTxRate

}

// FramesTxRate returns a float32
//  The current rate of frames transmitted
func (obj *flowMetric) HasFramesTxRate() bool {
	return obj.obj.FramesTxRate != nil
}

// SetFramesTxRate sets the float32 value in the FlowMetric object
//  The current rate of frames transmitted
func (obj *flowMetric) SetFramesTxRate(value float32) FlowMetric {
	obj.obj.FramesTxRate = &value

	return obj
}

// FramesRxRate returns a float32
//  The current rate of valid frames received
func (obj *flowMetric) FramesRxRate() float32 {

	return *obj.obj.FramesRxRate

}

// FramesRxRate returns a float32
//  The current rate of valid frames received
func (obj *flowMetric) HasFramesRxRate() bool {
	return obj.obj.FramesRxRate != nil
}

// SetFramesRxRate sets the float32 value in the FlowMetric object
//  The current rate of valid frames received
func (obj *flowMetric) SetFramesRxRate(value float32) FlowMetric {
	obj.obj.FramesRxRate = &value

	return obj
}

// Loss returns a float32
//  The percentage of lost frames
func (obj *flowMetric) Loss() float32 {

	return *obj.obj.Loss

}

// Loss returns a float32
//  The percentage of lost frames
func (obj *flowMetric) HasLoss() bool {
	return obj.obj.Loss != nil
}

// SetLoss sets the float32 value in the FlowMetric object
//  The percentage of lost frames
func (obj *flowMetric) SetLoss(value float32) FlowMetric {
	obj.obj.Loss = &value

	return obj
}

// Timestamps returns a MetricTimestamp
//  description is TBD
func (obj *flowMetric) Timestamps() MetricTimestamp {
	if obj.obj.Timestamps == nil {
		obj.obj.Timestamps = NewMetricTimestamp().Msg()
	}
	return &metricTimestamp{obj: obj.obj.Timestamps}
}

// Timestamps returns a MetricTimestamp
//  description is TBD
func (obj *flowMetric) HasTimestamps() bool {
	return obj.obj.Timestamps != nil
}

// SetTimestamps sets the MetricTimestamp value in the FlowMetric object
//  description is TBD
func (obj *flowMetric) SetTimestamps(value MetricTimestamp) FlowMetric {
	obj.Timestamps().SetMsg(value.Msg())

	return obj
}

// Latency returns a MetricLatency
//  description is TBD
func (obj *flowMetric) Latency() MetricLatency {
	if obj.obj.Latency == nil {
		obj.obj.Latency = NewMetricLatency().Msg()
	}
	return &metricLatency{obj: obj.obj.Latency}
}

// Latency returns a MetricLatency
//  description is TBD
func (obj *flowMetric) HasLatency() bool {
	return obj.obj.Latency != nil
}

// SetLatency sets the MetricLatency value in the FlowMetric object
//  description is TBD
func (obj *flowMetric) SetLatency(value MetricLatency) FlowMetric {
	obj.Latency().SetMsg(value.Msg())

	return obj
}

func (obj *flowMetric) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.MetricGroups != nil {
		for _, item := range obj.MetricGroups().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Timestamps != nil {
		obj.Timestamps().validateObj(set_default)
	}

	if obj.obj.Latency != nil {
		obj.Latency().validateObj(set_default)
	}
}

func (obj *flowMetric) setDefault() {

}

type bgpv4Metric struct {
	obj *snappipb.Bgpv4Metric
}

func NewBgpv4Metric() Bgpv4Metric {
	obj := bgpv4Metric{obj: &snappipb.Bgpv4Metric{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpv4Metric) Msg() *snappipb.Bgpv4Metric {
	return obj.obj
}

func (obj *bgpv4Metric) SetMsg(msg *snappipb.Bgpv4Metric) Bgpv4Metric {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpv4Metric) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpv4Metric) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpv4Metric) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv4Metric) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpv4Metric) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv4Metric) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpv4Metric) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Bgpv4Metric interface {
	Msg() *snappipb.Bgpv4Metric
	SetMsg(*snappipb.Bgpv4Metric) Bgpv4Metric
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Name() string
	SetName(value string) Bgpv4Metric
	HasName() bool
	SessionState() Bgpv4MetricSessionStateEnum
	SetSessionState(value Bgpv4MetricSessionStateEnum) Bgpv4Metric
	HasSessionState() bool
	SessionFlapCount() int32
	SetSessionFlapCount(value int32) Bgpv4Metric
	HasSessionFlapCount() bool
	RoutesAdvertised() int32
	SetRoutesAdvertised(value int32) Bgpv4Metric
	HasRoutesAdvertised() bool
	RoutesReceived() int32
	SetRoutesReceived(value int32) Bgpv4Metric
	HasRoutesReceived() bool
	RouteWithdrawsSent() int32
	SetRouteWithdrawsSent(value int32) Bgpv4Metric
	HasRouteWithdrawsSent() bool
	RouteWithdrawsReceived() int32
	SetRouteWithdrawsReceived(value int32) Bgpv4Metric
	HasRouteWithdrawsReceived() bool
	UpdatesSent() int32
	SetUpdatesSent(value int32) Bgpv4Metric
	HasUpdatesSent() bool
	UpdatesReceived() int32
	SetUpdatesReceived(value int32) Bgpv4Metric
	HasUpdatesReceived() bool
	OpensSent() int32
	SetOpensSent(value int32) Bgpv4Metric
	HasOpensSent() bool
	OpensReceived() int32
	SetOpensReceived(value int32) Bgpv4Metric
	HasOpensReceived() bool
	KeepalivesSent() int32
	SetKeepalivesSent(value int32) Bgpv4Metric
	HasKeepalivesSent() bool
	KeepalivesReceived() int32
	SetKeepalivesReceived(value int32) Bgpv4Metric
	HasKeepalivesReceived() bool
	NotificationsSent() int32
	SetNotificationsSent(value int32) Bgpv4Metric
	HasNotificationsSent() bool
	NotificationsReceived() int32
	SetNotificationsReceived(value int32) Bgpv4Metric
	HasNotificationsReceived() bool
}

// Name returns a string
//  The name of a configured BGPv4 peer.
func (obj *bgpv4Metric) Name() string {

	return *obj.obj.Name

}

// Name returns a string
//  The name of a configured BGPv4 peer.
func (obj *bgpv4Metric) HasName() bool {
	return obj.obj.Name != nil
}

// SetName sets the string value in the Bgpv4Metric object
//  The name of a configured BGPv4 peer.
func (obj *bgpv4Metric) SetName(value string) Bgpv4Metric {
	obj.obj.Name = &value

	return obj
}

type Bgpv4MetricSessionStateEnum string

var Bgpv4MetricSessionState = struct {
	UP   Bgpv4MetricSessionStateEnum
	DOWN Bgpv4MetricSessionStateEnum
}{
	UP:   Bgpv4MetricSessionStateEnum("up"),
	DOWN: Bgpv4MetricSessionStateEnum("down"),
}

func (obj *bgpv4Metric) SessionState() Bgpv4MetricSessionStateEnum {
	return Bgpv4MetricSessionStateEnum(obj.obj.SessionState.Enum().String())
}

// SessionState returns a string
//  Session state as up or down. Up refers to an Established state and Down refers to any other state.
func (obj *bgpv4Metric) HasSessionState() bool {
	return obj.obj.SessionState != nil
}

func (obj *bgpv4Metric) SetSessionState(value Bgpv4MetricSessionStateEnum) Bgpv4Metric {
	intValue, ok := snappipb.Bgpv4Metric_SessionState_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on Bgpv4MetricSessionStateEnum", string(value)))
		return obj
	}
	enumValue := snappipb.Bgpv4Metric_SessionState_Enum(intValue)
	obj.obj.SessionState = &enumValue

	return obj
}

// SessionFlapCount returns a int32
//  Number of times the session went from Up to Down state.
func (obj *bgpv4Metric) SessionFlapCount() int32 {

	return *obj.obj.SessionFlapCount

}

// SessionFlapCount returns a int32
//  Number of times the session went from Up to Down state.
func (obj *bgpv4Metric) HasSessionFlapCount() bool {
	return obj.obj.SessionFlapCount != nil
}

// SetSessionFlapCount sets the int32 value in the Bgpv4Metric object
//  Number of times the session went from Up to Down state.
func (obj *bgpv4Metric) SetSessionFlapCount(value int32) Bgpv4Metric {
	obj.obj.SessionFlapCount = &value

	return obj
}

// RoutesAdvertised returns a int32
//  Number of routes advertised.
func (obj *bgpv4Metric) RoutesAdvertised() int32 {

	return *obj.obj.RoutesAdvertised

}

// RoutesAdvertised returns a int32
//  Number of routes advertised.
func (obj *bgpv4Metric) HasRoutesAdvertised() bool {
	return obj.obj.RoutesAdvertised != nil
}

// SetRoutesAdvertised sets the int32 value in the Bgpv4Metric object
//  Number of routes advertised.
func (obj *bgpv4Metric) SetRoutesAdvertised(value int32) Bgpv4Metric {
	obj.obj.RoutesAdvertised = &value

	return obj
}

// RoutesReceived returns a int32
//  Number of routes received.
func (obj *bgpv4Metric) RoutesReceived() int32 {

	return *obj.obj.RoutesReceived

}

// RoutesReceived returns a int32
//  Number of routes received.
func (obj *bgpv4Metric) HasRoutesReceived() bool {
	return obj.obj.RoutesReceived != nil
}

// SetRoutesReceived sets the int32 value in the Bgpv4Metric object
//  Number of routes received.
func (obj *bgpv4Metric) SetRoutesReceived(value int32) Bgpv4Metric {
	obj.obj.RoutesReceived = &value

	return obj
}

// RouteWithdrawsSent returns a int32
//  Number of route withdraws sent.
func (obj *bgpv4Metric) RouteWithdrawsSent() int32 {

	return *obj.obj.RouteWithdrawsSent

}

// RouteWithdrawsSent returns a int32
//  Number of route withdraws sent.
func (obj *bgpv4Metric) HasRouteWithdrawsSent() bool {
	return obj.obj.RouteWithdrawsSent != nil
}

// SetRouteWithdrawsSent sets the int32 value in the Bgpv4Metric object
//  Number of route withdraws sent.
func (obj *bgpv4Metric) SetRouteWithdrawsSent(value int32) Bgpv4Metric {
	obj.obj.RouteWithdrawsSent = &value

	return obj
}

// RouteWithdrawsReceived returns a int32
//  Number of route withdraws received.
func (obj *bgpv4Metric) RouteWithdrawsReceived() int32 {

	return *obj.obj.RouteWithdrawsReceived

}

// RouteWithdrawsReceived returns a int32
//  Number of route withdraws received.
func (obj *bgpv4Metric) HasRouteWithdrawsReceived() bool {
	return obj.obj.RouteWithdrawsReceived != nil
}

// SetRouteWithdrawsReceived sets the int32 value in the Bgpv4Metric object
//  Number of route withdraws received.
func (obj *bgpv4Metric) SetRouteWithdrawsReceived(value int32) Bgpv4Metric {
	obj.obj.RouteWithdrawsReceived = &value

	return obj
}

// UpdatesSent returns a int32
//  Number of Update messages sent.
func (obj *bgpv4Metric) UpdatesSent() int32 {

	return *obj.obj.UpdatesSent

}

// UpdatesSent returns a int32
//  Number of Update messages sent.
func (obj *bgpv4Metric) HasUpdatesSent() bool {
	return obj.obj.UpdatesSent != nil
}

// SetUpdatesSent sets the int32 value in the Bgpv4Metric object
//  Number of Update messages sent.
func (obj *bgpv4Metric) SetUpdatesSent(value int32) Bgpv4Metric {
	obj.obj.UpdatesSent = &value

	return obj
}

// UpdatesReceived returns a int32
//  Number of Update messages received.
func (obj *bgpv4Metric) UpdatesReceived() int32 {

	return *obj.obj.UpdatesReceived

}

// UpdatesReceived returns a int32
//  Number of Update messages received.
func (obj *bgpv4Metric) HasUpdatesReceived() bool {
	return obj.obj.UpdatesReceived != nil
}

// SetUpdatesReceived sets the int32 value in the Bgpv4Metric object
//  Number of Update messages received.
func (obj *bgpv4Metric) SetUpdatesReceived(value int32) Bgpv4Metric {
	obj.obj.UpdatesReceived = &value

	return obj
}

// OpensSent returns a int32
//  Number of Open messages sent.
func (obj *bgpv4Metric) OpensSent() int32 {

	return *obj.obj.OpensSent

}

// OpensSent returns a int32
//  Number of Open messages sent.
func (obj *bgpv4Metric) HasOpensSent() bool {
	return obj.obj.OpensSent != nil
}

// SetOpensSent sets the int32 value in the Bgpv4Metric object
//  Number of Open messages sent.
func (obj *bgpv4Metric) SetOpensSent(value int32) Bgpv4Metric {
	obj.obj.OpensSent = &value

	return obj
}

// OpensReceived returns a int32
//  Number of Open messages received.
func (obj *bgpv4Metric) OpensReceived() int32 {

	return *obj.obj.OpensReceived

}

// OpensReceived returns a int32
//  Number of Open messages received.
func (obj *bgpv4Metric) HasOpensReceived() bool {
	return obj.obj.OpensReceived != nil
}

// SetOpensReceived sets the int32 value in the Bgpv4Metric object
//  Number of Open messages received.
func (obj *bgpv4Metric) SetOpensReceived(value int32) Bgpv4Metric {
	obj.obj.OpensReceived = &value

	return obj
}

// KeepalivesSent returns a int32
//  Number of Keepalive messages sent.
func (obj *bgpv4Metric) KeepalivesSent() int32 {

	return *obj.obj.KeepalivesSent

}

// KeepalivesSent returns a int32
//  Number of Keepalive messages sent.
func (obj *bgpv4Metric) HasKeepalivesSent() bool {
	return obj.obj.KeepalivesSent != nil
}

// SetKeepalivesSent sets the int32 value in the Bgpv4Metric object
//  Number of Keepalive messages sent.
func (obj *bgpv4Metric) SetKeepalivesSent(value int32) Bgpv4Metric {
	obj.obj.KeepalivesSent = &value

	return obj
}

// KeepalivesReceived returns a int32
//  Number of Keepalive messages received.
func (obj *bgpv4Metric) KeepalivesReceived() int32 {

	return *obj.obj.KeepalivesReceived

}

// KeepalivesReceived returns a int32
//  Number of Keepalive messages received.
func (obj *bgpv4Metric) HasKeepalivesReceived() bool {
	return obj.obj.KeepalivesReceived != nil
}

// SetKeepalivesReceived sets the int32 value in the Bgpv4Metric object
//  Number of Keepalive messages received.
func (obj *bgpv4Metric) SetKeepalivesReceived(value int32) Bgpv4Metric {
	obj.obj.KeepalivesReceived = &value

	return obj
}

// NotificationsSent returns a int32
//  Number of Notification messages sent.
func (obj *bgpv4Metric) NotificationsSent() int32 {

	return *obj.obj.NotificationsSent

}

// NotificationsSent returns a int32
//  Number of Notification messages sent.
func (obj *bgpv4Metric) HasNotificationsSent() bool {
	return obj.obj.NotificationsSent != nil
}

// SetNotificationsSent sets the int32 value in the Bgpv4Metric object
//  Number of Notification messages sent.
func (obj *bgpv4Metric) SetNotificationsSent(value int32) Bgpv4Metric {
	obj.obj.NotificationsSent = &value

	return obj
}

// NotificationsReceived returns a int32
//  Number of Notification messages received.
func (obj *bgpv4Metric) NotificationsReceived() int32 {

	return *obj.obj.NotificationsReceived

}

// NotificationsReceived returns a int32
//  Number of Notification messages received.
func (obj *bgpv4Metric) HasNotificationsReceived() bool {
	return obj.obj.NotificationsReceived != nil
}

// SetNotificationsReceived sets the int32 value in the Bgpv4Metric object
//  Number of Notification messages received.
func (obj *bgpv4Metric) SetNotificationsReceived(value int32) Bgpv4Metric {
	obj.obj.NotificationsReceived = &value

	return obj
}

func (obj *bgpv4Metric) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpv4Metric) setDefault() {

}

type bgpv6Metric struct {
	obj *snappipb.Bgpv6Metric
}

func NewBgpv6Metric() Bgpv6Metric {
	obj := bgpv6Metric{obj: &snappipb.Bgpv6Metric{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpv6Metric) Msg() *snappipb.Bgpv6Metric {
	return obj.obj
}

func (obj *bgpv6Metric) SetMsg(msg *snappipb.Bgpv6Metric) Bgpv6Metric {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpv6Metric) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpv6Metric) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpv6Metric) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv6Metric) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpv6Metric) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv6Metric) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpv6Metric) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Bgpv6Metric interface {
	Msg() *snappipb.Bgpv6Metric
	SetMsg(*snappipb.Bgpv6Metric) Bgpv6Metric
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Name() string
	SetName(value string) Bgpv6Metric
	HasName() bool
	SessionState() Bgpv6MetricSessionStateEnum
	SetSessionState(value Bgpv6MetricSessionStateEnum) Bgpv6Metric
	HasSessionState() bool
	SessionFlapCount() int32
	SetSessionFlapCount(value int32) Bgpv6Metric
	HasSessionFlapCount() bool
	RoutesAdvertised() int32
	SetRoutesAdvertised(value int32) Bgpv6Metric
	HasRoutesAdvertised() bool
	RoutesReceived() int32
	SetRoutesReceived(value int32) Bgpv6Metric
	HasRoutesReceived() bool
	RouteWithdrawsSent() int32
	SetRouteWithdrawsSent(value int32) Bgpv6Metric
	HasRouteWithdrawsSent() bool
	RouteWithdrawsReceived() int32
	SetRouteWithdrawsReceived(value int32) Bgpv6Metric
	HasRouteWithdrawsReceived() bool
	UpdatesSent() int32
	SetUpdatesSent(value int32) Bgpv6Metric
	HasUpdatesSent() bool
	UpdatesReceived() int32
	SetUpdatesReceived(value int32) Bgpv6Metric
	HasUpdatesReceived() bool
	OpensSent() int32
	SetOpensSent(value int32) Bgpv6Metric
	HasOpensSent() bool
	OpensReceived() int32
	SetOpensReceived(value int32) Bgpv6Metric
	HasOpensReceived() bool
	KeepalivesSent() int32
	SetKeepalivesSent(value int32) Bgpv6Metric
	HasKeepalivesSent() bool
	KeepalivesReceived() int32
	SetKeepalivesReceived(value int32) Bgpv6Metric
	HasKeepalivesReceived() bool
	NotificationsSent() int32
	SetNotificationsSent(value int32) Bgpv6Metric
	HasNotificationsSent() bool
	NotificationsReceived() int32
	SetNotificationsReceived(value int32) Bgpv6Metric
	HasNotificationsReceived() bool
}

// Name returns a string
//  The name of a configured BGPv6 peer.
func (obj *bgpv6Metric) Name() string {

	return *obj.obj.Name

}

// Name returns a string
//  The name of a configured BGPv6 peer.
func (obj *bgpv6Metric) HasName() bool {
	return obj.obj.Name != nil
}

// SetName sets the string value in the Bgpv6Metric object
//  The name of a configured BGPv6 peer.
func (obj *bgpv6Metric) SetName(value string) Bgpv6Metric {
	obj.obj.Name = &value

	return obj
}

type Bgpv6MetricSessionStateEnum string

var Bgpv6MetricSessionState = struct {
	UP   Bgpv6MetricSessionStateEnum
	DOWN Bgpv6MetricSessionStateEnum
}{
	UP:   Bgpv6MetricSessionStateEnum("up"),
	DOWN: Bgpv6MetricSessionStateEnum("down"),
}

func (obj *bgpv6Metric) SessionState() Bgpv6MetricSessionStateEnum {
	return Bgpv6MetricSessionStateEnum(obj.obj.SessionState.Enum().String())
}

// SessionState returns a string
//  Session state as up or down. Up refers to an Established state and Down refers to any other state.
func (obj *bgpv6Metric) HasSessionState() bool {
	return obj.obj.SessionState != nil
}

func (obj *bgpv6Metric) SetSessionState(value Bgpv6MetricSessionStateEnum) Bgpv6Metric {
	intValue, ok := snappipb.Bgpv6Metric_SessionState_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on Bgpv6MetricSessionStateEnum", string(value)))
		return obj
	}
	enumValue := snappipb.Bgpv6Metric_SessionState_Enum(intValue)
	obj.obj.SessionState = &enumValue

	return obj
}

// SessionFlapCount returns a int32
//  Number of times the session went from Up to Down state.
func (obj *bgpv6Metric) SessionFlapCount() int32 {

	return *obj.obj.SessionFlapCount

}

// SessionFlapCount returns a int32
//  Number of times the session went from Up to Down state.
func (obj *bgpv6Metric) HasSessionFlapCount() bool {
	return obj.obj.SessionFlapCount != nil
}

// SetSessionFlapCount sets the int32 value in the Bgpv6Metric object
//  Number of times the session went from Up to Down state.
func (obj *bgpv6Metric) SetSessionFlapCount(value int32) Bgpv6Metric {
	obj.obj.SessionFlapCount = &value

	return obj
}

// RoutesAdvertised returns a int32
//  Number of routes advertised.
func (obj *bgpv6Metric) RoutesAdvertised() int32 {

	return *obj.obj.RoutesAdvertised

}

// RoutesAdvertised returns a int32
//  Number of routes advertised.
func (obj *bgpv6Metric) HasRoutesAdvertised() bool {
	return obj.obj.RoutesAdvertised != nil
}

// SetRoutesAdvertised sets the int32 value in the Bgpv6Metric object
//  Number of routes advertised.
func (obj *bgpv6Metric) SetRoutesAdvertised(value int32) Bgpv6Metric {
	obj.obj.RoutesAdvertised = &value

	return obj
}

// RoutesReceived returns a int32
//  Number of routes received.
func (obj *bgpv6Metric) RoutesReceived() int32 {

	return *obj.obj.RoutesReceived

}

// RoutesReceived returns a int32
//  Number of routes received.
func (obj *bgpv6Metric) HasRoutesReceived() bool {
	return obj.obj.RoutesReceived != nil
}

// SetRoutesReceived sets the int32 value in the Bgpv6Metric object
//  Number of routes received.
func (obj *bgpv6Metric) SetRoutesReceived(value int32) Bgpv6Metric {
	obj.obj.RoutesReceived = &value

	return obj
}

// RouteWithdrawsSent returns a int32
//  Number of route withdraws sent.
func (obj *bgpv6Metric) RouteWithdrawsSent() int32 {

	return *obj.obj.RouteWithdrawsSent

}

// RouteWithdrawsSent returns a int32
//  Number of route withdraws sent.
func (obj *bgpv6Metric) HasRouteWithdrawsSent() bool {
	return obj.obj.RouteWithdrawsSent != nil
}

// SetRouteWithdrawsSent sets the int32 value in the Bgpv6Metric object
//  Number of route withdraws sent.
func (obj *bgpv6Metric) SetRouteWithdrawsSent(value int32) Bgpv6Metric {
	obj.obj.RouteWithdrawsSent = &value

	return obj
}

// RouteWithdrawsReceived returns a int32
//  Number of route withdraws received.
func (obj *bgpv6Metric) RouteWithdrawsReceived() int32 {

	return *obj.obj.RouteWithdrawsReceived

}

// RouteWithdrawsReceived returns a int32
//  Number of route withdraws received.
func (obj *bgpv6Metric) HasRouteWithdrawsReceived() bool {
	return obj.obj.RouteWithdrawsReceived != nil
}

// SetRouteWithdrawsReceived sets the int32 value in the Bgpv6Metric object
//  Number of route withdraws received.
func (obj *bgpv6Metric) SetRouteWithdrawsReceived(value int32) Bgpv6Metric {
	obj.obj.RouteWithdrawsReceived = &value

	return obj
}

// UpdatesSent returns a int32
//  Number of Update messages sent.
func (obj *bgpv6Metric) UpdatesSent() int32 {

	return *obj.obj.UpdatesSent

}

// UpdatesSent returns a int32
//  Number of Update messages sent.
func (obj *bgpv6Metric) HasUpdatesSent() bool {
	return obj.obj.UpdatesSent != nil
}

// SetUpdatesSent sets the int32 value in the Bgpv6Metric object
//  Number of Update messages sent.
func (obj *bgpv6Metric) SetUpdatesSent(value int32) Bgpv6Metric {
	obj.obj.UpdatesSent = &value

	return obj
}

// UpdatesReceived returns a int32
//  Number of Update messages received.
func (obj *bgpv6Metric) UpdatesReceived() int32 {

	return *obj.obj.UpdatesReceived

}

// UpdatesReceived returns a int32
//  Number of Update messages received.
func (obj *bgpv6Metric) HasUpdatesReceived() bool {
	return obj.obj.UpdatesReceived != nil
}

// SetUpdatesReceived sets the int32 value in the Bgpv6Metric object
//  Number of Update messages received.
func (obj *bgpv6Metric) SetUpdatesReceived(value int32) Bgpv6Metric {
	obj.obj.UpdatesReceived = &value

	return obj
}

// OpensSent returns a int32
//  Number of Open messages sent.
func (obj *bgpv6Metric) OpensSent() int32 {

	return *obj.obj.OpensSent

}

// OpensSent returns a int32
//  Number of Open messages sent.
func (obj *bgpv6Metric) HasOpensSent() bool {
	return obj.obj.OpensSent != nil
}

// SetOpensSent sets the int32 value in the Bgpv6Metric object
//  Number of Open messages sent.
func (obj *bgpv6Metric) SetOpensSent(value int32) Bgpv6Metric {
	obj.obj.OpensSent = &value

	return obj
}

// OpensReceived returns a int32
//  Number of Open messages received.
func (obj *bgpv6Metric) OpensReceived() int32 {

	return *obj.obj.OpensReceived

}

// OpensReceived returns a int32
//  Number of Open messages received.
func (obj *bgpv6Metric) HasOpensReceived() bool {
	return obj.obj.OpensReceived != nil
}

// SetOpensReceived sets the int32 value in the Bgpv6Metric object
//  Number of Open messages received.
func (obj *bgpv6Metric) SetOpensReceived(value int32) Bgpv6Metric {
	obj.obj.OpensReceived = &value

	return obj
}

// KeepalivesSent returns a int32
//  Number of Keepalive messages sent.
func (obj *bgpv6Metric) KeepalivesSent() int32 {

	return *obj.obj.KeepalivesSent

}

// KeepalivesSent returns a int32
//  Number of Keepalive messages sent.
func (obj *bgpv6Metric) HasKeepalivesSent() bool {
	return obj.obj.KeepalivesSent != nil
}

// SetKeepalivesSent sets the int32 value in the Bgpv6Metric object
//  Number of Keepalive messages sent.
func (obj *bgpv6Metric) SetKeepalivesSent(value int32) Bgpv6Metric {
	obj.obj.KeepalivesSent = &value

	return obj
}

// KeepalivesReceived returns a int32
//  Number of Keepalive messages received.
func (obj *bgpv6Metric) KeepalivesReceived() int32 {

	return *obj.obj.KeepalivesReceived

}

// KeepalivesReceived returns a int32
//  Number of Keepalive messages received.
func (obj *bgpv6Metric) HasKeepalivesReceived() bool {
	return obj.obj.KeepalivesReceived != nil
}

// SetKeepalivesReceived sets the int32 value in the Bgpv6Metric object
//  Number of Keepalive messages received.
func (obj *bgpv6Metric) SetKeepalivesReceived(value int32) Bgpv6Metric {
	obj.obj.KeepalivesReceived = &value

	return obj
}

// NotificationsSent returns a int32
//  Number of Notification messages sent.
func (obj *bgpv6Metric) NotificationsSent() int32 {

	return *obj.obj.NotificationsSent

}

// NotificationsSent returns a int32
//  Number of Notification messages sent.
func (obj *bgpv6Metric) HasNotificationsSent() bool {
	return obj.obj.NotificationsSent != nil
}

// SetNotificationsSent sets the int32 value in the Bgpv6Metric object
//  Number of Notification messages sent.
func (obj *bgpv6Metric) SetNotificationsSent(value int32) Bgpv6Metric {
	obj.obj.NotificationsSent = &value

	return obj
}

// NotificationsReceived returns a int32
//  Number of Notification messages received.
func (obj *bgpv6Metric) NotificationsReceived() int32 {

	return *obj.obj.NotificationsReceived

}

// NotificationsReceived returns a int32
//  Number of Notification messages received.
func (obj *bgpv6Metric) HasNotificationsReceived() bool {
	return obj.obj.NotificationsReceived != nil
}

// SetNotificationsReceived sets the int32 value in the Bgpv6Metric object
//  Number of Notification messages received.
func (obj *bgpv6Metric) SetNotificationsReceived(value int32) Bgpv6Metric {
	obj.obj.NotificationsReceived = &value

	return obj
}

func (obj *bgpv6Metric) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpv6Metric) setDefault() {

}

type isisMetric struct {
	obj *snappipb.IsisMetric
}

func NewIsisMetric() IsisMetric {
	obj := isisMetric{obj: &snappipb.IsisMetric{}}
	obj.setDefault()
	return &obj
}

func (obj *isisMetric) Msg() *snappipb.IsisMetric {
	return obj.obj
}

func (obj *isisMetric) SetMsg(msg *snappipb.IsisMetric) IsisMetric {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisMetric) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisMetric) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisMetric) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisMetric) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisMetric) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisMetric) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisMetric) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisMetric interface {
	Msg() *snappipb.IsisMetric
	SetMsg(*snappipb.IsisMetric) IsisMetric
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Name() string
	SetName(value string) IsisMetric
	HasName() bool
	L1SessionsUp() int32
	SetL1SessionsUp(value int32) IsisMetric
	HasL1SessionsUp() bool
	L1SessionFlap() int32
	SetL1SessionFlap(value int32) IsisMetric
	HasL1SessionFlap() bool
	L1BroadcastHellosSent() int32
	SetL1BroadcastHellosSent(value int32) IsisMetric
	HasL1BroadcastHellosSent() bool
	L1BroadcastHellosReceived() int32
	SetL1BroadcastHellosReceived(value int32) IsisMetric
	HasL1BroadcastHellosReceived() bool
	L1PointToPointHellosSent() int32
	SetL1PointToPointHellosSent(value int32) IsisMetric
	HasL1PointToPointHellosSent() bool
	L1PointToPointHellosReceived() int32
	SetL1PointToPointHellosReceived(value int32) IsisMetric
	HasL1PointToPointHellosReceived() bool
	L1DatabaseSize() int32
	SetL1DatabaseSize(value int32) IsisMetric
	HasL1DatabaseSize() bool
	L1PsnpSent() int32
	SetL1PsnpSent(value int32) IsisMetric
	HasL1PsnpSent() bool
	L1PsnpReceived() int32
	SetL1PsnpReceived(value int32) IsisMetric
	HasL1PsnpReceived() bool
	L1CsnpSent() int32
	SetL1CsnpSent(value int32) IsisMetric
	HasL1CsnpSent() bool
	L1CsnpReceived() int32
	SetL1CsnpReceived(value int32) IsisMetric
	HasL1CsnpReceived() bool
	L1LspSent() int32
	SetL1LspSent(value int32) IsisMetric
	HasL1LspSent() bool
	L1LspReceived() int32
	SetL1LspReceived(value int32) IsisMetric
	HasL1LspReceived() bool
	L2SessionsUp() int32
	SetL2SessionsUp(value int32) IsisMetric
	HasL2SessionsUp() bool
	L2SessionFlap() int32
	SetL2SessionFlap(value int32) IsisMetric
	HasL2SessionFlap() bool
	L2BroadcastHellosSent() int32
	SetL2BroadcastHellosSent(value int32) IsisMetric
	HasL2BroadcastHellosSent() bool
	L2BroadcastHellosReceived() int32
	SetL2BroadcastHellosReceived(value int32) IsisMetric
	HasL2BroadcastHellosReceived() bool
	L2PointToPointHellosSent() int32
	SetL2PointToPointHellosSent(value int32) IsisMetric
	HasL2PointToPointHellosSent() bool
	L2PointToPointHellosReceived() int32
	SetL2PointToPointHellosReceived(value int32) IsisMetric
	HasL2PointToPointHellosReceived() bool
	L2DatabaseSize() int32
	SetL2DatabaseSize(value int32) IsisMetric
	HasL2DatabaseSize() bool
	L2PsnpSent() int32
	SetL2PsnpSent(value int32) IsisMetric
	HasL2PsnpSent() bool
	L2PsnpReceived() int32
	SetL2PsnpReceived(value int32) IsisMetric
	HasL2PsnpReceived() bool
	L2CsnpSent() int32
	SetL2CsnpSent(value int32) IsisMetric
	HasL2CsnpSent() bool
	L2CsnpReceived() int32
	SetL2CsnpReceived(value int32) IsisMetric
	HasL2CsnpReceived() bool
	L2LspSent() int32
	SetL2LspSent(value int32) IsisMetric
	HasL2LspSent() bool
	L2LspReceived() int32
	SetL2LspReceived(value int32) IsisMetric
	HasL2LspReceived() bool
}

// Name returns a string
//  The name of a configured ISIS router.
func (obj *isisMetric) Name() string {

	return *obj.obj.Name

}

// Name returns a string
//  The name of a configured ISIS router.
func (obj *isisMetric) HasName() bool {
	return obj.obj.Name != nil
}

// SetName sets the string value in the IsisMetric object
//  The name of a configured ISIS router.
func (obj *isisMetric) SetName(value string) IsisMetric {
	obj.obj.Name = &value

	return obj
}

// L1SessionsUp returns a int32
//  The number of Level 1 (L1) sessions that are fully up.
func (obj *isisMetric) L1SessionsUp() int32 {

	return *obj.obj.L1SessionsUp

}

// L1SessionsUp returns a int32
//  The number of Level 1 (L1) sessions that are fully up.
func (obj *isisMetric) HasL1SessionsUp() bool {
	return obj.obj.L1SessionsUp != nil
}

// SetL1SessionsUp sets the int32 value in the IsisMetric object
//  The number of Level 1 (L1) sessions that are fully up.
func (obj *isisMetric) SetL1SessionsUp(value int32) IsisMetric {
	obj.obj.L1SessionsUp = &value

	return obj
}

// L1SessionFlap returns a int32
//  The number of Level 1 Sessions Flap.
func (obj *isisMetric) L1SessionFlap() int32 {

	return *obj.obj.L1SessionFlap

}

// L1SessionFlap returns a int32
//  The number of Level 1 Sessions Flap.
func (obj *isisMetric) HasL1SessionFlap() bool {
	return obj.obj.L1SessionFlap != nil
}

// SetL1SessionFlap sets the int32 value in the IsisMetric object
//  The number of Level 1 Sessions Flap.
func (obj *isisMetric) SetL1SessionFlap(value int32) IsisMetric {
	obj.obj.L1SessionFlap = &value

	return obj
}

// L1BroadcastHellosSent returns a int32
//  Number of Level 1 Hello messages sent.
func (obj *isisMetric) L1BroadcastHellosSent() int32 {

	return *obj.obj.L1BroadcastHellosSent

}

// L1BroadcastHellosSent returns a int32
//  Number of Level 1 Hello messages sent.
func (obj *isisMetric) HasL1BroadcastHellosSent() bool {
	return obj.obj.L1BroadcastHellosSent != nil
}

// SetL1BroadcastHellosSent sets the int32 value in the IsisMetric object
//  Number of Level 1 Hello messages sent.
func (obj *isisMetric) SetL1BroadcastHellosSent(value int32) IsisMetric {
	obj.obj.L1BroadcastHellosSent = &value

	return obj
}

// L1BroadcastHellosReceived returns a int32
//  Number of Level 1 Hello messages received.
func (obj *isisMetric) L1BroadcastHellosReceived() int32 {

	return *obj.obj.L1BroadcastHellosReceived

}

// L1BroadcastHellosReceived returns a int32
//  Number of Level 1 Hello messages received.
func (obj *isisMetric) HasL1BroadcastHellosReceived() bool {
	return obj.obj.L1BroadcastHellosReceived != nil
}

// SetL1BroadcastHellosReceived sets the int32 value in the IsisMetric object
//  Number of Level 1 Hello messages received.
func (obj *isisMetric) SetL1BroadcastHellosReceived(value int32) IsisMetric {
	obj.obj.L1BroadcastHellosReceived = &value

	return obj
}

// L1PointToPointHellosSent returns a int32
//  Number of Level 1 Point-to-Point(P2P) Hello messages sent.
func (obj *isisMetric) L1PointToPointHellosSent() int32 {

	return *obj.obj.L1PointToPointHellosSent

}

// L1PointToPointHellosSent returns a int32
//  Number of Level 1 Point-to-Point(P2P) Hello messages sent.
func (obj *isisMetric) HasL1PointToPointHellosSent() bool {
	return obj.obj.L1PointToPointHellosSent != nil
}

// SetL1PointToPointHellosSent sets the int32 value in the IsisMetric object
//  Number of Level 1 Point-to-Point(P2P) Hello messages sent.
func (obj *isisMetric) SetL1PointToPointHellosSent(value int32) IsisMetric {
	obj.obj.L1PointToPointHellosSent = &value

	return obj
}

// L1PointToPointHellosReceived returns a int32
//  Number of Level 1 Point-to-Point(P2P) Hello messages received.
func (obj *isisMetric) L1PointToPointHellosReceived() int32 {

	return *obj.obj.L1PointToPointHellosReceived

}

// L1PointToPointHellosReceived returns a int32
//  Number of Level 1 Point-to-Point(P2P) Hello messages received.
func (obj *isisMetric) HasL1PointToPointHellosReceived() bool {
	return obj.obj.L1PointToPointHellosReceived != nil
}

// SetL1PointToPointHellosReceived sets the int32 value in the IsisMetric object
//  Number of Level 1 Point-to-Point(P2P) Hello messages received.
func (obj *isisMetric) SetL1PointToPointHellosReceived(value int32) IsisMetric {
	obj.obj.L1PointToPointHellosReceived = &value

	return obj
}

// L1DatabaseSize returns a int32
//  Number of Link State Updates (LSPs) in the Level 1 LSP Databases.
func (obj *isisMetric) L1DatabaseSize() int32 {

	return *obj.obj.L1DatabaseSize

}

// L1DatabaseSize returns a int32
//  Number of Link State Updates (LSPs) in the Level 1 LSP Databases.
func (obj *isisMetric) HasL1DatabaseSize() bool {
	return obj.obj.L1DatabaseSize != nil
}

// SetL1DatabaseSize sets the int32 value in the IsisMetric object
//  Number of Link State Updates (LSPs) in the Level 1 LSP Databases.
func (obj *isisMetric) SetL1DatabaseSize(value int32) IsisMetric {
	obj.obj.L1DatabaseSize = &value

	return obj
}

// L1PsnpSent returns a int32
//  Number of Level 1 (L1) Partial Sequence Number Packet (PSNPs) sent.
func (obj *isisMetric) L1PsnpSent() int32 {

	return *obj.obj.L1PsnpSent

}

// L1PsnpSent returns a int32
//  Number of Level 1 (L1) Partial Sequence Number Packet (PSNPs) sent.
func (obj *isisMetric) HasL1PsnpSent() bool {
	return obj.obj.L1PsnpSent != nil
}

// SetL1PsnpSent sets the int32 value in the IsisMetric object
//  Number of Level 1 (L1) Partial Sequence Number Packet (PSNPs) sent.
func (obj *isisMetric) SetL1PsnpSent(value int32) IsisMetric {
	obj.obj.L1PsnpSent = &value

	return obj
}

// L1PsnpReceived returns a int32
//  Number of Level 1 (L1) Complete Sequence Number Packet (PSNPs) received.
func (obj *isisMetric) L1PsnpReceived() int32 {

	return *obj.obj.L1PsnpReceived

}

// L1PsnpReceived returns a int32
//  Number of Level 1 (L1) Complete Sequence Number Packet (PSNPs) received.
func (obj *isisMetric) HasL1PsnpReceived() bool {
	return obj.obj.L1PsnpReceived != nil
}

// SetL1PsnpReceived sets the int32 value in the IsisMetric object
//  Number of Level 1 (L1) Complete Sequence Number Packet (PSNPs) received.
func (obj *isisMetric) SetL1PsnpReceived(value int32) IsisMetric {
	obj.obj.L1PsnpReceived = &value

	return obj
}

// L1CsnpSent returns a int32
//  Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) sent.
func (obj *isisMetric) L1CsnpSent() int32 {

	return *obj.obj.L1CsnpSent

}

// L1CsnpSent returns a int32
//  Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) sent.
func (obj *isisMetric) HasL1CsnpSent() bool {
	return obj.obj.L1CsnpSent != nil
}

// SetL1CsnpSent sets the int32 value in the IsisMetric object
//  Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) sent.
func (obj *isisMetric) SetL1CsnpSent(value int32) IsisMetric {
	obj.obj.L1CsnpSent = &value

	return obj
}

// L1CsnpReceived returns a int32
//  Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) received.
func (obj *isisMetric) L1CsnpReceived() int32 {

	return *obj.obj.L1CsnpReceived

}

// L1CsnpReceived returns a int32
//  Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) received.
func (obj *isisMetric) HasL1CsnpReceived() bool {
	return obj.obj.L1CsnpReceived != nil
}

// SetL1CsnpReceived sets the int32 value in the IsisMetric object
//  Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) received.
func (obj *isisMetric) SetL1CsnpReceived(value int32) IsisMetric {
	obj.obj.L1CsnpReceived = &value

	return obj
}

// L1LspSent returns a int32
//  Number of Level 1 (L1) Link State Protocol Data Units (LSPs) sent.
func (obj *isisMetric) L1LspSent() int32 {

	return *obj.obj.L1LspSent

}

// L1LspSent returns a int32
//  Number of Level 1 (L1) Link State Protocol Data Units (LSPs) sent.
func (obj *isisMetric) HasL1LspSent() bool {
	return obj.obj.L1LspSent != nil
}

// SetL1LspSent sets the int32 value in the IsisMetric object
//  Number of Level 1 (L1) Link State Protocol Data Units (LSPs) sent.
func (obj *isisMetric) SetL1LspSent(value int32) IsisMetric {
	obj.obj.L1LspSent = &value

	return obj
}

// L1LspReceived returns a int32
//  Number of Level 1 (L1) Link State Protocol Data Units (LSPs) received.
func (obj *isisMetric) L1LspReceived() int32 {

	return *obj.obj.L1LspReceived

}

// L1LspReceived returns a int32
//  Number of Level 1 (L1) Link State Protocol Data Units (LSPs) received.
func (obj *isisMetric) HasL1LspReceived() bool {
	return obj.obj.L1LspReceived != nil
}

// SetL1LspReceived sets the int32 value in the IsisMetric object
//  Number of Level 1 (L1) Link State Protocol Data Units (LSPs) received.
func (obj *isisMetric) SetL1LspReceived(value int32) IsisMetric {
	obj.obj.L1LspReceived = &value

	return obj
}

// L2SessionsUp returns a int32
//  The number of Level 2 (L2) sessions that are fully up.
func (obj *isisMetric) L2SessionsUp() int32 {

	return *obj.obj.L2SessionsUp

}

// L2SessionsUp returns a int32
//  The number of Level 2 (L2) sessions that are fully up.
func (obj *isisMetric) HasL2SessionsUp() bool {
	return obj.obj.L2SessionsUp != nil
}

// SetL2SessionsUp sets the int32 value in the IsisMetric object
//  The number of Level 2 (L2) sessions that are fully up.
func (obj *isisMetric) SetL2SessionsUp(value int32) IsisMetric {
	obj.obj.L2SessionsUp = &value

	return obj
}

// L2SessionFlap returns a int32
//  The number of Level 2 Sessions Flap.
func (obj *isisMetric) L2SessionFlap() int32 {

	return *obj.obj.L2SessionFlap

}

// L2SessionFlap returns a int32
//  The number of Level 2 Sessions Flap.
func (obj *isisMetric) HasL2SessionFlap() bool {
	return obj.obj.L2SessionFlap != nil
}

// SetL2SessionFlap sets the int32 value in the IsisMetric object
//  The number of Level 2 Sessions Flap.
func (obj *isisMetric) SetL2SessionFlap(value int32) IsisMetric {
	obj.obj.L2SessionFlap = &value

	return obj
}

// L2BroadcastHellosSent returns a int32
//  Number of Level 2 Hello messages sent.
func (obj *isisMetric) L2BroadcastHellosSent() int32 {

	return *obj.obj.L2BroadcastHellosSent

}

// L2BroadcastHellosSent returns a int32
//  Number of Level 2 Hello messages sent.
func (obj *isisMetric) HasL2BroadcastHellosSent() bool {
	return obj.obj.L2BroadcastHellosSent != nil
}

// SetL2BroadcastHellosSent sets the int32 value in the IsisMetric object
//  Number of Level 2 Hello messages sent.
func (obj *isisMetric) SetL2BroadcastHellosSent(value int32) IsisMetric {
	obj.obj.L2BroadcastHellosSent = &value

	return obj
}

// L2BroadcastHellosReceived returns a int32
//  Number of Level 2 Hello messages received.
func (obj *isisMetric) L2BroadcastHellosReceived() int32 {

	return *obj.obj.L2BroadcastHellosReceived

}

// L2BroadcastHellosReceived returns a int32
//  Number of Level 2 Hello messages received.
func (obj *isisMetric) HasL2BroadcastHellosReceived() bool {
	return obj.obj.L2BroadcastHellosReceived != nil
}

// SetL2BroadcastHellosReceived sets the int32 value in the IsisMetric object
//  Number of Level 2 Hello messages received.
func (obj *isisMetric) SetL2BroadcastHellosReceived(value int32) IsisMetric {
	obj.obj.L2BroadcastHellosReceived = &value

	return obj
}

// L2PointToPointHellosSent returns a int32
//  Number of Level 2 Point-to-Point(P2P) Hello messages sent.
func (obj *isisMetric) L2PointToPointHellosSent() int32 {

	return *obj.obj.L2PointToPointHellosSent

}

// L2PointToPointHellosSent returns a int32
//  Number of Level 2 Point-to-Point(P2P) Hello messages sent.
func (obj *isisMetric) HasL2PointToPointHellosSent() bool {
	return obj.obj.L2PointToPointHellosSent != nil
}

// SetL2PointToPointHellosSent sets the int32 value in the IsisMetric object
//  Number of Level 2 Point-to-Point(P2P) Hello messages sent.
func (obj *isisMetric) SetL2PointToPointHellosSent(value int32) IsisMetric {
	obj.obj.L2PointToPointHellosSent = &value

	return obj
}

// L2PointToPointHellosReceived returns a int32
//  Number of Level 2 Point-to-Point(P2P) Hello messages received.
func (obj *isisMetric) L2PointToPointHellosReceived() int32 {

	return *obj.obj.L2PointToPointHellosReceived

}

// L2PointToPointHellosReceived returns a int32
//  Number of Level 2 Point-to-Point(P2P) Hello messages received.
func (obj *isisMetric) HasL2PointToPointHellosReceived() bool {
	return obj.obj.L2PointToPointHellosReceived != nil
}

// SetL2PointToPointHellosReceived sets the int32 value in the IsisMetric object
//  Number of Level 2 Point-to-Point(P2P) Hello messages received.
func (obj *isisMetric) SetL2PointToPointHellosReceived(value int32) IsisMetric {
	obj.obj.L2PointToPointHellosReceived = &value

	return obj
}

// L2DatabaseSize returns a int32
//  Number of Link State Updates (LSPs) in the Level 2 LSP Databases.
func (obj *isisMetric) L2DatabaseSize() int32 {

	return *obj.obj.L2DatabaseSize

}

// L2DatabaseSize returns a int32
//  Number of Link State Updates (LSPs) in the Level 2 LSP Databases.
func (obj *isisMetric) HasL2DatabaseSize() bool {
	return obj.obj.L2DatabaseSize != nil
}

// SetL2DatabaseSize sets the int32 value in the IsisMetric object
//  Number of Link State Updates (LSPs) in the Level 2 LSP Databases.
func (obj *isisMetric) SetL2DatabaseSize(value int32) IsisMetric {
	obj.obj.L2DatabaseSize = &value

	return obj
}

// L2PsnpSent returns a int32
//  Number of Level 2 (L2) Partial Sequence Number Packet (PSNPs) sent.
func (obj *isisMetric) L2PsnpSent() int32 {

	return *obj.obj.L2PsnpSent

}

// L2PsnpSent returns a int32
//  Number of Level 2 (L2) Partial Sequence Number Packet (PSNPs) sent.
func (obj *isisMetric) HasL2PsnpSent() bool {
	return obj.obj.L2PsnpSent != nil
}

// SetL2PsnpSent sets the int32 value in the IsisMetric object
//  Number of Level 2 (L2) Partial Sequence Number Packet (PSNPs) sent.
func (obj *isisMetric) SetL2PsnpSent(value int32) IsisMetric {
	obj.obj.L2PsnpSent = &value

	return obj
}

// L2PsnpReceived returns a int32
//  Number of Level 2 (L2) Complete Sequence Number Packet (PSNPs) received.
func (obj *isisMetric) L2PsnpReceived() int32 {

	return *obj.obj.L2PsnpReceived

}

// L2PsnpReceived returns a int32
//  Number of Level 2 (L2) Complete Sequence Number Packet (PSNPs) received.
func (obj *isisMetric) HasL2PsnpReceived() bool {
	return obj.obj.L2PsnpReceived != nil
}

// SetL2PsnpReceived sets the int32 value in the IsisMetric object
//  Number of Level 2 (L2) Complete Sequence Number Packet (PSNPs) received.
func (obj *isisMetric) SetL2PsnpReceived(value int32) IsisMetric {
	obj.obj.L2PsnpReceived = &value

	return obj
}

// L2CsnpSent returns a int32
//  Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) sent.
func (obj *isisMetric) L2CsnpSent() int32 {

	return *obj.obj.L2CsnpSent

}

// L2CsnpSent returns a int32
//  Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) sent.
func (obj *isisMetric) HasL2CsnpSent() bool {
	return obj.obj.L2CsnpSent != nil
}

// SetL2CsnpSent sets the int32 value in the IsisMetric object
//  Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) sent.
func (obj *isisMetric) SetL2CsnpSent(value int32) IsisMetric {
	obj.obj.L2CsnpSent = &value

	return obj
}

// L2CsnpReceived returns a int32
//  Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) received.
func (obj *isisMetric) L2CsnpReceived() int32 {

	return *obj.obj.L2CsnpReceived

}

// L2CsnpReceived returns a int32
//  Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) received.
func (obj *isisMetric) HasL2CsnpReceived() bool {
	return obj.obj.L2CsnpReceived != nil
}

// SetL2CsnpReceived sets the int32 value in the IsisMetric object
//  Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) received.
func (obj *isisMetric) SetL2CsnpReceived(value int32) IsisMetric {
	obj.obj.L2CsnpReceived = &value

	return obj
}

// L2LspSent returns a int32
//  Number of Level 2 (L2) Link State Protocol Data Units (LSPs) sent.
func (obj *isisMetric) L2LspSent() int32 {

	return *obj.obj.L2LspSent

}

// L2LspSent returns a int32
//  Number of Level 2 (L2) Link State Protocol Data Units (LSPs) sent.
func (obj *isisMetric) HasL2LspSent() bool {
	return obj.obj.L2LspSent != nil
}

// SetL2LspSent sets the int32 value in the IsisMetric object
//  Number of Level 2 (L2) Link State Protocol Data Units (LSPs) sent.
func (obj *isisMetric) SetL2LspSent(value int32) IsisMetric {
	obj.obj.L2LspSent = &value

	return obj
}

// L2LspReceived returns a int32
//  Number of Level 2 (L2) Link State Protocol Data Units (LSPs) received.
func (obj *isisMetric) L2LspReceived() int32 {

	return *obj.obj.L2LspReceived

}

// L2LspReceived returns a int32
//  Number of Level 2 (L2) Link State Protocol Data Units (LSPs) received.
func (obj *isisMetric) HasL2LspReceived() bool {
	return obj.obj.L2LspReceived != nil
}

// SetL2LspReceived sets the int32 value in the IsisMetric object
//  Number of Level 2 (L2) Link State Protocol Data Units (LSPs) received.
func (obj *isisMetric) SetL2LspReceived(value int32) IsisMetric {
	obj.obj.L2LspReceived = &value

	return obj
}

func (obj *isisMetric) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *isisMetric) setDefault() {

}

type portState struct {
	obj *snappipb.PortState
}

func NewPortState() PortState {
	obj := portState{obj: &snappipb.PortState{}}
	obj.setDefault()
	return &obj
}

func (obj *portState) Msg() *snappipb.PortState {
	return obj.obj
}

func (obj *portState) SetMsg(msg *snappipb.PortState) PortState {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *portState) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *portState) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portState) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portState) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *portState) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portState) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *portState) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PortState interface {
	Msg() *snappipb.PortState
	SetMsg(*snappipb.PortState) PortState
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Name() string
	SetName(value string) PortState
	HasName() bool
	Link() PortStateLinkEnum
	SetLink(value PortStateLinkEnum) PortState
	HasLink() bool
	Capture() PortStateCaptureEnum
	SetCapture(value PortStateCaptureEnum) PortState
	HasCapture() bool
}

// Name returns a string
//  description is TBD
func (obj *portState) Name() string {

	return *obj.obj.Name

}

// Name returns a string
//  description is TBD
func (obj *portState) HasName() bool {
	return obj.obj.Name != nil
}

// SetName sets the string value in the PortState object
//  description is TBD
func (obj *portState) SetName(value string) PortState {
	obj.obj.Name = &value

	return obj
}

type PortStateLinkEnum string

var PortStateLink = struct {
	UP   PortStateLinkEnum
	DOWN PortStateLinkEnum
}{
	UP:   PortStateLinkEnum("up"),
	DOWN: PortStateLinkEnum("down"),
}

func (obj *portState) Link() PortStateLinkEnum {
	return PortStateLinkEnum(obj.obj.Link.Enum().String())
}

// Link returns a string
//  description is TBD
func (obj *portState) HasLink() bool {
	return obj.obj.Link != nil
}

func (obj *portState) SetLink(value PortStateLinkEnum) PortState {
	intValue, ok := snappipb.PortState_Link_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PortStateLinkEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PortState_Link_Enum(intValue)
	obj.obj.Link = &enumValue

	return obj
}

type PortStateCaptureEnum string

var PortStateCapture = struct {
	STARTED PortStateCaptureEnum
	STOPPED PortStateCaptureEnum
}{
	STARTED: PortStateCaptureEnum("started"),
	STOPPED: PortStateCaptureEnum("stopped"),
}

func (obj *portState) Capture() PortStateCaptureEnum {
	return PortStateCaptureEnum(obj.obj.Capture.Enum().String())
}

// Capture returns a string
//  description is TBD
func (obj *portState) HasCapture() bool {
	return obj.obj.Capture != nil
}

func (obj *portState) SetCapture(value PortStateCaptureEnum) PortState {
	intValue, ok := snappipb.PortState_Capture_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PortStateCaptureEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PortState_Capture_Enum(intValue)
	obj.obj.Capture = &enumValue

	return obj
}

func (obj *portState) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *portState) setDefault() {

}

type flowState struct {
	obj *snappipb.FlowState
}

func NewFlowState() FlowState {
	obj := flowState{obj: &snappipb.FlowState{}}
	obj.setDefault()
	return &obj
}

func (obj *flowState) Msg() *snappipb.FlowState {
	return obj.obj
}

func (obj *flowState) SetMsg(msg *snappipb.FlowState) FlowState {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowState) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowState) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowState) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowState) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowState) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowState) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowState) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowState interface {
	Msg() *snappipb.FlowState
	SetMsg(*snappipb.FlowState) FlowState
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Name() string
	SetName(value string) FlowState
	HasName() bool
	Transmit() FlowStateTransmitEnum
	SetTransmit(value FlowStateTransmitEnum) FlowState
	HasTransmit() bool
}

// Name returns a string
//  description is TBD
func (obj *flowState) Name() string {

	return *obj.obj.Name

}

// Name returns a string
//  description is TBD
func (obj *flowState) HasName() bool {
	return obj.obj.Name != nil
}

// SetName sets the string value in the FlowState object
//  description is TBD
func (obj *flowState) SetName(value string) FlowState {
	obj.obj.Name = &value

	return obj
}

type FlowStateTransmitEnum string

var FlowStateTransmit = struct {
	STARTED FlowStateTransmitEnum
	STOPPED FlowStateTransmitEnum
	PAUSED  FlowStateTransmitEnum
}{
	STARTED: FlowStateTransmitEnum("started"),
	STOPPED: FlowStateTransmitEnum("stopped"),
	PAUSED:  FlowStateTransmitEnum("paused"),
}

func (obj *flowState) Transmit() FlowStateTransmitEnum {
	return FlowStateTransmitEnum(obj.obj.Transmit.Enum().String())
}

// Transmit returns a string
//  description is TBD
func (obj *flowState) HasTransmit() bool {
	return obj.obj.Transmit != nil
}

func (obj *flowState) SetTransmit(value FlowStateTransmitEnum) FlowState {
	intValue, ok := snappipb.FlowState_Transmit_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowStateTransmitEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowState_Transmit_Enum(intValue)
	obj.obj.Transmit = &enumValue

	return obj
}

func (obj *flowState) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *flowState) setDefault() {

}

type lagProtocol struct {
	obj *snappipb.LagProtocol
}

func NewLagProtocol() LagProtocol {
	obj := lagProtocol{obj: &snappipb.LagProtocol{}}
	obj.setDefault()
	return &obj
}

func (obj *lagProtocol) Msg() *snappipb.LagProtocol {
	return obj.obj
}

func (obj *lagProtocol) SetMsg(msg *snappipb.LagProtocol) LagProtocol {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *lagProtocol) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *lagProtocol) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *lagProtocol) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagProtocol) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *lagProtocol) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagProtocol) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *lagProtocol) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type LagProtocol interface {
	Msg() *snappipb.LagProtocol
	SetMsg(*snappipb.LagProtocol) LagProtocol
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() LagProtocolChoiceEnum
	SetChoice(value LagProtocolChoiceEnum) LagProtocol
	HasChoice() bool
	Lacp() LagLacp
	SetLacp(value LagLacp) LagProtocol
	HasLacp() bool
	Static() LagStatic
	SetStatic(value LagStatic) LagProtocol
	HasStatic() bool
}

type LagProtocolChoiceEnum string

var LagProtocolChoice = struct {
	LACP   LagProtocolChoiceEnum
	STATIC LagProtocolChoiceEnum
}{
	LACP:   LagProtocolChoiceEnum("lacp"),
	STATIC: LagProtocolChoiceEnum("static"),
}

func (obj *lagProtocol) Choice() LagProtocolChoiceEnum {
	return LagProtocolChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  The type of LAG protocol.
func (obj *lagProtocol) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *lagProtocol) SetChoice(value LagProtocolChoiceEnum) LagProtocol {
	intValue, ok := snappipb.LagProtocol_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on LagProtocolChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.LagProtocol_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "lacp" {
		obj.obj.Lacp = nil
	}

	if string(value) != "static" {
		obj.obj.Static = nil
	}

	return obj
}

// Lacp returns a LagLacp
//  description is TBD
func (obj *lagProtocol) Lacp() LagLacp {
	obj.SetChoice(LagProtocolChoice.LACP)
	if obj.obj.Lacp == nil {
		obj.obj.Lacp = NewLagLacp().Msg()
	}
	return &lagLacp{obj: obj.obj.Lacp}
}

// Lacp returns a LagLacp
//  description is TBD
func (obj *lagProtocol) HasLacp() bool {
	return obj.obj.Lacp != nil
}

// SetLacp sets the LagLacp value in the LagProtocol object
//  description is TBD
func (obj *lagProtocol) SetLacp(value LagLacp) LagProtocol {
	obj.Lacp().SetMsg(value.Msg())
	obj.SetChoice(LagProtocolChoice.LACP)
	return obj
}

// Static returns a LagStatic
//  description is TBD
func (obj *lagProtocol) Static() LagStatic {
	obj.SetChoice(LagProtocolChoice.STATIC)
	if obj.obj.Static == nil {
		obj.obj.Static = NewLagStatic().Msg()
	}
	return &lagStatic{obj: obj.obj.Static}
}

// Static returns a LagStatic
//  description is TBD
func (obj *lagProtocol) HasStatic() bool {
	return obj.obj.Static != nil
}

// SetStatic sets the LagStatic value in the LagProtocol object
//  description is TBD
func (obj *lagProtocol) SetStatic(value LagStatic) LagProtocol {
	obj.Static().SetMsg(value.Msg())
	obj.SetChoice(LagProtocolChoice.STATIC)
	return obj
}

func (obj *lagProtocol) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Lacp != nil {
		obj.Lacp().validateObj(set_default)
	}

	if obj.obj.Static != nil {
		obj.Static().validateObj(set_default)
	}
}

func (obj *lagProtocol) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(LagProtocolChoice.LACP)
		obj.Lacp()
	}

}

type deviceEthernetBase struct {
	obj *snappipb.DeviceEthernetBase
}

func NewDeviceEthernetBase() DeviceEthernetBase {
	obj := deviceEthernetBase{obj: &snappipb.DeviceEthernetBase{}}
	obj.setDefault()
	return &obj
}

func (obj *deviceEthernetBase) Msg() *snappipb.DeviceEthernetBase {
	return obj.obj
}

func (obj *deviceEthernetBase) SetMsg(msg *snappipb.DeviceEthernetBase) DeviceEthernetBase {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *deviceEthernetBase) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *deviceEthernetBase) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceEthernetBase) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceEthernetBase) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceEthernetBase) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceEthernetBase) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *deviceEthernetBase) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type DeviceEthernetBase interface {
	Msg() *snappipb.DeviceEthernetBase
	SetMsg(*snappipb.DeviceEthernetBase) DeviceEthernetBase
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Mac() string
	SetMac(value string) DeviceEthernetBase
	Mtu() int32
	SetMtu(value int32) DeviceEthernetBase
	HasMtu() bool
	Vlans() DeviceEthernetBaseDeviceVlanIter
	Name() string
	SetName(value string) DeviceEthernetBase
}

// Mac returns a string
//  Media Access Control address.
func (obj *deviceEthernetBase) Mac() string {

	return obj.obj.Mac
}

// SetMac sets the string value in the DeviceEthernetBase object
//  Media Access Control address.
func (obj *deviceEthernetBase) SetMac(value string) DeviceEthernetBase {
	obj.obj.Mac = value

	return obj
}

// Mtu returns a int32
//  Maximum Transmission Unit.
func (obj *deviceEthernetBase) Mtu() int32 {

	if obj.obj.Mtu == nil {
		*obj.obj.Mtu = 1500
	}

	return *obj.obj.Mtu

}

// Mtu returns a int32
//  Maximum Transmission Unit.
func (obj *deviceEthernetBase) HasMtu() bool {
	return obj.obj.Mtu != nil
}

// SetMtu sets the int32 value in the DeviceEthernetBase object
//  Maximum Transmission Unit.
func (obj *deviceEthernetBase) SetMtu(value int32) DeviceEthernetBase {
	obj.obj.Mtu = &value

	return obj
}

// Vlans returns a []DeviceVlan
//  List of VLANs
func (obj *deviceEthernetBase) Vlans() DeviceEthernetBaseDeviceVlanIter {
	if obj.obj.Vlans == nil {
		obj.obj.Vlans = []*snappipb.DeviceVlan{}
	}
	return &deviceEthernetBaseDeviceVlanIter{obj: obj}
}

type deviceEthernetBaseDeviceVlanIter struct {
	obj *deviceEthernetBase
}

type DeviceEthernetBaseDeviceVlanIter interface {
	Add() DeviceVlan
	Items() []DeviceVlan
}

func (obj *deviceEthernetBaseDeviceVlanIter) Add() DeviceVlan {
	newObj := &snappipb.DeviceVlan{}
	obj.obj.obj.Vlans = append(obj.obj.obj.Vlans, newObj)
	newLibObj := &deviceVlan{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *deviceEthernetBaseDeviceVlanIter) Items() []DeviceVlan {
	slice := []DeviceVlan{}
	for _, item := range obj.obj.obj.Vlans {
		slice = append(slice, &deviceVlan{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceEthernetBase) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the DeviceEthernetBase object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceEthernetBase) SetName(value string) DeviceEthernetBase {
	obj.obj.Name = value

	return obj
}

func (obj *deviceEthernetBase) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Mac required
	if obj.obj.Mac == "" {
		validation = append(validation, "Mac is required field on interface DeviceEthernetBase")
	} else {
		err := validateMac(obj.Mac())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Mac DeviceEthernetBase"))
		}
	}

	if obj.obj.Mtu != nil {
		if *obj.obj.Mtu < 0 || *obj.obj.Mtu > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= DeviceEthernetBase.Mtu <= 65535 but Got %d", *obj.obj.Mtu))
		}

	}

	if obj.obj.Vlans != nil {
		for _, item := range obj.Vlans().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface DeviceEthernetBase")
	}
}

func (obj *deviceEthernetBase) setDefault() {
	if obj.obj.Mtu == nil {
		obj.SetMtu(1500)
	}

}

type layer1Ieee8021Qbb struct {
	obj *snappipb.Layer1Ieee8021Qbb
}

func NewLayer1Ieee8021Qbb() Layer1Ieee8021Qbb {
	obj := layer1Ieee8021Qbb{obj: &snappipb.Layer1Ieee8021Qbb{}}
	obj.setDefault()
	return &obj
}

func (obj *layer1Ieee8021Qbb) Msg() *snappipb.Layer1Ieee8021Qbb {
	return obj.obj
}

func (obj *layer1Ieee8021Qbb) SetMsg(msg *snappipb.Layer1Ieee8021Qbb) Layer1Ieee8021Qbb {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *layer1Ieee8021Qbb) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *layer1Ieee8021Qbb) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *layer1Ieee8021Qbb) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1Ieee8021Qbb) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *layer1Ieee8021Qbb) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1Ieee8021Qbb) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *layer1Ieee8021Qbb) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Layer1Ieee8021Qbb interface {
	Msg() *snappipb.Layer1Ieee8021Qbb
	SetMsg(*snappipb.Layer1Ieee8021Qbb) Layer1Ieee8021Qbb
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PfcDelay() int32
	SetPfcDelay(value int32) Layer1Ieee8021Qbb
	HasPfcDelay() bool
	PfcClass0() int32
	SetPfcClass0(value int32) Layer1Ieee8021Qbb
	HasPfcClass0() bool
	PfcClass1() int32
	SetPfcClass1(value int32) Layer1Ieee8021Qbb
	HasPfcClass1() bool
	PfcClass2() int32
	SetPfcClass2(value int32) Layer1Ieee8021Qbb
	HasPfcClass2() bool
	PfcClass3() int32
	SetPfcClass3(value int32) Layer1Ieee8021Qbb
	HasPfcClass3() bool
	PfcClass4() int32
	SetPfcClass4(value int32) Layer1Ieee8021Qbb
	HasPfcClass4() bool
	PfcClass5() int32
	SetPfcClass5(value int32) Layer1Ieee8021Qbb
	HasPfcClass5() bool
	PfcClass6() int32
	SetPfcClass6(value int32) Layer1Ieee8021Qbb
	HasPfcClass6() bool
	PfcClass7() int32
	SetPfcClass7(value int32) Layer1Ieee8021Qbb
	HasPfcClass7() bool
}

// PfcDelay returns a int32
//  The upper limit on the transmit time of a queue after receiving a
//  message to pause a specified priority.
//  A value of 0 or null indicates that pfc delay will not be enabled.
func (obj *layer1Ieee8021Qbb) PfcDelay() int32 {

	if obj.obj.PfcDelay == nil {
		*obj.obj.PfcDelay = 0
	}

	return *obj.obj.PfcDelay

}

// PfcDelay returns a int32
//  The upper limit on the transmit time of a queue after receiving a
//  message to pause a specified priority.
//  A value of 0 or null indicates that pfc delay will not be enabled.
func (obj *layer1Ieee8021Qbb) HasPfcDelay() bool {
	return obj.obj.PfcDelay != nil
}

// SetPfcDelay sets the int32 value in the Layer1Ieee8021Qbb object
//  The upper limit on the transmit time of a queue after receiving a
//  message to pause a specified priority.
//  A value of 0 or null indicates that pfc delay will not be enabled.
func (obj *layer1Ieee8021Qbb) SetPfcDelay(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcDelay = &value

	return obj
}

// PfcClass0 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass0() int32 {

	if obj.obj.PfcClass_0 == nil {
		*obj.obj.PfcClass_0 = 0
	}

	return *obj.obj.PfcClass_0

}

// PfcClass0 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) HasPfcClass0() bool {
	return obj.obj.PfcClass_0 != nil
}

// SetPfcClass0 sets the int32 value in the Layer1Ieee8021Qbb object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass0(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_0 = &value

	return obj
}

// PfcClass1 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass1() int32 {

	if obj.obj.PfcClass_1 == nil {
		*obj.obj.PfcClass_1 = 1
	}

	return *obj.obj.PfcClass_1

}

// PfcClass1 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) HasPfcClass1() bool {
	return obj.obj.PfcClass_1 != nil
}

// SetPfcClass1 sets the int32 value in the Layer1Ieee8021Qbb object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass1(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_1 = &value

	return obj
}

// PfcClass2 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass2() int32 {

	if obj.obj.PfcClass_2 == nil {
		*obj.obj.PfcClass_2 = 2
	}

	return *obj.obj.PfcClass_2

}

// PfcClass2 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) HasPfcClass2() bool {
	return obj.obj.PfcClass_2 != nil
}

// SetPfcClass2 sets the int32 value in the Layer1Ieee8021Qbb object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass2(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_2 = &value

	return obj
}

// PfcClass3 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass3() int32 {

	if obj.obj.PfcClass_3 == nil {
		*obj.obj.PfcClass_3 = 3
	}

	return *obj.obj.PfcClass_3

}

// PfcClass3 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) HasPfcClass3() bool {
	return obj.obj.PfcClass_3 != nil
}

// SetPfcClass3 sets the int32 value in the Layer1Ieee8021Qbb object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass3(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_3 = &value

	return obj
}

// PfcClass4 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass4() int32 {

	if obj.obj.PfcClass_4 == nil {
		*obj.obj.PfcClass_4 = 4
	}

	return *obj.obj.PfcClass_4

}

// PfcClass4 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) HasPfcClass4() bool {
	return obj.obj.PfcClass_4 != nil
}

// SetPfcClass4 sets the int32 value in the Layer1Ieee8021Qbb object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass4(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_4 = &value

	return obj
}

// PfcClass5 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass5() int32 {

	if obj.obj.PfcClass_5 == nil {
		*obj.obj.PfcClass_5 = 5
	}

	return *obj.obj.PfcClass_5

}

// PfcClass5 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) HasPfcClass5() bool {
	return obj.obj.PfcClass_5 != nil
}

// SetPfcClass5 sets the int32 value in the Layer1Ieee8021Qbb object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass5(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_5 = &value

	return obj
}

// PfcClass6 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass6() int32 {

	if obj.obj.PfcClass_6 == nil {
		*obj.obj.PfcClass_6 = 6
	}

	return *obj.obj.PfcClass_6

}

// PfcClass6 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) HasPfcClass6() bool {
	return obj.obj.PfcClass_6 != nil
}

// SetPfcClass6 sets the int32 value in the Layer1Ieee8021Qbb object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass6(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_6 = &value

	return obj
}

// PfcClass7 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass7() int32 {

	if obj.obj.PfcClass_7 == nil {
		*obj.obj.PfcClass_7 = 7
	}

	return *obj.obj.PfcClass_7

}

// PfcClass7 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) HasPfcClass7() bool {
	return obj.obj.PfcClass_7 != nil
}

// SetPfcClass7 sets the int32 value in the Layer1Ieee8021Qbb object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass7(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_7 = &value

	return obj
}

func (obj *layer1Ieee8021Qbb) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *layer1Ieee8021Qbb) setDefault() {
	if obj.obj.PfcDelay == nil {
		obj.SetPfcDelay(0)
	}
	if obj.obj.PfcClass_0 == nil {
		obj.SetPfcClass0(0)
	}
	if obj.obj.PfcClass_1 == nil {
		obj.SetPfcClass1(1)
	}
	if obj.obj.PfcClass_2 == nil {
		obj.SetPfcClass2(2)
	}
	if obj.obj.PfcClass_3 == nil {
		obj.SetPfcClass3(3)
	}
	if obj.obj.PfcClass_4 == nil {
		obj.SetPfcClass4(4)
	}
	if obj.obj.PfcClass_5 == nil {
		obj.SetPfcClass5(5)
	}
	if obj.obj.PfcClass_6 == nil {
		obj.SetPfcClass6(6)
	}
	if obj.obj.PfcClass_7 == nil {
		obj.SetPfcClass7(7)
	}

}

type layer1Ieee8023X struct {
	obj *snappipb.Layer1Ieee8023X
}

func NewLayer1Ieee8023X() Layer1Ieee8023X {
	obj := layer1Ieee8023X{obj: &snappipb.Layer1Ieee8023X{}}
	obj.setDefault()
	return &obj
}

func (obj *layer1Ieee8023X) Msg() *snappipb.Layer1Ieee8023X {
	return obj.obj
}

func (obj *layer1Ieee8023X) SetMsg(msg *snappipb.Layer1Ieee8023X) Layer1Ieee8023X {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *layer1Ieee8023X) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *layer1Ieee8023X) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *layer1Ieee8023X) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1Ieee8023X) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *layer1Ieee8023X) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1Ieee8023X) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *layer1Ieee8023X) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type Layer1Ieee8023X interface {
	Msg() *snappipb.Layer1Ieee8023X
	SetMsg(*snappipb.Layer1Ieee8023X) Layer1Ieee8023X
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
}

func (obj *layer1Ieee8023X) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *layer1Ieee8023X) setDefault() {

}

type captureCustom struct {
	obj *snappipb.CaptureCustom
}

func NewCaptureCustom() CaptureCustom {
	obj := captureCustom{obj: &snappipb.CaptureCustom{}}
	obj.setDefault()
	return &obj
}

func (obj *captureCustom) Msg() *snappipb.CaptureCustom {
	return obj.obj
}

func (obj *captureCustom) SetMsg(msg *snappipb.CaptureCustom) CaptureCustom {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureCustom) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *captureCustom) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureCustom) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureCustom) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureCustom) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureCustom) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *captureCustom) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type CaptureCustom interface {
	Msg() *snappipb.CaptureCustom
	SetMsg(*snappipb.CaptureCustom) CaptureCustom
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Offset() int32
	SetOffset(value int32) CaptureCustom
	HasOffset() bool
	BitLength() int32
	SetBitLength(value int32) CaptureCustom
	HasBitLength() bool
	Value() string
	SetValue(value string) CaptureCustom
	HasValue() bool
	Mask() string
	SetMask(value string) CaptureCustom
	HasMask() bool
	Negate() bool
	SetNegate(value bool) CaptureCustom
	HasNegate() bool
}

// Offset returns a int32
//  The bit offset of field to filter on
func (obj *captureCustom) Offset() int32 {

	if obj.obj.Offset == nil {
		*obj.obj.Offset = 0
	}

	return *obj.obj.Offset

}

// Offset returns a int32
//  The bit offset of field to filter on
func (obj *captureCustom) HasOffset() bool {
	return obj.obj.Offset != nil
}

// SetOffset sets the int32 value in the CaptureCustom object
//  The bit offset of field to filter on
func (obj *captureCustom) SetOffset(value int32) CaptureCustom {
	obj.obj.Offset = &value

	return obj
}

// BitLength returns a int32
//  The bit length of field to filter on
func (obj *captureCustom) BitLength() int32 {

	if obj.obj.BitLength == nil {
		*obj.obj.BitLength = 8
	}

	return *obj.obj.BitLength

}

// BitLength returns a int32
//  The bit length of field to filter on
func (obj *captureCustom) HasBitLength() bool {
	return obj.obj.BitLength != nil
}

// SetBitLength sets the int32 value in the CaptureCustom object
//  The bit length of field to filter on
func (obj *captureCustom) SetBitLength(value int32) CaptureCustom {
	obj.obj.BitLength = &value

	return obj
}

// Value returns a string
//  description is TBD
func (obj *captureCustom) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "00"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *captureCustom) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the CaptureCustom object
//  description is TBD
func (obj *captureCustom) SetValue(value string) CaptureCustom {
	obj.obj.Value = &value

	return obj
}

// Mask returns a string
//  description is TBD
func (obj *captureCustom) Mask() string {

	if obj.obj.Mask == nil {
		*obj.obj.Mask = "00"
	}

	return *obj.obj.Mask

}

// Mask returns a string
//  description is TBD
func (obj *captureCustom) HasMask() bool {
	return obj.obj.Mask != nil
}

// SetMask sets the string value in the CaptureCustom object
//  description is TBD
func (obj *captureCustom) SetMask(value string) CaptureCustom {
	obj.obj.Mask = &value

	return obj
}

// Negate returns a bool
//  description is TBD
func (obj *captureCustom) Negate() bool {

	if obj.obj.Negate == nil {
		*obj.obj.Negate = false
	}

	return *obj.obj.Negate

}

// Negate returns a bool
//  description is TBD
func (obj *captureCustom) HasNegate() bool {
	return obj.obj.Negate != nil
}

// SetNegate sets the bool value in the CaptureCustom object
//  description is TBD
func (obj *captureCustom) SetNegate(value bool) CaptureCustom {
	obj.obj.Negate = &value

	return obj
}

func (obj *captureCustom) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateHex(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value CaptureCustom"))
		}
	}

	if obj.obj.Mask != nil {
		err := validateHex(obj.Mask())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Mask CaptureCustom"))
		}
	}

}

func (obj *captureCustom) setDefault() {
	if obj.obj.Offset == nil {
		obj.SetOffset(0)
	}
	if obj.obj.BitLength == nil {
		obj.SetBitLength(8)
	}
	if obj.obj.Value == nil {
		obj.SetValue("00")
	}
	if obj.obj.Mask == nil {
		obj.SetMask("00")
	}
	if obj.obj.Negate == nil {
		obj.SetNegate(false)
	}

}

type captureEthernet struct {
	obj *snappipb.CaptureEthernet
}

func NewCaptureEthernet() CaptureEthernet {
	obj := captureEthernet{obj: &snappipb.CaptureEthernet{}}
	obj.setDefault()
	return &obj
}

func (obj *captureEthernet) Msg() *snappipb.CaptureEthernet {
	return obj.obj
}

func (obj *captureEthernet) SetMsg(msg *snappipb.CaptureEthernet) CaptureEthernet {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureEthernet) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *captureEthernet) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureEthernet) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureEthernet) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureEthernet) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureEthernet) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *captureEthernet) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type CaptureEthernet interface {
	Msg() *snappipb.CaptureEthernet
	SetMsg(*snappipb.CaptureEthernet) CaptureEthernet
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Src() CaptureField
	SetSrc(value CaptureField) CaptureEthernet
	HasSrc() bool
	Dst() CaptureField
	SetDst(value CaptureField) CaptureEthernet
	HasDst() bool
	EtherType() CaptureField
	SetEtherType(value CaptureField) CaptureEthernet
	HasEtherType() bool
	PfcQueue() CaptureField
	SetPfcQueue(value CaptureField) CaptureEthernet
	HasPfcQueue() bool
}

// Src returns a CaptureField
//  description is TBD
func (obj *captureEthernet) Src() CaptureField {
	if obj.obj.Src == nil {
		obj.obj.Src = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Src}
}

// Src returns a CaptureField
//  description is TBD
func (obj *captureEthernet) HasSrc() bool {
	return obj.obj.Src != nil
}

// SetSrc sets the CaptureField value in the CaptureEthernet object
//  description is TBD
func (obj *captureEthernet) SetSrc(value CaptureField) CaptureEthernet {
	obj.Src().SetMsg(value.Msg())

	return obj
}

// Dst returns a CaptureField
//  description is TBD
func (obj *captureEthernet) Dst() CaptureField {
	if obj.obj.Dst == nil {
		obj.obj.Dst = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Dst}
}

// Dst returns a CaptureField
//  description is TBD
func (obj *captureEthernet) HasDst() bool {
	return obj.obj.Dst != nil
}

// SetDst sets the CaptureField value in the CaptureEthernet object
//  description is TBD
func (obj *captureEthernet) SetDst(value CaptureField) CaptureEthernet {
	obj.Dst().SetMsg(value.Msg())

	return obj
}

// EtherType returns a CaptureField
//  description is TBD
func (obj *captureEthernet) EtherType() CaptureField {
	if obj.obj.EtherType == nil {
		obj.obj.EtherType = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.EtherType}
}

// EtherType returns a CaptureField
//  description is TBD
func (obj *captureEthernet) HasEtherType() bool {
	return obj.obj.EtherType != nil
}

// SetEtherType sets the CaptureField value in the CaptureEthernet object
//  description is TBD
func (obj *captureEthernet) SetEtherType(value CaptureField) CaptureEthernet {
	obj.EtherType().SetMsg(value.Msg())

	return obj
}

// PfcQueue returns a CaptureField
//  description is TBD
func (obj *captureEthernet) PfcQueue() CaptureField {
	if obj.obj.PfcQueue == nil {
		obj.obj.PfcQueue = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.PfcQueue}
}

// PfcQueue returns a CaptureField
//  description is TBD
func (obj *captureEthernet) HasPfcQueue() bool {
	return obj.obj.PfcQueue != nil
}

// SetPfcQueue sets the CaptureField value in the CaptureEthernet object
//  description is TBD
func (obj *captureEthernet) SetPfcQueue(value CaptureField) CaptureEthernet {
	obj.PfcQueue().SetMsg(value.Msg())

	return obj
}

func (obj *captureEthernet) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Src != nil {
		obj.Src().validateObj(set_default)
	}

	if obj.obj.Dst != nil {
		obj.Dst().validateObj(set_default)
	}

	if obj.obj.EtherType != nil {
		obj.EtherType().validateObj(set_default)
	}

	if obj.obj.PfcQueue != nil {
		obj.PfcQueue().validateObj(set_default)
	}
}

func (obj *captureEthernet) setDefault() {

}

type captureVlan struct {
	obj *snappipb.CaptureVlan
}

func NewCaptureVlan() CaptureVlan {
	obj := captureVlan{obj: &snappipb.CaptureVlan{}}
	obj.setDefault()
	return &obj
}

func (obj *captureVlan) Msg() *snappipb.CaptureVlan {
	return obj.obj
}

func (obj *captureVlan) SetMsg(msg *snappipb.CaptureVlan) CaptureVlan {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureVlan) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *captureVlan) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureVlan) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureVlan) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureVlan) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureVlan) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *captureVlan) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type CaptureVlan interface {
	Msg() *snappipb.CaptureVlan
	SetMsg(*snappipb.CaptureVlan) CaptureVlan
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Priority() CaptureField
	SetPriority(value CaptureField) CaptureVlan
	HasPriority() bool
	Cfi() CaptureField
	SetCfi(value CaptureField) CaptureVlan
	HasCfi() bool
	Id() CaptureField
	SetId(value CaptureField) CaptureVlan
	HasId() bool
	Protocol() CaptureField
	SetProtocol(value CaptureField) CaptureVlan
	HasProtocol() bool
}

// Priority returns a CaptureField
//  description is TBD
func (obj *captureVlan) Priority() CaptureField {
	if obj.obj.Priority == nil {
		obj.obj.Priority = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Priority}
}

// Priority returns a CaptureField
//  description is TBD
func (obj *captureVlan) HasPriority() bool {
	return obj.obj.Priority != nil
}

// SetPriority sets the CaptureField value in the CaptureVlan object
//  description is TBD
func (obj *captureVlan) SetPriority(value CaptureField) CaptureVlan {
	obj.Priority().SetMsg(value.Msg())

	return obj
}

// Cfi returns a CaptureField
//  description is TBD
func (obj *captureVlan) Cfi() CaptureField {
	if obj.obj.Cfi == nil {
		obj.obj.Cfi = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Cfi}
}

// Cfi returns a CaptureField
//  description is TBD
func (obj *captureVlan) HasCfi() bool {
	return obj.obj.Cfi != nil
}

// SetCfi sets the CaptureField value in the CaptureVlan object
//  description is TBD
func (obj *captureVlan) SetCfi(value CaptureField) CaptureVlan {
	obj.Cfi().SetMsg(value.Msg())

	return obj
}

// Id returns a CaptureField
//  description is TBD
func (obj *captureVlan) Id() CaptureField {
	if obj.obj.Id == nil {
		obj.obj.Id = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Id}
}

// Id returns a CaptureField
//  description is TBD
func (obj *captureVlan) HasId() bool {
	return obj.obj.Id != nil
}

// SetId sets the CaptureField value in the CaptureVlan object
//  description is TBD
func (obj *captureVlan) SetId(value CaptureField) CaptureVlan {
	obj.Id().SetMsg(value.Msg())

	return obj
}

// Protocol returns a CaptureField
//  description is TBD
func (obj *captureVlan) Protocol() CaptureField {
	if obj.obj.Protocol == nil {
		obj.obj.Protocol = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Protocol}
}

// Protocol returns a CaptureField
//  description is TBD
func (obj *captureVlan) HasProtocol() bool {
	return obj.obj.Protocol != nil
}

// SetProtocol sets the CaptureField value in the CaptureVlan object
//  description is TBD
func (obj *captureVlan) SetProtocol(value CaptureField) CaptureVlan {
	obj.Protocol().SetMsg(value.Msg())

	return obj
}

func (obj *captureVlan) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Priority != nil {
		obj.Priority().validateObj(set_default)
	}

	if obj.obj.Cfi != nil {
		obj.Cfi().validateObj(set_default)
	}

	if obj.obj.Id != nil {
		obj.Id().validateObj(set_default)
	}

	if obj.obj.Protocol != nil {
		obj.Protocol().validateObj(set_default)
	}
}

func (obj *captureVlan) setDefault() {

}

type captureIpv4 struct {
	obj *snappipb.CaptureIpv4
}

func NewCaptureIpv4() CaptureIpv4 {
	obj := captureIpv4{obj: &snappipb.CaptureIpv4{}}
	obj.setDefault()
	return &obj
}

func (obj *captureIpv4) Msg() *snappipb.CaptureIpv4 {
	return obj.obj
}

func (obj *captureIpv4) SetMsg(msg *snappipb.CaptureIpv4) CaptureIpv4 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureIpv4) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *captureIpv4) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureIpv4) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureIpv4) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureIpv4) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureIpv4) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *captureIpv4) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type CaptureIpv4 interface {
	Msg() *snappipb.CaptureIpv4
	SetMsg(*snappipb.CaptureIpv4) CaptureIpv4
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Version() CaptureField
	SetVersion(value CaptureField) CaptureIpv4
	HasVersion() bool
	HeaderLength() CaptureField
	SetHeaderLength(value CaptureField) CaptureIpv4
	HasHeaderLength() bool
	Priority() CaptureField
	SetPriority(value CaptureField) CaptureIpv4
	HasPriority() bool
	TotalLength() CaptureField
	SetTotalLength(value CaptureField) CaptureIpv4
	HasTotalLength() bool
	Identification() CaptureField
	SetIdentification(value CaptureField) CaptureIpv4
	HasIdentification() bool
	Reserved() CaptureField
	SetReserved(value CaptureField) CaptureIpv4
	HasReserved() bool
	DontFragment() CaptureField
	SetDontFragment(value CaptureField) CaptureIpv4
	HasDontFragment() bool
	MoreFragments() CaptureField
	SetMoreFragments(value CaptureField) CaptureIpv4
	HasMoreFragments() bool
	FragmentOffset() CaptureField
	SetFragmentOffset(value CaptureField) CaptureIpv4
	HasFragmentOffset() bool
	TimeToLive() CaptureField
	SetTimeToLive(value CaptureField) CaptureIpv4
	HasTimeToLive() bool
	Protocol() CaptureField
	SetProtocol(value CaptureField) CaptureIpv4
	HasProtocol() bool
	HeaderChecksum() CaptureField
	SetHeaderChecksum(value CaptureField) CaptureIpv4
	HasHeaderChecksum() bool
	Src() CaptureField
	SetSrc(value CaptureField) CaptureIpv4
	HasSrc() bool
	Dst() CaptureField
	SetDst(value CaptureField) CaptureIpv4
	HasDst() bool
}

// Version returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Version() CaptureField {
	if obj.obj.Version == nil {
		obj.obj.Version = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Version}
}

// Version returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasVersion() bool {
	return obj.obj.Version != nil
}

// SetVersion sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetVersion(value CaptureField) CaptureIpv4 {
	obj.Version().SetMsg(value.Msg())

	return obj
}

// HeaderLength returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HeaderLength() CaptureField {
	if obj.obj.HeaderLength == nil {
		obj.obj.HeaderLength = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.HeaderLength}
}

// HeaderLength returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasHeaderLength() bool {
	return obj.obj.HeaderLength != nil
}

// SetHeaderLength sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetHeaderLength(value CaptureField) CaptureIpv4 {
	obj.HeaderLength().SetMsg(value.Msg())

	return obj
}

// Priority returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Priority() CaptureField {
	if obj.obj.Priority == nil {
		obj.obj.Priority = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Priority}
}

// Priority returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasPriority() bool {
	return obj.obj.Priority != nil
}

// SetPriority sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetPriority(value CaptureField) CaptureIpv4 {
	obj.Priority().SetMsg(value.Msg())

	return obj
}

// TotalLength returns a CaptureField
//  description is TBD
func (obj *captureIpv4) TotalLength() CaptureField {
	if obj.obj.TotalLength == nil {
		obj.obj.TotalLength = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.TotalLength}
}

// TotalLength returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasTotalLength() bool {
	return obj.obj.TotalLength != nil
}

// SetTotalLength sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetTotalLength(value CaptureField) CaptureIpv4 {
	obj.TotalLength().SetMsg(value.Msg())

	return obj
}

// Identification returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Identification() CaptureField {
	if obj.obj.Identification == nil {
		obj.obj.Identification = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Identification}
}

// Identification returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasIdentification() bool {
	return obj.obj.Identification != nil
}

// SetIdentification sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetIdentification(value CaptureField) CaptureIpv4 {
	obj.Identification().SetMsg(value.Msg())

	return obj
}

// Reserved returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Reserved() CaptureField {
	if obj.obj.Reserved == nil {
		obj.obj.Reserved = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Reserved}
}

// Reserved returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasReserved() bool {
	return obj.obj.Reserved != nil
}

// SetReserved sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetReserved(value CaptureField) CaptureIpv4 {
	obj.Reserved().SetMsg(value.Msg())

	return obj
}

// DontFragment returns a CaptureField
//  description is TBD
func (obj *captureIpv4) DontFragment() CaptureField {
	if obj.obj.DontFragment == nil {
		obj.obj.DontFragment = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.DontFragment}
}

// DontFragment returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasDontFragment() bool {
	return obj.obj.DontFragment != nil
}

// SetDontFragment sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetDontFragment(value CaptureField) CaptureIpv4 {
	obj.DontFragment().SetMsg(value.Msg())

	return obj
}

// MoreFragments returns a CaptureField
//  description is TBD
func (obj *captureIpv4) MoreFragments() CaptureField {
	if obj.obj.MoreFragments == nil {
		obj.obj.MoreFragments = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.MoreFragments}
}

// MoreFragments returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasMoreFragments() bool {
	return obj.obj.MoreFragments != nil
}

// SetMoreFragments sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetMoreFragments(value CaptureField) CaptureIpv4 {
	obj.MoreFragments().SetMsg(value.Msg())

	return obj
}

// FragmentOffset returns a CaptureField
//  description is TBD
func (obj *captureIpv4) FragmentOffset() CaptureField {
	if obj.obj.FragmentOffset == nil {
		obj.obj.FragmentOffset = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.FragmentOffset}
}

// FragmentOffset returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasFragmentOffset() bool {
	return obj.obj.FragmentOffset != nil
}

// SetFragmentOffset sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetFragmentOffset(value CaptureField) CaptureIpv4 {
	obj.FragmentOffset().SetMsg(value.Msg())

	return obj
}

// TimeToLive returns a CaptureField
//  description is TBD
func (obj *captureIpv4) TimeToLive() CaptureField {
	if obj.obj.TimeToLive == nil {
		obj.obj.TimeToLive = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.TimeToLive}
}

// TimeToLive returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasTimeToLive() bool {
	return obj.obj.TimeToLive != nil
}

// SetTimeToLive sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetTimeToLive(value CaptureField) CaptureIpv4 {
	obj.TimeToLive().SetMsg(value.Msg())

	return obj
}

// Protocol returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Protocol() CaptureField {
	if obj.obj.Protocol == nil {
		obj.obj.Protocol = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Protocol}
}

// Protocol returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasProtocol() bool {
	return obj.obj.Protocol != nil
}

// SetProtocol sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetProtocol(value CaptureField) CaptureIpv4 {
	obj.Protocol().SetMsg(value.Msg())

	return obj
}

// HeaderChecksum returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HeaderChecksum() CaptureField {
	if obj.obj.HeaderChecksum == nil {
		obj.obj.HeaderChecksum = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.HeaderChecksum}
}

// HeaderChecksum returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasHeaderChecksum() bool {
	return obj.obj.HeaderChecksum != nil
}

// SetHeaderChecksum sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetHeaderChecksum(value CaptureField) CaptureIpv4 {
	obj.HeaderChecksum().SetMsg(value.Msg())

	return obj
}

// Src returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Src() CaptureField {
	if obj.obj.Src == nil {
		obj.obj.Src = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Src}
}

// Src returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasSrc() bool {
	return obj.obj.Src != nil
}

// SetSrc sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetSrc(value CaptureField) CaptureIpv4 {
	obj.Src().SetMsg(value.Msg())

	return obj
}

// Dst returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Dst() CaptureField {
	if obj.obj.Dst == nil {
		obj.obj.Dst = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Dst}
}

// Dst returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HasDst() bool {
	return obj.obj.Dst != nil
}

// SetDst sets the CaptureField value in the CaptureIpv4 object
//  description is TBD
func (obj *captureIpv4) SetDst(value CaptureField) CaptureIpv4 {
	obj.Dst().SetMsg(value.Msg())

	return obj
}

func (obj *captureIpv4) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Version != nil {
		obj.Version().validateObj(set_default)
	}

	if obj.obj.HeaderLength != nil {
		obj.HeaderLength().validateObj(set_default)
	}

	if obj.obj.Priority != nil {
		obj.Priority().validateObj(set_default)
	}

	if obj.obj.TotalLength != nil {
		obj.TotalLength().validateObj(set_default)
	}

	if obj.obj.Identification != nil {
		obj.Identification().validateObj(set_default)
	}

	if obj.obj.Reserved != nil {
		obj.Reserved().validateObj(set_default)
	}

	if obj.obj.DontFragment != nil {
		obj.DontFragment().validateObj(set_default)
	}

	if obj.obj.MoreFragments != nil {
		obj.MoreFragments().validateObj(set_default)
	}

	if obj.obj.FragmentOffset != nil {
		obj.FragmentOffset().validateObj(set_default)
	}

	if obj.obj.TimeToLive != nil {
		obj.TimeToLive().validateObj(set_default)
	}

	if obj.obj.Protocol != nil {
		obj.Protocol().validateObj(set_default)
	}

	if obj.obj.HeaderChecksum != nil {
		obj.HeaderChecksum().validateObj(set_default)
	}

	if obj.obj.Src != nil {
		obj.Src().validateObj(set_default)
	}

	if obj.obj.Dst != nil {
		obj.Dst().validateObj(set_default)
	}
}

func (obj *captureIpv4) setDefault() {

}

type captureIpv6 struct {
	obj *snappipb.CaptureIpv6
}

func NewCaptureIpv6() CaptureIpv6 {
	obj := captureIpv6{obj: &snappipb.CaptureIpv6{}}
	obj.setDefault()
	return &obj
}

func (obj *captureIpv6) Msg() *snappipb.CaptureIpv6 {
	return obj.obj
}

func (obj *captureIpv6) SetMsg(msg *snappipb.CaptureIpv6) CaptureIpv6 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureIpv6) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *captureIpv6) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureIpv6) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureIpv6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureIpv6) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureIpv6) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *captureIpv6) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type CaptureIpv6 interface {
	Msg() *snappipb.CaptureIpv6
	SetMsg(*snappipb.CaptureIpv6) CaptureIpv6
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Version() CaptureField
	SetVersion(value CaptureField) CaptureIpv6
	HasVersion() bool
	TrafficClass() CaptureField
	SetTrafficClass(value CaptureField) CaptureIpv6
	HasTrafficClass() bool
	FlowLabel() CaptureField
	SetFlowLabel(value CaptureField) CaptureIpv6
	HasFlowLabel() bool
	PayloadLength() CaptureField
	SetPayloadLength(value CaptureField) CaptureIpv6
	HasPayloadLength() bool
	NextHeader() CaptureField
	SetNextHeader(value CaptureField) CaptureIpv6
	HasNextHeader() bool
	HopLimit() CaptureField
	SetHopLimit(value CaptureField) CaptureIpv6
	HasHopLimit() bool
	Src() CaptureField
	SetSrc(value CaptureField) CaptureIpv6
	HasSrc() bool
	Dst() CaptureField
	SetDst(value CaptureField) CaptureIpv6
	HasDst() bool
}

// Version returns a CaptureField
//  description is TBD
func (obj *captureIpv6) Version() CaptureField {
	if obj.obj.Version == nil {
		obj.obj.Version = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Version}
}

// Version returns a CaptureField
//  description is TBD
func (obj *captureIpv6) HasVersion() bool {
	return obj.obj.Version != nil
}

// SetVersion sets the CaptureField value in the CaptureIpv6 object
//  description is TBD
func (obj *captureIpv6) SetVersion(value CaptureField) CaptureIpv6 {
	obj.Version().SetMsg(value.Msg())

	return obj
}

// TrafficClass returns a CaptureField
//  description is TBD
func (obj *captureIpv6) TrafficClass() CaptureField {
	if obj.obj.TrafficClass == nil {
		obj.obj.TrafficClass = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.TrafficClass}
}

// TrafficClass returns a CaptureField
//  description is TBD
func (obj *captureIpv6) HasTrafficClass() bool {
	return obj.obj.TrafficClass != nil
}

// SetTrafficClass sets the CaptureField value in the CaptureIpv6 object
//  description is TBD
func (obj *captureIpv6) SetTrafficClass(value CaptureField) CaptureIpv6 {
	obj.TrafficClass().SetMsg(value.Msg())

	return obj
}

// FlowLabel returns a CaptureField
//  description is TBD
func (obj *captureIpv6) FlowLabel() CaptureField {
	if obj.obj.FlowLabel == nil {
		obj.obj.FlowLabel = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.FlowLabel}
}

// FlowLabel returns a CaptureField
//  description is TBD
func (obj *captureIpv6) HasFlowLabel() bool {
	return obj.obj.FlowLabel != nil
}

// SetFlowLabel sets the CaptureField value in the CaptureIpv6 object
//  description is TBD
func (obj *captureIpv6) SetFlowLabel(value CaptureField) CaptureIpv6 {
	obj.FlowLabel().SetMsg(value.Msg())

	return obj
}

// PayloadLength returns a CaptureField
//  description is TBD
func (obj *captureIpv6) PayloadLength() CaptureField {
	if obj.obj.PayloadLength == nil {
		obj.obj.PayloadLength = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.PayloadLength}
}

// PayloadLength returns a CaptureField
//  description is TBD
func (obj *captureIpv6) HasPayloadLength() bool {
	return obj.obj.PayloadLength != nil
}

// SetPayloadLength sets the CaptureField value in the CaptureIpv6 object
//  description is TBD
func (obj *captureIpv6) SetPayloadLength(value CaptureField) CaptureIpv6 {
	obj.PayloadLength().SetMsg(value.Msg())

	return obj
}

// NextHeader returns a CaptureField
//  description is TBD
func (obj *captureIpv6) NextHeader() CaptureField {
	if obj.obj.NextHeader == nil {
		obj.obj.NextHeader = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.NextHeader}
}

// NextHeader returns a CaptureField
//  description is TBD
func (obj *captureIpv6) HasNextHeader() bool {
	return obj.obj.NextHeader != nil
}

// SetNextHeader sets the CaptureField value in the CaptureIpv6 object
//  description is TBD
func (obj *captureIpv6) SetNextHeader(value CaptureField) CaptureIpv6 {
	obj.NextHeader().SetMsg(value.Msg())

	return obj
}

// HopLimit returns a CaptureField
//  description is TBD
func (obj *captureIpv6) HopLimit() CaptureField {
	if obj.obj.HopLimit == nil {
		obj.obj.HopLimit = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.HopLimit}
}

// HopLimit returns a CaptureField
//  description is TBD
func (obj *captureIpv6) HasHopLimit() bool {
	return obj.obj.HopLimit != nil
}

// SetHopLimit sets the CaptureField value in the CaptureIpv6 object
//  description is TBD
func (obj *captureIpv6) SetHopLimit(value CaptureField) CaptureIpv6 {
	obj.HopLimit().SetMsg(value.Msg())

	return obj
}

// Src returns a CaptureField
//  description is TBD
func (obj *captureIpv6) Src() CaptureField {
	if obj.obj.Src == nil {
		obj.obj.Src = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Src}
}

// Src returns a CaptureField
//  description is TBD
func (obj *captureIpv6) HasSrc() bool {
	return obj.obj.Src != nil
}

// SetSrc sets the CaptureField value in the CaptureIpv6 object
//  description is TBD
func (obj *captureIpv6) SetSrc(value CaptureField) CaptureIpv6 {
	obj.Src().SetMsg(value.Msg())

	return obj
}

// Dst returns a CaptureField
//  description is TBD
func (obj *captureIpv6) Dst() CaptureField {
	if obj.obj.Dst == nil {
		obj.obj.Dst = NewCaptureField().Msg()
	}
	return &captureField{obj: obj.obj.Dst}
}

// Dst returns a CaptureField
//  description is TBD
func (obj *captureIpv6) HasDst() bool {
	return obj.obj.Dst != nil
}

// SetDst sets the CaptureField value in the CaptureIpv6 object
//  description is TBD
func (obj *captureIpv6) SetDst(value CaptureField) CaptureIpv6 {
	obj.Dst().SetMsg(value.Msg())

	return obj
}

func (obj *captureIpv6) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Version != nil {
		obj.Version().validateObj(set_default)
	}

	if obj.obj.TrafficClass != nil {
		obj.TrafficClass().validateObj(set_default)
	}

	if obj.obj.FlowLabel != nil {
		obj.FlowLabel().validateObj(set_default)
	}

	if obj.obj.PayloadLength != nil {
		obj.PayloadLength().validateObj(set_default)
	}

	if obj.obj.NextHeader != nil {
		obj.NextHeader().validateObj(set_default)
	}

	if obj.obj.HopLimit != nil {
		obj.HopLimit().validateObj(set_default)
	}

	if obj.obj.Src != nil {
		obj.Src().validateObj(set_default)
	}

	if obj.obj.Dst != nil {
		obj.Dst().validateObj(set_default)
	}
}

func (obj *captureIpv6) setDefault() {

}

type deviceIpv4 struct {
	obj *snappipb.DeviceIpv4
}

func NewDeviceIpv4() DeviceIpv4 {
	obj := deviceIpv4{obj: &snappipb.DeviceIpv4{}}
	obj.setDefault()
	return &obj
}

func (obj *deviceIpv4) Msg() *snappipb.DeviceIpv4 {
	return obj.obj
}

func (obj *deviceIpv4) SetMsg(msg *snappipb.DeviceIpv4) DeviceIpv4 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *deviceIpv4) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *deviceIpv4) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIpv4) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv4) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIpv4) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv4) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *deviceIpv4) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type DeviceIpv4 interface {
	Msg() *snappipb.DeviceIpv4
	SetMsg(*snappipb.DeviceIpv4) DeviceIpv4
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Gateway() string
	SetGateway(value string) DeviceIpv4
	Address() string
	SetAddress(value string) DeviceIpv4
	Prefix() int32
	SetPrefix(value int32) DeviceIpv4
	HasPrefix() bool
	Name() string
	SetName(value string) DeviceIpv4
}

// Gateway returns a string
//  The IPv4 address of the gateway
func (obj *deviceIpv4) Gateway() string {

	return obj.obj.Gateway
}

// SetGateway sets the string value in the DeviceIpv4 object
//  The IPv4 address of the gateway
func (obj *deviceIpv4) SetGateway(value string) DeviceIpv4 {
	obj.obj.Gateway = value

	return obj
}

// Address returns a string
//  The IPv4 address
func (obj *deviceIpv4) Address() string {

	return obj.obj.Address
}

// SetAddress sets the string value in the DeviceIpv4 object
//  The IPv4 address
func (obj *deviceIpv4) SetAddress(value string) DeviceIpv4 {
	obj.obj.Address = value

	return obj
}

// Prefix returns a int32
//  The prefix of the IPv4 address.
func (obj *deviceIpv4) Prefix() int32 {

	if obj.obj.Prefix == nil {
		*obj.obj.Prefix = 24
	}

	return *obj.obj.Prefix

}

// Prefix returns a int32
//  The prefix of the IPv4 address.
func (obj *deviceIpv4) HasPrefix() bool {
	return obj.obj.Prefix != nil
}

// SetPrefix sets the int32 value in the DeviceIpv4 object
//  The prefix of the IPv4 address.
func (obj *deviceIpv4) SetPrefix(value int32) DeviceIpv4 {
	obj.obj.Prefix = &value

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv4) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the DeviceIpv4 object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv4) SetName(value string) DeviceIpv4 {
	obj.obj.Name = value

	return obj
}

func (obj *deviceIpv4) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Gateway required
	if obj.obj.Gateway == "" {
		validation = append(validation, "Gateway is required field on interface DeviceIpv4")
	} else {
		err := validateIpv4(obj.Gateway())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Gateway DeviceIpv4"))
		}
	}

	// Address required
	if obj.obj.Address == "" {
		validation = append(validation, "Address is required field on interface DeviceIpv4")
	} else {
		err := validateIpv4(obj.Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Address DeviceIpv4"))
		}
	}

	if obj.obj.Prefix != nil {
		if *obj.obj.Prefix < 1 || *obj.obj.Prefix > 32 {
			validation = append(
				validation, fmt.Sprintf("1 <= DeviceIpv4.Prefix <= 32 but Got %d", *obj.obj.Prefix))
		}

	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface DeviceIpv4")
	}
}

func (obj *deviceIpv4) setDefault() {
	if obj.obj.Prefix == nil {
		obj.SetPrefix(24)
	}

}

type deviceIpv6 struct {
	obj *snappipb.DeviceIpv6
}

func NewDeviceIpv6() DeviceIpv6 {
	obj := deviceIpv6{obj: &snappipb.DeviceIpv6{}}
	obj.setDefault()
	return &obj
}

func (obj *deviceIpv6) Msg() *snappipb.DeviceIpv6 {
	return obj.obj
}

func (obj *deviceIpv6) SetMsg(msg *snappipb.DeviceIpv6) DeviceIpv6 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *deviceIpv6) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *deviceIpv6) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIpv6) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIpv6) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv6) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *deviceIpv6) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type DeviceIpv6 interface {
	Msg() *snappipb.DeviceIpv6
	SetMsg(*snappipb.DeviceIpv6) DeviceIpv6
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Gateway() string
	SetGateway(value string) DeviceIpv6
	Address() string
	SetAddress(value string) DeviceIpv6
	Prefix() int32
	SetPrefix(value int32) DeviceIpv6
	HasPrefix() bool
	Name() string
	SetName(value string) DeviceIpv6
}

// Gateway returns a string
//  The IPv6 gateway address.
func (obj *deviceIpv6) Gateway() string {

	return obj.obj.Gateway
}

// SetGateway sets the string value in the DeviceIpv6 object
//  The IPv6 gateway address.
func (obj *deviceIpv6) SetGateway(value string) DeviceIpv6 {
	obj.obj.Gateway = value

	return obj
}

// Address returns a string
//  The IPv6 address.
func (obj *deviceIpv6) Address() string {

	return obj.obj.Address
}

// SetAddress sets the string value in the DeviceIpv6 object
//  The IPv6 address.
func (obj *deviceIpv6) SetAddress(value string) DeviceIpv6 {
	obj.obj.Address = value

	return obj
}

// Prefix returns a int32
//  The network prefix.
func (obj *deviceIpv6) Prefix() int32 {

	if obj.obj.Prefix == nil {
		*obj.obj.Prefix = 64
	}

	return *obj.obj.Prefix

}

// Prefix returns a int32
//  The network prefix.
func (obj *deviceIpv6) HasPrefix() bool {
	return obj.obj.Prefix != nil
}

// SetPrefix sets the int32 value in the DeviceIpv6 object
//  The network prefix.
func (obj *deviceIpv6) SetPrefix(value int32) DeviceIpv6 {
	obj.obj.Prefix = &value

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv6) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the DeviceIpv6 object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv6) SetName(value string) DeviceIpv6 {
	obj.obj.Name = value

	return obj
}

func (obj *deviceIpv6) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Gateway required
	if obj.obj.Gateway == "" {
		validation = append(validation, "Gateway is required field on interface DeviceIpv6")
	} else {
		err := validateIpv6(obj.Gateway())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Gateway DeviceIpv6"))
		}
	}

	// Address required
	if obj.obj.Address == "" {
		validation = append(validation, "Address is required field on interface DeviceIpv6")
	} else {
		err := validateIpv6(obj.Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Address DeviceIpv6"))
		}
	}

	if obj.obj.Prefix != nil {
		if *obj.obj.Prefix < 1 || *obj.obj.Prefix > 128 {
			validation = append(
				validation, fmt.Sprintf("1 <= DeviceIpv6.Prefix <= 128 but Got %d", *obj.obj.Prefix))
		}

	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface DeviceIpv6")
	}
}

func (obj *deviceIpv6) setDefault() {
	if obj.obj.Prefix == nil {
		obj.SetPrefix(64)
	}

}

type deviceVlan struct {
	obj *snappipb.DeviceVlan
}

func NewDeviceVlan() DeviceVlan {
	obj := deviceVlan{obj: &snappipb.DeviceVlan{}}
	obj.setDefault()
	return &obj
}

func (obj *deviceVlan) Msg() *snappipb.DeviceVlan {
	return obj.obj
}

func (obj *deviceVlan) SetMsg(msg *snappipb.DeviceVlan) DeviceVlan {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *deviceVlan) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *deviceVlan) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceVlan) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceVlan) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceVlan) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceVlan) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *deviceVlan) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type DeviceVlan interface {
	Msg() *snappipb.DeviceVlan
	SetMsg(*snappipb.DeviceVlan) DeviceVlan
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Tpid() DeviceVlanTpidEnum
	SetTpid(value DeviceVlanTpidEnum) DeviceVlan
	HasTpid() bool
	Priority() int32
	SetPriority(value int32) DeviceVlan
	HasPriority() bool
	Id() int32
	SetId(value int32) DeviceVlan
	HasId() bool
	Name() string
	SetName(value string) DeviceVlan
}

type DeviceVlanTpidEnum string

var DeviceVlanTpid = struct {
	X8100 DeviceVlanTpidEnum
	X88A8 DeviceVlanTpidEnum
	X9100 DeviceVlanTpidEnum
	X9200 DeviceVlanTpidEnum
	X9300 DeviceVlanTpidEnum
}{
	X8100: DeviceVlanTpidEnum("x8100"),
	X88A8: DeviceVlanTpidEnum("x88A8"),
	X9100: DeviceVlanTpidEnum("x9100"),
	X9200: DeviceVlanTpidEnum("x9200"),
	X9300: DeviceVlanTpidEnum("x9300"),
}

func (obj *deviceVlan) Tpid() DeviceVlanTpidEnum {
	return DeviceVlanTpidEnum(obj.obj.Tpid.Enum().String())
}

// Tpid returns a string
//  Tag protocol identifier
func (obj *deviceVlan) HasTpid() bool {
	return obj.obj.Tpid != nil
}

func (obj *deviceVlan) SetTpid(value DeviceVlanTpidEnum) DeviceVlan {
	intValue, ok := snappipb.DeviceVlan_Tpid_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on DeviceVlanTpidEnum", string(value)))
		return obj
	}
	enumValue := snappipb.DeviceVlan_Tpid_Enum(intValue)
	obj.obj.Tpid = &enumValue

	return obj
}

// Priority returns a int32
//  Priority code point
func (obj *deviceVlan) Priority() int32 {

	if obj.obj.Priority == nil {
		*obj.obj.Priority = 0
	}

	return *obj.obj.Priority

}

// Priority returns a int32
//  Priority code point
func (obj *deviceVlan) HasPriority() bool {
	return obj.obj.Priority != nil
}

// SetPriority sets the int32 value in the DeviceVlan object
//  Priority code point
func (obj *deviceVlan) SetPriority(value int32) DeviceVlan {
	obj.obj.Priority = &value

	return obj
}

// Id returns a int32
//  VLAN identifier
func (obj *deviceVlan) Id() int32 {

	if obj.obj.Id == nil {
		*obj.obj.Id = 1
	}

	return *obj.obj.Id

}

// Id returns a int32
//  VLAN identifier
func (obj *deviceVlan) HasId() bool {
	return obj.obj.Id != nil
}

// SetId sets the int32 value in the DeviceVlan object
//  VLAN identifier
func (obj *deviceVlan) SetId(value int32) DeviceVlan {
	obj.obj.Id = &value

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceVlan) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the DeviceVlan object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceVlan) SetName(value string) DeviceVlan {
	obj.obj.Name = value

	return obj
}

func (obj *deviceVlan) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Priority != nil {
		if *obj.obj.Priority < 0 || *obj.obj.Priority > 3 {
			validation = append(
				validation, fmt.Sprintf("0 <= DeviceVlan.Priority <= 3 but Got %d", *obj.obj.Priority))
		}

	}

	if obj.obj.Id != nil {
		if *obj.obj.Id < 0 || *obj.obj.Id > 4095 {
			validation = append(
				validation, fmt.Sprintf("0 <= DeviceVlan.Id <= 4095 but Got %d", *obj.obj.Id))
		}

	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface DeviceVlan")
	}
}

func (obj *deviceVlan) setDefault() {
	if obj.obj.Tpid == nil {
		obj.SetTpid(DeviceVlanTpid.X8100)

	}
	if obj.obj.Priority == nil {
		obj.SetPriority(0)
	}
	if obj.obj.Id == nil {
		obj.SetId(1)
	}

}

type deviceIsisMultiInstance struct {
	obj *snappipb.DeviceIsisMultiInstance
}

func NewDeviceIsisMultiInstance() DeviceIsisMultiInstance {
	obj := deviceIsisMultiInstance{obj: &snappipb.DeviceIsisMultiInstance{}}
	obj.setDefault()
	return &obj
}

func (obj *deviceIsisMultiInstance) Msg() *snappipb.DeviceIsisMultiInstance {
	return obj.obj
}

func (obj *deviceIsisMultiInstance) SetMsg(msg *snappipb.DeviceIsisMultiInstance) DeviceIsisMultiInstance {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *deviceIsisMultiInstance) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *deviceIsisMultiInstance) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIsisMultiInstance) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIsisMultiInstance) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *deviceIsisMultiInstance) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIsisMultiInstance) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *deviceIsisMultiInstance) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type DeviceIsisMultiInstance interface {
	Msg() *snappipb.DeviceIsisMultiInstance
	SetMsg(*snappipb.DeviceIsisMultiInstance) DeviceIsisMultiInstance
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Iid() int32
	SetIid(value int32) DeviceIsisMultiInstance
	HasIid() bool
	Itids() []int32
	SetItids(value []int32) DeviceIsisMultiInstance
}

// Iid returns a int32
//  Instance Identifier (IID) TLV will associate a PDU with an ISIS instance  by using a unique 16-bit number and including one or more  Instance-Specific Topology Identifiers (ITIDs).
func (obj *deviceIsisMultiInstance) Iid() int32 {

	if obj.obj.Iid == nil {
		*obj.obj.Iid = 1
	}

	return *obj.obj.Iid

}

// Iid returns a int32
//  Instance Identifier (IID) TLV will associate a PDU with an ISIS instance  by using a unique 16-bit number and including one or more  Instance-Specific Topology Identifiers (ITIDs).
func (obj *deviceIsisMultiInstance) HasIid() bool {
	return obj.obj.Iid != nil
}

// SetIid sets the int32 value in the DeviceIsisMultiInstance object
//  Instance Identifier (IID) TLV will associate a PDU with an ISIS instance  by using a unique 16-bit number and including one or more  Instance-Specific Topology Identifiers (ITIDs).
func (obj *deviceIsisMultiInstance) SetIid(value int32) DeviceIsisMultiInstance {
	obj.obj.Iid = &value

	return obj
}

// Itids returns a []int32
//  This contains one or more ITIDs that will be advertised in IID TLV.
func (obj *deviceIsisMultiInstance) Itids() []int32 {
	if obj.obj.Itids == nil {
		obj.obj.Itids = make([]int32, 0)
	}
	return obj.obj.Itids
}

// SetItids sets the []int32 value in the DeviceIsisMultiInstance object
//  This contains one or more ITIDs that will be advertised in IID TLV.
func (obj *deviceIsisMultiInstance) SetItids(value []int32) DeviceIsisMultiInstance {
	if obj.obj.Itids == nil {
		obj.obj.Itids = make([]int32, 0)
	}
	obj.obj.Itids = value

	return obj
}

func (obj *deviceIsisMultiInstance) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Iid != nil {
		if *obj.obj.Iid < 0 || *obj.obj.Iid > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= DeviceIsisMultiInstance.Iid <= 65535 but Got %d", *obj.obj.Iid))
		}

	}

}

func (obj *deviceIsisMultiInstance) setDefault() {
	if obj.obj.Iid == nil {
		obj.SetIid(1)
	}

}

type isisInterface struct {
	obj *snappipb.IsisInterface
}

func NewIsisInterface() IsisInterface {
	obj := isisInterface{obj: &snappipb.IsisInterface{}}
	obj.setDefault()
	return &obj
}

func (obj *isisInterface) Msg() *snappipb.IsisInterface {
	return obj.obj
}

func (obj *isisInterface) SetMsg(msg *snappipb.IsisInterface) IsisInterface {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisInterface) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisInterface) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisInterface) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisInterface) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisInterface) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisInterface) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisInterface) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisInterface interface {
	Msg() *snappipb.IsisInterface
	SetMsg(*snappipb.IsisInterface) IsisInterface
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	EthName() string
	SetEthName(value string) IsisInterface
	Metric() int32
	SetMetric(value int32) IsisInterface
	HasMetric() bool
	NetworkType() IsisInterfaceNetworkTypeEnum
	SetNetworkType(value IsisInterfaceNetworkTypeEnum) IsisInterface
	HasNetworkType() bool
	LevelType() IsisInterfaceLevelTypeEnum
	SetLevelType(value IsisInterfaceLevelTypeEnum) IsisInterface
	HasLevelType() bool
	L1Settings() IsisInterfaceLevel
	SetL1Settings(value IsisInterfaceLevel) IsisInterface
	HasL1Settings() bool
	L2Settings() IsisInterfaceLevel
	SetL2Settings(value IsisInterfaceLevel) IsisInterface
	HasL2Settings() bool
	MultiTopologyIds() IsisInterfaceIsisMTIter
	TrafficEngineering() IsisInterfaceLinkStateTEIter
	Authentication() IsisInterfaceAuthentication
	SetAuthentication(value IsisInterfaceAuthentication) IsisInterface
	HasAuthentication() bool
	Advanced() IsisInterfaceAdvanced
	SetAdvanced(value IsisInterfaceAdvanced) IsisInterface
	HasAdvanced() bool
	LinkProtection() IsisInterfaceLinkProtection
	SetLinkProtection(value IsisInterfaceLinkProtection) IsisInterface
	HasLinkProtection() bool
	SrlgValues() []int32
	SetSrlgValues(value []int32) IsisInterface
	Name() string
	SetName(value string) IsisInterface
}

// EthName returns a string
//  The unique name of the Ethernet interface on which ISIS is running. Two ISIS interfaces cannot share the same Ethernet.
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
func (obj *isisInterface) EthName() string {

	return obj.obj.EthName
}

// SetEthName sets the string value in the IsisInterface object
//  The unique name of the Ethernet interface on which ISIS is running. Two ISIS interfaces cannot share the same Ethernet.
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//
func (obj *isisInterface) SetEthName(value string) IsisInterface {
	obj.obj.EthName = value

	return obj
}

// Metric returns a int32
//  The default metric cost for the interface.
func (obj *isisInterface) Metric() int32 {

	if obj.obj.Metric == nil {
		*obj.obj.Metric = 10
	}

	return *obj.obj.Metric

}

// Metric returns a int32
//  The default metric cost for the interface.
func (obj *isisInterface) HasMetric() bool {
	return obj.obj.Metric != nil
}

// SetMetric sets the int32 value in the IsisInterface object
//  The default metric cost for the interface.
func (obj *isisInterface) SetMetric(value int32) IsisInterface {
	obj.obj.Metric = &value

	return obj
}

type IsisInterfaceNetworkTypeEnum string

var IsisInterfaceNetworkType = struct {
	BROADCAST      IsisInterfaceNetworkTypeEnum
	POINT_TO_POINT IsisInterfaceNetworkTypeEnum
}{
	BROADCAST:      IsisInterfaceNetworkTypeEnum("broadcast"),
	POINT_TO_POINT: IsisInterfaceNetworkTypeEnum("point_to_point"),
}

func (obj *isisInterface) NetworkType() IsisInterfaceNetworkTypeEnum {
	return IsisInterfaceNetworkTypeEnum(obj.obj.NetworkType.Enum().String())
}

// NetworkType returns a string
//  The type of network link.
func (obj *isisInterface) HasNetworkType() bool {
	return obj.obj.NetworkType != nil
}

func (obj *isisInterface) SetNetworkType(value IsisInterfaceNetworkTypeEnum) IsisInterface {
	intValue, ok := snappipb.IsisInterface_NetworkType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on IsisInterfaceNetworkTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.IsisInterface_NetworkType_Enum(intValue)
	obj.obj.NetworkType = &enumValue

	return obj
}

type IsisInterfaceLevelTypeEnum string

var IsisInterfaceLevelType = struct {
	LEVEL_1   IsisInterfaceLevelTypeEnum
	LEVEL_2   IsisInterfaceLevelTypeEnum
	LEVEL_1_2 IsisInterfaceLevelTypeEnum
}{
	LEVEL_1:   IsisInterfaceLevelTypeEnum("level_1"),
	LEVEL_2:   IsisInterfaceLevelTypeEnum("level_2"),
	LEVEL_1_2: IsisInterfaceLevelTypeEnum("level_1_2"),
}

func (obj *isisInterface) LevelType() IsisInterfaceLevelTypeEnum {
	return IsisInterfaceLevelTypeEnum(obj.obj.LevelType.Enum().String())
}

// LevelType returns a string
//  This indicates whether this router is participating in Level-1 (L1),
//  Level-2 (L2) or both L1 and L2 domains on this interface.
func (obj *isisInterface) HasLevelType() bool {
	return obj.obj.LevelType != nil
}

func (obj *isisInterface) SetLevelType(value IsisInterfaceLevelTypeEnum) IsisInterface {
	intValue, ok := snappipb.IsisInterface_LevelType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on IsisInterfaceLevelTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.IsisInterface_LevelType_Enum(intValue)
	obj.obj.LevelType = &enumValue

	return obj
}

// L1Settings returns a IsisInterfaceLevel
//  Settings of Level 1 Hello.
func (obj *isisInterface) L1Settings() IsisInterfaceLevel {
	if obj.obj.L1Settings == nil {
		obj.obj.L1Settings = NewIsisInterfaceLevel().Msg()
	}
	return &isisInterfaceLevel{obj: obj.obj.L1Settings}
}

// L1Settings returns a IsisInterfaceLevel
//  Settings of Level 1 Hello.
func (obj *isisInterface) HasL1Settings() bool {
	return obj.obj.L1Settings != nil
}

// SetL1Settings sets the IsisInterfaceLevel value in the IsisInterface object
//  Settings of Level 1 Hello.
func (obj *isisInterface) SetL1Settings(value IsisInterfaceLevel) IsisInterface {
	obj.L1Settings().SetMsg(value.Msg())

	return obj
}

// L2Settings returns a IsisInterfaceLevel
//  Settings of Level 2 Hello.
func (obj *isisInterface) L2Settings() IsisInterfaceLevel {
	if obj.obj.L2Settings == nil {
		obj.obj.L2Settings = NewIsisInterfaceLevel().Msg()
	}
	return &isisInterfaceLevel{obj: obj.obj.L2Settings}
}

// L2Settings returns a IsisInterfaceLevel
//  Settings of Level 2 Hello.
func (obj *isisInterface) HasL2Settings() bool {
	return obj.obj.L2Settings != nil
}

// SetL2Settings sets the IsisInterfaceLevel value in the IsisInterface object
//  Settings of Level 2 Hello.
func (obj *isisInterface) SetL2Settings(value IsisInterfaceLevel) IsisInterface {
	obj.L2Settings().SetMsg(value.Msg())

	return obj
}

// MultiTopologyIds returns a []IsisMT
//  Contains the properties of multiple topologies.
func (obj *isisInterface) MultiTopologyIds() IsisInterfaceIsisMTIter {
	if obj.obj.MultiTopologyIds == nil {
		obj.obj.MultiTopologyIds = []*snappipb.IsisMT{}
	}
	return &isisInterfaceIsisMTIter{obj: obj}
}

type isisInterfaceIsisMTIter struct {
	obj *isisInterface
}

type IsisInterfaceIsisMTIter interface {
	Add() IsisMT
	Items() []IsisMT
}

func (obj *isisInterfaceIsisMTIter) Add() IsisMT {
	newObj := &snappipb.IsisMT{}
	obj.obj.obj.MultiTopologyIds = append(obj.obj.obj.MultiTopologyIds, newObj)
	newLibObj := &isisMT{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *isisInterfaceIsisMTIter) Items() []IsisMT {
	slice := []IsisMT{}
	for _, item := range obj.obj.obj.MultiTopologyIds {
		slice = append(slice, &isisMT{obj: item})
	}
	return slice
}

// TrafficEngineering returns a []LinkStateTE
//  Contains a list of Traffic Engineering attributes.
func (obj *isisInterface) TrafficEngineering() IsisInterfaceLinkStateTEIter {
	if obj.obj.TrafficEngineering == nil {
		obj.obj.TrafficEngineering = []*snappipb.LinkStateTE{}
	}
	return &isisInterfaceLinkStateTEIter{obj: obj}
}

type isisInterfaceLinkStateTEIter struct {
	obj *isisInterface
}

type IsisInterfaceLinkStateTEIter interface {
	Add() LinkStateTE
	Items() []LinkStateTE
}

func (obj *isisInterfaceLinkStateTEIter) Add() LinkStateTE {
	newObj := &snappipb.LinkStateTE{}
	obj.obj.obj.TrafficEngineering = append(obj.obj.obj.TrafficEngineering, newObj)
	newLibObj := &linkStateTE{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *isisInterfaceLinkStateTEIter) Items() []LinkStateTE {
	slice := []LinkStateTE{}
	for _, item := range obj.obj.obj.TrafficEngineering {
		slice = append(slice, &linkStateTE{obj: item})
	}
	return slice
}

// Authentication returns a IsisInterfaceAuthentication
//  The Circuit authentication method used for the interfaces on this emulated ISIS v4/v6 router.
func (obj *isisInterface) Authentication() IsisInterfaceAuthentication {
	if obj.obj.Authentication == nil {
		obj.obj.Authentication = NewIsisInterfaceAuthentication().Msg()
	}
	return &isisInterfaceAuthentication{obj: obj.obj.Authentication}
}

// Authentication returns a IsisInterfaceAuthentication
//  The Circuit authentication method used for the interfaces on this emulated ISIS v4/v6 router.
func (obj *isisInterface) HasAuthentication() bool {
	return obj.obj.Authentication != nil
}

// SetAuthentication sets the IsisInterfaceAuthentication value in the IsisInterface object
//  The Circuit authentication method used for the interfaces on this emulated ISIS v4/v6 router.
func (obj *isisInterface) SetAuthentication(value IsisInterfaceAuthentication) IsisInterface {
	obj.Authentication().SetMsg(value.Msg())

	return obj
}

// Advanced returns a IsisInterfaceAdvanced
//  Optional container for advanced interface properties.
func (obj *isisInterface) Advanced() IsisInterfaceAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = NewIsisInterfaceAdvanced().Msg()
	}
	return &isisInterfaceAdvanced{obj: obj.obj.Advanced}
}

// Advanced returns a IsisInterfaceAdvanced
//  Optional container for advanced interface properties.
func (obj *isisInterface) HasAdvanced() bool {
	return obj.obj.Advanced != nil
}

// SetAdvanced sets the IsisInterfaceAdvanced value in the IsisInterface object
//  Optional container for advanced interface properties.
func (obj *isisInterface) SetAdvanced(value IsisInterfaceAdvanced) IsisInterface {
	obj.Advanced().SetMsg(value.Msg())

	return obj
}

// LinkProtection returns a IsisInterfaceLinkProtection
//  Link protection on the ISIS link between two interfaces.
func (obj *isisInterface) LinkProtection() IsisInterfaceLinkProtection {
	if obj.obj.LinkProtection == nil {
		obj.obj.LinkProtection = NewIsisInterfaceLinkProtection().Msg()
	}
	return &isisInterfaceLinkProtection{obj: obj.obj.LinkProtection}
}

// LinkProtection returns a IsisInterfaceLinkProtection
//  Link protection on the ISIS link between two interfaces.
func (obj *isisInterface) HasLinkProtection() bool {
	return obj.obj.LinkProtection != nil
}

// SetLinkProtection sets the IsisInterfaceLinkProtection value in the IsisInterface object
//  Link protection on the ISIS link between two interfaces.
func (obj *isisInterface) SetLinkProtection(value IsisInterfaceLinkProtection) IsisInterface {
	obj.LinkProtection().SetMsg(value.Msg())

	return obj
}

// SrlgValues returns a []int32
//  This contains list of SRLG values for the link between two interfaces.
func (obj *isisInterface) SrlgValues() []int32 {
	if obj.obj.SrlgValues == nil {
		obj.obj.SrlgValues = make([]int32, 0)
	}
	return obj.obj.SrlgValues
}

// SetSrlgValues sets the []int32 value in the IsisInterface object
//  This contains list of SRLG values for the link between two interfaces.
func (obj *isisInterface) SetSrlgValues(value []int32) IsisInterface {
	if obj.obj.SrlgValues == nil {
		obj.obj.SrlgValues = make([]int32, 0)
	}
	obj.obj.SrlgValues = value

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *isisInterface) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the IsisInterface object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *isisInterface) SetName(value string) IsisInterface {
	obj.obj.Name = value

	return obj
}

func (obj *isisInterface) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// EthName required
	if obj.obj.EthName == "" {
		validation = append(validation, "EthName is required field on interface IsisInterface")
	}

	if obj.obj.L1Settings != nil {
		obj.L1Settings().validateObj(set_default)
	}

	if obj.obj.L2Settings != nil {
		obj.L2Settings().validateObj(set_default)
	}
	if obj.obj.MultiTopologyIds != nil {
		for _, item := range obj.MultiTopologyIds().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.TrafficEngineering != nil {
		for _, item := range obj.TrafficEngineering().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Authentication != nil {
		obj.Authentication().validateObj(set_default)
	}

	if obj.obj.Advanced != nil {
		obj.Advanced().validateObj(set_default)
	}

	if obj.obj.LinkProtection != nil {
		obj.LinkProtection().validateObj(set_default)
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface IsisInterface")
	}
}

func (obj *isisInterface) setDefault() {
	if obj.obj.Metric == nil {
		obj.SetMetric(10)
	}
	if obj.obj.NetworkType == nil {
		obj.SetNetworkType(IsisInterfaceNetworkType.BROADCAST)

	}
	if obj.obj.LevelType == nil {
		obj.SetLevelType(IsisInterfaceLevelType.LEVEL_2)

	}

}

type isisBasic struct {
	obj *snappipb.IsisBasic
}

func NewIsisBasic() IsisBasic {
	obj := isisBasic{obj: &snappipb.IsisBasic{}}
	obj.setDefault()
	return &obj
}

func (obj *isisBasic) Msg() *snappipb.IsisBasic {
	return obj.obj
}

func (obj *isisBasic) SetMsg(msg *snappipb.IsisBasic) IsisBasic {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisBasic) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisBasic) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisBasic) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisBasic) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisBasic) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisBasic) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisBasic) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisBasic interface {
	Msg() *snappipb.IsisBasic
	SetMsg(*snappipb.IsisBasic) IsisBasic
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Ipv4TeRouterId() string
	SetIpv4TeRouterId(value string) IsisBasic
	HasIpv4TeRouterId() bool
	Hostname() string
	SetHostname(value string) IsisBasic
	HasHostname() bool
}

// Ipv4TeRouterId returns a string
//  IPv4 Traffic Engineering(TE) router id. This address should be configured as an IPv4 Loopback address in 'ipv4_loopbacks' in the Device.
func (obj *isisBasic) Ipv4TeRouterId() string {

	return *obj.obj.Ipv4TeRouterId

}

// Ipv4TeRouterId returns a string
//  IPv4 Traffic Engineering(TE) router id. This address should be configured as an IPv4 Loopback address in 'ipv4_loopbacks' in the Device.
func (obj *isisBasic) HasIpv4TeRouterId() bool {
	return obj.obj.Ipv4TeRouterId != nil
}

// SetIpv4TeRouterId sets the string value in the IsisBasic object
//  IPv4 Traffic Engineering(TE) router id. This address should be configured as an IPv4 Loopback address in 'ipv4_loopbacks' in the Device.
func (obj *isisBasic) SetIpv4TeRouterId(value string) IsisBasic {
	obj.obj.Ipv4TeRouterId = &value

	return obj
}

// Hostname returns a string
//  Host name for the router. The host name is transmitted in all the packets sent from the router.
func (obj *isisBasic) Hostname() string {

	return *obj.obj.Hostname

}

// Hostname returns a string
//  Host name for the router. The host name is transmitted in all the packets sent from the router.
func (obj *isisBasic) HasHostname() bool {
	return obj.obj.Hostname != nil
}

// SetHostname sets the string value in the IsisBasic object
//  Host name for the router. The host name is transmitted in all the packets sent from the router.
func (obj *isisBasic) SetHostname(value string) IsisBasic {
	obj.obj.Hostname = &value

	return obj
}

func (obj *isisBasic) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Ipv4TeRouterId != nil {
		err := validateIpv4(obj.Ipv4TeRouterId())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Ipv4TeRouterId IsisBasic"))
		}
	}

}

func (obj *isisBasic) setDefault() {

}

type isisAdvanced struct {
	obj *snappipb.IsisAdvanced
}

func NewIsisAdvanced() IsisAdvanced {
	obj := isisAdvanced{obj: &snappipb.IsisAdvanced{}}
	obj.setDefault()
	return &obj
}

func (obj *isisAdvanced) Msg() *snappipb.IsisAdvanced {
	return obj.obj
}

func (obj *isisAdvanced) SetMsg(msg *snappipb.IsisAdvanced) IsisAdvanced {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisAdvanced) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisAdvanced) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisAdvanced) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisAdvanced) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisAdvanced) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisAdvanced) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisAdvanced) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisAdvanced interface {
	Msg() *snappipb.IsisAdvanced
	SetMsg(*snappipb.IsisAdvanced) IsisAdvanced
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	EnableHelloPadding() bool
	SetEnableHelloPadding(value bool) IsisAdvanced
	HasEnableHelloPadding() bool
	MaxAreaAddresses() int32
	SetMaxAreaAddresses(value int32) IsisAdvanced
	HasMaxAreaAddresses() bool
	AreaAddresses() []string
	SetAreaAddresses(value []string) IsisAdvanced
	LspRefreshRate() int32
	SetLspRefreshRate(value int32) IsisAdvanced
	HasLspRefreshRate() bool
	LspLifetime() int32
	SetLspLifetime(value int32) IsisAdvanced
	HasLspLifetime() bool
	PsnpInterval() int32
	SetPsnpInterval(value int32) IsisAdvanced
	HasPsnpInterval() bool
	CsnpInterval() int32
	SetCsnpInterval(value int32) IsisAdvanced
	HasCsnpInterval() bool
	MaxLspSize() int32
	SetMaxLspSize(value int32) IsisAdvanced
	HasMaxLspSize() bool
	LspMgroupMinTransInterval() int32
	SetLspMgroupMinTransInterval(value int32) IsisAdvanced
	HasLspMgroupMinTransInterval() bool
}

// EnableHelloPadding returns a bool
//  It enables padding of Hello message to MTU size.
func (obj *isisAdvanced) EnableHelloPadding() bool {

	if obj.obj.EnableHelloPadding == nil {
		*obj.obj.EnableHelloPadding = true
	}

	return *obj.obj.EnableHelloPadding

}

// EnableHelloPadding returns a bool
//  It enables padding of Hello message to MTU size.
func (obj *isisAdvanced) HasEnableHelloPadding() bool {
	return obj.obj.EnableHelloPadding != nil
}

// SetEnableHelloPadding sets the bool value in the IsisAdvanced object
//  It enables padding of Hello message to MTU size.
func (obj *isisAdvanced) SetEnableHelloPadding(value bool) IsisAdvanced {
	obj.obj.EnableHelloPadding = &value

	return obj
}

// MaxAreaAddresses returns a int32
//  The Number of Area Addresses permitted, with a valid range from 0 to 254.  A zero indicates a maximum of 3 addresses.
func (obj *isisAdvanced) MaxAreaAddresses() int32 {

	if obj.obj.MaxAreaAddresses == nil {
		*obj.obj.MaxAreaAddresses = 3
	}

	return *obj.obj.MaxAreaAddresses

}

// MaxAreaAddresses returns a int32
//  The Number of Area Addresses permitted, with a valid range from 0 to 254.  A zero indicates a maximum of 3 addresses.
func (obj *isisAdvanced) HasMaxAreaAddresses() bool {
	return obj.obj.MaxAreaAddresses != nil
}

// SetMaxAreaAddresses sets the int32 value in the IsisAdvanced object
//  The Number of Area Addresses permitted, with a valid range from 0 to 254.  A zero indicates a maximum of 3 addresses.
func (obj *isisAdvanced) SetMaxAreaAddresses(value int32) IsisAdvanced {
	obj.obj.MaxAreaAddresses = &value

	return obj
}

// AreaAddresses returns a []string
//  Its combination of the ISP and HO-DSP.Usually all nodes within an area have  the same area address. If no area addresses are configured, a default area of "490001" will be advertised.
func (obj *isisAdvanced) AreaAddresses() []string {
	if obj.obj.AreaAddresses == nil {
		obj.obj.AreaAddresses = make([]string, 0)
	}
	return obj.obj.AreaAddresses
}

// SetAreaAddresses sets the []string value in the IsisAdvanced object
//  Its combination of the ISP and HO-DSP.Usually all nodes within an area have  the same area address. If no area addresses are configured, a default area of "490001" will be advertised.
func (obj *isisAdvanced) SetAreaAddresses(value []string) IsisAdvanced {
	if obj.obj.AreaAddresses == nil {
		obj.obj.AreaAddresses = make([]string, 0)
	}
	obj.obj.AreaAddresses = value

	return obj
}

// LspRefreshRate returns a int32
//  The rate at which LSPs are re-sent in seconds.
func (obj *isisAdvanced) LspRefreshRate() int32 {

	if obj.obj.LspRefreshRate == nil {
		*obj.obj.LspRefreshRate = 600
	}

	return *obj.obj.LspRefreshRate

}

// LspRefreshRate returns a int32
//  The rate at which LSPs are re-sent in seconds.
func (obj *isisAdvanced) HasLspRefreshRate() bool {
	return obj.obj.LspRefreshRate != nil
}

// SetLspRefreshRate sets the int32 value in the IsisAdvanced object
//  The rate at which LSPs are re-sent in seconds.
func (obj *isisAdvanced) SetLspRefreshRate(value int32) IsisAdvanced {
	obj.obj.LspRefreshRate = &value

	return obj
}

// LspLifetime returns a int32
//  The MaxAge for retaining a learned LSP on this router in seconds.
func (obj *isisAdvanced) LspLifetime() int32 {

	if obj.obj.LspLifetime == nil {
		*obj.obj.LspLifetime = 1200
	}

	return *obj.obj.LspLifetime

}

// LspLifetime returns a int32
//  The MaxAge for retaining a learned LSP on this router in seconds.
func (obj *isisAdvanced) HasLspLifetime() bool {
	return obj.obj.LspLifetime != nil
}

// SetLspLifetime sets the int32 value in the IsisAdvanced object
//  The MaxAge for retaining a learned LSP on this router in seconds.
func (obj *isisAdvanced) SetLspLifetime(value int32) IsisAdvanced {
	obj.obj.LspLifetime = &value

	return obj
}

// PsnpInterval returns a int32
//  The number of milliseconds between transmissions of Partial Sequence Number PDU.
func (obj *isisAdvanced) PsnpInterval() int32 {

	if obj.obj.PsnpInterval == nil {
		*obj.obj.PsnpInterval = 2000
	}

	return *obj.obj.PsnpInterval

}

// PsnpInterval returns a int32
//  The number of milliseconds between transmissions of Partial Sequence Number PDU.
func (obj *isisAdvanced) HasPsnpInterval() bool {
	return obj.obj.PsnpInterval != nil
}

// SetPsnpInterval sets the int32 value in the IsisAdvanced object
//  The number of milliseconds between transmissions of Partial Sequence Number PDU.
func (obj *isisAdvanced) SetPsnpInterval(value int32) IsisAdvanced {
	obj.obj.PsnpInterval = &value

	return obj
}

// CsnpInterval returns a int32
//  The number of milliseconds between transmissions of Partial Sequence Number PDU.
func (obj *isisAdvanced) CsnpInterval() int32 {

	if obj.obj.CsnpInterval == nil {
		*obj.obj.CsnpInterval = 10000
	}

	return *obj.obj.CsnpInterval

}

// CsnpInterval returns a int32
//  The number of milliseconds between transmissions of Partial Sequence Number PDU.
func (obj *isisAdvanced) HasCsnpInterval() bool {
	return obj.obj.CsnpInterval != nil
}

// SetCsnpInterval sets the int32 value in the IsisAdvanced object
//  The number of milliseconds between transmissions of Partial Sequence Number PDU.
func (obj *isisAdvanced) SetCsnpInterval(value int32) IsisAdvanced {
	obj.obj.CsnpInterval = &value

	return obj
}

// MaxLspSize returns a int32
//  The maximum size in bytes of any LSP that can be transmitted over a link of equal or less  than maximum MTU size.
func (obj *isisAdvanced) MaxLspSize() int32 {

	if obj.obj.MaxLspSize == nil {
		*obj.obj.MaxLspSize = 1492
	}

	return *obj.obj.MaxLspSize

}

// MaxLspSize returns a int32
//  The maximum size in bytes of any LSP that can be transmitted over a link of equal or less  than maximum MTU size.
func (obj *isisAdvanced) HasMaxLspSize() bool {
	return obj.obj.MaxLspSize != nil
}

// SetMaxLspSize sets the int32 value in the IsisAdvanced object
//  The maximum size in bytes of any LSP that can be transmitted over a link of equal or less  than maximum MTU size.
func (obj *isisAdvanced) SetMaxLspSize(value int32) IsisAdvanced {
	obj.obj.MaxLspSize = &value

	return obj
}

// LspMgroupMinTransInterval returns a int32
//  The number of seconds between transmissions of LSPs/MGROUP-PDUs.
func (obj *isisAdvanced) LspMgroupMinTransInterval() int32 {

	if obj.obj.LspMgroupMinTransInterval == nil {
		*obj.obj.LspMgroupMinTransInterval = 5000
	}

	return *obj.obj.LspMgroupMinTransInterval

}

// LspMgroupMinTransInterval returns a int32
//  The number of seconds between transmissions of LSPs/MGROUP-PDUs.
func (obj *isisAdvanced) HasLspMgroupMinTransInterval() bool {
	return obj.obj.LspMgroupMinTransInterval != nil
}

// SetLspMgroupMinTransInterval sets the int32 value in the IsisAdvanced object
//  The number of seconds between transmissions of LSPs/MGROUP-PDUs.
func (obj *isisAdvanced) SetLspMgroupMinTransInterval(value int32) IsisAdvanced {
	obj.obj.LspMgroupMinTransInterval = &value

	return obj
}

func (obj *isisAdvanced) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.MaxAreaAddresses != nil {
		if *obj.obj.MaxAreaAddresses < 0 || *obj.obj.MaxAreaAddresses > 254 {
			validation = append(
				validation, fmt.Sprintf("0 <= IsisAdvanced.MaxAreaAddresses <= 254 but Got %d", *obj.obj.MaxAreaAddresses))
		}

	}

	if obj.obj.AreaAddresses != nil {
		err := validateHexSlice(obj.AreaAddresses())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on AreaAddresses IsisAdvanced"))
		}
	}

	if obj.obj.LspRefreshRate != nil {
		if *obj.obj.LspRefreshRate < 1 || *obj.obj.LspRefreshRate > 65535 {
			validation = append(
				validation, fmt.Sprintf("1 <= IsisAdvanced.LspRefreshRate <= 65535 but Got %d", *obj.obj.LspRefreshRate))
		}

	}

	if obj.obj.LspLifetime != nil {
		if *obj.obj.LspLifetime < 1 || *obj.obj.LspLifetime > 65535 {
			validation = append(
				validation, fmt.Sprintf("1 <= IsisAdvanced.LspLifetime <= 65535 but Got %d", *obj.obj.LspLifetime))
		}

	}

	if obj.obj.PsnpInterval != nil {
		if *obj.obj.PsnpInterval < 1 || *obj.obj.PsnpInterval > 60000 {
			validation = append(
				validation, fmt.Sprintf("1 <= IsisAdvanced.PsnpInterval <= 60000 but Got %d", *obj.obj.PsnpInterval))
		}

	}

	if obj.obj.CsnpInterval != nil {
		if *obj.obj.CsnpInterval < 1 || *obj.obj.CsnpInterval > 65535000 {
			validation = append(
				validation, fmt.Sprintf("1 <= IsisAdvanced.CsnpInterval <= 65535000 but Got %d", *obj.obj.CsnpInterval))
		}

	}

	if obj.obj.MaxLspSize != nil {
		if *obj.obj.MaxLspSize < 64 || *obj.obj.MaxLspSize > 9216 {
			validation = append(
				validation, fmt.Sprintf("64 <= IsisAdvanced.MaxLspSize <= 9216 but Got %d", *obj.obj.MaxLspSize))
		}

	}

	if obj.obj.LspMgroupMinTransInterval != nil {
		if *obj.obj.LspMgroupMinTransInterval < 1 || *obj.obj.LspMgroupMinTransInterval > 60000 {
			validation = append(
				validation, fmt.Sprintf("1 <= IsisAdvanced.LspMgroupMinTransInterval <= 60000 but Got %d", *obj.obj.LspMgroupMinTransInterval))
		}

	}

}

func (obj *isisAdvanced) setDefault() {
	if obj.obj.EnableHelloPadding == nil {
		obj.SetEnableHelloPadding(true)
	}
	if obj.obj.MaxAreaAddresses == nil {
		obj.SetMaxAreaAddresses(3)
	}
	if obj.obj.LspRefreshRate == nil {
		obj.SetLspRefreshRate(600)
	}
	if obj.obj.LspLifetime == nil {
		obj.SetLspLifetime(1200)
	}
	if obj.obj.PsnpInterval == nil {
		obj.SetPsnpInterval(2000)
	}
	if obj.obj.CsnpInterval == nil {
		obj.SetCsnpInterval(10000)
	}
	if obj.obj.MaxLspSize == nil {
		obj.SetMaxLspSize(1492)
	}
	if obj.obj.LspMgroupMinTransInterval == nil {
		obj.SetLspMgroupMinTransInterval(5000)
	}

}

type isisAuthentication struct {
	obj *snappipb.IsisAuthentication
}

func NewIsisAuthentication() IsisAuthentication {
	obj := isisAuthentication{obj: &snappipb.IsisAuthentication{}}
	obj.setDefault()
	return &obj
}

func (obj *isisAuthentication) Msg() *snappipb.IsisAuthentication {
	return obj.obj
}

func (obj *isisAuthentication) SetMsg(msg *snappipb.IsisAuthentication) IsisAuthentication {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisAuthentication) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisAuthentication) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisAuthentication) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisAuthentication) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisAuthentication) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisAuthentication) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisAuthentication) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisAuthentication interface {
	Msg() *snappipb.IsisAuthentication
	SetMsg(*snappipb.IsisAuthentication) IsisAuthentication
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	IgnoreReceiveMd5() bool
	SetIgnoreReceiveMd5(value bool) IsisAuthentication
	HasIgnoreReceiveMd5() bool
	AreaAuth() IsisAuthenticationBase
	SetAreaAuth(value IsisAuthenticationBase) IsisAuthentication
	HasAreaAuth() bool
	DomainAuth() IsisAuthenticationBase
	SetDomainAuth(value IsisAuthenticationBase) IsisAuthentication
	HasDomainAuth() bool
}

// IgnoreReceiveMd5 returns a bool
//  Do not verify MD5 checksum in received LSPs.
func (obj *isisAuthentication) IgnoreReceiveMd5() bool {

	if obj.obj.IgnoreReceiveMd5 == nil {
		*obj.obj.IgnoreReceiveMd5 = true
	}

	return *obj.obj.IgnoreReceiveMd5

}

// IgnoreReceiveMd5 returns a bool
//  Do not verify MD5 checksum in received LSPs.
func (obj *isisAuthentication) HasIgnoreReceiveMd5() bool {
	return obj.obj.IgnoreReceiveMd5 != nil
}

// SetIgnoreReceiveMd5 sets the bool value in the IsisAuthentication object
//  Do not verify MD5 checksum in received LSPs.
func (obj *isisAuthentication) SetIgnoreReceiveMd5(value bool) IsisAuthentication {
	obj.obj.IgnoreReceiveMd5 = &value

	return obj
}

// AreaAuth returns a IsisAuthenticationBase
//  The Area authentication method used for the emulated ISIS router.
//  This is used for L1 LSPs.
func (obj *isisAuthentication) AreaAuth() IsisAuthenticationBase {
	if obj.obj.AreaAuth == nil {
		obj.obj.AreaAuth = NewIsisAuthenticationBase().Msg()
	}
	return &isisAuthenticationBase{obj: obj.obj.AreaAuth}
}

// AreaAuth returns a IsisAuthenticationBase
//  The Area authentication method used for the emulated ISIS router.
//  This is used for L1 LSPs.
func (obj *isisAuthentication) HasAreaAuth() bool {
	return obj.obj.AreaAuth != nil
}

// SetAreaAuth sets the IsisAuthenticationBase value in the IsisAuthentication object
//  The Area authentication method used for the emulated ISIS router.
//  This is used for L1 LSPs.
func (obj *isisAuthentication) SetAreaAuth(value IsisAuthenticationBase) IsisAuthentication {
	obj.AreaAuth().SetMsg(value.Msg())

	return obj
}

// DomainAuth returns a IsisAuthenticationBase
//  The Domain authentication method used for the emulated ISIS router.
//  This is used for L2 LSPs.
func (obj *isisAuthentication) DomainAuth() IsisAuthenticationBase {
	if obj.obj.DomainAuth == nil {
		obj.obj.DomainAuth = NewIsisAuthenticationBase().Msg()
	}
	return &isisAuthenticationBase{obj: obj.obj.DomainAuth}
}

// DomainAuth returns a IsisAuthenticationBase
//  The Domain authentication method used for the emulated ISIS router.
//  This is used for L2 LSPs.
func (obj *isisAuthentication) HasDomainAuth() bool {
	return obj.obj.DomainAuth != nil
}

// SetDomainAuth sets the IsisAuthenticationBase value in the IsisAuthentication object
//  The Domain authentication method used for the emulated ISIS router.
//  This is used for L2 LSPs.
func (obj *isisAuthentication) SetDomainAuth(value IsisAuthenticationBase) IsisAuthentication {
	obj.DomainAuth().SetMsg(value.Msg())

	return obj
}

func (obj *isisAuthentication) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.AreaAuth != nil {
		obj.AreaAuth().validateObj(set_default)
	}

	if obj.obj.DomainAuth != nil {
		obj.DomainAuth().validateObj(set_default)
	}
}

func (obj *isisAuthentication) setDefault() {
	if obj.obj.IgnoreReceiveMd5 == nil {
		obj.SetIgnoreReceiveMd5(true)
	}

}

type isisV4RouteRange struct {
	obj *snappipb.IsisV4RouteRange
}

func NewIsisV4RouteRange() IsisV4RouteRange {
	obj := isisV4RouteRange{obj: &snappipb.IsisV4RouteRange{}}
	obj.setDefault()
	return &obj
}

func (obj *isisV4RouteRange) Msg() *snappipb.IsisV4RouteRange {
	return obj.obj
}

func (obj *isisV4RouteRange) SetMsg(msg *snappipb.IsisV4RouteRange) IsisV4RouteRange {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisV4RouteRange) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisV4RouteRange) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisV4RouteRange) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisV4RouteRange) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisV4RouteRange) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisV4RouteRange) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisV4RouteRange) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisV4RouteRange interface {
	Msg() *snappipb.IsisV4RouteRange
	SetMsg(*snappipb.IsisV4RouteRange) IsisV4RouteRange
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Addresses() IsisV4RouteRangeV4RouteAddressIter
	LinkMetric() int32
	SetLinkMetric(value int32) IsisV4RouteRange
	HasLinkMetric() bool
	OriginType() IsisV4RouteRangeOriginTypeEnum
	SetOriginType(value IsisV4RouteRangeOriginTypeEnum) IsisV4RouteRange
	HasOriginType() bool
	RedistributionType() IsisV4RouteRangeRedistributionTypeEnum
	SetRedistributionType(value IsisV4RouteRangeRedistributionTypeEnum) IsisV4RouteRange
	HasRedistributionType() bool
	Name() string
	SetName(value string) IsisV4RouteRange
	PrefixAttrEnabled() bool
	SetPrefixAttrEnabled(value bool) IsisV4RouteRange
	HasPrefixAttrEnabled() bool
	XFlag() bool
	SetXFlag(value bool) IsisV4RouteRange
	HasXFlag() bool
	RFlag() bool
	SetRFlag(value bool) IsisV4RouteRange
	HasRFlag() bool
	NFlag() bool
	SetNFlag(value bool) IsisV4RouteRange
	HasNFlag() bool
}

// Addresses returns a []V4RouteAddress
//  A list of group of IPv4 route addresses.
func (obj *isisV4RouteRange) Addresses() IsisV4RouteRangeV4RouteAddressIter {
	if obj.obj.Addresses == nil {
		obj.obj.Addresses = []*snappipb.V4RouteAddress{}
	}
	return &isisV4RouteRangeV4RouteAddressIter{obj: obj}
}

type isisV4RouteRangeV4RouteAddressIter struct {
	obj *isisV4RouteRange
}

type IsisV4RouteRangeV4RouteAddressIter interface {
	Add() V4RouteAddress
	Items() []V4RouteAddress
}

func (obj *isisV4RouteRangeV4RouteAddressIter) Add() V4RouteAddress {
	newObj := &snappipb.V4RouteAddress{}
	obj.obj.obj.Addresses = append(obj.obj.obj.Addresses, newObj)
	newLibObj := &v4RouteAddress{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *isisV4RouteRangeV4RouteAddressIter) Items() []V4RouteAddress {
	slice := []V4RouteAddress{}
	for _, item := range obj.obj.obj.Addresses {
		slice = append(slice, &v4RouteAddress{obj: item})
	}
	return slice
}

// LinkMetric returns a int32
//  The user-defined metric associated with this route range.
func (obj *isisV4RouteRange) LinkMetric() int32 {

	if obj.obj.LinkMetric == nil {
		*obj.obj.LinkMetric = 0
	}

	return *obj.obj.LinkMetric

}

// LinkMetric returns a int32
//  The user-defined metric associated with this route range.
func (obj *isisV4RouteRange) HasLinkMetric() bool {
	return obj.obj.LinkMetric != nil
}

// SetLinkMetric sets the int32 value in the IsisV4RouteRange object
//  The user-defined metric associated with this route range.
func (obj *isisV4RouteRange) SetLinkMetric(value int32) IsisV4RouteRange {
	obj.obj.LinkMetric = &value

	return obj
}

type IsisV4RouteRangeOriginTypeEnum string

var IsisV4RouteRangeOriginType = struct {
	INTERNAL IsisV4RouteRangeOriginTypeEnum
	EXTERNAL IsisV4RouteRangeOriginTypeEnum
}{
	INTERNAL: IsisV4RouteRangeOriginTypeEnum("internal"),
	EXTERNAL: IsisV4RouteRangeOriginTypeEnum("external"),
}

func (obj *isisV4RouteRange) OriginType() IsisV4RouteRangeOriginTypeEnum {
	return IsisV4RouteRangeOriginTypeEnum(obj.obj.OriginType.Enum().String())
}

// OriginType returns a string
//  The origin of the advertised route-internal or external to the ISIS area. Options include the following:
//  Internal-for intra-area routes, through Level 1 LSPs.
//  External-for inter-area routes redistributed within L1, through Level 1 LSPs.
func (obj *isisV4RouteRange) HasOriginType() bool {
	return obj.obj.OriginType != nil
}

func (obj *isisV4RouteRange) SetOriginType(value IsisV4RouteRangeOriginTypeEnum) IsisV4RouteRange {
	intValue, ok := snappipb.IsisV4RouteRange_OriginType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on IsisV4RouteRangeOriginTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.IsisV4RouteRange_OriginType_Enum(intValue)
	obj.obj.OriginType = &enumValue

	return obj
}

type IsisV4RouteRangeRedistributionTypeEnum string

var IsisV4RouteRangeRedistributionType = struct {
	UP   IsisV4RouteRangeRedistributionTypeEnum
	DOWN IsisV4RouteRangeRedistributionTypeEnum
}{
	UP:   IsisV4RouteRangeRedistributionTypeEnum("up"),
	DOWN: IsisV4RouteRangeRedistributionTypeEnum("down"),
}

func (obj *isisV4RouteRange) RedistributionType() IsisV4RouteRangeRedistributionTypeEnum {
	return IsisV4RouteRangeRedistributionTypeEnum(obj.obj.RedistributionType.Enum().String())
}

// RedistributionType returns a string
//  Defines the Up/Down (Redistribution) bit defined for TLVs 128 and 130 by RFC 2966.  It is used for domain-wide advertisement of prefix information.
//  Up (0)-used when a prefix is initially advertised within the ISIS L3 hierarchy,
//  and for all other prefixes in L1 and L2 LSPs. (default)
//  Down (1)-used when an L1/L2 router advertises L2 prefixes in L1 LSPs.
//  The prefixes are being advertised from a higher level (L2) down to a lower level (L1).
func (obj *isisV4RouteRange) HasRedistributionType() bool {
	return obj.obj.RedistributionType != nil
}

func (obj *isisV4RouteRange) SetRedistributionType(value IsisV4RouteRangeRedistributionTypeEnum) IsisV4RouteRange {
	intValue, ok := snappipb.IsisV4RouteRange_RedistributionType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on IsisV4RouteRangeRedistributionTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.IsisV4RouteRange_RedistributionType_Enum(intValue)
	obj.obj.RedistributionType = &enumValue

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *isisV4RouteRange) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the IsisV4RouteRange object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *isisV4RouteRange) SetName(value string) IsisV4RouteRange {
	obj.obj.Name = value

	return obj
}

// PrefixAttrEnabled returns a bool
//  Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability Attribute Flags
//  will be advertised or not.
func (obj *isisV4RouteRange) PrefixAttrEnabled() bool {

	if obj.obj.PrefixAttrEnabled == nil {
		*obj.obj.PrefixAttrEnabled = false
	}

	return *obj.obj.PrefixAttrEnabled

}

// PrefixAttrEnabled returns a bool
//  Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability Attribute Flags
//  will be advertised or not.
func (obj *isisV4RouteRange) HasPrefixAttrEnabled() bool {
	return obj.obj.PrefixAttrEnabled != nil
}

// SetPrefixAttrEnabled sets the bool value in the IsisV4RouteRange object
//  Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability Attribute Flags
//  will be advertised or not.
func (obj *isisV4RouteRange) SetPrefixAttrEnabled(value bool) IsisV4RouteRange {
	obj.obj.PrefixAttrEnabled = &value

	return obj
}

// XFlag returns a bool
//  External Prefix Flag (Bit 0)
func (obj *isisV4RouteRange) XFlag() bool {

	if obj.obj.XFlag == nil {
		*obj.obj.XFlag = false
	}

	return *obj.obj.XFlag

}

// XFlag returns a bool
//  External Prefix Flag (Bit 0)
func (obj *isisV4RouteRange) HasXFlag() bool {
	return obj.obj.XFlag != nil
}

// SetXFlag sets the bool value in the IsisV4RouteRange object
//  External Prefix Flag (Bit 0)
func (obj *isisV4RouteRange) SetXFlag(value bool) IsisV4RouteRange {
	obj.obj.XFlag = &value

	return obj
}

// RFlag returns a bool
//  Re-advertisement Flag (Bit 1)
func (obj *isisV4RouteRange) RFlag() bool {

	if obj.obj.RFlag == nil {
		*obj.obj.RFlag = false
	}

	return *obj.obj.RFlag

}

// RFlag returns a bool
//  Re-advertisement Flag (Bit 1)
func (obj *isisV4RouteRange) HasRFlag() bool {
	return obj.obj.RFlag != nil
}

// SetRFlag sets the bool value in the IsisV4RouteRange object
//  Re-advertisement Flag (Bit 1)
func (obj *isisV4RouteRange) SetRFlag(value bool) IsisV4RouteRange {
	obj.obj.RFlag = &value

	return obj
}

// NFlag returns a bool
//  Node Flag (Bit 2)
func (obj *isisV4RouteRange) NFlag() bool {

	if obj.obj.NFlag == nil {
		*obj.obj.NFlag = false
	}

	return *obj.obj.NFlag

}

// NFlag returns a bool
//  Node Flag (Bit 2)
func (obj *isisV4RouteRange) HasNFlag() bool {
	return obj.obj.NFlag != nil
}

// SetNFlag sets the bool value in the IsisV4RouteRange object
//  Node Flag (Bit 2)
func (obj *isisV4RouteRange) SetNFlag(value bool) IsisV4RouteRange {
	obj.obj.NFlag = &value

	return obj
}

func (obj *isisV4RouteRange) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.Addresses != nil {
		for _, item := range obj.Addresses().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.LinkMetric != nil {
		if *obj.obj.LinkMetric < 0 || *obj.obj.LinkMetric > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= IsisV4RouteRange.LinkMetric <= 16777215 but Got %d", *obj.obj.LinkMetric))
		}

	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface IsisV4RouteRange")
	}
}

func (obj *isisV4RouteRange) setDefault() {
	if obj.obj.LinkMetric == nil {
		obj.SetLinkMetric(0)
	}
	if obj.obj.OriginType == nil {
		obj.SetOriginType(IsisV4RouteRangeOriginType.INTERNAL)

	}
	if obj.obj.RedistributionType == nil {
		obj.SetRedistributionType(IsisV4RouteRangeRedistributionType.UP)

	}
	if obj.obj.PrefixAttrEnabled == nil {
		obj.SetPrefixAttrEnabled(false)
	}
	if obj.obj.XFlag == nil {
		obj.SetXFlag(false)
	}
	if obj.obj.RFlag == nil {
		obj.SetRFlag(false)
	}
	if obj.obj.NFlag == nil {
		obj.SetNFlag(false)
	}

}

type isisV6RouteRange struct {
	obj *snappipb.IsisV6RouteRange
}

func NewIsisV6RouteRange() IsisV6RouteRange {
	obj := isisV6RouteRange{obj: &snappipb.IsisV6RouteRange{}}
	obj.setDefault()
	return &obj
}

func (obj *isisV6RouteRange) Msg() *snappipb.IsisV6RouteRange {
	return obj.obj
}

func (obj *isisV6RouteRange) SetMsg(msg *snappipb.IsisV6RouteRange) IsisV6RouteRange {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisV6RouteRange) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisV6RouteRange) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisV6RouteRange) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisV6RouteRange) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisV6RouteRange) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisV6RouteRange) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisV6RouteRange) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisV6RouteRange interface {
	Msg() *snappipb.IsisV6RouteRange
	SetMsg(*snappipb.IsisV6RouteRange) IsisV6RouteRange
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Addresses() IsisV6RouteRangeV6RouteAddressIter
	LinkMetric() int32
	SetLinkMetric(value int32) IsisV6RouteRange
	HasLinkMetric() bool
	OriginType() IsisV6RouteRangeOriginTypeEnum
	SetOriginType(value IsisV6RouteRangeOriginTypeEnum) IsisV6RouteRange
	HasOriginType() bool
	RedistributionType() IsisV6RouteRangeRedistributionTypeEnum
	SetRedistributionType(value IsisV6RouteRangeRedistributionTypeEnum) IsisV6RouteRange
	HasRedistributionType() bool
	Name() string
	SetName(value string) IsisV6RouteRange
	PrefixAttrEnabled() bool
	SetPrefixAttrEnabled(value bool) IsisV6RouteRange
	HasPrefixAttrEnabled() bool
	XFlag() bool
	SetXFlag(value bool) IsisV6RouteRange
	HasXFlag() bool
	RFlag() bool
	SetRFlag(value bool) IsisV6RouteRange
	HasRFlag() bool
	NFlag() bool
	SetNFlag(value bool) IsisV6RouteRange
	HasNFlag() bool
}

// Addresses returns a []V6RouteAddress
//  A list of group of IPv6 route addresses.
func (obj *isisV6RouteRange) Addresses() IsisV6RouteRangeV6RouteAddressIter {
	if obj.obj.Addresses == nil {
		obj.obj.Addresses = []*snappipb.V6RouteAddress{}
	}
	return &isisV6RouteRangeV6RouteAddressIter{obj: obj}
}

type isisV6RouteRangeV6RouteAddressIter struct {
	obj *isisV6RouteRange
}

type IsisV6RouteRangeV6RouteAddressIter interface {
	Add() V6RouteAddress
	Items() []V6RouteAddress
}

func (obj *isisV6RouteRangeV6RouteAddressIter) Add() V6RouteAddress {
	newObj := &snappipb.V6RouteAddress{}
	obj.obj.obj.Addresses = append(obj.obj.obj.Addresses, newObj)
	newLibObj := &v6RouteAddress{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *isisV6RouteRangeV6RouteAddressIter) Items() []V6RouteAddress {
	slice := []V6RouteAddress{}
	for _, item := range obj.obj.obj.Addresses {
		slice = append(slice, &v6RouteAddress{obj: item})
	}
	return slice
}

// LinkMetric returns a int32
//  The user-defined metric associated with this route range.
func (obj *isisV6RouteRange) LinkMetric() int32 {

	if obj.obj.LinkMetric == nil {
		*obj.obj.LinkMetric = 0
	}

	return *obj.obj.LinkMetric

}

// LinkMetric returns a int32
//  The user-defined metric associated with this route range.
func (obj *isisV6RouteRange) HasLinkMetric() bool {
	return obj.obj.LinkMetric != nil
}

// SetLinkMetric sets the int32 value in the IsisV6RouteRange object
//  The user-defined metric associated with this route range.
func (obj *isisV6RouteRange) SetLinkMetric(value int32) IsisV6RouteRange {
	obj.obj.LinkMetric = &value

	return obj
}

type IsisV6RouteRangeOriginTypeEnum string

var IsisV6RouteRangeOriginType = struct {
	INTERNAL IsisV6RouteRangeOriginTypeEnum
	EXTERNAL IsisV6RouteRangeOriginTypeEnum
}{
	INTERNAL: IsisV6RouteRangeOriginTypeEnum("internal"),
	EXTERNAL: IsisV6RouteRangeOriginTypeEnum("external"),
}

func (obj *isisV6RouteRange) OriginType() IsisV6RouteRangeOriginTypeEnum {
	return IsisV6RouteRangeOriginTypeEnum(obj.obj.OriginType.Enum().String())
}

// OriginType returns a string
//  The origin of the advertised route-internal or external to the ISIS area. Options include the following:
//  Internal-for intra-area routes, through Level 1 LSPs.
//  External-for inter-area routes redistributed within L1, through Level 1 LSPs.
func (obj *isisV6RouteRange) HasOriginType() bool {
	return obj.obj.OriginType != nil
}

func (obj *isisV6RouteRange) SetOriginType(value IsisV6RouteRangeOriginTypeEnum) IsisV6RouteRange {
	intValue, ok := snappipb.IsisV6RouteRange_OriginType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on IsisV6RouteRangeOriginTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.IsisV6RouteRange_OriginType_Enum(intValue)
	obj.obj.OriginType = &enumValue

	return obj
}

type IsisV6RouteRangeRedistributionTypeEnum string

var IsisV6RouteRangeRedistributionType = struct {
	UP   IsisV6RouteRangeRedistributionTypeEnum
	DOWN IsisV6RouteRangeRedistributionTypeEnum
}{
	UP:   IsisV6RouteRangeRedistributionTypeEnum("up"),
	DOWN: IsisV6RouteRangeRedistributionTypeEnum("down"),
}

func (obj *isisV6RouteRange) RedistributionType() IsisV6RouteRangeRedistributionTypeEnum {
	return IsisV6RouteRangeRedistributionTypeEnum(obj.obj.RedistributionType.Enum().String())
}

// RedistributionType returns a string
//  Defines the Up/Down (Redistribution) bit defined for TLVs 128 and 130 by RFC 2966.  It is used for domain-wide advertisement of prefix information.
//  Up (0)-used when a prefix is initially advertised within the ISIS L3 hierarchy,
//  and for all other prefixes in L1 and L2 LSPs. (default)
//  Down (1)-used when an L1/L2 router advertises L2 prefixes in L1 LSPs.
//  The prefixes are being advertised from a higher level (L2) down to a lower level (L1).
func (obj *isisV6RouteRange) HasRedistributionType() bool {
	return obj.obj.RedistributionType != nil
}

func (obj *isisV6RouteRange) SetRedistributionType(value IsisV6RouteRangeRedistributionTypeEnum) IsisV6RouteRange {
	intValue, ok := snappipb.IsisV6RouteRange_RedistributionType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on IsisV6RouteRangeRedistributionTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.IsisV6RouteRange_RedistributionType_Enum(intValue)
	obj.obj.RedistributionType = &enumValue

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *isisV6RouteRange) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the IsisV6RouteRange object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *isisV6RouteRange) SetName(value string) IsisV6RouteRange {
	obj.obj.Name = value

	return obj
}

// PrefixAttrEnabled returns a bool
//  Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability Attribute Flags
//  will be advertised or not.
func (obj *isisV6RouteRange) PrefixAttrEnabled() bool {

	if obj.obj.PrefixAttrEnabled == nil {
		*obj.obj.PrefixAttrEnabled = false
	}

	return *obj.obj.PrefixAttrEnabled

}

// PrefixAttrEnabled returns a bool
//  Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability Attribute Flags
//  will be advertised or not.
func (obj *isisV6RouteRange) HasPrefixAttrEnabled() bool {
	return obj.obj.PrefixAttrEnabled != nil
}

// SetPrefixAttrEnabled sets the bool value in the IsisV6RouteRange object
//  Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability Attribute Flags
//  will be advertised or not.
func (obj *isisV6RouteRange) SetPrefixAttrEnabled(value bool) IsisV6RouteRange {
	obj.obj.PrefixAttrEnabled = &value

	return obj
}

// XFlag returns a bool
//  External Prefix Flag (Bit 0)
func (obj *isisV6RouteRange) XFlag() bool {

	if obj.obj.XFlag == nil {
		*obj.obj.XFlag = false
	}

	return *obj.obj.XFlag

}

// XFlag returns a bool
//  External Prefix Flag (Bit 0)
func (obj *isisV6RouteRange) HasXFlag() bool {
	return obj.obj.XFlag != nil
}

// SetXFlag sets the bool value in the IsisV6RouteRange object
//  External Prefix Flag (Bit 0)
func (obj *isisV6RouteRange) SetXFlag(value bool) IsisV6RouteRange {
	obj.obj.XFlag = &value

	return obj
}

// RFlag returns a bool
//  Re-advertisement Flag (Bit 1)
func (obj *isisV6RouteRange) RFlag() bool {

	if obj.obj.RFlag == nil {
		*obj.obj.RFlag = false
	}

	return *obj.obj.RFlag

}

// RFlag returns a bool
//  Re-advertisement Flag (Bit 1)
func (obj *isisV6RouteRange) HasRFlag() bool {
	return obj.obj.RFlag != nil
}

// SetRFlag sets the bool value in the IsisV6RouteRange object
//  Re-advertisement Flag (Bit 1)
func (obj *isisV6RouteRange) SetRFlag(value bool) IsisV6RouteRange {
	obj.obj.RFlag = &value

	return obj
}

// NFlag returns a bool
//  Node Flag (Bit 2)
func (obj *isisV6RouteRange) NFlag() bool {

	if obj.obj.NFlag == nil {
		*obj.obj.NFlag = false
	}

	return *obj.obj.NFlag

}

// NFlag returns a bool
//  Node Flag (Bit 2)
func (obj *isisV6RouteRange) HasNFlag() bool {
	return obj.obj.NFlag != nil
}

// SetNFlag sets the bool value in the IsisV6RouteRange object
//  Node Flag (Bit 2)
func (obj *isisV6RouteRange) SetNFlag(value bool) IsisV6RouteRange {
	obj.obj.NFlag = &value

	return obj
}

func (obj *isisV6RouteRange) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.Addresses != nil {
		for _, item := range obj.Addresses().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.LinkMetric != nil {
		if *obj.obj.LinkMetric < 0 || *obj.obj.LinkMetric > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= IsisV6RouteRange.LinkMetric <= 16777215 but Got %d", *obj.obj.LinkMetric))
		}

	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface IsisV6RouteRange")
	}
}

func (obj *isisV6RouteRange) setDefault() {
	if obj.obj.LinkMetric == nil {
		obj.SetLinkMetric(0)
	}
	if obj.obj.OriginType == nil {
		obj.SetOriginType(IsisV6RouteRangeOriginType.INTERNAL)

	}
	if obj.obj.RedistributionType == nil {
		obj.SetRedistributionType(IsisV6RouteRangeRedistributionType.UP)

	}
	if obj.obj.PrefixAttrEnabled == nil {
		obj.SetPrefixAttrEnabled(false)
	}
	if obj.obj.XFlag == nil {
		obj.SetXFlag(false)
	}
	if obj.obj.RFlag == nil {
		obj.SetRFlag(false)
	}
	if obj.obj.NFlag == nil {
		obj.SetNFlag(false)
	}

}

type bgpV4Interface struct {
	obj *snappipb.BgpV4Interface
}

func NewBgpV4Interface() BgpV4Interface {
	obj := bgpV4Interface{obj: &snappipb.BgpV4Interface{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpV4Interface) Msg() *snappipb.BgpV4Interface {
	return obj.obj
}

func (obj *bgpV4Interface) SetMsg(msg *snappipb.BgpV4Interface) BgpV4Interface {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpV4Interface) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpV4Interface) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV4Interface) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV4Interface) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV4Interface) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV4Interface) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpV4Interface) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpV4Interface interface {
	Msg() *snappipb.BgpV4Interface
	SetMsg(*snappipb.BgpV4Interface) BgpV4Interface
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Ipv4Name() string
	SetIpv4Name(value string) BgpV4Interface
	Peers() BgpV4InterfaceBgpV4PeerIter
}

// Ipv4Name returns a string
//  The unique name of the IPv4 or Loopback IPv4 interface used as the source IP for this list of BGP peers.
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv4Loopback/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv4Loopback/properties/name
//
func (obj *bgpV4Interface) Ipv4Name() string {

	return obj.obj.Ipv4Name
}

// SetIpv4Name sets the string value in the BgpV4Interface object
//  The unique name of the IPv4 or Loopback IPv4 interface used as the source IP for this list of BGP peers.
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv4Loopback/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv4Loopback/properties/name
//
func (obj *bgpV4Interface) SetIpv4Name(value string) BgpV4Interface {
	obj.obj.Ipv4Name = value

	return obj
}

// Peers returns a []BgpV4Peer
//  This contains the list of BGPv4 peers configured on this interface.
func (obj *bgpV4Interface) Peers() BgpV4InterfaceBgpV4PeerIter {
	if obj.obj.Peers == nil {
		obj.obj.Peers = []*snappipb.BgpV4Peer{}
	}
	return &bgpV4InterfaceBgpV4PeerIter{obj: obj}
}

type bgpV4InterfaceBgpV4PeerIter struct {
	obj *bgpV4Interface
}

type BgpV4InterfaceBgpV4PeerIter interface {
	Add() BgpV4Peer
	Items() []BgpV4Peer
}

func (obj *bgpV4InterfaceBgpV4PeerIter) Add() BgpV4Peer {
	newObj := &snappipb.BgpV4Peer{}
	obj.obj.obj.Peers = append(obj.obj.obj.Peers, newObj)
	newLibObj := &bgpV4Peer{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV4InterfaceBgpV4PeerIter) Items() []BgpV4Peer {
	slice := []BgpV4Peer{}
	for _, item := range obj.obj.obj.Peers {
		slice = append(slice, &bgpV4Peer{obj: item})
	}
	return slice
}

func (obj *bgpV4Interface) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Ipv4Name required
	if obj.obj.Ipv4Name == "" {
		validation = append(validation, "Ipv4Name is required field on interface BgpV4Interface")
	}
	if obj.obj.Peers != nil {
		for _, item := range obj.Peers().Items() {
			item.validateObj(set_default)
		}
	}

}

func (obj *bgpV4Interface) setDefault() {

}

type bgpV6Interface struct {
	obj *snappipb.BgpV6Interface
}

func NewBgpV6Interface() BgpV6Interface {
	obj := bgpV6Interface{obj: &snappipb.BgpV6Interface{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpV6Interface) Msg() *snappipb.BgpV6Interface {
	return obj.obj
}

func (obj *bgpV6Interface) SetMsg(msg *snappipb.BgpV6Interface) BgpV6Interface {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpV6Interface) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpV6Interface) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV6Interface) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV6Interface) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV6Interface) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV6Interface) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpV6Interface) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpV6Interface interface {
	Msg() *snappipb.BgpV6Interface
	SetMsg(*snappipb.BgpV6Interface) BgpV6Interface
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Ipv6Name() string
	SetIpv6Name(value string) BgpV6Interface
	Peers() BgpV6InterfaceBgpV6PeerIter
}

// Ipv6Name returns a string
//  The unique name of IPv6 or Loopback IPv6 interface used as the source IP for this list of BGP peers.
//
//  x-constraint:
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Ipv6Loopback/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Ipv6Loopback/properties/name
//
func (obj *bgpV6Interface) Ipv6Name() string {

	return obj.obj.Ipv6Name
}

// SetIpv6Name sets the string value in the BgpV6Interface object
//  The unique name of IPv6 or Loopback IPv6 interface used as the source IP for this list of BGP peers.
//
//  x-constraint:
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Ipv6Loopback/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Ipv6Loopback/properties/name
//
func (obj *bgpV6Interface) SetIpv6Name(value string) BgpV6Interface {
	obj.obj.Ipv6Name = value

	return obj
}

// Peers returns a []BgpV6Peer
//  This contains the list of BGPv6 peers configured on this interface.
func (obj *bgpV6Interface) Peers() BgpV6InterfaceBgpV6PeerIter {
	if obj.obj.Peers == nil {
		obj.obj.Peers = []*snappipb.BgpV6Peer{}
	}
	return &bgpV6InterfaceBgpV6PeerIter{obj: obj}
}

type bgpV6InterfaceBgpV6PeerIter struct {
	obj *bgpV6Interface
}

type BgpV6InterfaceBgpV6PeerIter interface {
	Add() BgpV6Peer
	Items() []BgpV6Peer
}

func (obj *bgpV6InterfaceBgpV6PeerIter) Add() BgpV6Peer {
	newObj := &snappipb.BgpV6Peer{}
	obj.obj.obj.Peers = append(obj.obj.obj.Peers, newObj)
	newLibObj := &bgpV6Peer{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV6InterfaceBgpV6PeerIter) Items() []BgpV6Peer {
	slice := []BgpV6Peer{}
	for _, item := range obj.obj.obj.Peers {
		slice = append(slice, &bgpV6Peer{obj: item})
	}
	return slice
}

func (obj *bgpV6Interface) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Ipv6Name required
	if obj.obj.Ipv6Name == "" {
		validation = append(validation, "Ipv6Name is required field on interface BgpV6Interface")
	}
	if obj.obj.Peers != nil {
		for _, item := range obj.Peers().Items() {
			item.validateObj(set_default)
		}
	}

}

func (obj *bgpV6Interface) setDefault() {

}

type flowPort struct {
	obj *snappipb.FlowPort
}

func NewFlowPort() FlowPort {
	obj := flowPort{obj: &snappipb.FlowPort{}}
	obj.setDefault()
	return &obj
}

func (obj *flowPort) Msg() *snappipb.FlowPort {
	return obj.obj
}

func (obj *flowPort) SetMsg(msg *snappipb.FlowPort) FlowPort {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowPort) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowPort) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowPort) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowPort) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPort) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowPort) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowPort interface {
	Msg() *snappipb.FlowPort
	SetMsg(*snappipb.FlowPort) FlowPort
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	TxName() string
	SetTxName(value string) FlowPort
	RxName() string
	SetRxName(value string) FlowPort
	HasRxName() bool
}

// TxName returns a string
//  The unique name of a port that is the transmit port.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *flowPort) TxName() string {

	return obj.obj.TxName
}

// SetTxName sets the string value in the FlowPort object
//  The unique name of a port that is the transmit port.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *flowPort) SetTxName(value string) FlowPort {
	obj.obj.TxName = value

	return obj
}

// RxName returns a string
//  The unique name of a port that is the intended receive port.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *flowPort) RxName() string {

	return *obj.obj.RxName

}

// RxName returns a string
//  The unique name of a port that is the intended receive port.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *flowPort) HasRxName() bool {
	return obj.obj.RxName != nil
}

// SetRxName sets the string value in the FlowPort object
//  The unique name of a port that is the intended receive port.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *flowPort) SetRxName(value string) FlowPort {
	obj.obj.RxName = &value

	return obj
}

func (obj *flowPort) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// TxName required
	if obj.obj.TxName == "" {
		validation = append(validation, "TxName is required field on interface FlowPort")
	}
}

func (obj *flowPort) setDefault() {

}

type flowRouter struct {
	obj *snappipb.FlowRouter
}

func NewFlowRouter() FlowRouter {
	obj := flowRouter{obj: &snappipb.FlowRouter{}}
	obj.setDefault()
	return &obj
}

func (obj *flowRouter) Msg() *snappipb.FlowRouter {
	return obj.obj
}

func (obj *flowRouter) SetMsg(msg *snappipb.FlowRouter) FlowRouter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowRouter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowRouter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowRouter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowRouter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowRouter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowRouter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowRouter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowRouter interface {
	Msg() *snappipb.FlowRouter
	SetMsg(*snappipb.FlowRouter) FlowRouter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Mode() FlowRouterModeEnum
	SetMode(value FlowRouterModeEnum) FlowRouter
	HasMode() bool
	TxNames() []string
	SetTxNames(value []string) FlowRouter
	RxNames() []string
	SetRxNames(value []string) FlowRouter
}

type FlowRouterModeEnum string

var FlowRouterMode = struct {
	MESH       FlowRouterModeEnum
	ONE_TO_ONE FlowRouterModeEnum
}{
	MESH:       FlowRouterModeEnum("mesh"),
	ONE_TO_ONE: FlowRouterModeEnum("one_to_one"),
}

func (obj *flowRouter) Mode() FlowRouterModeEnum {
	return FlowRouterModeEnum(obj.obj.Mode.Enum().String())
}

// Mode returns a string
//  Determines the mapping of tx_names to rx_names.
//
//  The mesh mode creates traffic between each value in tx_names to
//  every value in rx_names except in the case where the individual
//  tx_names value is equal to rx_names value which will be ignored.
//  Identical values in tx_names or rx_names MUST raise an error.
//
//  The one_to_one mode creates traffic between each value pair in
//  of tx_names and rx_names by index.
//  The length of tx_names and rx_name MUST be the same.
//  Identical values in tx_names or rx_names MUST raise an error.
func (obj *flowRouter) HasMode() bool {
	return obj.obj.Mode != nil
}

func (obj *flowRouter) SetMode(value FlowRouterModeEnum) FlowRouter {
	intValue, ok := snappipb.FlowRouter_Mode_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowRouterModeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowRouter_Mode_Enum(intValue)
	obj.obj.Mode = &enumValue

	return obj
}

// TxNames returns a []string
//  TBD
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
func (obj *flowRouter) TxNames() []string {
	if obj.obj.TxNames == nil {
		obj.obj.TxNames = make([]string, 0)
	}
	return obj.obj.TxNames
}

// SetTxNames sets the []string value in the FlowRouter object
//  TBD
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
func (obj *flowRouter) SetTxNames(value []string) FlowRouter {
	if obj.obj.TxNames == nil {
		obj.obj.TxNames = make([]string, 0)
	}
	obj.obj.TxNames = value

	return obj
}

// RxNames returns a []string
//  TBD
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
func (obj *flowRouter) RxNames() []string {
	if obj.obj.RxNames == nil {
		obj.obj.RxNames = make([]string, 0)
	}
	return obj.obj.RxNames
}

// SetRxNames sets the []string value in the FlowRouter object
//  TBD
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Bgp.V4RouteRange/properties/name
//  - /components/schemas/Bgp.V6RouteRange/properties/name
//
func (obj *flowRouter) SetRxNames(value []string) FlowRouter {
	if obj.obj.RxNames == nil {
		obj.obj.RxNames = make([]string, 0)
	}
	obj.obj.RxNames = value

	return obj
}

func (obj *flowRouter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// TxNames required
	if obj.obj.TxNames == nil {
		validation = append(validation, "TxNames is required field on interface FlowRouter")
	}

	// RxNames required
	if obj.obj.RxNames == nil {
		validation = append(validation, "RxNames is required field on interface FlowRouter")
	}
}

func (obj *flowRouter) setDefault() {
	if obj.obj.Mode == nil {
		obj.SetMode(FlowRouterMode.MESH)

	}

}

type flowCustom struct {
	obj *snappipb.FlowCustom
}

func NewFlowCustom() FlowCustom {
	obj := flowCustom{obj: &snappipb.FlowCustom{}}
	obj.setDefault()
	return &obj
}

func (obj *flowCustom) Msg() *snappipb.FlowCustom {
	return obj.obj
}

func (obj *flowCustom) SetMsg(msg *snappipb.FlowCustom) FlowCustom {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowCustom) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowCustom) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowCustom) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowCustom) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowCustom) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowCustom) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowCustom) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowCustom interface {
	Msg() *snappipb.FlowCustom
	SetMsg(*snappipb.FlowCustom) FlowCustom
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Bytes() string
	SetBytes(value string) FlowCustom
}

// Bytes returns a string
//  A custom packet header defined as a string of hex bytes. The string MUST contain sequence of valid hex bytes. Spaces or colons can be part of the bytes but will be discarded. This packet header can be used in multiple places in the packet.
func (obj *flowCustom) Bytes() string {

	return obj.obj.Bytes
}

// SetBytes sets the string value in the FlowCustom object
//  A custom packet header defined as a string of hex bytes. The string MUST contain sequence of valid hex bytes. Spaces or colons can be part of the bytes but will be discarded. This packet header can be used in multiple places in the packet.
func (obj *flowCustom) SetBytes(value string) FlowCustom {
	obj.obj.Bytes = value

	return obj
}

func (obj *flowCustom) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Bytes required
	if obj.obj.Bytes == "" {
		validation = append(validation, "Bytes is required field on interface FlowCustom")
	}
}

func (obj *flowCustom) setDefault() {

}

type flowEthernet struct {
	obj *snappipb.FlowEthernet
}

func NewFlowEthernet() FlowEthernet {
	obj := flowEthernet{obj: &snappipb.FlowEthernet{}}
	obj.setDefault()
	return &obj
}

func (obj *flowEthernet) Msg() *snappipb.FlowEthernet {
	return obj.obj
}

func (obj *flowEthernet) SetMsg(msg *snappipb.FlowEthernet) FlowEthernet {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowEthernet) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowEthernet) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowEthernet) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowEthernet) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowEthernet) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowEthernet) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowEthernet) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowEthernet interface {
	Msg() *snappipb.FlowEthernet
	SetMsg(*snappipb.FlowEthernet) FlowEthernet
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Dst() PatternFlowEthernetDst
	SetDst(value PatternFlowEthernetDst) FlowEthernet
	HasDst() bool
	Src() PatternFlowEthernetSrc
	SetSrc(value PatternFlowEthernetSrc) FlowEthernet
	HasSrc() bool
	EtherType() PatternFlowEthernetEtherType
	SetEtherType(value PatternFlowEthernetEtherType) FlowEthernet
	HasEtherType() bool
	PfcQueue() PatternFlowEthernetPfcQueue
	SetPfcQueue(value PatternFlowEthernetPfcQueue) FlowEthernet
	HasPfcQueue() bool
}

// Dst returns a PatternFlowEthernetDst
//  description is TBD
func (obj *flowEthernet) Dst() PatternFlowEthernetDst {
	if obj.obj.Dst == nil {
		obj.obj.Dst = NewPatternFlowEthernetDst().Msg()
	}
	return &patternFlowEthernetDst{obj: obj.obj.Dst}
}

// Dst returns a PatternFlowEthernetDst
//  description is TBD
func (obj *flowEthernet) HasDst() bool {
	return obj.obj.Dst != nil
}

// SetDst sets the PatternFlowEthernetDst value in the FlowEthernet object
//  description is TBD
func (obj *flowEthernet) SetDst(value PatternFlowEthernetDst) FlowEthernet {
	obj.Dst().SetMsg(value.Msg())

	return obj
}

// Src returns a PatternFlowEthernetSrc
//  description is TBD
func (obj *flowEthernet) Src() PatternFlowEthernetSrc {
	if obj.obj.Src == nil {
		obj.obj.Src = NewPatternFlowEthernetSrc().Msg()
	}
	return &patternFlowEthernetSrc{obj: obj.obj.Src}
}

// Src returns a PatternFlowEthernetSrc
//  description is TBD
func (obj *flowEthernet) HasSrc() bool {
	return obj.obj.Src != nil
}

// SetSrc sets the PatternFlowEthernetSrc value in the FlowEthernet object
//  description is TBD
func (obj *flowEthernet) SetSrc(value PatternFlowEthernetSrc) FlowEthernet {
	obj.Src().SetMsg(value.Msg())

	return obj
}

// EtherType returns a PatternFlowEthernetEtherType
//  description is TBD
func (obj *flowEthernet) EtherType() PatternFlowEthernetEtherType {
	if obj.obj.EtherType == nil {
		obj.obj.EtherType = NewPatternFlowEthernetEtherType().Msg()
	}
	return &patternFlowEthernetEtherType{obj: obj.obj.EtherType}
}

// EtherType returns a PatternFlowEthernetEtherType
//  description is TBD
func (obj *flowEthernet) HasEtherType() bool {
	return obj.obj.EtherType != nil
}

// SetEtherType sets the PatternFlowEthernetEtherType value in the FlowEthernet object
//  description is TBD
func (obj *flowEthernet) SetEtherType(value PatternFlowEthernetEtherType) FlowEthernet {
	obj.EtherType().SetMsg(value.Msg())

	return obj
}

// PfcQueue returns a PatternFlowEthernetPfcQueue
//  description is TBD
func (obj *flowEthernet) PfcQueue() PatternFlowEthernetPfcQueue {
	if obj.obj.PfcQueue == nil {
		obj.obj.PfcQueue = NewPatternFlowEthernetPfcQueue().Msg()
	}
	return &patternFlowEthernetPfcQueue{obj: obj.obj.PfcQueue}
}

// PfcQueue returns a PatternFlowEthernetPfcQueue
//  description is TBD
func (obj *flowEthernet) HasPfcQueue() bool {
	return obj.obj.PfcQueue != nil
}

// SetPfcQueue sets the PatternFlowEthernetPfcQueue value in the FlowEthernet object
//  description is TBD
func (obj *flowEthernet) SetPfcQueue(value PatternFlowEthernetPfcQueue) FlowEthernet {
	obj.PfcQueue().SetMsg(value.Msg())

	return obj
}

func (obj *flowEthernet) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Dst != nil {
		obj.Dst().validateObj(set_default)
	}

	if obj.obj.Src != nil {
		obj.Src().validateObj(set_default)
	}

	if obj.obj.EtherType != nil {
		obj.EtherType().validateObj(set_default)
	}

	if obj.obj.PfcQueue != nil {
		obj.PfcQueue().validateObj(set_default)
	}
}

func (obj *flowEthernet) setDefault() {

}

type flowVlan struct {
	obj *snappipb.FlowVlan
}

func NewFlowVlan() FlowVlan {
	obj := flowVlan{obj: &snappipb.FlowVlan{}}
	obj.setDefault()
	return &obj
}

func (obj *flowVlan) Msg() *snappipb.FlowVlan {
	return obj.obj
}

func (obj *flowVlan) SetMsg(msg *snappipb.FlowVlan) FlowVlan {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowVlan) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowVlan) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowVlan) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowVlan) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowVlan) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowVlan) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowVlan) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowVlan interface {
	Msg() *snappipb.FlowVlan
	SetMsg(*snappipb.FlowVlan) FlowVlan
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Priority() PatternFlowVlanPriority
	SetPriority(value PatternFlowVlanPriority) FlowVlan
	HasPriority() bool
	Cfi() PatternFlowVlanCfi
	SetCfi(value PatternFlowVlanCfi) FlowVlan
	HasCfi() bool
	Id() PatternFlowVlanId
	SetId(value PatternFlowVlanId) FlowVlan
	HasId() bool
	Tpid() PatternFlowVlanTpid
	SetTpid(value PatternFlowVlanTpid) FlowVlan
	HasTpid() bool
}

// Priority returns a PatternFlowVlanPriority
//  description is TBD
func (obj *flowVlan) Priority() PatternFlowVlanPriority {
	if obj.obj.Priority == nil {
		obj.obj.Priority = NewPatternFlowVlanPriority().Msg()
	}
	return &patternFlowVlanPriority{obj: obj.obj.Priority}
}

// Priority returns a PatternFlowVlanPriority
//  description is TBD
func (obj *flowVlan) HasPriority() bool {
	return obj.obj.Priority != nil
}

// SetPriority sets the PatternFlowVlanPriority value in the FlowVlan object
//  description is TBD
func (obj *flowVlan) SetPriority(value PatternFlowVlanPriority) FlowVlan {
	obj.Priority().SetMsg(value.Msg())

	return obj
}

// Cfi returns a PatternFlowVlanCfi
//  description is TBD
func (obj *flowVlan) Cfi() PatternFlowVlanCfi {
	if obj.obj.Cfi == nil {
		obj.obj.Cfi = NewPatternFlowVlanCfi().Msg()
	}
	return &patternFlowVlanCfi{obj: obj.obj.Cfi}
}

// Cfi returns a PatternFlowVlanCfi
//  description is TBD
func (obj *flowVlan) HasCfi() bool {
	return obj.obj.Cfi != nil
}

// SetCfi sets the PatternFlowVlanCfi value in the FlowVlan object
//  description is TBD
func (obj *flowVlan) SetCfi(value PatternFlowVlanCfi) FlowVlan {
	obj.Cfi().SetMsg(value.Msg())

	return obj
}

// Id returns a PatternFlowVlanId
//  description is TBD
func (obj *flowVlan) Id() PatternFlowVlanId {
	if obj.obj.Id == nil {
		obj.obj.Id = NewPatternFlowVlanId().Msg()
	}
	return &patternFlowVlanId{obj: obj.obj.Id}
}

// Id returns a PatternFlowVlanId
//  description is TBD
func (obj *flowVlan) HasId() bool {
	return obj.obj.Id != nil
}

// SetId sets the PatternFlowVlanId value in the FlowVlan object
//  description is TBD
func (obj *flowVlan) SetId(value PatternFlowVlanId) FlowVlan {
	obj.Id().SetMsg(value.Msg())

	return obj
}

// Tpid returns a PatternFlowVlanTpid
//  description is TBD
func (obj *flowVlan) Tpid() PatternFlowVlanTpid {
	if obj.obj.Tpid == nil {
		obj.obj.Tpid = NewPatternFlowVlanTpid().Msg()
	}
	return &patternFlowVlanTpid{obj: obj.obj.Tpid}
}

// Tpid returns a PatternFlowVlanTpid
//  description is TBD
func (obj *flowVlan) HasTpid() bool {
	return obj.obj.Tpid != nil
}

// SetTpid sets the PatternFlowVlanTpid value in the FlowVlan object
//  description is TBD
func (obj *flowVlan) SetTpid(value PatternFlowVlanTpid) FlowVlan {
	obj.Tpid().SetMsg(value.Msg())

	return obj
}

func (obj *flowVlan) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Priority != nil {
		obj.Priority().validateObj(set_default)
	}

	if obj.obj.Cfi != nil {
		obj.Cfi().validateObj(set_default)
	}

	if obj.obj.Id != nil {
		obj.Id().validateObj(set_default)
	}

	if obj.obj.Tpid != nil {
		obj.Tpid().validateObj(set_default)
	}
}

func (obj *flowVlan) setDefault() {

}

type flowVxlan struct {
	obj *snappipb.FlowVxlan
}

func NewFlowVxlan() FlowVxlan {
	obj := flowVxlan{obj: &snappipb.FlowVxlan{}}
	obj.setDefault()
	return &obj
}

func (obj *flowVxlan) Msg() *snappipb.FlowVxlan {
	return obj.obj
}

func (obj *flowVxlan) SetMsg(msg *snappipb.FlowVxlan) FlowVxlan {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowVxlan) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowVxlan) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowVxlan) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowVxlan) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowVxlan) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowVxlan) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowVxlan) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowVxlan interface {
	Msg() *snappipb.FlowVxlan
	SetMsg(*snappipb.FlowVxlan) FlowVxlan
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() PatternFlowVxlanFlags
	SetFlags(value PatternFlowVxlanFlags) FlowVxlan
	HasFlags() bool
	Reserved0() PatternFlowVxlanReserved0
	SetReserved0(value PatternFlowVxlanReserved0) FlowVxlan
	HasReserved0() bool
	Vni() PatternFlowVxlanVni
	SetVni(value PatternFlowVxlanVni) FlowVxlan
	HasVni() bool
	Reserved1() PatternFlowVxlanReserved1
	SetReserved1(value PatternFlowVxlanReserved1) FlowVxlan
	HasReserved1() bool
}

// Flags returns a PatternFlowVxlanFlags
//  description is TBD
func (obj *flowVxlan) Flags() PatternFlowVxlanFlags {
	if obj.obj.Flags == nil {
		obj.obj.Flags = NewPatternFlowVxlanFlags().Msg()
	}
	return &patternFlowVxlanFlags{obj: obj.obj.Flags}
}

// Flags returns a PatternFlowVxlanFlags
//  description is TBD
func (obj *flowVxlan) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the PatternFlowVxlanFlags value in the FlowVxlan object
//  description is TBD
func (obj *flowVxlan) SetFlags(value PatternFlowVxlanFlags) FlowVxlan {
	obj.Flags().SetMsg(value.Msg())

	return obj
}

// Reserved0 returns a PatternFlowVxlanReserved0
//  description is TBD
func (obj *flowVxlan) Reserved0() PatternFlowVxlanReserved0 {
	if obj.obj.Reserved0 == nil {
		obj.obj.Reserved0 = NewPatternFlowVxlanReserved0().Msg()
	}
	return &patternFlowVxlanReserved0{obj: obj.obj.Reserved0}
}

// Reserved0 returns a PatternFlowVxlanReserved0
//  description is TBD
func (obj *flowVxlan) HasReserved0() bool {
	return obj.obj.Reserved0 != nil
}

// SetReserved0 sets the PatternFlowVxlanReserved0 value in the FlowVxlan object
//  description is TBD
func (obj *flowVxlan) SetReserved0(value PatternFlowVxlanReserved0) FlowVxlan {
	obj.Reserved0().SetMsg(value.Msg())

	return obj
}

// Vni returns a PatternFlowVxlanVni
//  description is TBD
func (obj *flowVxlan) Vni() PatternFlowVxlanVni {
	if obj.obj.Vni == nil {
		obj.obj.Vni = NewPatternFlowVxlanVni().Msg()
	}
	return &patternFlowVxlanVni{obj: obj.obj.Vni}
}

// Vni returns a PatternFlowVxlanVni
//  description is TBD
func (obj *flowVxlan) HasVni() bool {
	return obj.obj.Vni != nil
}

// SetVni sets the PatternFlowVxlanVni value in the FlowVxlan object
//  description is TBD
func (obj *flowVxlan) SetVni(value PatternFlowVxlanVni) FlowVxlan {
	obj.Vni().SetMsg(value.Msg())

	return obj
}

// Reserved1 returns a PatternFlowVxlanReserved1
//  description is TBD
func (obj *flowVxlan) Reserved1() PatternFlowVxlanReserved1 {
	if obj.obj.Reserved1 == nil {
		obj.obj.Reserved1 = NewPatternFlowVxlanReserved1().Msg()
	}
	return &patternFlowVxlanReserved1{obj: obj.obj.Reserved1}
}

// Reserved1 returns a PatternFlowVxlanReserved1
//  description is TBD
func (obj *flowVxlan) HasReserved1() bool {
	return obj.obj.Reserved1 != nil
}

// SetReserved1 sets the PatternFlowVxlanReserved1 value in the FlowVxlan object
//  description is TBD
func (obj *flowVxlan) SetReserved1(value PatternFlowVxlanReserved1) FlowVxlan {
	obj.Reserved1().SetMsg(value.Msg())

	return obj
}

func (obj *flowVxlan) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		obj.Flags().validateObj(set_default)
	}

	if obj.obj.Reserved0 != nil {
		obj.Reserved0().validateObj(set_default)
	}

	if obj.obj.Vni != nil {
		obj.Vni().validateObj(set_default)
	}

	if obj.obj.Reserved1 != nil {
		obj.Reserved1().validateObj(set_default)
	}
}

func (obj *flowVxlan) setDefault() {

}

type flowIpv4 struct {
	obj *snappipb.FlowIpv4
}

func NewFlowIpv4() FlowIpv4 {
	obj := flowIpv4{obj: &snappipb.FlowIpv4{}}
	obj.setDefault()
	return &obj
}

func (obj *flowIpv4) Msg() *snappipb.FlowIpv4 {
	return obj.obj
}

func (obj *flowIpv4) SetMsg(msg *snappipb.FlowIpv4) FlowIpv4 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowIpv4) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowIpv4) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIpv4) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIpv4) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowIpv4) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowIpv4 interface {
	Msg() *snappipb.FlowIpv4
	SetMsg(*snappipb.FlowIpv4) FlowIpv4
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Version() PatternFlowIpv4Version
	SetVersion(value PatternFlowIpv4Version) FlowIpv4
	HasVersion() bool
	HeaderLength() PatternFlowIpv4HeaderLength
	SetHeaderLength(value PatternFlowIpv4HeaderLength) FlowIpv4
	HasHeaderLength() bool
	Priority() FlowIpv4Priority
	SetPriority(value FlowIpv4Priority) FlowIpv4
	HasPriority() bool
	TotalLength() PatternFlowIpv4TotalLength
	SetTotalLength(value PatternFlowIpv4TotalLength) FlowIpv4
	HasTotalLength() bool
	Identification() PatternFlowIpv4Identification
	SetIdentification(value PatternFlowIpv4Identification) FlowIpv4
	HasIdentification() bool
	Reserved() PatternFlowIpv4Reserved
	SetReserved(value PatternFlowIpv4Reserved) FlowIpv4
	HasReserved() bool
	DontFragment() PatternFlowIpv4DontFragment
	SetDontFragment(value PatternFlowIpv4DontFragment) FlowIpv4
	HasDontFragment() bool
	MoreFragments() PatternFlowIpv4MoreFragments
	SetMoreFragments(value PatternFlowIpv4MoreFragments) FlowIpv4
	HasMoreFragments() bool
	FragmentOffset() PatternFlowIpv4FragmentOffset
	SetFragmentOffset(value PatternFlowIpv4FragmentOffset) FlowIpv4
	HasFragmentOffset() bool
	TimeToLive() PatternFlowIpv4TimeToLive
	SetTimeToLive(value PatternFlowIpv4TimeToLive) FlowIpv4
	HasTimeToLive() bool
	Protocol() PatternFlowIpv4Protocol
	SetProtocol(value PatternFlowIpv4Protocol) FlowIpv4
	HasProtocol() bool
	HeaderChecksum() PatternFlowIpv4HeaderChecksum
	SetHeaderChecksum(value PatternFlowIpv4HeaderChecksum) FlowIpv4
	HasHeaderChecksum() bool
	Src() PatternFlowIpv4Src
	SetSrc(value PatternFlowIpv4Src) FlowIpv4
	HasSrc() bool
	Dst() PatternFlowIpv4Dst
	SetDst(value PatternFlowIpv4Dst) FlowIpv4
	HasDst() bool
}

// Version returns a PatternFlowIpv4Version
//  description is TBD
func (obj *flowIpv4) Version() PatternFlowIpv4Version {
	if obj.obj.Version == nil {
		obj.obj.Version = NewPatternFlowIpv4Version().Msg()
	}
	return &patternFlowIpv4Version{obj: obj.obj.Version}
}

// Version returns a PatternFlowIpv4Version
//  description is TBD
func (obj *flowIpv4) HasVersion() bool {
	return obj.obj.Version != nil
}

// SetVersion sets the PatternFlowIpv4Version value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetVersion(value PatternFlowIpv4Version) FlowIpv4 {
	obj.Version().SetMsg(value.Msg())

	return obj
}

// HeaderLength returns a PatternFlowIpv4HeaderLength
//  description is TBD
func (obj *flowIpv4) HeaderLength() PatternFlowIpv4HeaderLength {
	if obj.obj.HeaderLength == nil {
		obj.obj.HeaderLength = NewPatternFlowIpv4HeaderLength().Msg()
	}
	return &patternFlowIpv4HeaderLength{obj: obj.obj.HeaderLength}
}

// HeaderLength returns a PatternFlowIpv4HeaderLength
//  description is TBD
func (obj *flowIpv4) HasHeaderLength() bool {
	return obj.obj.HeaderLength != nil
}

// SetHeaderLength sets the PatternFlowIpv4HeaderLength value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetHeaderLength(value PatternFlowIpv4HeaderLength) FlowIpv4 {
	obj.HeaderLength().SetMsg(value.Msg())

	return obj
}

// Priority returns a FlowIpv4Priority
//  description is TBD
func (obj *flowIpv4) Priority() FlowIpv4Priority {
	if obj.obj.Priority == nil {
		obj.obj.Priority = NewFlowIpv4Priority().Msg()
	}
	return &flowIpv4Priority{obj: obj.obj.Priority}
}

// Priority returns a FlowIpv4Priority
//  description is TBD
func (obj *flowIpv4) HasPriority() bool {
	return obj.obj.Priority != nil
}

// SetPriority sets the FlowIpv4Priority value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetPriority(value FlowIpv4Priority) FlowIpv4 {
	obj.Priority().SetMsg(value.Msg())

	return obj
}

// TotalLength returns a PatternFlowIpv4TotalLength
//  description is TBD
func (obj *flowIpv4) TotalLength() PatternFlowIpv4TotalLength {
	if obj.obj.TotalLength == nil {
		obj.obj.TotalLength = NewPatternFlowIpv4TotalLength().Msg()
	}
	return &patternFlowIpv4TotalLength{obj: obj.obj.TotalLength}
}

// TotalLength returns a PatternFlowIpv4TotalLength
//  description is TBD
func (obj *flowIpv4) HasTotalLength() bool {
	return obj.obj.TotalLength != nil
}

// SetTotalLength sets the PatternFlowIpv4TotalLength value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetTotalLength(value PatternFlowIpv4TotalLength) FlowIpv4 {
	obj.TotalLength().SetMsg(value.Msg())

	return obj
}

// Identification returns a PatternFlowIpv4Identification
//  description is TBD
func (obj *flowIpv4) Identification() PatternFlowIpv4Identification {
	if obj.obj.Identification == nil {
		obj.obj.Identification = NewPatternFlowIpv4Identification().Msg()
	}
	return &patternFlowIpv4Identification{obj: obj.obj.Identification}
}

// Identification returns a PatternFlowIpv4Identification
//  description is TBD
func (obj *flowIpv4) HasIdentification() bool {
	return obj.obj.Identification != nil
}

// SetIdentification sets the PatternFlowIpv4Identification value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetIdentification(value PatternFlowIpv4Identification) FlowIpv4 {
	obj.Identification().SetMsg(value.Msg())

	return obj
}

// Reserved returns a PatternFlowIpv4Reserved
//  description is TBD
func (obj *flowIpv4) Reserved() PatternFlowIpv4Reserved {
	if obj.obj.Reserved == nil {
		obj.obj.Reserved = NewPatternFlowIpv4Reserved().Msg()
	}
	return &patternFlowIpv4Reserved{obj: obj.obj.Reserved}
}

// Reserved returns a PatternFlowIpv4Reserved
//  description is TBD
func (obj *flowIpv4) HasReserved() bool {
	return obj.obj.Reserved != nil
}

// SetReserved sets the PatternFlowIpv4Reserved value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetReserved(value PatternFlowIpv4Reserved) FlowIpv4 {
	obj.Reserved().SetMsg(value.Msg())

	return obj
}

// DontFragment returns a PatternFlowIpv4DontFragment
//  description is TBD
func (obj *flowIpv4) DontFragment() PatternFlowIpv4DontFragment {
	if obj.obj.DontFragment == nil {
		obj.obj.DontFragment = NewPatternFlowIpv4DontFragment().Msg()
	}
	return &patternFlowIpv4DontFragment{obj: obj.obj.DontFragment}
}

// DontFragment returns a PatternFlowIpv4DontFragment
//  description is TBD
func (obj *flowIpv4) HasDontFragment() bool {
	return obj.obj.DontFragment != nil
}

// SetDontFragment sets the PatternFlowIpv4DontFragment value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetDontFragment(value PatternFlowIpv4DontFragment) FlowIpv4 {
	obj.DontFragment().SetMsg(value.Msg())

	return obj
}

// MoreFragments returns a PatternFlowIpv4MoreFragments
//  description is TBD
func (obj *flowIpv4) MoreFragments() PatternFlowIpv4MoreFragments {
	if obj.obj.MoreFragments == nil {
		obj.obj.MoreFragments = NewPatternFlowIpv4MoreFragments().Msg()
	}
	return &patternFlowIpv4MoreFragments{obj: obj.obj.MoreFragments}
}

// MoreFragments returns a PatternFlowIpv4MoreFragments
//  description is TBD
func (obj *flowIpv4) HasMoreFragments() bool {
	return obj.obj.MoreFragments != nil
}

// SetMoreFragments sets the PatternFlowIpv4MoreFragments value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetMoreFragments(value PatternFlowIpv4MoreFragments) FlowIpv4 {
	obj.MoreFragments().SetMsg(value.Msg())

	return obj
}

// FragmentOffset returns a PatternFlowIpv4FragmentOffset
//  description is TBD
func (obj *flowIpv4) FragmentOffset() PatternFlowIpv4FragmentOffset {
	if obj.obj.FragmentOffset == nil {
		obj.obj.FragmentOffset = NewPatternFlowIpv4FragmentOffset().Msg()
	}
	return &patternFlowIpv4FragmentOffset{obj: obj.obj.FragmentOffset}
}

// FragmentOffset returns a PatternFlowIpv4FragmentOffset
//  description is TBD
func (obj *flowIpv4) HasFragmentOffset() bool {
	return obj.obj.FragmentOffset != nil
}

// SetFragmentOffset sets the PatternFlowIpv4FragmentOffset value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetFragmentOffset(value PatternFlowIpv4FragmentOffset) FlowIpv4 {
	obj.FragmentOffset().SetMsg(value.Msg())

	return obj
}

// TimeToLive returns a PatternFlowIpv4TimeToLive
//  description is TBD
func (obj *flowIpv4) TimeToLive() PatternFlowIpv4TimeToLive {
	if obj.obj.TimeToLive == nil {
		obj.obj.TimeToLive = NewPatternFlowIpv4TimeToLive().Msg()
	}
	return &patternFlowIpv4TimeToLive{obj: obj.obj.TimeToLive}
}

// TimeToLive returns a PatternFlowIpv4TimeToLive
//  description is TBD
func (obj *flowIpv4) HasTimeToLive() bool {
	return obj.obj.TimeToLive != nil
}

// SetTimeToLive sets the PatternFlowIpv4TimeToLive value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetTimeToLive(value PatternFlowIpv4TimeToLive) FlowIpv4 {
	obj.TimeToLive().SetMsg(value.Msg())

	return obj
}

// Protocol returns a PatternFlowIpv4Protocol
//  description is TBD
func (obj *flowIpv4) Protocol() PatternFlowIpv4Protocol {
	if obj.obj.Protocol == nil {
		obj.obj.Protocol = NewPatternFlowIpv4Protocol().Msg()
	}
	return &patternFlowIpv4Protocol{obj: obj.obj.Protocol}
}

// Protocol returns a PatternFlowIpv4Protocol
//  description is TBD
func (obj *flowIpv4) HasProtocol() bool {
	return obj.obj.Protocol != nil
}

// SetProtocol sets the PatternFlowIpv4Protocol value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetProtocol(value PatternFlowIpv4Protocol) FlowIpv4 {
	obj.Protocol().SetMsg(value.Msg())

	return obj
}

// HeaderChecksum returns a PatternFlowIpv4HeaderChecksum
//  description is TBD
func (obj *flowIpv4) HeaderChecksum() PatternFlowIpv4HeaderChecksum {
	if obj.obj.HeaderChecksum == nil {
		obj.obj.HeaderChecksum = NewPatternFlowIpv4HeaderChecksum().Msg()
	}
	return &patternFlowIpv4HeaderChecksum{obj: obj.obj.HeaderChecksum}
}

// HeaderChecksum returns a PatternFlowIpv4HeaderChecksum
//  description is TBD
func (obj *flowIpv4) HasHeaderChecksum() bool {
	return obj.obj.HeaderChecksum != nil
}

// SetHeaderChecksum sets the PatternFlowIpv4HeaderChecksum value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetHeaderChecksum(value PatternFlowIpv4HeaderChecksum) FlowIpv4 {
	obj.HeaderChecksum().SetMsg(value.Msg())

	return obj
}

// Src returns a PatternFlowIpv4Src
//  description is TBD
func (obj *flowIpv4) Src() PatternFlowIpv4Src {
	if obj.obj.Src == nil {
		obj.obj.Src = NewPatternFlowIpv4Src().Msg()
	}
	return &patternFlowIpv4Src{obj: obj.obj.Src}
}

// Src returns a PatternFlowIpv4Src
//  description is TBD
func (obj *flowIpv4) HasSrc() bool {
	return obj.obj.Src != nil
}

// SetSrc sets the PatternFlowIpv4Src value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetSrc(value PatternFlowIpv4Src) FlowIpv4 {
	obj.Src().SetMsg(value.Msg())

	return obj
}

// Dst returns a PatternFlowIpv4Dst
//  description is TBD
func (obj *flowIpv4) Dst() PatternFlowIpv4Dst {
	if obj.obj.Dst == nil {
		obj.obj.Dst = NewPatternFlowIpv4Dst().Msg()
	}
	return &patternFlowIpv4Dst{obj: obj.obj.Dst}
}

// Dst returns a PatternFlowIpv4Dst
//  description is TBD
func (obj *flowIpv4) HasDst() bool {
	return obj.obj.Dst != nil
}

// SetDst sets the PatternFlowIpv4Dst value in the FlowIpv4 object
//  description is TBD
func (obj *flowIpv4) SetDst(value PatternFlowIpv4Dst) FlowIpv4 {
	obj.Dst().SetMsg(value.Msg())

	return obj
}

func (obj *flowIpv4) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Version != nil {
		obj.Version().validateObj(set_default)
	}

	if obj.obj.HeaderLength != nil {
		obj.HeaderLength().validateObj(set_default)
	}

	if obj.obj.Priority != nil {
		obj.Priority().validateObj(set_default)
	}

	if obj.obj.TotalLength != nil {
		obj.TotalLength().validateObj(set_default)
	}

	if obj.obj.Identification != nil {
		obj.Identification().validateObj(set_default)
	}

	if obj.obj.Reserved != nil {
		obj.Reserved().validateObj(set_default)
	}

	if obj.obj.DontFragment != nil {
		obj.DontFragment().validateObj(set_default)
	}

	if obj.obj.MoreFragments != nil {
		obj.MoreFragments().validateObj(set_default)
	}

	if obj.obj.FragmentOffset != nil {
		obj.FragmentOffset().validateObj(set_default)
	}

	if obj.obj.TimeToLive != nil {
		obj.TimeToLive().validateObj(set_default)
	}

	if obj.obj.Protocol != nil {
		obj.Protocol().validateObj(set_default)
	}

	if obj.obj.HeaderChecksum != nil {
		obj.HeaderChecksum().validateObj(set_default)
	}

	if obj.obj.Src != nil {
		obj.Src().validateObj(set_default)
	}

	if obj.obj.Dst != nil {
		obj.Dst().validateObj(set_default)
	}
}

func (obj *flowIpv4) setDefault() {

}

type flowIpv6 struct {
	obj *snappipb.FlowIpv6
}

func NewFlowIpv6() FlowIpv6 {
	obj := flowIpv6{obj: &snappipb.FlowIpv6{}}
	obj.setDefault()
	return &obj
}

func (obj *flowIpv6) Msg() *snappipb.FlowIpv6 {
	return obj.obj
}

func (obj *flowIpv6) SetMsg(msg *snappipb.FlowIpv6) FlowIpv6 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowIpv6) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowIpv6) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIpv6) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIpv6) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv6) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowIpv6) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowIpv6 interface {
	Msg() *snappipb.FlowIpv6
	SetMsg(*snappipb.FlowIpv6) FlowIpv6
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Version() PatternFlowIpv6Version
	SetVersion(value PatternFlowIpv6Version) FlowIpv6
	HasVersion() bool
	TrafficClass() PatternFlowIpv6TrafficClass
	SetTrafficClass(value PatternFlowIpv6TrafficClass) FlowIpv6
	HasTrafficClass() bool
	FlowLabel() PatternFlowIpv6FlowLabel
	SetFlowLabel(value PatternFlowIpv6FlowLabel) FlowIpv6
	HasFlowLabel() bool
	PayloadLength() PatternFlowIpv6PayloadLength
	SetPayloadLength(value PatternFlowIpv6PayloadLength) FlowIpv6
	HasPayloadLength() bool
	NextHeader() PatternFlowIpv6NextHeader
	SetNextHeader(value PatternFlowIpv6NextHeader) FlowIpv6
	HasNextHeader() bool
	HopLimit() PatternFlowIpv6HopLimit
	SetHopLimit(value PatternFlowIpv6HopLimit) FlowIpv6
	HasHopLimit() bool
	Src() PatternFlowIpv6Src
	SetSrc(value PatternFlowIpv6Src) FlowIpv6
	HasSrc() bool
	Dst() PatternFlowIpv6Dst
	SetDst(value PatternFlowIpv6Dst) FlowIpv6
	HasDst() bool
}

// Version returns a PatternFlowIpv6Version
//  description is TBD
func (obj *flowIpv6) Version() PatternFlowIpv6Version {
	if obj.obj.Version == nil {
		obj.obj.Version = NewPatternFlowIpv6Version().Msg()
	}
	return &patternFlowIpv6Version{obj: obj.obj.Version}
}

// Version returns a PatternFlowIpv6Version
//  description is TBD
func (obj *flowIpv6) HasVersion() bool {
	return obj.obj.Version != nil
}

// SetVersion sets the PatternFlowIpv6Version value in the FlowIpv6 object
//  description is TBD
func (obj *flowIpv6) SetVersion(value PatternFlowIpv6Version) FlowIpv6 {
	obj.Version().SetMsg(value.Msg())

	return obj
}

// TrafficClass returns a PatternFlowIpv6TrafficClass
//  description is TBD
func (obj *flowIpv6) TrafficClass() PatternFlowIpv6TrafficClass {
	if obj.obj.TrafficClass == nil {
		obj.obj.TrafficClass = NewPatternFlowIpv6TrafficClass().Msg()
	}
	return &patternFlowIpv6TrafficClass{obj: obj.obj.TrafficClass}
}

// TrafficClass returns a PatternFlowIpv6TrafficClass
//  description is TBD
func (obj *flowIpv6) HasTrafficClass() bool {
	return obj.obj.TrafficClass != nil
}

// SetTrafficClass sets the PatternFlowIpv6TrafficClass value in the FlowIpv6 object
//  description is TBD
func (obj *flowIpv6) SetTrafficClass(value PatternFlowIpv6TrafficClass) FlowIpv6 {
	obj.TrafficClass().SetMsg(value.Msg())

	return obj
}

// FlowLabel returns a PatternFlowIpv6FlowLabel
//  description is TBD
func (obj *flowIpv6) FlowLabel() PatternFlowIpv6FlowLabel {
	if obj.obj.FlowLabel == nil {
		obj.obj.FlowLabel = NewPatternFlowIpv6FlowLabel().Msg()
	}
	return &patternFlowIpv6FlowLabel{obj: obj.obj.FlowLabel}
}

// FlowLabel returns a PatternFlowIpv6FlowLabel
//  description is TBD
func (obj *flowIpv6) HasFlowLabel() bool {
	return obj.obj.FlowLabel != nil
}

// SetFlowLabel sets the PatternFlowIpv6FlowLabel value in the FlowIpv6 object
//  description is TBD
func (obj *flowIpv6) SetFlowLabel(value PatternFlowIpv6FlowLabel) FlowIpv6 {
	obj.FlowLabel().SetMsg(value.Msg())

	return obj
}

// PayloadLength returns a PatternFlowIpv6PayloadLength
//  description is TBD
func (obj *flowIpv6) PayloadLength() PatternFlowIpv6PayloadLength {
	if obj.obj.PayloadLength == nil {
		obj.obj.PayloadLength = NewPatternFlowIpv6PayloadLength().Msg()
	}
	return &patternFlowIpv6PayloadLength{obj: obj.obj.PayloadLength}
}

// PayloadLength returns a PatternFlowIpv6PayloadLength
//  description is TBD
func (obj *flowIpv6) HasPayloadLength() bool {
	return obj.obj.PayloadLength != nil
}

// SetPayloadLength sets the PatternFlowIpv6PayloadLength value in the FlowIpv6 object
//  description is TBD
func (obj *flowIpv6) SetPayloadLength(value PatternFlowIpv6PayloadLength) FlowIpv6 {
	obj.PayloadLength().SetMsg(value.Msg())

	return obj
}

// NextHeader returns a PatternFlowIpv6NextHeader
//  description is TBD
func (obj *flowIpv6) NextHeader() PatternFlowIpv6NextHeader {
	if obj.obj.NextHeader == nil {
		obj.obj.NextHeader = NewPatternFlowIpv6NextHeader().Msg()
	}
	return &patternFlowIpv6NextHeader{obj: obj.obj.NextHeader}
}

// NextHeader returns a PatternFlowIpv6NextHeader
//  description is TBD
func (obj *flowIpv6) HasNextHeader() bool {
	return obj.obj.NextHeader != nil
}

// SetNextHeader sets the PatternFlowIpv6NextHeader value in the FlowIpv6 object
//  description is TBD
func (obj *flowIpv6) SetNextHeader(value PatternFlowIpv6NextHeader) FlowIpv6 {
	obj.NextHeader().SetMsg(value.Msg())

	return obj
}

// HopLimit returns a PatternFlowIpv6HopLimit
//  description is TBD
func (obj *flowIpv6) HopLimit() PatternFlowIpv6HopLimit {
	if obj.obj.HopLimit == nil {
		obj.obj.HopLimit = NewPatternFlowIpv6HopLimit().Msg()
	}
	return &patternFlowIpv6HopLimit{obj: obj.obj.HopLimit}
}

// HopLimit returns a PatternFlowIpv6HopLimit
//  description is TBD
func (obj *flowIpv6) HasHopLimit() bool {
	return obj.obj.HopLimit != nil
}

// SetHopLimit sets the PatternFlowIpv6HopLimit value in the FlowIpv6 object
//  description is TBD
func (obj *flowIpv6) SetHopLimit(value PatternFlowIpv6HopLimit) FlowIpv6 {
	obj.HopLimit().SetMsg(value.Msg())

	return obj
}

// Src returns a PatternFlowIpv6Src
//  description is TBD
func (obj *flowIpv6) Src() PatternFlowIpv6Src {
	if obj.obj.Src == nil {
		obj.obj.Src = NewPatternFlowIpv6Src().Msg()
	}
	return &patternFlowIpv6Src{obj: obj.obj.Src}
}

// Src returns a PatternFlowIpv6Src
//  description is TBD
func (obj *flowIpv6) HasSrc() bool {
	return obj.obj.Src != nil
}

// SetSrc sets the PatternFlowIpv6Src value in the FlowIpv6 object
//  description is TBD
func (obj *flowIpv6) SetSrc(value PatternFlowIpv6Src) FlowIpv6 {
	obj.Src().SetMsg(value.Msg())

	return obj
}

// Dst returns a PatternFlowIpv6Dst
//  description is TBD
func (obj *flowIpv6) Dst() PatternFlowIpv6Dst {
	if obj.obj.Dst == nil {
		obj.obj.Dst = NewPatternFlowIpv6Dst().Msg()
	}
	return &patternFlowIpv6Dst{obj: obj.obj.Dst}
}

// Dst returns a PatternFlowIpv6Dst
//  description is TBD
func (obj *flowIpv6) HasDst() bool {
	return obj.obj.Dst != nil
}

// SetDst sets the PatternFlowIpv6Dst value in the FlowIpv6 object
//  description is TBD
func (obj *flowIpv6) SetDst(value PatternFlowIpv6Dst) FlowIpv6 {
	obj.Dst().SetMsg(value.Msg())

	return obj
}

func (obj *flowIpv6) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Version != nil {
		obj.Version().validateObj(set_default)
	}

	if obj.obj.TrafficClass != nil {
		obj.TrafficClass().validateObj(set_default)
	}

	if obj.obj.FlowLabel != nil {
		obj.FlowLabel().validateObj(set_default)
	}

	if obj.obj.PayloadLength != nil {
		obj.PayloadLength().validateObj(set_default)
	}

	if obj.obj.NextHeader != nil {
		obj.NextHeader().validateObj(set_default)
	}

	if obj.obj.HopLimit != nil {
		obj.HopLimit().validateObj(set_default)
	}

	if obj.obj.Src != nil {
		obj.Src().validateObj(set_default)
	}

	if obj.obj.Dst != nil {
		obj.Dst().validateObj(set_default)
	}
}

func (obj *flowIpv6) setDefault() {

}

type flowPfcPause struct {
	obj *snappipb.FlowPfcPause
}

func NewFlowPfcPause() FlowPfcPause {
	obj := flowPfcPause{obj: &snappipb.FlowPfcPause{}}
	obj.setDefault()
	return &obj
}

func (obj *flowPfcPause) Msg() *snappipb.FlowPfcPause {
	return obj.obj
}

func (obj *flowPfcPause) SetMsg(msg *snappipb.FlowPfcPause) FlowPfcPause {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowPfcPause) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowPfcPause) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowPfcPause) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPfcPause) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowPfcPause) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPfcPause) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowPfcPause) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowPfcPause interface {
	Msg() *snappipb.FlowPfcPause
	SetMsg(*snappipb.FlowPfcPause) FlowPfcPause
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Dst() PatternFlowPfcPauseDst
	SetDst(value PatternFlowPfcPauseDst) FlowPfcPause
	HasDst() bool
	Src() PatternFlowPfcPauseSrc
	SetSrc(value PatternFlowPfcPauseSrc) FlowPfcPause
	HasSrc() bool
	EtherType() PatternFlowPfcPauseEtherType
	SetEtherType(value PatternFlowPfcPauseEtherType) FlowPfcPause
	HasEtherType() bool
	ControlOpCode() PatternFlowPfcPauseControlOpCode
	SetControlOpCode(value PatternFlowPfcPauseControlOpCode) FlowPfcPause
	HasControlOpCode() bool
	ClassEnableVector() PatternFlowPfcPauseClassEnableVector
	SetClassEnableVector(value PatternFlowPfcPauseClassEnableVector) FlowPfcPause
	HasClassEnableVector() bool
	PauseClass0() PatternFlowPfcPausePauseClass0
	SetPauseClass0(value PatternFlowPfcPausePauseClass0) FlowPfcPause
	HasPauseClass0() bool
	PauseClass1() PatternFlowPfcPausePauseClass1
	SetPauseClass1(value PatternFlowPfcPausePauseClass1) FlowPfcPause
	HasPauseClass1() bool
	PauseClass2() PatternFlowPfcPausePauseClass2
	SetPauseClass2(value PatternFlowPfcPausePauseClass2) FlowPfcPause
	HasPauseClass2() bool
	PauseClass3() PatternFlowPfcPausePauseClass3
	SetPauseClass3(value PatternFlowPfcPausePauseClass3) FlowPfcPause
	HasPauseClass3() bool
	PauseClass4() PatternFlowPfcPausePauseClass4
	SetPauseClass4(value PatternFlowPfcPausePauseClass4) FlowPfcPause
	HasPauseClass4() bool
	PauseClass5() PatternFlowPfcPausePauseClass5
	SetPauseClass5(value PatternFlowPfcPausePauseClass5) FlowPfcPause
	HasPauseClass5() bool
	PauseClass6() PatternFlowPfcPausePauseClass6
	SetPauseClass6(value PatternFlowPfcPausePauseClass6) FlowPfcPause
	HasPauseClass6() bool
	PauseClass7() PatternFlowPfcPausePauseClass7
	SetPauseClass7(value PatternFlowPfcPausePauseClass7) FlowPfcPause
	HasPauseClass7() bool
}

// Dst returns a PatternFlowPfcPauseDst
//  description is TBD
func (obj *flowPfcPause) Dst() PatternFlowPfcPauseDst {
	if obj.obj.Dst == nil {
		obj.obj.Dst = NewPatternFlowPfcPauseDst().Msg()
	}
	return &patternFlowPfcPauseDst{obj: obj.obj.Dst}
}

// Dst returns a PatternFlowPfcPauseDst
//  description is TBD
func (obj *flowPfcPause) HasDst() bool {
	return obj.obj.Dst != nil
}

// SetDst sets the PatternFlowPfcPauseDst value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetDst(value PatternFlowPfcPauseDst) FlowPfcPause {
	obj.Dst().SetMsg(value.Msg())

	return obj
}

// Src returns a PatternFlowPfcPauseSrc
//  description is TBD
func (obj *flowPfcPause) Src() PatternFlowPfcPauseSrc {
	if obj.obj.Src == nil {
		obj.obj.Src = NewPatternFlowPfcPauseSrc().Msg()
	}
	return &patternFlowPfcPauseSrc{obj: obj.obj.Src}
}

// Src returns a PatternFlowPfcPauseSrc
//  description is TBD
func (obj *flowPfcPause) HasSrc() bool {
	return obj.obj.Src != nil
}

// SetSrc sets the PatternFlowPfcPauseSrc value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetSrc(value PatternFlowPfcPauseSrc) FlowPfcPause {
	obj.Src().SetMsg(value.Msg())

	return obj
}

// EtherType returns a PatternFlowPfcPauseEtherType
//  description is TBD
func (obj *flowPfcPause) EtherType() PatternFlowPfcPauseEtherType {
	if obj.obj.EtherType == nil {
		obj.obj.EtherType = NewPatternFlowPfcPauseEtherType().Msg()
	}
	return &patternFlowPfcPauseEtherType{obj: obj.obj.EtherType}
}

// EtherType returns a PatternFlowPfcPauseEtherType
//  description is TBD
func (obj *flowPfcPause) HasEtherType() bool {
	return obj.obj.EtherType != nil
}

// SetEtherType sets the PatternFlowPfcPauseEtherType value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetEtherType(value PatternFlowPfcPauseEtherType) FlowPfcPause {
	obj.EtherType().SetMsg(value.Msg())

	return obj
}

// ControlOpCode returns a PatternFlowPfcPauseControlOpCode
//  description is TBD
func (obj *flowPfcPause) ControlOpCode() PatternFlowPfcPauseControlOpCode {
	if obj.obj.ControlOpCode == nil {
		obj.obj.ControlOpCode = NewPatternFlowPfcPauseControlOpCode().Msg()
	}
	return &patternFlowPfcPauseControlOpCode{obj: obj.obj.ControlOpCode}
}

// ControlOpCode returns a PatternFlowPfcPauseControlOpCode
//  description is TBD
func (obj *flowPfcPause) HasControlOpCode() bool {
	return obj.obj.ControlOpCode != nil
}

// SetControlOpCode sets the PatternFlowPfcPauseControlOpCode value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetControlOpCode(value PatternFlowPfcPauseControlOpCode) FlowPfcPause {
	obj.ControlOpCode().SetMsg(value.Msg())

	return obj
}

// ClassEnableVector returns a PatternFlowPfcPauseClassEnableVector
//  description is TBD
func (obj *flowPfcPause) ClassEnableVector() PatternFlowPfcPauseClassEnableVector {
	if obj.obj.ClassEnableVector == nil {
		obj.obj.ClassEnableVector = NewPatternFlowPfcPauseClassEnableVector().Msg()
	}
	return &patternFlowPfcPauseClassEnableVector{obj: obj.obj.ClassEnableVector}
}

// ClassEnableVector returns a PatternFlowPfcPauseClassEnableVector
//  description is TBD
func (obj *flowPfcPause) HasClassEnableVector() bool {
	return obj.obj.ClassEnableVector != nil
}

// SetClassEnableVector sets the PatternFlowPfcPauseClassEnableVector value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetClassEnableVector(value PatternFlowPfcPauseClassEnableVector) FlowPfcPause {
	obj.ClassEnableVector().SetMsg(value.Msg())

	return obj
}

// PauseClass0 returns a PatternFlowPfcPausePauseClass0
//  description is TBD
func (obj *flowPfcPause) PauseClass0() PatternFlowPfcPausePauseClass0 {
	if obj.obj.PauseClass_0 == nil {
		obj.obj.PauseClass_0 = NewPatternFlowPfcPausePauseClass0().Msg()
	}
	return &patternFlowPfcPausePauseClass0{obj: obj.obj.PauseClass_0}
}

// PauseClass0 returns a PatternFlowPfcPausePauseClass0
//  description is TBD
func (obj *flowPfcPause) HasPauseClass0() bool {
	return obj.obj.PauseClass_0 != nil
}

// SetPauseClass0 sets the PatternFlowPfcPausePauseClass0 value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetPauseClass0(value PatternFlowPfcPausePauseClass0) FlowPfcPause {
	obj.PauseClass0().SetMsg(value.Msg())

	return obj
}

// PauseClass1 returns a PatternFlowPfcPausePauseClass1
//  description is TBD
func (obj *flowPfcPause) PauseClass1() PatternFlowPfcPausePauseClass1 {
	if obj.obj.PauseClass_1 == nil {
		obj.obj.PauseClass_1 = NewPatternFlowPfcPausePauseClass1().Msg()
	}
	return &patternFlowPfcPausePauseClass1{obj: obj.obj.PauseClass_1}
}

// PauseClass1 returns a PatternFlowPfcPausePauseClass1
//  description is TBD
func (obj *flowPfcPause) HasPauseClass1() bool {
	return obj.obj.PauseClass_1 != nil
}

// SetPauseClass1 sets the PatternFlowPfcPausePauseClass1 value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetPauseClass1(value PatternFlowPfcPausePauseClass1) FlowPfcPause {
	obj.PauseClass1().SetMsg(value.Msg())

	return obj
}

// PauseClass2 returns a PatternFlowPfcPausePauseClass2
//  description is TBD
func (obj *flowPfcPause) PauseClass2() PatternFlowPfcPausePauseClass2 {
	if obj.obj.PauseClass_2 == nil {
		obj.obj.PauseClass_2 = NewPatternFlowPfcPausePauseClass2().Msg()
	}
	return &patternFlowPfcPausePauseClass2{obj: obj.obj.PauseClass_2}
}

// PauseClass2 returns a PatternFlowPfcPausePauseClass2
//  description is TBD
func (obj *flowPfcPause) HasPauseClass2() bool {
	return obj.obj.PauseClass_2 != nil
}

// SetPauseClass2 sets the PatternFlowPfcPausePauseClass2 value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetPauseClass2(value PatternFlowPfcPausePauseClass2) FlowPfcPause {
	obj.PauseClass2().SetMsg(value.Msg())

	return obj
}

// PauseClass3 returns a PatternFlowPfcPausePauseClass3
//  description is TBD
func (obj *flowPfcPause) PauseClass3() PatternFlowPfcPausePauseClass3 {
	if obj.obj.PauseClass_3 == nil {
		obj.obj.PauseClass_3 = NewPatternFlowPfcPausePauseClass3().Msg()
	}
	return &patternFlowPfcPausePauseClass3{obj: obj.obj.PauseClass_3}
}

// PauseClass3 returns a PatternFlowPfcPausePauseClass3
//  description is TBD
func (obj *flowPfcPause) HasPauseClass3() bool {
	return obj.obj.PauseClass_3 != nil
}

// SetPauseClass3 sets the PatternFlowPfcPausePauseClass3 value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetPauseClass3(value PatternFlowPfcPausePauseClass3) FlowPfcPause {
	obj.PauseClass3().SetMsg(value.Msg())

	return obj
}

// PauseClass4 returns a PatternFlowPfcPausePauseClass4
//  description is TBD
func (obj *flowPfcPause) PauseClass4() PatternFlowPfcPausePauseClass4 {
	if obj.obj.PauseClass_4 == nil {
		obj.obj.PauseClass_4 = NewPatternFlowPfcPausePauseClass4().Msg()
	}
	return &patternFlowPfcPausePauseClass4{obj: obj.obj.PauseClass_4}
}

// PauseClass4 returns a PatternFlowPfcPausePauseClass4
//  description is TBD
func (obj *flowPfcPause) HasPauseClass4() bool {
	return obj.obj.PauseClass_4 != nil
}

// SetPauseClass4 sets the PatternFlowPfcPausePauseClass4 value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetPauseClass4(value PatternFlowPfcPausePauseClass4) FlowPfcPause {
	obj.PauseClass4().SetMsg(value.Msg())

	return obj
}

// PauseClass5 returns a PatternFlowPfcPausePauseClass5
//  description is TBD
func (obj *flowPfcPause) PauseClass5() PatternFlowPfcPausePauseClass5 {
	if obj.obj.PauseClass_5 == nil {
		obj.obj.PauseClass_5 = NewPatternFlowPfcPausePauseClass5().Msg()
	}
	return &patternFlowPfcPausePauseClass5{obj: obj.obj.PauseClass_5}
}

// PauseClass5 returns a PatternFlowPfcPausePauseClass5
//  description is TBD
func (obj *flowPfcPause) HasPauseClass5() bool {
	return obj.obj.PauseClass_5 != nil
}

// SetPauseClass5 sets the PatternFlowPfcPausePauseClass5 value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetPauseClass5(value PatternFlowPfcPausePauseClass5) FlowPfcPause {
	obj.PauseClass5().SetMsg(value.Msg())

	return obj
}

// PauseClass6 returns a PatternFlowPfcPausePauseClass6
//  description is TBD
func (obj *flowPfcPause) PauseClass6() PatternFlowPfcPausePauseClass6 {
	if obj.obj.PauseClass_6 == nil {
		obj.obj.PauseClass_6 = NewPatternFlowPfcPausePauseClass6().Msg()
	}
	return &patternFlowPfcPausePauseClass6{obj: obj.obj.PauseClass_6}
}

// PauseClass6 returns a PatternFlowPfcPausePauseClass6
//  description is TBD
func (obj *flowPfcPause) HasPauseClass6() bool {
	return obj.obj.PauseClass_6 != nil
}

// SetPauseClass6 sets the PatternFlowPfcPausePauseClass6 value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetPauseClass6(value PatternFlowPfcPausePauseClass6) FlowPfcPause {
	obj.PauseClass6().SetMsg(value.Msg())

	return obj
}

// PauseClass7 returns a PatternFlowPfcPausePauseClass7
//  description is TBD
func (obj *flowPfcPause) PauseClass7() PatternFlowPfcPausePauseClass7 {
	if obj.obj.PauseClass_7 == nil {
		obj.obj.PauseClass_7 = NewPatternFlowPfcPausePauseClass7().Msg()
	}
	return &patternFlowPfcPausePauseClass7{obj: obj.obj.PauseClass_7}
}

// PauseClass7 returns a PatternFlowPfcPausePauseClass7
//  description is TBD
func (obj *flowPfcPause) HasPauseClass7() bool {
	return obj.obj.PauseClass_7 != nil
}

// SetPauseClass7 sets the PatternFlowPfcPausePauseClass7 value in the FlowPfcPause object
//  description is TBD
func (obj *flowPfcPause) SetPauseClass7(value PatternFlowPfcPausePauseClass7) FlowPfcPause {
	obj.PauseClass7().SetMsg(value.Msg())

	return obj
}

func (obj *flowPfcPause) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Dst != nil {
		obj.Dst().validateObj(set_default)
	}

	if obj.obj.Src != nil {
		obj.Src().validateObj(set_default)
	}

	if obj.obj.EtherType != nil {
		obj.EtherType().validateObj(set_default)
	}

	if obj.obj.ControlOpCode != nil {
		obj.ControlOpCode().validateObj(set_default)
	}

	if obj.obj.ClassEnableVector != nil {
		obj.ClassEnableVector().validateObj(set_default)
	}

	if obj.obj.PauseClass_0 != nil {
		obj.PauseClass0().validateObj(set_default)
	}

	if obj.obj.PauseClass_1 != nil {
		obj.PauseClass1().validateObj(set_default)
	}

	if obj.obj.PauseClass_2 != nil {
		obj.PauseClass2().validateObj(set_default)
	}

	if obj.obj.PauseClass_3 != nil {
		obj.PauseClass3().validateObj(set_default)
	}

	if obj.obj.PauseClass_4 != nil {
		obj.PauseClass4().validateObj(set_default)
	}

	if obj.obj.PauseClass_5 != nil {
		obj.PauseClass5().validateObj(set_default)
	}

	if obj.obj.PauseClass_6 != nil {
		obj.PauseClass6().validateObj(set_default)
	}

	if obj.obj.PauseClass_7 != nil {
		obj.PauseClass7().validateObj(set_default)
	}
}

func (obj *flowPfcPause) setDefault() {

}

type flowEthernetPause struct {
	obj *snappipb.FlowEthernetPause
}

func NewFlowEthernetPause() FlowEthernetPause {
	obj := flowEthernetPause{obj: &snappipb.FlowEthernetPause{}}
	obj.setDefault()
	return &obj
}

func (obj *flowEthernetPause) Msg() *snappipb.FlowEthernetPause {
	return obj.obj
}

func (obj *flowEthernetPause) SetMsg(msg *snappipb.FlowEthernetPause) FlowEthernetPause {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowEthernetPause) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowEthernetPause) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowEthernetPause) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowEthernetPause) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowEthernetPause) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowEthernetPause) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowEthernetPause) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowEthernetPause interface {
	Msg() *snappipb.FlowEthernetPause
	SetMsg(*snappipb.FlowEthernetPause) FlowEthernetPause
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Dst() PatternFlowEthernetPauseDst
	SetDst(value PatternFlowEthernetPauseDst) FlowEthernetPause
	HasDst() bool
	Src() PatternFlowEthernetPauseSrc
	SetSrc(value PatternFlowEthernetPauseSrc) FlowEthernetPause
	HasSrc() bool
	EtherType() PatternFlowEthernetPauseEtherType
	SetEtherType(value PatternFlowEthernetPauseEtherType) FlowEthernetPause
	HasEtherType() bool
	ControlOpCode() PatternFlowEthernetPauseControlOpCode
	SetControlOpCode(value PatternFlowEthernetPauseControlOpCode) FlowEthernetPause
	HasControlOpCode() bool
	Time() PatternFlowEthernetPauseTime
	SetTime(value PatternFlowEthernetPauseTime) FlowEthernetPause
	HasTime() bool
}

// Dst returns a PatternFlowEthernetPauseDst
//  description is TBD
func (obj *flowEthernetPause) Dst() PatternFlowEthernetPauseDst {
	if obj.obj.Dst == nil {
		obj.obj.Dst = NewPatternFlowEthernetPauseDst().Msg()
	}
	return &patternFlowEthernetPauseDst{obj: obj.obj.Dst}
}

// Dst returns a PatternFlowEthernetPauseDst
//  description is TBD
func (obj *flowEthernetPause) HasDst() bool {
	return obj.obj.Dst != nil
}

// SetDst sets the PatternFlowEthernetPauseDst value in the FlowEthernetPause object
//  description is TBD
func (obj *flowEthernetPause) SetDst(value PatternFlowEthernetPauseDst) FlowEthernetPause {
	obj.Dst().SetMsg(value.Msg())

	return obj
}

// Src returns a PatternFlowEthernetPauseSrc
//  description is TBD
func (obj *flowEthernetPause) Src() PatternFlowEthernetPauseSrc {
	if obj.obj.Src == nil {
		obj.obj.Src = NewPatternFlowEthernetPauseSrc().Msg()
	}
	return &patternFlowEthernetPauseSrc{obj: obj.obj.Src}
}

// Src returns a PatternFlowEthernetPauseSrc
//  description is TBD
func (obj *flowEthernetPause) HasSrc() bool {
	return obj.obj.Src != nil
}

// SetSrc sets the PatternFlowEthernetPauseSrc value in the FlowEthernetPause object
//  description is TBD
func (obj *flowEthernetPause) SetSrc(value PatternFlowEthernetPauseSrc) FlowEthernetPause {
	obj.Src().SetMsg(value.Msg())

	return obj
}

// EtherType returns a PatternFlowEthernetPauseEtherType
//  description is TBD
func (obj *flowEthernetPause) EtherType() PatternFlowEthernetPauseEtherType {
	if obj.obj.EtherType == nil {
		obj.obj.EtherType = NewPatternFlowEthernetPauseEtherType().Msg()
	}
	return &patternFlowEthernetPauseEtherType{obj: obj.obj.EtherType}
}

// EtherType returns a PatternFlowEthernetPauseEtherType
//  description is TBD
func (obj *flowEthernetPause) HasEtherType() bool {
	return obj.obj.EtherType != nil
}

// SetEtherType sets the PatternFlowEthernetPauseEtherType value in the FlowEthernetPause object
//  description is TBD
func (obj *flowEthernetPause) SetEtherType(value PatternFlowEthernetPauseEtherType) FlowEthernetPause {
	obj.EtherType().SetMsg(value.Msg())

	return obj
}

// ControlOpCode returns a PatternFlowEthernetPauseControlOpCode
//  description is TBD
func (obj *flowEthernetPause) ControlOpCode() PatternFlowEthernetPauseControlOpCode {
	if obj.obj.ControlOpCode == nil {
		obj.obj.ControlOpCode = NewPatternFlowEthernetPauseControlOpCode().Msg()
	}
	return &patternFlowEthernetPauseControlOpCode{obj: obj.obj.ControlOpCode}
}

// ControlOpCode returns a PatternFlowEthernetPauseControlOpCode
//  description is TBD
func (obj *flowEthernetPause) HasControlOpCode() bool {
	return obj.obj.ControlOpCode != nil
}

// SetControlOpCode sets the PatternFlowEthernetPauseControlOpCode value in the FlowEthernetPause object
//  description is TBD
func (obj *flowEthernetPause) SetControlOpCode(value PatternFlowEthernetPauseControlOpCode) FlowEthernetPause {
	obj.ControlOpCode().SetMsg(value.Msg())

	return obj
}

// Time returns a PatternFlowEthernetPauseTime
//  description is TBD
func (obj *flowEthernetPause) Time() PatternFlowEthernetPauseTime {
	if obj.obj.Time == nil {
		obj.obj.Time = NewPatternFlowEthernetPauseTime().Msg()
	}
	return &patternFlowEthernetPauseTime{obj: obj.obj.Time}
}

// Time returns a PatternFlowEthernetPauseTime
//  description is TBD
func (obj *flowEthernetPause) HasTime() bool {
	return obj.obj.Time != nil
}

// SetTime sets the PatternFlowEthernetPauseTime value in the FlowEthernetPause object
//  description is TBD
func (obj *flowEthernetPause) SetTime(value PatternFlowEthernetPauseTime) FlowEthernetPause {
	obj.Time().SetMsg(value.Msg())

	return obj
}

func (obj *flowEthernetPause) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Dst != nil {
		obj.Dst().validateObj(set_default)
	}

	if obj.obj.Src != nil {
		obj.Src().validateObj(set_default)
	}

	if obj.obj.EtherType != nil {
		obj.EtherType().validateObj(set_default)
	}

	if obj.obj.ControlOpCode != nil {
		obj.ControlOpCode().validateObj(set_default)
	}

	if obj.obj.Time != nil {
		obj.Time().validateObj(set_default)
	}
}

func (obj *flowEthernetPause) setDefault() {

}

type flowTcp struct {
	obj *snappipb.FlowTcp
}

func NewFlowTcp() FlowTcp {
	obj := flowTcp{obj: &snappipb.FlowTcp{}}
	obj.setDefault()
	return &obj
}

func (obj *flowTcp) Msg() *snappipb.FlowTcp {
	return obj.obj
}

func (obj *flowTcp) SetMsg(msg *snappipb.FlowTcp) FlowTcp {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowTcp) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowTcp) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowTcp) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowTcp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowTcp) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowTcp) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowTcp) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowTcp interface {
	Msg() *snappipb.FlowTcp
	SetMsg(*snappipb.FlowTcp) FlowTcp
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	SrcPort() PatternFlowTcpSrcPort
	SetSrcPort(value PatternFlowTcpSrcPort) FlowTcp
	HasSrcPort() bool
	DstPort() PatternFlowTcpDstPort
	SetDstPort(value PatternFlowTcpDstPort) FlowTcp
	HasDstPort() bool
	SeqNum() PatternFlowTcpSeqNum
	SetSeqNum(value PatternFlowTcpSeqNum) FlowTcp
	HasSeqNum() bool
	AckNum() PatternFlowTcpAckNum
	SetAckNum(value PatternFlowTcpAckNum) FlowTcp
	HasAckNum() bool
	DataOffset() PatternFlowTcpDataOffset
	SetDataOffset(value PatternFlowTcpDataOffset) FlowTcp
	HasDataOffset() bool
	EcnNs() PatternFlowTcpEcnNs
	SetEcnNs(value PatternFlowTcpEcnNs) FlowTcp
	HasEcnNs() bool
	EcnCwr() PatternFlowTcpEcnCwr
	SetEcnCwr(value PatternFlowTcpEcnCwr) FlowTcp
	HasEcnCwr() bool
	EcnEcho() PatternFlowTcpEcnEcho
	SetEcnEcho(value PatternFlowTcpEcnEcho) FlowTcp
	HasEcnEcho() bool
	CtlUrg() PatternFlowTcpCtlUrg
	SetCtlUrg(value PatternFlowTcpCtlUrg) FlowTcp
	HasCtlUrg() bool
	CtlAck() PatternFlowTcpCtlAck
	SetCtlAck(value PatternFlowTcpCtlAck) FlowTcp
	HasCtlAck() bool
	CtlPsh() PatternFlowTcpCtlPsh
	SetCtlPsh(value PatternFlowTcpCtlPsh) FlowTcp
	HasCtlPsh() bool
	CtlRst() PatternFlowTcpCtlRst
	SetCtlRst(value PatternFlowTcpCtlRst) FlowTcp
	HasCtlRst() bool
	CtlSyn() PatternFlowTcpCtlSyn
	SetCtlSyn(value PatternFlowTcpCtlSyn) FlowTcp
	HasCtlSyn() bool
	CtlFin() PatternFlowTcpCtlFin
	SetCtlFin(value PatternFlowTcpCtlFin) FlowTcp
	HasCtlFin() bool
	Window() PatternFlowTcpWindow
	SetWindow(value PatternFlowTcpWindow) FlowTcp
	HasWindow() bool
}

// SrcPort returns a PatternFlowTcpSrcPort
//  description is TBD
func (obj *flowTcp) SrcPort() PatternFlowTcpSrcPort {
	if obj.obj.SrcPort == nil {
		obj.obj.SrcPort = NewPatternFlowTcpSrcPort().Msg()
	}
	return &patternFlowTcpSrcPort{obj: obj.obj.SrcPort}
}

// SrcPort returns a PatternFlowTcpSrcPort
//  description is TBD
func (obj *flowTcp) HasSrcPort() bool {
	return obj.obj.SrcPort != nil
}

// SetSrcPort sets the PatternFlowTcpSrcPort value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetSrcPort(value PatternFlowTcpSrcPort) FlowTcp {
	obj.SrcPort().SetMsg(value.Msg())

	return obj
}

// DstPort returns a PatternFlowTcpDstPort
//  description is TBD
func (obj *flowTcp) DstPort() PatternFlowTcpDstPort {
	if obj.obj.DstPort == nil {
		obj.obj.DstPort = NewPatternFlowTcpDstPort().Msg()
	}
	return &patternFlowTcpDstPort{obj: obj.obj.DstPort}
}

// DstPort returns a PatternFlowTcpDstPort
//  description is TBD
func (obj *flowTcp) HasDstPort() bool {
	return obj.obj.DstPort != nil
}

// SetDstPort sets the PatternFlowTcpDstPort value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetDstPort(value PatternFlowTcpDstPort) FlowTcp {
	obj.DstPort().SetMsg(value.Msg())

	return obj
}

// SeqNum returns a PatternFlowTcpSeqNum
//  description is TBD
func (obj *flowTcp) SeqNum() PatternFlowTcpSeqNum {
	if obj.obj.SeqNum == nil {
		obj.obj.SeqNum = NewPatternFlowTcpSeqNum().Msg()
	}
	return &patternFlowTcpSeqNum{obj: obj.obj.SeqNum}
}

// SeqNum returns a PatternFlowTcpSeqNum
//  description is TBD
func (obj *flowTcp) HasSeqNum() bool {
	return obj.obj.SeqNum != nil
}

// SetSeqNum sets the PatternFlowTcpSeqNum value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetSeqNum(value PatternFlowTcpSeqNum) FlowTcp {
	obj.SeqNum().SetMsg(value.Msg())

	return obj
}

// AckNum returns a PatternFlowTcpAckNum
//  description is TBD
func (obj *flowTcp) AckNum() PatternFlowTcpAckNum {
	if obj.obj.AckNum == nil {
		obj.obj.AckNum = NewPatternFlowTcpAckNum().Msg()
	}
	return &patternFlowTcpAckNum{obj: obj.obj.AckNum}
}

// AckNum returns a PatternFlowTcpAckNum
//  description is TBD
func (obj *flowTcp) HasAckNum() bool {
	return obj.obj.AckNum != nil
}

// SetAckNum sets the PatternFlowTcpAckNum value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetAckNum(value PatternFlowTcpAckNum) FlowTcp {
	obj.AckNum().SetMsg(value.Msg())

	return obj
}

// DataOffset returns a PatternFlowTcpDataOffset
//  description is TBD
func (obj *flowTcp) DataOffset() PatternFlowTcpDataOffset {
	if obj.obj.DataOffset == nil {
		obj.obj.DataOffset = NewPatternFlowTcpDataOffset().Msg()
	}
	return &patternFlowTcpDataOffset{obj: obj.obj.DataOffset}
}

// DataOffset returns a PatternFlowTcpDataOffset
//  description is TBD
func (obj *flowTcp) HasDataOffset() bool {
	return obj.obj.DataOffset != nil
}

// SetDataOffset sets the PatternFlowTcpDataOffset value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetDataOffset(value PatternFlowTcpDataOffset) FlowTcp {
	obj.DataOffset().SetMsg(value.Msg())

	return obj
}

// EcnNs returns a PatternFlowTcpEcnNs
//  description is TBD
func (obj *flowTcp) EcnNs() PatternFlowTcpEcnNs {
	if obj.obj.EcnNs == nil {
		obj.obj.EcnNs = NewPatternFlowTcpEcnNs().Msg()
	}
	return &patternFlowTcpEcnNs{obj: obj.obj.EcnNs}
}

// EcnNs returns a PatternFlowTcpEcnNs
//  description is TBD
func (obj *flowTcp) HasEcnNs() bool {
	return obj.obj.EcnNs != nil
}

// SetEcnNs sets the PatternFlowTcpEcnNs value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetEcnNs(value PatternFlowTcpEcnNs) FlowTcp {
	obj.EcnNs().SetMsg(value.Msg())

	return obj
}

// EcnCwr returns a PatternFlowTcpEcnCwr
//  description is TBD
func (obj *flowTcp) EcnCwr() PatternFlowTcpEcnCwr {
	if obj.obj.EcnCwr == nil {
		obj.obj.EcnCwr = NewPatternFlowTcpEcnCwr().Msg()
	}
	return &patternFlowTcpEcnCwr{obj: obj.obj.EcnCwr}
}

// EcnCwr returns a PatternFlowTcpEcnCwr
//  description is TBD
func (obj *flowTcp) HasEcnCwr() bool {
	return obj.obj.EcnCwr != nil
}

// SetEcnCwr sets the PatternFlowTcpEcnCwr value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetEcnCwr(value PatternFlowTcpEcnCwr) FlowTcp {
	obj.EcnCwr().SetMsg(value.Msg())

	return obj
}

// EcnEcho returns a PatternFlowTcpEcnEcho
//  description is TBD
func (obj *flowTcp) EcnEcho() PatternFlowTcpEcnEcho {
	if obj.obj.EcnEcho == nil {
		obj.obj.EcnEcho = NewPatternFlowTcpEcnEcho().Msg()
	}
	return &patternFlowTcpEcnEcho{obj: obj.obj.EcnEcho}
}

// EcnEcho returns a PatternFlowTcpEcnEcho
//  description is TBD
func (obj *flowTcp) HasEcnEcho() bool {
	return obj.obj.EcnEcho != nil
}

// SetEcnEcho sets the PatternFlowTcpEcnEcho value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetEcnEcho(value PatternFlowTcpEcnEcho) FlowTcp {
	obj.EcnEcho().SetMsg(value.Msg())

	return obj
}

// CtlUrg returns a PatternFlowTcpCtlUrg
//  description is TBD
func (obj *flowTcp) CtlUrg() PatternFlowTcpCtlUrg {
	if obj.obj.CtlUrg == nil {
		obj.obj.CtlUrg = NewPatternFlowTcpCtlUrg().Msg()
	}
	return &patternFlowTcpCtlUrg{obj: obj.obj.CtlUrg}
}

// CtlUrg returns a PatternFlowTcpCtlUrg
//  description is TBD
func (obj *flowTcp) HasCtlUrg() bool {
	return obj.obj.CtlUrg != nil
}

// SetCtlUrg sets the PatternFlowTcpCtlUrg value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetCtlUrg(value PatternFlowTcpCtlUrg) FlowTcp {
	obj.CtlUrg().SetMsg(value.Msg())

	return obj
}

// CtlAck returns a PatternFlowTcpCtlAck
//  description is TBD
func (obj *flowTcp) CtlAck() PatternFlowTcpCtlAck {
	if obj.obj.CtlAck == nil {
		obj.obj.CtlAck = NewPatternFlowTcpCtlAck().Msg()
	}
	return &patternFlowTcpCtlAck{obj: obj.obj.CtlAck}
}

// CtlAck returns a PatternFlowTcpCtlAck
//  description is TBD
func (obj *flowTcp) HasCtlAck() bool {
	return obj.obj.CtlAck != nil
}

// SetCtlAck sets the PatternFlowTcpCtlAck value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetCtlAck(value PatternFlowTcpCtlAck) FlowTcp {
	obj.CtlAck().SetMsg(value.Msg())

	return obj
}

// CtlPsh returns a PatternFlowTcpCtlPsh
//  description is TBD
func (obj *flowTcp) CtlPsh() PatternFlowTcpCtlPsh {
	if obj.obj.CtlPsh == nil {
		obj.obj.CtlPsh = NewPatternFlowTcpCtlPsh().Msg()
	}
	return &patternFlowTcpCtlPsh{obj: obj.obj.CtlPsh}
}

// CtlPsh returns a PatternFlowTcpCtlPsh
//  description is TBD
func (obj *flowTcp) HasCtlPsh() bool {
	return obj.obj.CtlPsh != nil
}

// SetCtlPsh sets the PatternFlowTcpCtlPsh value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetCtlPsh(value PatternFlowTcpCtlPsh) FlowTcp {
	obj.CtlPsh().SetMsg(value.Msg())

	return obj
}

// CtlRst returns a PatternFlowTcpCtlRst
//  description is TBD
func (obj *flowTcp) CtlRst() PatternFlowTcpCtlRst {
	if obj.obj.CtlRst == nil {
		obj.obj.CtlRst = NewPatternFlowTcpCtlRst().Msg()
	}
	return &patternFlowTcpCtlRst{obj: obj.obj.CtlRst}
}

// CtlRst returns a PatternFlowTcpCtlRst
//  description is TBD
func (obj *flowTcp) HasCtlRst() bool {
	return obj.obj.CtlRst != nil
}

// SetCtlRst sets the PatternFlowTcpCtlRst value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetCtlRst(value PatternFlowTcpCtlRst) FlowTcp {
	obj.CtlRst().SetMsg(value.Msg())

	return obj
}

// CtlSyn returns a PatternFlowTcpCtlSyn
//  description is TBD
func (obj *flowTcp) CtlSyn() PatternFlowTcpCtlSyn {
	if obj.obj.CtlSyn == nil {
		obj.obj.CtlSyn = NewPatternFlowTcpCtlSyn().Msg()
	}
	return &patternFlowTcpCtlSyn{obj: obj.obj.CtlSyn}
}

// CtlSyn returns a PatternFlowTcpCtlSyn
//  description is TBD
func (obj *flowTcp) HasCtlSyn() bool {
	return obj.obj.CtlSyn != nil
}

// SetCtlSyn sets the PatternFlowTcpCtlSyn value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetCtlSyn(value PatternFlowTcpCtlSyn) FlowTcp {
	obj.CtlSyn().SetMsg(value.Msg())

	return obj
}

// CtlFin returns a PatternFlowTcpCtlFin
//  description is TBD
func (obj *flowTcp) CtlFin() PatternFlowTcpCtlFin {
	if obj.obj.CtlFin == nil {
		obj.obj.CtlFin = NewPatternFlowTcpCtlFin().Msg()
	}
	return &patternFlowTcpCtlFin{obj: obj.obj.CtlFin}
}

// CtlFin returns a PatternFlowTcpCtlFin
//  description is TBD
func (obj *flowTcp) HasCtlFin() bool {
	return obj.obj.CtlFin != nil
}

// SetCtlFin sets the PatternFlowTcpCtlFin value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetCtlFin(value PatternFlowTcpCtlFin) FlowTcp {
	obj.CtlFin().SetMsg(value.Msg())

	return obj
}

// Window returns a PatternFlowTcpWindow
//  description is TBD
func (obj *flowTcp) Window() PatternFlowTcpWindow {
	if obj.obj.Window == nil {
		obj.obj.Window = NewPatternFlowTcpWindow().Msg()
	}
	return &patternFlowTcpWindow{obj: obj.obj.Window}
}

// Window returns a PatternFlowTcpWindow
//  description is TBD
func (obj *flowTcp) HasWindow() bool {
	return obj.obj.Window != nil
}

// SetWindow sets the PatternFlowTcpWindow value in the FlowTcp object
//  description is TBD
func (obj *flowTcp) SetWindow(value PatternFlowTcpWindow) FlowTcp {
	obj.Window().SetMsg(value.Msg())

	return obj
}

func (obj *flowTcp) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.SrcPort != nil {
		obj.SrcPort().validateObj(set_default)
	}

	if obj.obj.DstPort != nil {
		obj.DstPort().validateObj(set_default)
	}

	if obj.obj.SeqNum != nil {
		obj.SeqNum().validateObj(set_default)
	}

	if obj.obj.AckNum != nil {
		obj.AckNum().validateObj(set_default)
	}

	if obj.obj.DataOffset != nil {
		obj.DataOffset().validateObj(set_default)
	}

	if obj.obj.EcnNs != nil {
		obj.EcnNs().validateObj(set_default)
	}

	if obj.obj.EcnCwr != nil {
		obj.EcnCwr().validateObj(set_default)
	}

	if obj.obj.EcnEcho != nil {
		obj.EcnEcho().validateObj(set_default)
	}

	if obj.obj.CtlUrg != nil {
		obj.CtlUrg().validateObj(set_default)
	}

	if obj.obj.CtlAck != nil {
		obj.CtlAck().validateObj(set_default)
	}

	if obj.obj.CtlPsh != nil {
		obj.CtlPsh().validateObj(set_default)
	}

	if obj.obj.CtlRst != nil {
		obj.CtlRst().validateObj(set_default)
	}

	if obj.obj.CtlSyn != nil {
		obj.CtlSyn().validateObj(set_default)
	}

	if obj.obj.CtlFin != nil {
		obj.CtlFin().validateObj(set_default)
	}

	if obj.obj.Window != nil {
		obj.Window().validateObj(set_default)
	}
}

func (obj *flowTcp) setDefault() {

}

type flowUdp struct {
	obj *snappipb.FlowUdp
}

func NewFlowUdp() FlowUdp {
	obj := flowUdp{obj: &snappipb.FlowUdp{}}
	obj.setDefault()
	return &obj
}

func (obj *flowUdp) Msg() *snappipb.FlowUdp {
	return obj.obj
}

func (obj *flowUdp) SetMsg(msg *snappipb.FlowUdp) FlowUdp {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowUdp) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowUdp) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowUdp) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowUdp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowUdp) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowUdp) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowUdp) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowUdp interface {
	Msg() *snappipb.FlowUdp
	SetMsg(*snappipb.FlowUdp) FlowUdp
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	SrcPort() PatternFlowUdpSrcPort
	SetSrcPort(value PatternFlowUdpSrcPort) FlowUdp
	HasSrcPort() bool
	DstPort() PatternFlowUdpDstPort
	SetDstPort(value PatternFlowUdpDstPort) FlowUdp
	HasDstPort() bool
	Length() PatternFlowUdpLength
	SetLength(value PatternFlowUdpLength) FlowUdp
	HasLength() bool
	Checksum() PatternFlowUdpChecksum
	SetChecksum(value PatternFlowUdpChecksum) FlowUdp
	HasChecksum() bool
}

// SrcPort returns a PatternFlowUdpSrcPort
//  description is TBD
func (obj *flowUdp) SrcPort() PatternFlowUdpSrcPort {
	if obj.obj.SrcPort == nil {
		obj.obj.SrcPort = NewPatternFlowUdpSrcPort().Msg()
	}
	return &patternFlowUdpSrcPort{obj: obj.obj.SrcPort}
}

// SrcPort returns a PatternFlowUdpSrcPort
//  description is TBD
func (obj *flowUdp) HasSrcPort() bool {
	return obj.obj.SrcPort != nil
}

// SetSrcPort sets the PatternFlowUdpSrcPort value in the FlowUdp object
//  description is TBD
func (obj *flowUdp) SetSrcPort(value PatternFlowUdpSrcPort) FlowUdp {
	obj.SrcPort().SetMsg(value.Msg())

	return obj
}

// DstPort returns a PatternFlowUdpDstPort
//  description is TBD
func (obj *flowUdp) DstPort() PatternFlowUdpDstPort {
	if obj.obj.DstPort == nil {
		obj.obj.DstPort = NewPatternFlowUdpDstPort().Msg()
	}
	return &patternFlowUdpDstPort{obj: obj.obj.DstPort}
}

// DstPort returns a PatternFlowUdpDstPort
//  description is TBD
func (obj *flowUdp) HasDstPort() bool {
	return obj.obj.DstPort != nil
}

// SetDstPort sets the PatternFlowUdpDstPort value in the FlowUdp object
//  description is TBD
func (obj *flowUdp) SetDstPort(value PatternFlowUdpDstPort) FlowUdp {
	obj.DstPort().SetMsg(value.Msg())

	return obj
}

// Length returns a PatternFlowUdpLength
//  description is TBD
func (obj *flowUdp) Length() PatternFlowUdpLength {
	if obj.obj.Length == nil {
		obj.obj.Length = NewPatternFlowUdpLength().Msg()
	}
	return &patternFlowUdpLength{obj: obj.obj.Length}
}

// Length returns a PatternFlowUdpLength
//  description is TBD
func (obj *flowUdp) HasLength() bool {
	return obj.obj.Length != nil
}

// SetLength sets the PatternFlowUdpLength value in the FlowUdp object
//  description is TBD
func (obj *flowUdp) SetLength(value PatternFlowUdpLength) FlowUdp {
	obj.Length().SetMsg(value.Msg())

	return obj
}

// Checksum returns a PatternFlowUdpChecksum
//  description is TBD
func (obj *flowUdp) Checksum() PatternFlowUdpChecksum {
	if obj.obj.Checksum == nil {
		obj.obj.Checksum = NewPatternFlowUdpChecksum().Msg()
	}
	return &patternFlowUdpChecksum{obj: obj.obj.Checksum}
}

// Checksum returns a PatternFlowUdpChecksum
//  description is TBD
func (obj *flowUdp) HasChecksum() bool {
	return obj.obj.Checksum != nil
}

// SetChecksum sets the PatternFlowUdpChecksum value in the FlowUdp object
//  description is TBD
func (obj *flowUdp) SetChecksum(value PatternFlowUdpChecksum) FlowUdp {
	obj.Checksum().SetMsg(value.Msg())

	return obj
}

func (obj *flowUdp) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.SrcPort != nil {
		obj.SrcPort().validateObj(set_default)
	}

	if obj.obj.DstPort != nil {
		obj.DstPort().validateObj(set_default)
	}

	if obj.obj.Length != nil {
		obj.Length().validateObj(set_default)
	}

	if obj.obj.Checksum != nil {
		obj.Checksum().validateObj(set_default)
	}
}

func (obj *flowUdp) setDefault() {

}

type flowGre struct {
	obj *snappipb.FlowGre
}

func NewFlowGre() FlowGre {
	obj := flowGre{obj: &snappipb.FlowGre{}}
	obj.setDefault()
	return &obj
}

func (obj *flowGre) Msg() *snappipb.FlowGre {
	return obj.obj
}

func (obj *flowGre) SetMsg(msg *snappipb.FlowGre) FlowGre {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowGre) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowGre) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowGre) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGre) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowGre) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGre) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowGre) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowGre interface {
	Msg() *snappipb.FlowGre
	SetMsg(*snappipb.FlowGre) FlowGre
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	ChecksumPresent() PatternFlowGreChecksumPresent
	SetChecksumPresent(value PatternFlowGreChecksumPresent) FlowGre
	HasChecksumPresent() bool
	Reserved0() PatternFlowGreReserved0
	SetReserved0(value PatternFlowGreReserved0) FlowGre
	HasReserved0() bool
	Version() PatternFlowGreVersion
	SetVersion(value PatternFlowGreVersion) FlowGre
	HasVersion() bool
	Protocol() PatternFlowGreProtocol
	SetProtocol(value PatternFlowGreProtocol) FlowGre
	HasProtocol() bool
	Checksum() PatternFlowGreChecksum
	SetChecksum(value PatternFlowGreChecksum) FlowGre
	HasChecksum() bool
	Reserved1() PatternFlowGreReserved1
	SetReserved1(value PatternFlowGreReserved1) FlowGre
	HasReserved1() bool
}

// ChecksumPresent returns a PatternFlowGreChecksumPresent
//  description is TBD
func (obj *flowGre) ChecksumPresent() PatternFlowGreChecksumPresent {
	if obj.obj.ChecksumPresent == nil {
		obj.obj.ChecksumPresent = NewPatternFlowGreChecksumPresent().Msg()
	}
	return &patternFlowGreChecksumPresent{obj: obj.obj.ChecksumPresent}
}

// ChecksumPresent returns a PatternFlowGreChecksumPresent
//  description is TBD
func (obj *flowGre) HasChecksumPresent() bool {
	return obj.obj.ChecksumPresent != nil
}

// SetChecksumPresent sets the PatternFlowGreChecksumPresent value in the FlowGre object
//  description is TBD
func (obj *flowGre) SetChecksumPresent(value PatternFlowGreChecksumPresent) FlowGre {
	obj.ChecksumPresent().SetMsg(value.Msg())

	return obj
}

// Reserved0 returns a PatternFlowGreReserved0
//  description is TBD
func (obj *flowGre) Reserved0() PatternFlowGreReserved0 {
	if obj.obj.Reserved0 == nil {
		obj.obj.Reserved0 = NewPatternFlowGreReserved0().Msg()
	}
	return &patternFlowGreReserved0{obj: obj.obj.Reserved0}
}

// Reserved0 returns a PatternFlowGreReserved0
//  description is TBD
func (obj *flowGre) HasReserved0() bool {
	return obj.obj.Reserved0 != nil
}

// SetReserved0 sets the PatternFlowGreReserved0 value in the FlowGre object
//  description is TBD
func (obj *flowGre) SetReserved0(value PatternFlowGreReserved0) FlowGre {
	obj.Reserved0().SetMsg(value.Msg())

	return obj
}

// Version returns a PatternFlowGreVersion
//  description is TBD
func (obj *flowGre) Version() PatternFlowGreVersion {
	if obj.obj.Version == nil {
		obj.obj.Version = NewPatternFlowGreVersion().Msg()
	}
	return &patternFlowGreVersion{obj: obj.obj.Version}
}

// Version returns a PatternFlowGreVersion
//  description is TBD
func (obj *flowGre) HasVersion() bool {
	return obj.obj.Version != nil
}

// SetVersion sets the PatternFlowGreVersion value in the FlowGre object
//  description is TBD
func (obj *flowGre) SetVersion(value PatternFlowGreVersion) FlowGre {
	obj.Version().SetMsg(value.Msg())

	return obj
}

// Protocol returns a PatternFlowGreProtocol
//  description is TBD
func (obj *flowGre) Protocol() PatternFlowGreProtocol {
	if obj.obj.Protocol == nil {
		obj.obj.Protocol = NewPatternFlowGreProtocol().Msg()
	}
	return &patternFlowGreProtocol{obj: obj.obj.Protocol}
}

// Protocol returns a PatternFlowGreProtocol
//  description is TBD
func (obj *flowGre) HasProtocol() bool {
	return obj.obj.Protocol != nil
}

// SetProtocol sets the PatternFlowGreProtocol value in the FlowGre object
//  description is TBD
func (obj *flowGre) SetProtocol(value PatternFlowGreProtocol) FlowGre {
	obj.Protocol().SetMsg(value.Msg())

	return obj
}

// Checksum returns a PatternFlowGreChecksum
//  description is TBD
func (obj *flowGre) Checksum() PatternFlowGreChecksum {
	if obj.obj.Checksum == nil {
		obj.obj.Checksum = NewPatternFlowGreChecksum().Msg()
	}
	return &patternFlowGreChecksum{obj: obj.obj.Checksum}
}

// Checksum returns a PatternFlowGreChecksum
//  description is TBD
func (obj *flowGre) HasChecksum() bool {
	return obj.obj.Checksum != nil
}

// SetChecksum sets the PatternFlowGreChecksum value in the FlowGre object
//  description is TBD
func (obj *flowGre) SetChecksum(value PatternFlowGreChecksum) FlowGre {
	obj.Checksum().SetMsg(value.Msg())

	return obj
}

// Reserved1 returns a PatternFlowGreReserved1
//  description is TBD
func (obj *flowGre) Reserved1() PatternFlowGreReserved1 {
	if obj.obj.Reserved1 == nil {
		obj.obj.Reserved1 = NewPatternFlowGreReserved1().Msg()
	}
	return &patternFlowGreReserved1{obj: obj.obj.Reserved1}
}

// Reserved1 returns a PatternFlowGreReserved1
//  description is TBD
func (obj *flowGre) HasReserved1() bool {
	return obj.obj.Reserved1 != nil
}

// SetReserved1 sets the PatternFlowGreReserved1 value in the FlowGre object
//  description is TBD
func (obj *flowGre) SetReserved1(value PatternFlowGreReserved1) FlowGre {
	obj.Reserved1().SetMsg(value.Msg())

	return obj
}

func (obj *flowGre) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ChecksumPresent != nil {
		obj.ChecksumPresent().validateObj(set_default)
	}

	if obj.obj.Reserved0 != nil {
		obj.Reserved0().validateObj(set_default)
	}

	if obj.obj.Version != nil {
		obj.Version().validateObj(set_default)
	}

	if obj.obj.Protocol != nil {
		obj.Protocol().validateObj(set_default)
	}

	if obj.obj.Checksum != nil {
		obj.Checksum().validateObj(set_default)
	}

	if obj.obj.Reserved1 != nil {
		obj.Reserved1().validateObj(set_default)
	}
}

func (obj *flowGre) setDefault() {

}

type flowGtpv1 struct {
	obj *snappipb.FlowGtpv1
}

func NewFlowGtpv1() FlowGtpv1 {
	obj := flowGtpv1{obj: &snappipb.FlowGtpv1{}}
	obj.setDefault()
	return &obj
}

func (obj *flowGtpv1) Msg() *snappipb.FlowGtpv1 {
	return obj.obj
}

func (obj *flowGtpv1) SetMsg(msg *snappipb.FlowGtpv1) FlowGtpv1 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowGtpv1) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowGtpv1) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowGtpv1) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpv1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowGtpv1) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpv1) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowGtpv1) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowGtpv1 interface {
	Msg() *snappipb.FlowGtpv1
	SetMsg(*snappipb.FlowGtpv1) FlowGtpv1
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Version() PatternFlowGtpv1Version
	SetVersion(value PatternFlowGtpv1Version) FlowGtpv1
	HasVersion() bool
	ProtocolType() PatternFlowGtpv1ProtocolType
	SetProtocolType(value PatternFlowGtpv1ProtocolType) FlowGtpv1
	HasProtocolType() bool
	Reserved() PatternFlowGtpv1Reserved
	SetReserved(value PatternFlowGtpv1Reserved) FlowGtpv1
	HasReserved() bool
	EFlag() PatternFlowGtpv1EFlag
	SetEFlag(value PatternFlowGtpv1EFlag) FlowGtpv1
	HasEFlag() bool
	SFlag() PatternFlowGtpv1SFlag
	SetSFlag(value PatternFlowGtpv1SFlag) FlowGtpv1
	HasSFlag() bool
	PnFlag() PatternFlowGtpv1PnFlag
	SetPnFlag(value PatternFlowGtpv1PnFlag) FlowGtpv1
	HasPnFlag() bool
	MessageType() PatternFlowGtpv1MessageType
	SetMessageType(value PatternFlowGtpv1MessageType) FlowGtpv1
	HasMessageType() bool
	MessageLength() PatternFlowGtpv1MessageLength
	SetMessageLength(value PatternFlowGtpv1MessageLength) FlowGtpv1
	HasMessageLength() bool
	Teid() PatternFlowGtpv1Teid
	SetTeid(value PatternFlowGtpv1Teid) FlowGtpv1
	HasTeid() bool
	SquenceNumber() PatternFlowGtpv1SquenceNumber
	SetSquenceNumber(value PatternFlowGtpv1SquenceNumber) FlowGtpv1
	HasSquenceNumber() bool
	NPduNumber() PatternFlowGtpv1NPduNumber
	SetNPduNumber(value PatternFlowGtpv1NPduNumber) FlowGtpv1
	HasNPduNumber() bool
	NextExtensionHeaderType() PatternFlowGtpv1NextExtensionHeaderType
	SetNextExtensionHeaderType(value PatternFlowGtpv1NextExtensionHeaderType) FlowGtpv1
	HasNextExtensionHeaderType() bool
	ExtensionHeaders() FlowGtpv1FlowGtpExtensionIter
}

// Version returns a PatternFlowGtpv1Version
//  description is TBD
func (obj *flowGtpv1) Version() PatternFlowGtpv1Version {
	if obj.obj.Version == nil {
		obj.obj.Version = NewPatternFlowGtpv1Version().Msg()
	}
	return &patternFlowGtpv1Version{obj: obj.obj.Version}
}

// Version returns a PatternFlowGtpv1Version
//  description is TBD
func (obj *flowGtpv1) HasVersion() bool {
	return obj.obj.Version != nil
}

// SetVersion sets the PatternFlowGtpv1Version value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetVersion(value PatternFlowGtpv1Version) FlowGtpv1 {
	obj.Version().SetMsg(value.Msg())

	return obj
}

// ProtocolType returns a PatternFlowGtpv1ProtocolType
//  description is TBD
func (obj *flowGtpv1) ProtocolType() PatternFlowGtpv1ProtocolType {
	if obj.obj.ProtocolType == nil {
		obj.obj.ProtocolType = NewPatternFlowGtpv1ProtocolType().Msg()
	}
	return &patternFlowGtpv1ProtocolType{obj: obj.obj.ProtocolType}
}

// ProtocolType returns a PatternFlowGtpv1ProtocolType
//  description is TBD
func (obj *flowGtpv1) HasProtocolType() bool {
	return obj.obj.ProtocolType != nil
}

// SetProtocolType sets the PatternFlowGtpv1ProtocolType value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetProtocolType(value PatternFlowGtpv1ProtocolType) FlowGtpv1 {
	obj.ProtocolType().SetMsg(value.Msg())

	return obj
}

// Reserved returns a PatternFlowGtpv1Reserved
//  description is TBD
func (obj *flowGtpv1) Reserved() PatternFlowGtpv1Reserved {
	if obj.obj.Reserved == nil {
		obj.obj.Reserved = NewPatternFlowGtpv1Reserved().Msg()
	}
	return &patternFlowGtpv1Reserved{obj: obj.obj.Reserved}
}

// Reserved returns a PatternFlowGtpv1Reserved
//  description is TBD
func (obj *flowGtpv1) HasReserved() bool {
	return obj.obj.Reserved != nil
}

// SetReserved sets the PatternFlowGtpv1Reserved value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetReserved(value PatternFlowGtpv1Reserved) FlowGtpv1 {
	obj.Reserved().SetMsg(value.Msg())

	return obj
}

// EFlag returns a PatternFlowGtpv1EFlag
//  description is TBD
func (obj *flowGtpv1) EFlag() PatternFlowGtpv1EFlag {
	if obj.obj.EFlag == nil {
		obj.obj.EFlag = NewPatternFlowGtpv1EFlag().Msg()
	}
	return &patternFlowGtpv1EFlag{obj: obj.obj.EFlag}
}

// EFlag returns a PatternFlowGtpv1EFlag
//  description is TBD
func (obj *flowGtpv1) HasEFlag() bool {
	return obj.obj.EFlag != nil
}

// SetEFlag sets the PatternFlowGtpv1EFlag value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetEFlag(value PatternFlowGtpv1EFlag) FlowGtpv1 {
	obj.EFlag().SetMsg(value.Msg())

	return obj
}

// SFlag returns a PatternFlowGtpv1SFlag
//  description is TBD
func (obj *flowGtpv1) SFlag() PatternFlowGtpv1SFlag {
	if obj.obj.SFlag == nil {
		obj.obj.SFlag = NewPatternFlowGtpv1SFlag().Msg()
	}
	return &patternFlowGtpv1SFlag{obj: obj.obj.SFlag}
}

// SFlag returns a PatternFlowGtpv1SFlag
//  description is TBD
func (obj *flowGtpv1) HasSFlag() bool {
	return obj.obj.SFlag != nil
}

// SetSFlag sets the PatternFlowGtpv1SFlag value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetSFlag(value PatternFlowGtpv1SFlag) FlowGtpv1 {
	obj.SFlag().SetMsg(value.Msg())

	return obj
}

// PnFlag returns a PatternFlowGtpv1PnFlag
//  description is TBD
func (obj *flowGtpv1) PnFlag() PatternFlowGtpv1PnFlag {
	if obj.obj.PnFlag == nil {
		obj.obj.PnFlag = NewPatternFlowGtpv1PnFlag().Msg()
	}
	return &patternFlowGtpv1PnFlag{obj: obj.obj.PnFlag}
}

// PnFlag returns a PatternFlowGtpv1PnFlag
//  description is TBD
func (obj *flowGtpv1) HasPnFlag() bool {
	return obj.obj.PnFlag != nil
}

// SetPnFlag sets the PatternFlowGtpv1PnFlag value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetPnFlag(value PatternFlowGtpv1PnFlag) FlowGtpv1 {
	obj.PnFlag().SetMsg(value.Msg())

	return obj
}

// MessageType returns a PatternFlowGtpv1MessageType
//  description is TBD
func (obj *flowGtpv1) MessageType() PatternFlowGtpv1MessageType {
	if obj.obj.MessageType == nil {
		obj.obj.MessageType = NewPatternFlowGtpv1MessageType().Msg()
	}
	return &patternFlowGtpv1MessageType{obj: obj.obj.MessageType}
}

// MessageType returns a PatternFlowGtpv1MessageType
//  description is TBD
func (obj *flowGtpv1) HasMessageType() bool {
	return obj.obj.MessageType != nil
}

// SetMessageType sets the PatternFlowGtpv1MessageType value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetMessageType(value PatternFlowGtpv1MessageType) FlowGtpv1 {
	obj.MessageType().SetMsg(value.Msg())

	return obj
}

// MessageLength returns a PatternFlowGtpv1MessageLength
//  description is TBD
func (obj *flowGtpv1) MessageLength() PatternFlowGtpv1MessageLength {
	if obj.obj.MessageLength == nil {
		obj.obj.MessageLength = NewPatternFlowGtpv1MessageLength().Msg()
	}
	return &patternFlowGtpv1MessageLength{obj: obj.obj.MessageLength}
}

// MessageLength returns a PatternFlowGtpv1MessageLength
//  description is TBD
func (obj *flowGtpv1) HasMessageLength() bool {
	return obj.obj.MessageLength != nil
}

// SetMessageLength sets the PatternFlowGtpv1MessageLength value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetMessageLength(value PatternFlowGtpv1MessageLength) FlowGtpv1 {
	obj.MessageLength().SetMsg(value.Msg())

	return obj
}

// Teid returns a PatternFlowGtpv1Teid
//  description is TBD
func (obj *flowGtpv1) Teid() PatternFlowGtpv1Teid {
	if obj.obj.Teid == nil {
		obj.obj.Teid = NewPatternFlowGtpv1Teid().Msg()
	}
	return &patternFlowGtpv1Teid{obj: obj.obj.Teid}
}

// Teid returns a PatternFlowGtpv1Teid
//  description is TBD
func (obj *flowGtpv1) HasTeid() bool {
	return obj.obj.Teid != nil
}

// SetTeid sets the PatternFlowGtpv1Teid value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetTeid(value PatternFlowGtpv1Teid) FlowGtpv1 {
	obj.Teid().SetMsg(value.Msg())

	return obj
}

// SquenceNumber returns a PatternFlowGtpv1SquenceNumber
//  description is TBD
func (obj *flowGtpv1) SquenceNumber() PatternFlowGtpv1SquenceNumber {
	if obj.obj.SquenceNumber == nil {
		obj.obj.SquenceNumber = NewPatternFlowGtpv1SquenceNumber().Msg()
	}
	return &patternFlowGtpv1SquenceNumber{obj: obj.obj.SquenceNumber}
}

// SquenceNumber returns a PatternFlowGtpv1SquenceNumber
//  description is TBD
func (obj *flowGtpv1) HasSquenceNumber() bool {
	return obj.obj.SquenceNumber != nil
}

// SetSquenceNumber sets the PatternFlowGtpv1SquenceNumber value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetSquenceNumber(value PatternFlowGtpv1SquenceNumber) FlowGtpv1 {
	obj.SquenceNumber().SetMsg(value.Msg())

	return obj
}

// NPduNumber returns a PatternFlowGtpv1NPduNumber
//  description is TBD
func (obj *flowGtpv1) NPduNumber() PatternFlowGtpv1NPduNumber {
	if obj.obj.NPduNumber == nil {
		obj.obj.NPduNumber = NewPatternFlowGtpv1NPduNumber().Msg()
	}
	return &patternFlowGtpv1NPduNumber{obj: obj.obj.NPduNumber}
}

// NPduNumber returns a PatternFlowGtpv1NPduNumber
//  description is TBD
func (obj *flowGtpv1) HasNPduNumber() bool {
	return obj.obj.NPduNumber != nil
}

// SetNPduNumber sets the PatternFlowGtpv1NPduNumber value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetNPduNumber(value PatternFlowGtpv1NPduNumber) FlowGtpv1 {
	obj.NPduNumber().SetMsg(value.Msg())

	return obj
}

// NextExtensionHeaderType returns a PatternFlowGtpv1NextExtensionHeaderType
//  description is TBD
func (obj *flowGtpv1) NextExtensionHeaderType() PatternFlowGtpv1NextExtensionHeaderType {
	if obj.obj.NextExtensionHeaderType == nil {
		obj.obj.NextExtensionHeaderType = NewPatternFlowGtpv1NextExtensionHeaderType().Msg()
	}
	return &patternFlowGtpv1NextExtensionHeaderType{obj: obj.obj.NextExtensionHeaderType}
}

// NextExtensionHeaderType returns a PatternFlowGtpv1NextExtensionHeaderType
//  description is TBD
func (obj *flowGtpv1) HasNextExtensionHeaderType() bool {
	return obj.obj.NextExtensionHeaderType != nil
}

// SetNextExtensionHeaderType sets the PatternFlowGtpv1NextExtensionHeaderType value in the FlowGtpv1 object
//  description is TBD
func (obj *flowGtpv1) SetNextExtensionHeaderType(value PatternFlowGtpv1NextExtensionHeaderType) FlowGtpv1 {
	obj.NextExtensionHeaderType().SetMsg(value.Msg())

	return obj
}

// ExtensionHeaders returns a []FlowGtpExtension
//  A list of optional extension headers.
func (obj *flowGtpv1) ExtensionHeaders() FlowGtpv1FlowGtpExtensionIter {
	if obj.obj.ExtensionHeaders == nil {
		obj.obj.ExtensionHeaders = []*snappipb.FlowGtpExtension{}
	}
	return &flowGtpv1FlowGtpExtensionIter{obj: obj}
}

type flowGtpv1FlowGtpExtensionIter struct {
	obj *flowGtpv1
}

type FlowGtpv1FlowGtpExtensionIter interface {
	Add() FlowGtpExtension
	Items() []FlowGtpExtension
}

func (obj *flowGtpv1FlowGtpExtensionIter) Add() FlowGtpExtension {
	newObj := &snappipb.FlowGtpExtension{}
	obj.obj.obj.ExtensionHeaders = append(obj.obj.obj.ExtensionHeaders, newObj)
	newLibObj := &flowGtpExtension{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *flowGtpv1FlowGtpExtensionIter) Items() []FlowGtpExtension {
	slice := []FlowGtpExtension{}
	for _, item := range obj.obj.obj.ExtensionHeaders {
		slice = append(slice, &flowGtpExtension{obj: item})
	}
	return slice
}

func (obj *flowGtpv1) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Version != nil {
		obj.Version().validateObj(set_default)
	}

	if obj.obj.ProtocolType != nil {
		obj.ProtocolType().validateObj(set_default)
	}

	if obj.obj.Reserved != nil {
		obj.Reserved().validateObj(set_default)
	}

	if obj.obj.EFlag != nil {
		obj.EFlag().validateObj(set_default)
	}

	if obj.obj.SFlag != nil {
		obj.SFlag().validateObj(set_default)
	}

	if obj.obj.PnFlag != nil {
		obj.PnFlag().validateObj(set_default)
	}

	if obj.obj.MessageType != nil {
		obj.MessageType().validateObj(set_default)
	}

	if obj.obj.MessageLength != nil {
		obj.MessageLength().validateObj(set_default)
	}

	if obj.obj.Teid != nil {
		obj.Teid().validateObj(set_default)
	}

	if obj.obj.SquenceNumber != nil {
		obj.SquenceNumber().validateObj(set_default)
	}

	if obj.obj.NPduNumber != nil {
		obj.NPduNumber().validateObj(set_default)
	}

	if obj.obj.NextExtensionHeaderType != nil {
		obj.NextExtensionHeaderType().validateObj(set_default)
	}
	if obj.obj.ExtensionHeaders != nil {
		for _, item := range obj.ExtensionHeaders().Items() {
			item.validateObj(set_default)
		}
	}

}

func (obj *flowGtpv1) setDefault() {

}

type flowGtpv2 struct {
	obj *snappipb.FlowGtpv2
}

func NewFlowGtpv2() FlowGtpv2 {
	obj := flowGtpv2{obj: &snappipb.FlowGtpv2{}}
	obj.setDefault()
	return &obj
}

func (obj *flowGtpv2) Msg() *snappipb.FlowGtpv2 {
	return obj.obj
}

func (obj *flowGtpv2) SetMsg(msg *snappipb.FlowGtpv2) FlowGtpv2 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowGtpv2) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowGtpv2) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowGtpv2) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpv2) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowGtpv2) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpv2) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowGtpv2) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowGtpv2 interface {
	Msg() *snappipb.FlowGtpv2
	SetMsg(*snappipb.FlowGtpv2) FlowGtpv2
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Version() PatternFlowGtpv2Version
	SetVersion(value PatternFlowGtpv2Version) FlowGtpv2
	HasVersion() bool
	PiggybackingFlag() PatternFlowGtpv2PiggybackingFlag
	SetPiggybackingFlag(value PatternFlowGtpv2PiggybackingFlag) FlowGtpv2
	HasPiggybackingFlag() bool
	TeidFlag() PatternFlowGtpv2TeidFlag
	SetTeidFlag(value PatternFlowGtpv2TeidFlag) FlowGtpv2
	HasTeidFlag() bool
	Spare1() PatternFlowGtpv2Spare1
	SetSpare1(value PatternFlowGtpv2Spare1) FlowGtpv2
	HasSpare1() bool
	MessageType() PatternFlowGtpv2MessageType
	SetMessageType(value PatternFlowGtpv2MessageType) FlowGtpv2
	HasMessageType() bool
	MessageLength() PatternFlowGtpv2MessageLength
	SetMessageLength(value PatternFlowGtpv2MessageLength) FlowGtpv2
	HasMessageLength() bool
	Teid() PatternFlowGtpv2Teid
	SetTeid(value PatternFlowGtpv2Teid) FlowGtpv2
	HasTeid() bool
	SequenceNumber() PatternFlowGtpv2SequenceNumber
	SetSequenceNumber(value PatternFlowGtpv2SequenceNumber) FlowGtpv2
	HasSequenceNumber() bool
	Spare2() PatternFlowGtpv2Spare2
	SetSpare2(value PatternFlowGtpv2Spare2) FlowGtpv2
	HasSpare2() bool
}

// Version returns a PatternFlowGtpv2Version
//  description is TBD
func (obj *flowGtpv2) Version() PatternFlowGtpv2Version {
	if obj.obj.Version == nil {
		obj.obj.Version = NewPatternFlowGtpv2Version().Msg()
	}
	return &patternFlowGtpv2Version{obj: obj.obj.Version}
}

// Version returns a PatternFlowGtpv2Version
//  description is TBD
func (obj *flowGtpv2) HasVersion() bool {
	return obj.obj.Version != nil
}

// SetVersion sets the PatternFlowGtpv2Version value in the FlowGtpv2 object
//  description is TBD
func (obj *flowGtpv2) SetVersion(value PatternFlowGtpv2Version) FlowGtpv2 {
	obj.Version().SetMsg(value.Msg())

	return obj
}

// PiggybackingFlag returns a PatternFlowGtpv2PiggybackingFlag
//  description is TBD
func (obj *flowGtpv2) PiggybackingFlag() PatternFlowGtpv2PiggybackingFlag {
	if obj.obj.PiggybackingFlag == nil {
		obj.obj.PiggybackingFlag = NewPatternFlowGtpv2PiggybackingFlag().Msg()
	}
	return &patternFlowGtpv2PiggybackingFlag{obj: obj.obj.PiggybackingFlag}
}

// PiggybackingFlag returns a PatternFlowGtpv2PiggybackingFlag
//  description is TBD
func (obj *flowGtpv2) HasPiggybackingFlag() bool {
	return obj.obj.PiggybackingFlag != nil
}

// SetPiggybackingFlag sets the PatternFlowGtpv2PiggybackingFlag value in the FlowGtpv2 object
//  description is TBD
func (obj *flowGtpv2) SetPiggybackingFlag(value PatternFlowGtpv2PiggybackingFlag) FlowGtpv2 {
	obj.PiggybackingFlag().SetMsg(value.Msg())

	return obj
}

// TeidFlag returns a PatternFlowGtpv2TeidFlag
//  description is TBD
func (obj *flowGtpv2) TeidFlag() PatternFlowGtpv2TeidFlag {
	if obj.obj.TeidFlag == nil {
		obj.obj.TeidFlag = NewPatternFlowGtpv2TeidFlag().Msg()
	}
	return &patternFlowGtpv2TeidFlag{obj: obj.obj.TeidFlag}
}

// TeidFlag returns a PatternFlowGtpv2TeidFlag
//  description is TBD
func (obj *flowGtpv2) HasTeidFlag() bool {
	return obj.obj.TeidFlag != nil
}

// SetTeidFlag sets the PatternFlowGtpv2TeidFlag value in the FlowGtpv2 object
//  description is TBD
func (obj *flowGtpv2) SetTeidFlag(value PatternFlowGtpv2TeidFlag) FlowGtpv2 {
	obj.TeidFlag().SetMsg(value.Msg())

	return obj
}

// Spare1 returns a PatternFlowGtpv2Spare1
//  description is TBD
func (obj *flowGtpv2) Spare1() PatternFlowGtpv2Spare1 {
	if obj.obj.Spare1 == nil {
		obj.obj.Spare1 = NewPatternFlowGtpv2Spare1().Msg()
	}
	return &patternFlowGtpv2Spare1{obj: obj.obj.Spare1}
}

// Spare1 returns a PatternFlowGtpv2Spare1
//  description is TBD
func (obj *flowGtpv2) HasSpare1() bool {
	return obj.obj.Spare1 != nil
}

// SetSpare1 sets the PatternFlowGtpv2Spare1 value in the FlowGtpv2 object
//  description is TBD
func (obj *flowGtpv2) SetSpare1(value PatternFlowGtpv2Spare1) FlowGtpv2 {
	obj.Spare1().SetMsg(value.Msg())

	return obj
}

// MessageType returns a PatternFlowGtpv2MessageType
//  description is TBD
func (obj *flowGtpv2) MessageType() PatternFlowGtpv2MessageType {
	if obj.obj.MessageType == nil {
		obj.obj.MessageType = NewPatternFlowGtpv2MessageType().Msg()
	}
	return &patternFlowGtpv2MessageType{obj: obj.obj.MessageType}
}

// MessageType returns a PatternFlowGtpv2MessageType
//  description is TBD
func (obj *flowGtpv2) HasMessageType() bool {
	return obj.obj.MessageType != nil
}

// SetMessageType sets the PatternFlowGtpv2MessageType value in the FlowGtpv2 object
//  description is TBD
func (obj *flowGtpv2) SetMessageType(value PatternFlowGtpv2MessageType) FlowGtpv2 {
	obj.MessageType().SetMsg(value.Msg())

	return obj
}

// MessageLength returns a PatternFlowGtpv2MessageLength
//  description is TBD
func (obj *flowGtpv2) MessageLength() PatternFlowGtpv2MessageLength {
	if obj.obj.MessageLength == nil {
		obj.obj.MessageLength = NewPatternFlowGtpv2MessageLength().Msg()
	}
	return &patternFlowGtpv2MessageLength{obj: obj.obj.MessageLength}
}

// MessageLength returns a PatternFlowGtpv2MessageLength
//  description is TBD
func (obj *flowGtpv2) HasMessageLength() bool {
	return obj.obj.MessageLength != nil
}

// SetMessageLength sets the PatternFlowGtpv2MessageLength value in the FlowGtpv2 object
//  description is TBD
func (obj *flowGtpv2) SetMessageLength(value PatternFlowGtpv2MessageLength) FlowGtpv2 {
	obj.MessageLength().SetMsg(value.Msg())

	return obj
}

// Teid returns a PatternFlowGtpv2Teid
//  description is TBD
func (obj *flowGtpv2) Teid() PatternFlowGtpv2Teid {
	if obj.obj.Teid == nil {
		obj.obj.Teid = NewPatternFlowGtpv2Teid().Msg()
	}
	return &patternFlowGtpv2Teid{obj: obj.obj.Teid}
}

// Teid returns a PatternFlowGtpv2Teid
//  description is TBD
func (obj *flowGtpv2) HasTeid() bool {
	return obj.obj.Teid != nil
}

// SetTeid sets the PatternFlowGtpv2Teid value in the FlowGtpv2 object
//  description is TBD
func (obj *flowGtpv2) SetTeid(value PatternFlowGtpv2Teid) FlowGtpv2 {
	obj.Teid().SetMsg(value.Msg())

	return obj
}

// SequenceNumber returns a PatternFlowGtpv2SequenceNumber
//  description is TBD
func (obj *flowGtpv2) SequenceNumber() PatternFlowGtpv2SequenceNumber {
	if obj.obj.SequenceNumber == nil {
		obj.obj.SequenceNumber = NewPatternFlowGtpv2SequenceNumber().Msg()
	}
	return &patternFlowGtpv2SequenceNumber{obj: obj.obj.SequenceNumber}
}

// SequenceNumber returns a PatternFlowGtpv2SequenceNumber
//  description is TBD
func (obj *flowGtpv2) HasSequenceNumber() bool {
	return obj.obj.SequenceNumber != nil
}

// SetSequenceNumber sets the PatternFlowGtpv2SequenceNumber value in the FlowGtpv2 object
//  description is TBD
func (obj *flowGtpv2) SetSequenceNumber(value PatternFlowGtpv2SequenceNumber) FlowGtpv2 {
	obj.SequenceNumber().SetMsg(value.Msg())

	return obj
}

// Spare2 returns a PatternFlowGtpv2Spare2
//  description is TBD
func (obj *flowGtpv2) Spare2() PatternFlowGtpv2Spare2 {
	if obj.obj.Spare2 == nil {
		obj.obj.Spare2 = NewPatternFlowGtpv2Spare2().Msg()
	}
	return &patternFlowGtpv2Spare2{obj: obj.obj.Spare2}
}

// Spare2 returns a PatternFlowGtpv2Spare2
//  description is TBD
func (obj *flowGtpv2) HasSpare2() bool {
	return obj.obj.Spare2 != nil
}

// SetSpare2 sets the PatternFlowGtpv2Spare2 value in the FlowGtpv2 object
//  description is TBD
func (obj *flowGtpv2) SetSpare2(value PatternFlowGtpv2Spare2) FlowGtpv2 {
	obj.Spare2().SetMsg(value.Msg())

	return obj
}

func (obj *flowGtpv2) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Version != nil {
		obj.Version().validateObj(set_default)
	}

	if obj.obj.PiggybackingFlag != nil {
		obj.PiggybackingFlag().validateObj(set_default)
	}

	if obj.obj.TeidFlag != nil {
		obj.TeidFlag().validateObj(set_default)
	}

	if obj.obj.Spare1 != nil {
		obj.Spare1().validateObj(set_default)
	}

	if obj.obj.MessageType != nil {
		obj.MessageType().validateObj(set_default)
	}

	if obj.obj.MessageLength != nil {
		obj.MessageLength().validateObj(set_default)
	}

	if obj.obj.Teid != nil {
		obj.Teid().validateObj(set_default)
	}

	if obj.obj.SequenceNumber != nil {
		obj.SequenceNumber().validateObj(set_default)
	}

	if obj.obj.Spare2 != nil {
		obj.Spare2().validateObj(set_default)
	}
}

func (obj *flowGtpv2) setDefault() {

}

type flowArp struct {
	obj *snappipb.FlowArp
}

func NewFlowArp() FlowArp {
	obj := flowArp{obj: &snappipb.FlowArp{}}
	obj.setDefault()
	return &obj
}

func (obj *flowArp) Msg() *snappipb.FlowArp {
	return obj.obj
}

func (obj *flowArp) SetMsg(msg *snappipb.FlowArp) FlowArp {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowArp) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowArp) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowArp) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowArp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowArp) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowArp) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowArp) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowArp interface {
	Msg() *snappipb.FlowArp
	SetMsg(*snappipb.FlowArp) FlowArp
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	HardwareType() PatternFlowArpHardwareType
	SetHardwareType(value PatternFlowArpHardwareType) FlowArp
	HasHardwareType() bool
	ProtocolType() PatternFlowArpProtocolType
	SetProtocolType(value PatternFlowArpProtocolType) FlowArp
	HasProtocolType() bool
	HardwareLength() PatternFlowArpHardwareLength
	SetHardwareLength(value PatternFlowArpHardwareLength) FlowArp
	HasHardwareLength() bool
	ProtocolLength() PatternFlowArpProtocolLength
	SetProtocolLength(value PatternFlowArpProtocolLength) FlowArp
	HasProtocolLength() bool
	Operation() PatternFlowArpOperation
	SetOperation(value PatternFlowArpOperation) FlowArp
	HasOperation() bool
	SenderHardwareAddr() PatternFlowArpSenderHardwareAddr
	SetSenderHardwareAddr(value PatternFlowArpSenderHardwareAddr) FlowArp
	HasSenderHardwareAddr() bool
	SenderProtocolAddr() PatternFlowArpSenderProtocolAddr
	SetSenderProtocolAddr(value PatternFlowArpSenderProtocolAddr) FlowArp
	HasSenderProtocolAddr() bool
	TargetHardwareAddr() PatternFlowArpTargetHardwareAddr
	SetTargetHardwareAddr(value PatternFlowArpTargetHardwareAddr) FlowArp
	HasTargetHardwareAddr() bool
	TargetProtocolAddr() PatternFlowArpTargetProtocolAddr
	SetTargetProtocolAddr(value PatternFlowArpTargetProtocolAddr) FlowArp
	HasTargetProtocolAddr() bool
}

// HardwareType returns a PatternFlowArpHardwareType
//  description is TBD
func (obj *flowArp) HardwareType() PatternFlowArpHardwareType {
	if obj.obj.HardwareType == nil {
		obj.obj.HardwareType = NewPatternFlowArpHardwareType().Msg()
	}
	return &patternFlowArpHardwareType{obj: obj.obj.HardwareType}
}

// HardwareType returns a PatternFlowArpHardwareType
//  description is TBD
func (obj *flowArp) HasHardwareType() bool {
	return obj.obj.HardwareType != nil
}

// SetHardwareType sets the PatternFlowArpHardwareType value in the FlowArp object
//  description is TBD
func (obj *flowArp) SetHardwareType(value PatternFlowArpHardwareType) FlowArp {
	obj.HardwareType().SetMsg(value.Msg())

	return obj
}

// ProtocolType returns a PatternFlowArpProtocolType
//  description is TBD
func (obj *flowArp) ProtocolType() PatternFlowArpProtocolType {
	if obj.obj.ProtocolType == nil {
		obj.obj.ProtocolType = NewPatternFlowArpProtocolType().Msg()
	}
	return &patternFlowArpProtocolType{obj: obj.obj.ProtocolType}
}

// ProtocolType returns a PatternFlowArpProtocolType
//  description is TBD
func (obj *flowArp) HasProtocolType() bool {
	return obj.obj.ProtocolType != nil
}

// SetProtocolType sets the PatternFlowArpProtocolType value in the FlowArp object
//  description is TBD
func (obj *flowArp) SetProtocolType(value PatternFlowArpProtocolType) FlowArp {
	obj.ProtocolType().SetMsg(value.Msg())

	return obj
}

// HardwareLength returns a PatternFlowArpHardwareLength
//  description is TBD
func (obj *flowArp) HardwareLength() PatternFlowArpHardwareLength {
	if obj.obj.HardwareLength == nil {
		obj.obj.HardwareLength = NewPatternFlowArpHardwareLength().Msg()
	}
	return &patternFlowArpHardwareLength{obj: obj.obj.HardwareLength}
}

// HardwareLength returns a PatternFlowArpHardwareLength
//  description is TBD
func (obj *flowArp) HasHardwareLength() bool {
	return obj.obj.HardwareLength != nil
}

// SetHardwareLength sets the PatternFlowArpHardwareLength value in the FlowArp object
//  description is TBD
func (obj *flowArp) SetHardwareLength(value PatternFlowArpHardwareLength) FlowArp {
	obj.HardwareLength().SetMsg(value.Msg())

	return obj
}

// ProtocolLength returns a PatternFlowArpProtocolLength
//  description is TBD
func (obj *flowArp) ProtocolLength() PatternFlowArpProtocolLength {
	if obj.obj.ProtocolLength == nil {
		obj.obj.ProtocolLength = NewPatternFlowArpProtocolLength().Msg()
	}
	return &patternFlowArpProtocolLength{obj: obj.obj.ProtocolLength}
}

// ProtocolLength returns a PatternFlowArpProtocolLength
//  description is TBD
func (obj *flowArp) HasProtocolLength() bool {
	return obj.obj.ProtocolLength != nil
}

// SetProtocolLength sets the PatternFlowArpProtocolLength value in the FlowArp object
//  description is TBD
func (obj *flowArp) SetProtocolLength(value PatternFlowArpProtocolLength) FlowArp {
	obj.ProtocolLength().SetMsg(value.Msg())

	return obj
}

// Operation returns a PatternFlowArpOperation
//  description is TBD
func (obj *flowArp) Operation() PatternFlowArpOperation {
	if obj.obj.Operation == nil {
		obj.obj.Operation = NewPatternFlowArpOperation().Msg()
	}
	return &patternFlowArpOperation{obj: obj.obj.Operation}
}

// Operation returns a PatternFlowArpOperation
//  description is TBD
func (obj *flowArp) HasOperation() bool {
	return obj.obj.Operation != nil
}

// SetOperation sets the PatternFlowArpOperation value in the FlowArp object
//  description is TBD
func (obj *flowArp) SetOperation(value PatternFlowArpOperation) FlowArp {
	obj.Operation().SetMsg(value.Msg())

	return obj
}

// SenderHardwareAddr returns a PatternFlowArpSenderHardwareAddr
//  description is TBD
func (obj *flowArp) SenderHardwareAddr() PatternFlowArpSenderHardwareAddr {
	if obj.obj.SenderHardwareAddr == nil {
		obj.obj.SenderHardwareAddr = NewPatternFlowArpSenderHardwareAddr().Msg()
	}
	return &patternFlowArpSenderHardwareAddr{obj: obj.obj.SenderHardwareAddr}
}

// SenderHardwareAddr returns a PatternFlowArpSenderHardwareAddr
//  description is TBD
func (obj *flowArp) HasSenderHardwareAddr() bool {
	return obj.obj.SenderHardwareAddr != nil
}

// SetSenderHardwareAddr sets the PatternFlowArpSenderHardwareAddr value in the FlowArp object
//  description is TBD
func (obj *flowArp) SetSenderHardwareAddr(value PatternFlowArpSenderHardwareAddr) FlowArp {
	obj.SenderHardwareAddr().SetMsg(value.Msg())

	return obj
}

// SenderProtocolAddr returns a PatternFlowArpSenderProtocolAddr
//  description is TBD
func (obj *flowArp) SenderProtocolAddr() PatternFlowArpSenderProtocolAddr {
	if obj.obj.SenderProtocolAddr == nil {
		obj.obj.SenderProtocolAddr = NewPatternFlowArpSenderProtocolAddr().Msg()
	}
	return &patternFlowArpSenderProtocolAddr{obj: obj.obj.SenderProtocolAddr}
}

// SenderProtocolAddr returns a PatternFlowArpSenderProtocolAddr
//  description is TBD
func (obj *flowArp) HasSenderProtocolAddr() bool {
	return obj.obj.SenderProtocolAddr != nil
}

// SetSenderProtocolAddr sets the PatternFlowArpSenderProtocolAddr value in the FlowArp object
//  description is TBD
func (obj *flowArp) SetSenderProtocolAddr(value PatternFlowArpSenderProtocolAddr) FlowArp {
	obj.SenderProtocolAddr().SetMsg(value.Msg())

	return obj
}

// TargetHardwareAddr returns a PatternFlowArpTargetHardwareAddr
//  description is TBD
func (obj *flowArp) TargetHardwareAddr() PatternFlowArpTargetHardwareAddr {
	if obj.obj.TargetHardwareAddr == nil {
		obj.obj.TargetHardwareAddr = NewPatternFlowArpTargetHardwareAddr().Msg()
	}
	return &patternFlowArpTargetHardwareAddr{obj: obj.obj.TargetHardwareAddr}
}

// TargetHardwareAddr returns a PatternFlowArpTargetHardwareAddr
//  description is TBD
func (obj *flowArp) HasTargetHardwareAddr() bool {
	return obj.obj.TargetHardwareAddr != nil
}

// SetTargetHardwareAddr sets the PatternFlowArpTargetHardwareAddr value in the FlowArp object
//  description is TBD
func (obj *flowArp) SetTargetHardwareAddr(value PatternFlowArpTargetHardwareAddr) FlowArp {
	obj.TargetHardwareAddr().SetMsg(value.Msg())

	return obj
}

// TargetProtocolAddr returns a PatternFlowArpTargetProtocolAddr
//  description is TBD
func (obj *flowArp) TargetProtocolAddr() PatternFlowArpTargetProtocolAddr {
	if obj.obj.TargetProtocolAddr == nil {
		obj.obj.TargetProtocolAddr = NewPatternFlowArpTargetProtocolAddr().Msg()
	}
	return &patternFlowArpTargetProtocolAddr{obj: obj.obj.TargetProtocolAddr}
}

// TargetProtocolAddr returns a PatternFlowArpTargetProtocolAddr
//  description is TBD
func (obj *flowArp) HasTargetProtocolAddr() bool {
	return obj.obj.TargetProtocolAddr != nil
}

// SetTargetProtocolAddr sets the PatternFlowArpTargetProtocolAddr value in the FlowArp object
//  description is TBD
func (obj *flowArp) SetTargetProtocolAddr(value PatternFlowArpTargetProtocolAddr) FlowArp {
	obj.TargetProtocolAddr().SetMsg(value.Msg())

	return obj
}

func (obj *flowArp) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.HardwareType != nil {
		obj.HardwareType().validateObj(set_default)
	}

	if obj.obj.ProtocolType != nil {
		obj.ProtocolType().validateObj(set_default)
	}

	if obj.obj.HardwareLength != nil {
		obj.HardwareLength().validateObj(set_default)
	}

	if obj.obj.ProtocolLength != nil {
		obj.ProtocolLength().validateObj(set_default)
	}

	if obj.obj.Operation != nil {
		obj.Operation().validateObj(set_default)
	}

	if obj.obj.SenderHardwareAddr != nil {
		obj.SenderHardwareAddr().validateObj(set_default)
	}

	if obj.obj.SenderProtocolAddr != nil {
		obj.SenderProtocolAddr().validateObj(set_default)
	}

	if obj.obj.TargetHardwareAddr != nil {
		obj.TargetHardwareAddr().validateObj(set_default)
	}

	if obj.obj.TargetProtocolAddr != nil {
		obj.TargetProtocolAddr().validateObj(set_default)
	}
}

func (obj *flowArp) setDefault() {

}

type flowIcmp struct {
	obj *snappipb.FlowIcmp
}

func NewFlowIcmp() FlowIcmp {
	obj := flowIcmp{obj: &snappipb.FlowIcmp{}}
	obj.setDefault()
	return &obj
}

func (obj *flowIcmp) Msg() *snappipb.FlowIcmp {
	return obj.obj
}

func (obj *flowIcmp) SetMsg(msg *snappipb.FlowIcmp) FlowIcmp {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowIcmp) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowIcmp) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIcmp) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIcmp) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmp) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowIcmp) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowIcmp interface {
	Msg() *snappipb.FlowIcmp
	SetMsg(*snappipb.FlowIcmp) FlowIcmp
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() FlowIcmpChoiceEnum
	SetChoice(value FlowIcmpChoiceEnum) FlowIcmp
	HasChoice() bool
	Echo() FlowIcmpEcho
	SetEcho(value FlowIcmpEcho) FlowIcmp
	HasEcho() bool
}

type FlowIcmpChoiceEnum string

var FlowIcmpChoice = struct {
	ECHO FlowIcmpChoiceEnum
}{
	ECHO: FlowIcmpChoiceEnum("echo"),
}

func (obj *flowIcmp) Choice() FlowIcmpChoiceEnum {
	return FlowIcmpChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *flowIcmp) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *flowIcmp) SetChoice(value FlowIcmpChoiceEnum) FlowIcmp {
	intValue, ok := snappipb.FlowIcmp_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowIcmpChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowIcmp_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "echo" {
		obj.obj.Echo = nil
	}

	return obj
}

// Echo returns a FlowIcmpEcho
//  description is TBD
func (obj *flowIcmp) Echo() FlowIcmpEcho {
	obj.SetChoice(FlowIcmpChoice.ECHO)
	if obj.obj.Echo == nil {
		obj.obj.Echo = NewFlowIcmpEcho().Msg()
	}
	return &flowIcmpEcho{obj: obj.obj.Echo}
}

// Echo returns a FlowIcmpEcho
//  description is TBD
func (obj *flowIcmp) HasEcho() bool {
	return obj.obj.Echo != nil
}

// SetEcho sets the FlowIcmpEcho value in the FlowIcmp object
//  description is TBD
func (obj *flowIcmp) SetEcho(value FlowIcmpEcho) FlowIcmp {
	obj.Echo().SetMsg(value.Msg())
	obj.SetChoice(FlowIcmpChoice.ECHO)
	return obj
}

func (obj *flowIcmp) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Echo != nil {
		obj.Echo().validateObj(set_default)
	}
}

func (obj *flowIcmp) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(FlowIcmpChoice.ECHO)
		obj.Echo()
	}

}

type flowIcmpv6 struct {
	obj *snappipb.FlowIcmpv6
}

func NewFlowIcmpv6() FlowIcmpv6 {
	obj := flowIcmpv6{obj: &snappipb.FlowIcmpv6{}}
	obj.setDefault()
	return &obj
}

func (obj *flowIcmpv6) Msg() *snappipb.FlowIcmpv6 {
	return obj.obj
}

func (obj *flowIcmpv6) SetMsg(msg *snappipb.FlowIcmpv6) FlowIcmpv6 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowIcmpv6) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowIcmpv6) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIcmpv6) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpv6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIcmpv6) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpv6) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowIcmpv6) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowIcmpv6 interface {
	Msg() *snappipb.FlowIcmpv6
	SetMsg(*snappipb.FlowIcmpv6) FlowIcmpv6
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() FlowIcmpv6ChoiceEnum
	SetChoice(value FlowIcmpv6ChoiceEnum) FlowIcmpv6
	HasChoice() bool
	Echo() FlowIcmpv6Echo
	SetEcho(value FlowIcmpv6Echo) FlowIcmpv6
	HasEcho() bool
}

type FlowIcmpv6ChoiceEnum string

var FlowIcmpv6Choice = struct {
	ECHO FlowIcmpv6ChoiceEnum
}{
	ECHO: FlowIcmpv6ChoiceEnum("echo"),
}

func (obj *flowIcmpv6) Choice() FlowIcmpv6ChoiceEnum {
	return FlowIcmpv6ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *flowIcmpv6) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *flowIcmpv6) SetChoice(value FlowIcmpv6ChoiceEnum) FlowIcmpv6 {
	intValue, ok := snappipb.FlowIcmpv6_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowIcmpv6ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowIcmpv6_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "echo" {
		obj.obj.Echo = nil
	}

	return obj
}

// Echo returns a FlowIcmpv6Echo
//  description is TBD
func (obj *flowIcmpv6) Echo() FlowIcmpv6Echo {
	obj.SetChoice(FlowIcmpv6Choice.ECHO)
	if obj.obj.Echo == nil {
		obj.obj.Echo = NewFlowIcmpv6Echo().Msg()
	}
	return &flowIcmpv6Echo{obj: obj.obj.Echo}
}

// Echo returns a FlowIcmpv6Echo
//  description is TBD
func (obj *flowIcmpv6) HasEcho() bool {
	return obj.obj.Echo != nil
}

// SetEcho sets the FlowIcmpv6Echo value in the FlowIcmpv6 object
//  description is TBD
func (obj *flowIcmpv6) SetEcho(value FlowIcmpv6Echo) FlowIcmpv6 {
	obj.Echo().SetMsg(value.Msg())
	obj.SetChoice(FlowIcmpv6Choice.ECHO)
	return obj
}

func (obj *flowIcmpv6) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Echo != nil {
		obj.Echo().validateObj(set_default)
	}
}

func (obj *flowIcmpv6) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(FlowIcmpv6Choice.ECHO)
		obj.Echo()
	}

}

type flowPpp struct {
	obj *snappipb.FlowPpp
}

func NewFlowPpp() FlowPpp {
	obj := flowPpp{obj: &snappipb.FlowPpp{}}
	obj.setDefault()
	return &obj
}

func (obj *flowPpp) Msg() *snappipb.FlowPpp {
	return obj.obj
}

func (obj *flowPpp) SetMsg(msg *snappipb.FlowPpp) FlowPpp {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowPpp) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowPpp) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowPpp) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPpp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowPpp) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPpp) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowPpp) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowPpp interface {
	Msg() *snappipb.FlowPpp
	SetMsg(*snappipb.FlowPpp) FlowPpp
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Address() PatternFlowPppAddress
	SetAddress(value PatternFlowPppAddress) FlowPpp
	HasAddress() bool
	Control() PatternFlowPppControl
	SetControl(value PatternFlowPppControl) FlowPpp
	HasControl() bool
	ProtocolType() PatternFlowPppProtocolType
	SetProtocolType(value PatternFlowPppProtocolType) FlowPpp
	HasProtocolType() bool
}

// Address returns a PatternFlowPppAddress
//  description is TBD
func (obj *flowPpp) Address() PatternFlowPppAddress {
	if obj.obj.Address == nil {
		obj.obj.Address = NewPatternFlowPppAddress().Msg()
	}
	return &patternFlowPppAddress{obj: obj.obj.Address}
}

// Address returns a PatternFlowPppAddress
//  description is TBD
func (obj *flowPpp) HasAddress() bool {
	return obj.obj.Address != nil
}

// SetAddress sets the PatternFlowPppAddress value in the FlowPpp object
//  description is TBD
func (obj *flowPpp) SetAddress(value PatternFlowPppAddress) FlowPpp {
	obj.Address().SetMsg(value.Msg())

	return obj
}

// Control returns a PatternFlowPppControl
//  description is TBD
func (obj *flowPpp) Control() PatternFlowPppControl {
	if obj.obj.Control == nil {
		obj.obj.Control = NewPatternFlowPppControl().Msg()
	}
	return &patternFlowPppControl{obj: obj.obj.Control}
}

// Control returns a PatternFlowPppControl
//  description is TBD
func (obj *flowPpp) HasControl() bool {
	return obj.obj.Control != nil
}

// SetControl sets the PatternFlowPppControl value in the FlowPpp object
//  description is TBD
func (obj *flowPpp) SetControl(value PatternFlowPppControl) FlowPpp {
	obj.Control().SetMsg(value.Msg())

	return obj
}

// ProtocolType returns a PatternFlowPppProtocolType
//  description is TBD
func (obj *flowPpp) ProtocolType() PatternFlowPppProtocolType {
	if obj.obj.ProtocolType == nil {
		obj.obj.ProtocolType = NewPatternFlowPppProtocolType().Msg()
	}
	return &patternFlowPppProtocolType{obj: obj.obj.ProtocolType}
}

// ProtocolType returns a PatternFlowPppProtocolType
//  description is TBD
func (obj *flowPpp) HasProtocolType() bool {
	return obj.obj.ProtocolType != nil
}

// SetProtocolType sets the PatternFlowPppProtocolType value in the FlowPpp object
//  description is TBD
func (obj *flowPpp) SetProtocolType(value PatternFlowPppProtocolType) FlowPpp {
	obj.ProtocolType().SetMsg(value.Msg())

	return obj
}

func (obj *flowPpp) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Address != nil {
		obj.Address().validateObj(set_default)
	}

	if obj.obj.Control != nil {
		obj.Control().validateObj(set_default)
	}

	if obj.obj.ProtocolType != nil {
		obj.ProtocolType().validateObj(set_default)
	}
}

func (obj *flowPpp) setDefault() {

}

type flowIgmpv1 struct {
	obj *snappipb.FlowIgmpv1
}

func NewFlowIgmpv1() FlowIgmpv1 {
	obj := flowIgmpv1{obj: &snappipb.FlowIgmpv1{}}
	obj.setDefault()
	return &obj
}

func (obj *flowIgmpv1) Msg() *snappipb.FlowIgmpv1 {
	return obj.obj
}

func (obj *flowIgmpv1) SetMsg(msg *snappipb.FlowIgmpv1) FlowIgmpv1 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowIgmpv1) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowIgmpv1) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIgmpv1) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIgmpv1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIgmpv1) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIgmpv1) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowIgmpv1) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowIgmpv1 interface {
	Msg() *snappipb.FlowIgmpv1
	SetMsg(*snappipb.FlowIgmpv1) FlowIgmpv1
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Version() PatternFlowIgmpv1Version
	SetVersion(value PatternFlowIgmpv1Version) FlowIgmpv1
	HasVersion() bool
	Type() PatternFlowIgmpv1Type
	SetType(value PatternFlowIgmpv1Type) FlowIgmpv1
	HasType() bool
	Unused() PatternFlowIgmpv1Unused
	SetUnused(value PatternFlowIgmpv1Unused) FlowIgmpv1
	HasUnused() bool
	Checksum() PatternFlowIgmpv1Checksum
	SetChecksum(value PatternFlowIgmpv1Checksum) FlowIgmpv1
	HasChecksum() bool
	GroupAddress() PatternFlowIgmpv1GroupAddress
	SetGroupAddress(value PatternFlowIgmpv1GroupAddress) FlowIgmpv1
	HasGroupAddress() bool
}

// Version returns a PatternFlowIgmpv1Version
//  description is TBD
func (obj *flowIgmpv1) Version() PatternFlowIgmpv1Version {
	if obj.obj.Version == nil {
		obj.obj.Version = NewPatternFlowIgmpv1Version().Msg()
	}
	return &patternFlowIgmpv1Version{obj: obj.obj.Version}
}

// Version returns a PatternFlowIgmpv1Version
//  description is TBD
func (obj *flowIgmpv1) HasVersion() bool {
	return obj.obj.Version != nil
}

// SetVersion sets the PatternFlowIgmpv1Version value in the FlowIgmpv1 object
//  description is TBD
func (obj *flowIgmpv1) SetVersion(value PatternFlowIgmpv1Version) FlowIgmpv1 {
	obj.Version().SetMsg(value.Msg())

	return obj
}

// Type returns a PatternFlowIgmpv1Type
//  description is TBD
func (obj *flowIgmpv1) Type() PatternFlowIgmpv1Type {
	if obj.obj.Type == nil {
		obj.obj.Type = NewPatternFlowIgmpv1Type().Msg()
	}
	return &patternFlowIgmpv1Type{obj: obj.obj.Type}
}

// Type returns a PatternFlowIgmpv1Type
//  description is TBD
func (obj *flowIgmpv1) HasType() bool {
	return obj.obj.Type != nil
}

// SetType sets the PatternFlowIgmpv1Type value in the FlowIgmpv1 object
//  description is TBD
func (obj *flowIgmpv1) SetType(value PatternFlowIgmpv1Type) FlowIgmpv1 {
	obj.Type().SetMsg(value.Msg())

	return obj
}

// Unused returns a PatternFlowIgmpv1Unused
//  description is TBD
func (obj *flowIgmpv1) Unused() PatternFlowIgmpv1Unused {
	if obj.obj.Unused == nil {
		obj.obj.Unused = NewPatternFlowIgmpv1Unused().Msg()
	}
	return &patternFlowIgmpv1Unused{obj: obj.obj.Unused}
}

// Unused returns a PatternFlowIgmpv1Unused
//  description is TBD
func (obj *flowIgmpv1) HasUnused() bool {
	return obj.obj.Unused != nil
}

// SetUnused sets the PatternFlowIgmpv1Unused value in the FlowIgmpv1 object
//  description is TBD
func (obj *flowIgmpv1) SetUnused(value PatternFlowIgmpv1Unused) FlowIgmpv1 {
	obj.Unused().SetMsg(value.Msg())

	return obj
}

// Checksum returns a PatternFlowIgmpv1Checksum
//  description is TBD
func (obj *flowIgmpv1) Checksum() PatternFlowIgmpv1Checksum {
	if obj.obj.Checksum == nil {
		obj.obj.Checksum = NewPatternFlowIgmpv1Checksum().Msg()
	}
	return &patternFlowIgmpv1Checksum{obj: obj.obj.Checksum}
}

// Checksum returns a PatternFlowIgmpv1Checksum
//  description is TBD
func (obj *flowIgmpv1) HasChecksum() bool {
	return obj.obj.Checksum != nil
}

// SetChecksum sets the PatternFlowIgmpv1Checksum value in the FlowIgmpv1 object
//  description is TBD
func (obj *flowIgmpv1) SetChecksum(value PatternFlowIgmpv1Checksum) FlowIgmpv1 {
	obj.Checksum().SetMsg(value.Msg())

	return obj
}

// GroupAddress returns a PatternFlowIgmpv1GroupAddress
//  description is TBD
func (obj *flowIgmpv1) GroupAddress() PatternFlowIgmpv1GroupAddress {
	if obj.obj.GroupAddress == nil {
		obj.obj.GroupAddress = NewPatternFlowIgmpv1GroupAddress().Msg()
	}
	return &patternFlowIgmpv1GroupAddress{obj: obj.obj.GroupAddress}
}

// GroupAddress returns a PatternFlowIgmpv1GroupAddress
//  description is TBD
func (obj *flowIgmpv1) HasGroupAddress() bool {
	return obj.obj.GroupAddress != nil
}

// SetGroupAddress sets the PatternFlowIgmpv1GroupAddress value in the FlowIgmpv1 object
//  description is TBD
func (obj *flowIgmpv1) SetGroupAddress(value PatternFlowIgmpv1GroupAddress) FlowIgmpv1 {
	obj.GroupAddress().SetMsg(value.Msg())

	return obj
}

func (obj *flowIgmpv1) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Version != nil {
		obj.Version().validateObj(set_default)
	}

	if obj.obj.Type != nil {
		obj.Type().validateObj(set_default)
	}

	if obj.obj.Unused != nil {
		obj.Unused().validateObj(set_default)
	}

	if obj.obj.Checksum != nil {
		obj.Checksum().validateObj(set_default)
	}

	if obj.obj.GroupAddress != nil {
		obj.GroupAddress().validateObj(set_default)
	}
}

func (obj *flowIgmpv1) setDefault() {

}

type flowSizeIncrement struct {
	obj *snappipb.FlowSizeIncrement
}

func NewFlowSizeIncrement() FlowSizeIncrement {
	obj := flowSizeIncrement{obj: &snappipb.FlowSizeIncrement{}}
	obj.setDefault()
	return &obj
}

func (obj *flowSizeIncrement) Msg() *snappipb.FlowSizeIncrement {
	return obj.obj
}

func (obj *flowSizeIncrement) SetMsg(msg *snappipb.FlowSizeIncrement) FlowSizeIncrement {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowSizeIncrement) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowSizeIncrement) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowSizeIncrement) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSizeIncrement) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowSizeIncrement) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSizeIncrement) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowSizeIncrement) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowSizeIncrement interface {
	Msg() *snappipb.FlowSizeIncrement
	SetMsg(*snappipb.FlowSizeIncrement) FlowSizeIncrement
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) FlowSizeIncrement
	HasStart() bool
	End() int32
	SetEnd(value int32) FlowSizeIncrement
	HasEnd() bool
	Step() int32
	SetStep(value int32) FlowSizeIncrement
	HasStep() bool
}

// Start returns a int32
//  Starting frame size in bytes
func (obj *flowSizeIncrement) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 64
	}

	return *obj.obj.Start

}

// Start returns a int32
//  Starting frame size in bytes
func (obj *flowSizeIncrement) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the FlowSizeIncrement object
//  Starting frame size in bytes
func (obj *flowSizeIncrement) SetStart(value int32) FlowSizeIncrement {
	obj.obj.Start = &value

	return obj
}

// End returns a int32
//  Ending frame size in bytes
func (obj *flowSizeIncrement) End() int32 {

	if obj.obj.End == nil {
		*obj.obj.End = 1518
	}

	return *obj.obj.End

}

// End returns a int32
//  Ending frame size in bytes
func (obj *flowSizeIncrement) HasEnd() bool {
	return obj.obj.End != nil
}

// SetEnd sets the int32 value in the FlowSizeIncrement object
//  Ending frame size in bytes
func (obj *flowSizeIncrement) SetEnd(value int32) FlowSizeIncrement {
	obj.obj.End = &value

	return obj
}

// Step returns a int32
//  Step frame size in bytes
func (obj *flowSizeIncrement) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  Step frame size in bytes
func (obj *flowSizeIncrement) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the FlowSizeIncrement object
//  Step frame size in bytes
func (obj *flowSizeIncrement) SetStep(value int32) FlowSizeIncrement {
	obj.obj.Step = &value

	return obj
}

func (obj *flowSizeIncrement) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 1 {
			validation = append(
				validation, fmt.Sprintf("1 <= FlowSizeIncrement.Start <= any but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.End != nil {
		if *obj.obj.End < 64 {
			validation = append(
				validation, fmt.Sprintf("64 <= FlowSizeIncrement.End <= any but Got %d", *obj.obj.End))
		}

	}

}

func (obj *flowSizeIncrement) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(64)
	}
	if obj.obj.End == nil {
		obj.SetEnd(1518)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}

}

type flowSizeRandom struct {
	obj *snappipb.FlowSizeRandom
}

func NewFlowSizeRandom() FlowSizeRandom {
	obj := flowSizeRandom{obj: &snappipb.FlowSizeRandom{}}
	obj.setDefault()
	return &obj
}

func (obj *flowSizeRandom) Msg() *snappipb.FlowSizeRandom {
	return obj.obj
}

func (obj *flowSizeRandom) SetMsg(msg *snappipb.FlowSizeRandom) FlowSizeRandom {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowSizeRandom) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowSizeRandom) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowSizeRandom) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSizeRandom) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowSizeRandom) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSizeRandom) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowSizeRandom) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowSizeRandom interface {
	Msg() *snappipb.FlowSizeRandom
	SetMsg(*snappipb.FlowSizeRandom) FlowSizeRandom
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Min() int32
	SetMin(value int32) FlowSizeRandom
	HasMin() bool
	Max() int32
	SetMax(value int32) FlowSizeRandom
	HasMax() bool
}

// Min returns a int32
//  description is TBD
func (obj *flowSizeRandom) Min() int32 {

	if obj.obj.Min == nil {
		*obj.obj.Min = 64
	}

	return *obj.obj.Min

}

// Min returns a int32
//  description is TBD
func (obj *flowSizeRandom) HasMin() bool {
	return obj.obj.Min != nil
}

// SetMin sets the int32 value in the FlowSizeRandom object
//  description is TBD
func (obj *flowSizeRandom) SetMin(value int32) FlowSizeRandom {
	obj.obj.Min = &value

	return obj
}

// Max returns a int32
//  description is TBD
func (obj *flowSizeRandom) Max() int32 {

	if obj.obj.Max == nil {
		*obj.obj.Max = 1518
	}

	return *obj.obj.Max

}

// Max returns a int32
//  description is TBD
func (obj *flowSizeRandom) HasMax() bool {
	return obj.obj.Max != nil
}

// SetMax sets the int32 value in the FlowSizeRandom object
//  description is TBD
func (obj *flowSizeRandom) SetMax(value int32) FlowSizeRandom {
	obj.obj.Max = &value

	return obj
}

func (obj *flowSizeRandom) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *flowSizeRandom) setDefault() {
	if obj.obj.Min == nil {
		obj.SetMin(64)
	}
	if obj.obj.Max == nil {
		obj.SetMax(1518)
	}

}

type flowFixedPackets struct {
	obj *snappipb.FlowFixedPackets
}

func NewFlowFixedPackets() FlowFixedPackets {
	obj := flowFixedPackets{obj: &snappipb.FlowFixedPackets{}}
	obj.setDefault()
	return &obj
}

func (obj *flowFixedPackets) Msg() *snappipb.FlowFixedPackets {
	return obj.obj
}

func (obj *flowFixedPackets) SetMsg(msg *snappipb.FlowFixedPackets) FlowFixedPackets {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowFixedPackets) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowFixedPackets) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowFixedPackets) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowFixedPackets) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowFixedPackets) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowFixedPackets) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowFixedPackets) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowFixedPackets interface {
	Msg() *snappipb.FlowFixedPackets
	SetMsg(*snappipb.FlowFixedPackets) FlowFixedPackets
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Packets() int32
	SetPackets(value int32) FlowFixedPackets
	HasPackets() bool
	Gap() int32
	SetGap(value int32) FlowFixedPackets
	HasGap() bool
	Delay() FlowDelay
	SetDelay(value FlowDelay) FlowFixedPackets
	HasDelay() bool
}

// Packets returns a int32
//  Stop transmit of the flow after this number of packets.
func (obj *flowFixedPackets) Packets() int32 {

	if obj.obj.Packets == nil {
		*obj.obj.Packets = 1
	}

	return *obj.obj.Packets

}

// Packets returns a int32
//  Stop transmit of the flow after this number of packets.
func (obj *flowFixedPackets) HasPackets() bool {
	return obj.obj.Packets != nil
}

// SetPackets sets the int32 value in the FlowFixedPackets object
//  Stop transmit of the flow after this number of packets.
func (obj *flowFixedPackets) SetPackets(value int32) FlowFixedPackets {
	obj.obj.Packets = &value

	return obj
}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowFixedPackets) Gap() int32 {

	if obj.obj.Gap == nil {
		*obj.obj.Gap = 12
	}

	return *obj.obj.Gap

}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowFixedPackets) HasGap() bool {
	return obj.obj.Gap != nil
}

// SetGap sets the int32 value in the FlowFixedPackets object
//  The minimum gap between packets expressed as bytes.
func (obj *flowFixedPackets) SetGap(value int32) FlowFixedPackets {
	obj.obj.Gap = &value

	return obj
}

// Delay returns a FlowDelay
//  description is TBD
func (obj *flowFixedPackets) Delay() FlowDelay {
	if obj.obj.Delay == nil {
		obj.obj.Delay = NewFlowDelay().Msg()
	}
	return &flowDelay{obj: obj.obj.Delay}
}

// Delay returns a FlowDelay
//  description is TBD
func (obj *flowFixedPackets) HasDelay() bool {
	return obj.obj.Delay != nil
}

// SetDelay sets the FlowDelay value in the FlowFixedPackets object
//  description is TBD
func (obj *flowFixedPackets) SetDelay(value FlowDelay) FlowFixedPackets {
	obj.Delay().SetMsg(value.Msg())

	return obj
}

func (obj *flowFixedPackets) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Packets != nil {
		if *obj.obj.Packets < 1 {
			validation = append(
				validation, fmt.Sprintf("1 <= FlowFixedPackets.Packets <= any but Got %d", *obj.obj.Packets))
		}

	}

	if obj.obj.Gap != nil {
		if *obj.obj.Gap < 0 {
			validation = append(
				validation, fmt.Sprintf("0 <= FlowFixedPackets.Gap <= any but Got %d", *obj.obj.Gap))
		}

	}

	if obj.obj.Delay != nil {
		obj.Delay().validateObj(set_default)
	}
}

func (obj *flowFixedPackets) setDefault() {
	if obj.obj.Packets == nil {
		obj.SetPackets(1)
	}
	if obj.obj.Gap == nil {
		obj.SetGap(12)
	}

}

type flowFixedSeconds struct {
	obj *snappipb.FlowFixedSeconds
}

func NewFlowFixedSeconds() FlowFixedSeconds {
	obj := flowFixedSeconds{obj: &snappipb.FlowFixedSeconds{}}
	obj.setDefault()
	return &obj
}

func (obj *flowFixedSeconds) Msg() *snappipb.FlowFixedSeconds {
	return obj.obj
}

func (obj *flowFixedSeconds) SetMsg(msg *snappipb.FlowFixedSeconds) FlowFixedSeconds {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowFixedSeconds) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowFixedSeconds) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowFixedSeconds) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowFixedSeconds) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowFixedSeconds) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowFixedSeconds) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowFixedSeconds) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowFixedSeconds interface {
	Msg() *snappipb.FlowFixedSeconds
	SetMsg(*snappipb.FlowFixedSeconds) FlowFixedSeconds
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Seconds() float32
	SetSeconds(value float32) FlowFixedSeconds
	HasSeconds() bool
	Gap() int32
	SetGap(value int32) FlowFixedSeconds
	HasGap() bool
	Delay() FlowDelay
	SetDelay(value FlowDelay) FlowFixedSeconds
	HasDelay() bool
}

// Seconds returns a float32
//  Stop transmit of the flow after this number of seconds.
func (obj *flowFixedSeconds) Seconds() float32 {

	if obj.obj.Seconds == nil {
		*obj.obj.Seconds = 1
	}

	return *obj.obj.Seconds

}

// Seconds returns a float32
//  Stop transmit of the flow after this number of seconds.
func (obj *flowFixedSeconds) HasSeconds() bool {
	return obj.obj.Seconds != nil
}

// SetSeconds sets the float32 value in the FlowFixedSeconds object
//  Stop transmit of the flow after this number of seconds.
func (obj *flowFixedSeconds) SetSeconds(value float32) FlowFixedSeconds {
	obj.obj.Seconds = &value

	return obj
}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowFixedSeconds) Gap() int32 {

	if obj.obj.Gap == nil {
		*obj.obj.Gap = 12
	}

	return *obj.obj.Gap

}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowFixedSeconds) HasGap() bool {
	return obj.obj.Gap != nil
}

// SetGap sets the int32 value in the FlowFixedSeconds object
//  The minimum gap between packets expressed as bytes.
func (obj *flowFixedSeconds) SetGap(value int32) FlowFixedSeconds {
	obj.obj.Gap = &value

	return obj
}

// Delay returns a FlowDelay
//  description is TBD
func (obj *flowFixedSeconds) Delay() FlowDelay {
	if obj.obj.Delay == nil {
		obj.obj.Delay = NewFlowDelay().Msg()
	}
	return &flowDelay{obj: obj.obj.Delay}
}

// Delay returns a FlowDelay
//  description is TBD
func (obj *flowFixedSeconds) HasDelay() bool {
	return obj.obj.Delay != nil
}

// SetDelay sets the FlowDelay value in the FlowFixedSeconds object
//  description is TBD
func (obj *flowFixedSeconds) SetDelay(value FlowDelay) FlowFixedSeconds {
	obj.Delay().SetMsg(value.Msg())

	return obj
}

func (obj *flowFixedSeconds) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Gap != nil {
		if *obj.obj.Gap < 0 {
			validation = append(
				validation, fmt.Sprintf("0 <= FlowFixedSeconds.Gap <= any but Got %d", *obj.obj.Gap))
		}

	}

	if obj.obj.Delay != nil {
		obj.Delay().validateObj(set_default)
	}
}

func (obj *flowFixedSeconds) setDefault() {
	if obj.obj.Seconds == nil {
		obj.SetSeconds(1)
	}
	if obj.obj.Gap == nil {
		obj.SetGap(12)
	}

}

type flowBurst struct {
	obj *snappipb.FlowBurst
}

func NewFlowBurst() FlowBurst {
	obj := flowBurst{obj: &snappipb.FlowBurst{}}
	obj.setDefault()
	return &obj
}

func (obj *flowBurst) Msg() *snappipb.FlowBurst {
	return obj.obj
}

func (obj *flowBurst) SetMsg(msg *snappipb.FlowBurst) FlowBurst {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowBurst) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowBurst) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowBurst) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowBurst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowBurst) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowBurst) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowBurst) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowBurst interface {
	Msg() *snappipb.FlowBurst
	SetMsg(*snappipb.FlowBurst) FlowBurst
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Bursts() int32
	SetBursts(value int32) FlowBurst
	HasBursts() bool
	Packets() int32
	SetPackets(value int32) FlowBurst
	HasPackets() bool
	Gap() int32
	SetGap(value int32) FlowBurst
	HasGap() bool
	InterBurstGap() FlowDurationInterBurstGap
	SetInterBurstGap(value FlowDurationInterBurstGap) FlowBurst
	HasInterBurstGap() bool
}

// Bursts returns a int32
//  The number of packet bursts transmitted per flow.
//  A value of 0 implies continuous burst of packets.
func (obj *flowBurst) Bursts() int32 {

	if obj.obj.Bursts == nil {
		*obj.obj.Bursts = 0
	}

	return *obj.obj.Bursts

}

// Bursts returns a int32
//  The number of packet bursts transmitted per flow.
//  A value of 0 implies continuous burst of packets.
func (obj *flowBurst) HasBursts() bool {
	return obj.obj.Bursts != nil
}

// SetBursts sets the int32 value in the FlowBurst object
//  The number of packet bursts transmitted per flow.
//  A value of 0 implies continuous burst of packets.
func (obj *flowBurst) SetBursts(value int32) FlowBurst {
	obj.obj.Bursts = &value

	return obj
}

// Packets returns a int32
//  The number of packets transmitted per burst.
func (obj *flowBurst) Packets() int32 {

	if obj.obj.Packets == nil {
		*obj.obj.Packets = 1
	}

	return *obj.obj.Packets

}

// Packets returns a int32
//  The number of packets transmitted per burst.
func (obj *flowBurst) HasPackets() bool {
	return obj.obj.Packets != nil
}

// SetPackets sets the int32 value in the FlowBurst object
//  The number of packets transmitted per burst.
func (obj *flowBurst) SetPackets(value int32) FlowBurst {
	obj.obj.Packets = &value

	return obj
}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowBurst) Gap() int32 {

	if obj.obj.Gap == nil {
		*obj.obj.Gap = 12
	}

	return *obj.obj.Gap

}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowBurst) HasGap() bool {
	return obj.obj.Gap != nil
}

// SetGap sets the int32 value in the FlowBurst object
//  The minimum gap between packets expressed as bytes.
func (obj *flowBurst) SetGap(value int32) FlowBurst {
	obj.obj.Gap = &value

	return obj
}

// InterBurstGap returns a FlowDurationInterBurstGap
//  description is TBD
func (obj *flowBurst) InterBurstGap() FlowDurationInterBurstGap {
	if obj.obj.InterBurstGap == nil {
		obj.obj.InterBurstGap = NewFlowDurationInterBurstGap().Msg()
	}
	return &flowDurationInterBurstGap{obj: obj.obj.InterBurstGap}
}

// InterBurstGap returns a FlowDurationInterBurstGap
//  description is TBD
func (obj *flowBurst) HasInterBurstGap() bool {
	return obj.obj.InterBurstGap != nil
}

// SetInterBurstGap sets the FlowDurationInterBurstGap value in the FlowBurst object
//  description is TBD
func (obj *flowBurst) SetInterBurstGap(value FlowDurationInterBurstGap) FlowBurst {
	obj.InterBurstGap().SetMsg(value.Msg())

	return obj
}

func (obj *flowBurst) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Bursts != nil {
		if *obj.obj.Bursts < 0 {
			validation = append(
				validation, fmt.Sprintf("0 <= FlowBurst.Bursts <= any but Got %d", *obj.obj.Bursts))
		}

	}

	if obj.obj.Packets != nil {
		if *obj.obj.Packets < 1 {
			validation = append(
				validation, fmt.Sprintf("1 <= FlowBurst.Packets <= any but Got %d", *obj.obj.Packets))
		}

	}

	if obj.obj.Gap != nil {
		if *obj.obj.Gap < 0 {
			validation = append(
				validation, fmt.Sprintf("0 <= FlowBurst.Gap <= any but Got %d", *obj.obj.Gap))
		}

	}

	if obj.obj.InterBurstGap != nil {
		obj.InterBurstGap().validateObj(set_default)
	}
}

func (obj *flowBurst) setDefault() {
	if obj.obj.Bursts == nil {
		obj.SetBursts(0)
	}
	if obj.obj.Packets == nil {
		obj.SetPackets(1)
	}
	if obj.obj.Gap == nil {
		obj.SetGap(12)
	}

}

type flowContinuous struct {
	obj *snappipb.FlowContinuous
}

func NewFlowContinuous() FlowContinuous {
	obj := flowContinuous{obj: &snappipb.FlowContinuous{}}
	obj.setDefault()
	return &obj
}

func (obj *flowContinuous) Msg() *snappipb.FlowContinuous {
	return obj.obj
}

func (obj *flowContinuous) SetMsg(msg *snappipb.FlowContinuous) FlowContinuous {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowContinuous) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowContinuous) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowContinuous) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowContinuous) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowContinuous) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowContinuous) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowContinuous) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowContinuous interface {
	Msg() *snappipb.FlowContinuous
	SetMsg(*snappipb.FlowContinuous) FlowContinuous
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Gap() int32
	SetGap(value int32) FlowContinuous
	HasGap() bool
	Delay() FlowDelay
	SetDelay(value FlowDelay) FlowContinuous
	HasDelay() bool
}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowContinuous) Gap() int32 {

	if obj.obj.Gap == nil {
		*obj.obj.Gap = 12
	}

	return *obj.obj.Gap

}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowContinuous) HasGap() bool {
	return obj.obj.Gap != nil
}

// SetGap sets the int32 value in the FlowContinuous object
//  The minimum gap between packets expressed as bytes.
func (obj *flowContinuous) SetGap(value int32) FlowContinuous {
	obj.obj.Gap = &value

	return obj
}

// Delay returns a FlowDelay
//  description is TBD
func (obj *flowContinuous) Delay() FlowDelay {
	if obj.obj.Delay == nil {
		obj.obj.Delay = NewFlowDelay().Msg()
	}
	return &flowDelay{obj: obj.obj.Delay}
}

// Delay returns a FlowDelay
//  description is TBD
func (obj *flowContinuous) HasDelay() bool {
	return obj.obj.Delay != nil
}

// SetDelay sets the FlowDelay value in the FlowContinuous object
//  description is TBD
func (obj *flowContinuous) SetDelay(value FlowDelay) FlowContinuous {
	obj.Delay().SetMsg(value.Msg())

	return obj
}

func (obj *flowContinuous) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Gap != nil {
		if *obj.obj.Gap < 0 {
			validation = append(
				validation, fmt.Sprintf("0 <= FlowContinuous.Gap <= any but Got %d", *obj.obj.Gap))
		}

	}

	if obj.obj.Delay != nil {
		obj.Delay().validateObj(set_default)
	}
}

func (obj *flowContinuous) setDefault() {
	if obj.obj.Gap == nil {
		obj.SetGap(12)
	}

}

type flowLatencyMetrics struct {
	obj *snappipb.FlowLatencyMetrics
}

func NewFlowLatencyMetrics() FlowLatencyMetrics {
	obj := flowLatencyMetrics{obj: &snappipb.FlowLatencyMetrics{}}
	obj.setDefault()
	return &obj
}

func (obj *flowLatencyMetrics) Msg() *snappipb.FlowLatencyMetrics {
	return obj.obj
}

func (obj *flowLatencyMetrics) SetMsg(msg *snappipb.FlowLatencyMetrics) FlowLatencyMetrics {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowLatencyMetrics) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowLatencyMetrics) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowLatencyMetrics) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowLatencyMetrics) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowLatencyMetrics) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowLatencyMetrics) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowLatencyMetrics) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowLatencyMetrics interface {
	Msg() *snappipb.FlowLatencyMetrics
	SetMsg(*snappipb.FlowLatencyMetrics) FlowLatencyMetrics
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Enable() bool
	SetEnable(value bool) FlowLatencyMetrics
	HasEnable() bool
	Mode() FlowLatencyMetricsModeEnum
	SetMode(value FlowLatencyMetricsModeEnum) FlowLatencyMetrics
	HasMode() bool
}

// Enable returns a bool
//  True to enable latency metrics using timestamps.
//
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *flowLatencyMetrics) Enable() bool {

	if obj.obj.Enable == nil {
		*obj.obj.Enable = false
	}

	return *obj.obj.Enable

}

// Enable returns a bool
//  True to enable latency metrics using timestamps.
//
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *flowLatencyMetrics) HasEnable() bool {
	return obj.obj.Enable != nil
}

// SetEnable sets the bool value in the FlowLatencyMetrics object
//  True to enable latency metrics using timestamps.
//
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *flowLatencyMetrics) SetEnable(value bool) FlowLatencyMetrics {
	obj.obj.Enable = &value

	return obj
}

type FlowLatencyMetricsModeEnum string

var FlowLatencyMetricsMode = struct {
	STORE_FORWARD FlowLatencyMetricsModeEnum
	CUT_THROUGH   FlowLatencyMetricsModeEnum
}{
	STORE_FORWARD: FlowLatencyMetricsModeEnum("store_forward"),
	CUT_THROUGH:   FlowLatencyMetricsModeEnum("cut_through"),
}

func (obj *flowLatencyMetrics) Mode() FlowLatencyMetricsModeEnum {
	return FlowLatencyMetricsModeEnum(obj.obj.Mode.Enum().String())
}

// Mode returns a string
//  Select the type of latency measurement. The different types of
//  latency measurements are:
//
//
//  store_forward:
//  The time interval starting when the last bit of the frame leaves the
//  sending port and ending when the first bit of the frame is seen on
//  the receiving port (LIFO).  This is based on the RFC 1242 standard.
//
//
//  cut_through:
//  The time interval starting when the first bit of the frame leaves
//  the sending port and ending when the first bit of the frame is seen
//  on the receiving port (FIFO).  This is based on the RFC 1242
//  standard.
func (obj *flowLatencyMetrics) HasMode() bool {
	return obj.obj.Mode != nil
}

func (obj *flowLatencyMetrics) SetMode(value FlowLatencyMetricsModeEnum) FlowLatencyMetrics {
	intValue, ok := snappipb.FlowLatencyMetrics_Mode_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowLatencyMetricsModeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowLatencyMetrics_Mode_Enum(intValue)
	obj.obj.Mode = &enumValue

	return obj
}

func (obj *flowLatencyMetrics) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *flowLatencyMetrics) setDefault() {
	if obj.obj.Enable == nil {
		obj.SetEnable(false)
	}
	if obj.obj.Mode == nil {
		obj.SetMode(FlowLatencyMetricsMode.STORE_FORWARD)

	}

}

type flowMetricGroup struct {
	obj *snappipb.FlowMetricGroup
}

func NewFlowMetricGroup() FlowMetricGroup {
	obj := flowMetricGroup{obj: &snappipb.FlowMetricGroup{}}
	obj.setDefault()
	return &obj
}

func (obj *flowMetricGroup) Msg() *snappipb.FlowMetricGroup {
	return obj.obj
}

func (obj *flowMetricGroup) SetMsg(msg *snappipb.FlowMetricGroup) FlowMetricGroup {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowMetricGroup) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowMetricGroup) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowMetricGroup) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetricGroup) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowMetricGroup) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetricGroup) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowMetricGroup) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowMetricGroup interface {
	Msg() *snappipb.FlowMetricGroup
	SetMsg(*snappipb.FlowMetricGroup) FlowMetricGroup
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Name() string
	SetName(value string) FlowMetricGroup
	HasName() bool
	Value() string
	SetValue(value string) FlowMetricGroup
	HasValue() bool
}

// Name returns a string
//  Name of packet field metric group
func (obj *flowMetricGroup) Name() string {

	return *obj.obj.Name

}

// Name returns a string
//  Name of packet field metric group
func (obj *flowMetricGroup) HasName() bool {
	return obj.obj.Name != nil
}

// SetName sets the string value in the FlowMetricGroup object
//  Name of packet field metric group
func (obj *flowMetricGroup) SetName(value string) FlowMetricGroup {
	obj.obj.Name = &value

	return obj
}

// Value returns a string
//  Value of named packet field metric group
func (obj *flowMetricGroup) Value() string {

	return *obj.obj.Value

}

// Value returns a string
//  Value of named packet field metric group
func (obj *flowMetricGroup) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the FlowMetricGroup object
//  Value of named packet field metric group
func (obj *flowMetricGroup) SetValue(value string) FlowMetricGroup {
	obj.obj.Value = &value

	return obj
}

func (obj *flowMetricGroup) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *flowMetricGroup) setDefault() {

}

type metricTimestamp struct {
	obj *snappipb.MetricTimestamp
}

func NewMetricTimestamp() MetricTimestamp {
	obj := metricTimestamp{obj: &snappipb.MetricTimestamp{}}
	obj.setDefault()
	return &obj
}

func (obj *metricTimestamp) Msg() *snappipb.MetricTimestamp {
	return obj.obj
}

func (obj *metricTimestamp) SetMsg(msg *snappipb.MetricTimestamp) MetricTimestamp {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *metricTimestamp) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *metricTimestamp) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *metricTimestamp) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *metricTimestamp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *metricTimestamp) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *metricTimestamp) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *metricTimestamp) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type MetricTimestamp interface {
	Msg() *snappipb.MetricTimestamp
	SetMsg(*snappipb.MetricTimestamp) MetricTimestamp
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	FirstTimestampNs() float64
	SetFirstTimestampNs(value float64) MetricTimestamp
	HasFirstTimestampNs() bool
	LastTimestampNs() float64
	SetLastTimestampNs(value float64) MetricTimestamp
	HasLastTimestampNs() bool
}

// FirstTimestampNs returns a float64
//  First timestamp in nanoseconds
func (obj *metricTimestamp) FirstTimestampNs() float64 {

	return *obj.obj.FirstTimestampNs

}

// FirstTimestampNs returns a float64
//  First timestamp in nanoseconds
func (obj *metricTimestamp) HasFirstTimestampNs() bool {
	return obj.obj.FirstTimestampNs != nil
}

// SetFirstTimestampNs sets the float64 value in the MetricTimestamp object
//  First timestamp in nanoseconds
func (obj *metricTimestamp) SetFirstTimestampNs(value float64) MetricTimestamp {
	obj.obj.FirstTimestampNs = &value

	return obj
}

// LastTimestampNs returns a float64
//  Last timestamp in nanoseconds
func (obj *metricTimestamp) LastTimestampNs() float64 {

	return *obj.obj.LastTimestampNs

}

// LastTimestampNs returns a float64
//  Last timestamp in nanoseconds
func (obj *metricTimestamp) HasLastTimestampNs() bool {
	return obj.obj.LastTimestampNs != nil
}

// SetLastTimestampNs sets the float64 value in the MetricTimestamp object
//  Last timestamp in nanoseconds
func (obj *metricTimestamp) SetLastTimestampNs(value float64) MetricTimestamp {
	obj.obj.LastTimestampNs = &value

	return obj
}

func (obj *metricTimestamp) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *metricTimestamp) setDefault() {

}

type metricLatency struct {
	obj *snappipb.MetricLatency
}

func NewMetricLatency() MetricLatency {
	obj := metricLatency{obj: &snappipb.MetricLatency{}}
	obj.setDefault()
	return &obj
}

func (obj *metricLatency) Msg() *snappipb.MetricLatency {
	return obj.obj
}

func (obj *metricLatency) SetMsg(msg *snappipb.MetricLatency) MetricLatency {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *metricLatency) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *metricLatency) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *metricLatency) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *metricLatency) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *metricLatency) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *metricLatency) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *metricLatency) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type MetricLatency interface {
	Msg() *snappipb.MetricLatency
	SetMsg(*snappipb.MetricLatency) MetricLatency
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	MinimumNs() float64
	SetMinimumNs(value float64) MetricLatency
	HasMinimumNs() bool
	MaximumNs() float64
	SetMaximumNs(value float64) MetricLatency
	HasMaximumNs() bool
	AverageNs() float64
	SetAverageNs(value float64) MetricLatency
	HasAverageNs() bool
}

// MinimumNs returns a float64
//  Minimum latency in nanoseconds
func (obj *metricLatency) MinimumNs() float64 {

	return *obj.obj.MinimumNs

}

// MinimumNs returns a float64
//  Minimum latency in nanoseconds
func (obj *metricLatency) HasMinimumNs() bool {
	return obj.obj.MinimumNs != nil
}

// SetMinimumNs sets the float64 value in the MetricLatency object
//  Minimum latency in nanoseconds
func (obj *metricLatency) SetMinimumNs(value float64) MetricLatency {
	obj.obj.MinimumNs = &value

	return obj
}

// MaximumNs returns a float64
//  Maximum latency in nanoseconds
func (obj *metricLatency) MaximumNs() float64 {

	return *obj.obj.MaximumNs

}

// MaximumNs returns a float64
//  Maximum latency in nanoseconds
func (obj *metricLatency) HasMaximumNs() bool {
	return obj.obj.MaximumNs != nil
}

// SetMaximumNs sets the float64 value in the MetricLatency object
//  Maximum latency in nanoseconds
func (obj *metricLatency) SetMaximumNs(value float64) MetricLatency {
	obj.obj.MaximumNs = &value

	return obj
}

// AverageNs returns a float64
//  Average latency in nanoseconds
func (obj *metricLatency) AverageNs() float64 {

	return *obj.obj.AverageNs

}

// AverageNs returns a float64
//  Average latency in nanoseconds
func (obj *metricLatency) HasAverageNs() bool {
	return obj.obj.AverageNs != nil
}

// SetAverageNs sets the float64 value in the MetricLatency object
//  Average latency in nanoseconds
func (obj *metricLatency) SetAverageNs(value float64) MetricLatency {
	obj.obj.AverageNs = &value

	return obj
}

func (obj *metricLatency) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *metricLatency) setDefault() {

}

type lagLacp struct {
	obj *snappipb.LagLacp
}

func NewLagLacp() LagLacp {
	obj := lagLacp{obj: &snappipb.LagLacp{}}
	obj.setDefault()
	return &obj
}

func (obj *lagLacp) Msg() *snappipb.LagLacp {
	return obj.obj
}

func (obj *lagLacp) SetMsg(msg *snappipb.LagLacp) LagLacp {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *lagLacp) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *lagLacp) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *lagLacp) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagLacp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *lagLacp) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagLacp) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *lagLacp) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type LagLacp interface {
	Msg() *snappipb.LagLacp
	SetMsg(*snappipb.LagLacp) LagLacp
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	ActorKey() int32
	SetActorKey(value int32) LagLacp
	HasActorKey() bool
	ActorPortNumber() int32
	SetActorPortNumber(value int32) LagLacp
	HasActorPortNumber() bool
	ActorPortPriority() int32
	SetActorPortPriority(value int32) LagLacp
	HasActorPortPriority() bool
	ActorSystemId() string
	SetActorSystemId(value string) LagLacp
	HasActorSystemId() bool
	ActorSystemPriority() int32
	SetActorSystemPriority(value int32) LagLacp
	HasActorSystemPriority() bool
	LacpduPeriodicTimeInterval() int32
	SetLacpduPeriodicTimeInterval(value int32) LagLacp
	HasLacpduPeriodicTimeInterval() bool
	LacpduTimeout() int32
	SetLacpduTimeout(value int32) LagLacp
	HasLacpduTimeout() bool
	ActorActivity() LagLacpActorActivityEnum
	SetActorActivity(value LagLacpActorActivityEnum) LagLacp
	HasActorActivity() bool
}

// ActorKey returns a int32
//  The actor key
func (obj *lagLacp) ActorKey() int32 {

	if obj.obj.ActorKey == nil {
		*obj.obj.ActorKey = 0
	}

	return *obj.obj.ActorKey

}

// ActorKey returns a int32
//  The actor key
func (obj *lagLacp) HasActorKey() bool {
	return obj.obj.ActorKey != nil
}

// SetActorKey sets the int32 value in the LagLacp object
//  The actor key
func (obj *lagLacp) SetActorKey(value int32) LagLacp {
	obj.obj.ActorKey = &value

	return obj
}

// ActorPortNumber returns a int32
//  The actor port number
func (obj *lagLacp) ActorPortNumber() int32 {

	if obj.obj.ActorPortNumber == nil {
		*obj.obj.ActorPortNumber = 0
	}

	return *obj.obj.ActorPortNumber

}

// ActorPortNumber returns a int32
//  The actor port number
func (obj *lagLacp) HasActorPortNumber() bool {
	return obj.obj.ActorPortNumber != nil
}

// SetActorPortNumber sets the int32 value in the LagLacp object
//  The actor port number
func (obj *lagLacp) SetActorPortNumber(value int32) LagLacp {
	obj.obj.ActorPortNumber = &value

	return obj
}

// ActorPortPriority returns a int32
//  The actor port priority
func (obj *lagLacp) ActorPortPriority() int32 {

	if obj.obj.ActorPortPriority == nil {
		*obj.obj.ActorPortPriority = 1
	}

	return *obj.obj.ActorPortPriority

}

// ActorPortPriority returns a int32
//  The actor port priority
func (obj *lagLacp) HasActorPortPriority() bool {
	return obj.obj.ActorPortPriority != nil
}

// SetActorPortPriority sets the int32 value in the LagLacp object
//  The actor port priority
func (obj *lagLacp) SetActorPortPriority(value int32) LagLacp {
	obj.obj.ActorPortPriority = &value

	return obj
}

// ActorSystemId returns a string
//  The actor system id
func (obj *lagLacp) ActorSystemId() string {

	if obj.obj.ActorSystemId == nil {
		*obj.obj.ActorSystemId = "00:00:00:00:00:00"
	}

	return *obj.obj.ActorSystemId

}

// ActorSystemId returns a string
//  The actor system id
func (obj *lagLacp) HasActorSystemId() bool {
	return obj.obj.ActorSystemId != nil
}

// SetActorSystemId sets the string value in the LagLacp object
//  The actor system id
func (obj *lagLacp) SetActorSystemId(value string) LagLacp {
	obj.obj.ActorSystemId = &value

	return obj
}

// ActorSystemPriority returns a int32
//  The actor system priority
func (obj *lagLacp) ActorSystemPriority() int32 {

	if obj.obj.ActorSystemPriority == nil {
		*obj.obj.ActorSystemPriority = 0
	}

	return *obj.obj.ActorSystemPriority

}

// ActorSystemPriority returns a int32
//  The actor system priority
func (obj *lagLacp) HasActorSystemPriority() bool {
	return obj.obj.ActorSystemPriority != nil
}

// SetActorSystemPriority sets the int32 value in the LagLacp object
//  The actor system priority
func (obj *lagLacp) SetActorSystemPriority(value int32) LagLacp {
	obj.obj.ActorSystemPriority = &value

	return obj
}

// LacpduPeriodicTimeInterval returns a int32
//  This field defines how frequently LACPDUs are sent to the link partner
func (obj *lagLacp) LacpduPeriodicTimeInterval() int32 {

	if obj.obj.LacpduPeriodicTimeInterval == nil {
		*obj.obj.LacpduPeriodicTimeInterval = 0
	}

	return *obj.obj.LacpduPeriodicTimeInterval

}

// LacpduPeriodicTimeInterval returns a int32
//  This field defines how frequently LACPDUs are sent to the link partner
func (obj *lagLacp) HasLacpduPeriodicTimeInterval() bool {
	return obj.obj.LacpduPeriodicTimeInterval != nil
}

// SetLacpduPeriodicTimeInterval sets the int32 value in the LagLacp object
//  This field defines how frequently LACPDUs are sent to the link partner
func (obj *lagLacp) SetLacpduPeriodicTimeInterval(value int32) LagLacp {
	obj.obj.LacpduPeriodicTimeInterval = &value

	return obj
}

// LacpduTimeout returns a int32
//  This timer is used to detect whether received protocol information has expired
func (obj *lagLacp) LacpduTimeout() int32 {

	if obj.obj.LacpduTimeout == nil {
		*obj.obj.LacpduTimeout = 0
	}

	return *obj.obj.LacpduTimeout

}

// LacpduTimeout returns a int32
//  This timer is used to detect whether received protocol information has expired
func (obj *lagLacp) HasLacpduTimeout() bool {
	return obj.obj.LacpduTimeout != nil
}

// SetLacpduTimeout sets the int32 value in the LagLacp object
//  This timer is used to detect whether received protocol information has expired
func (obj *lagLacp) SetLacpduTimeout(value int32) LagLacp {
	obj.obj.LacpduTimeout = &value

	return obj
}

type LagLacpActorActivityEnum string

var LagLacpActorActivity = struct {
	PASSIVE LagLacpActorActivityEnum
	ACTIVE  LagLacpActorActivityEnum
}{
	PASSIVE: LagLacpActorActivityEnum("passive"),
	ACTIVE:  LagLacpActorActivityEnum("active"),
}

func (obj *lagLacp) ActorActivity() LagLacpActorActivityEnum {
	return LagLacpActorActivityEnum(obj.obj.ActorActivity.Enum().String())
}

// ActorActivity returns a string
//  Sets the value of LACP actor activity as either passive or active
//  Passive indicates the port's preference for not transmitting  LACPDUs unless its partner's control is Active
//  Active indicates the port's preference to participate in the  protocol regardless of the partner's control value
func (obj *lagLacp) HasActorActivity() bool {
	return obj.obj.ActorActivity != nil
}

func (obj *lagLacp) SetActorActivity(value LagLacpActorActivityEnum) LagLacp {
	intValue, ok := snappipb.LagLacp_ActorActivity_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on LagLacpActorActivityEnum", string(value)))
		return obj
	}
	enumValue := snappipb.LagLacp_ActorActivity_Enum(intValue)
	obj.obj.ActorActivity = &enumValue

	return obj
}

func (obj *lagLacp) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ActorKey != nil {
		if *obj.obj.ActorKey < 0 || *obj.obj.ActorKey > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= LagLacp.ActorKey <= 65535 but Got %d", *obj.obj.ActorKey))
		}

	}

	if obj.obj.ActorPortNumber != nil {
		if *obj.obj.ActorPortNumber < 0 || *obj.obj.ActorPortNumber > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= LagLacp.ActorPortNumber <= 65535 but Got %d", *obj.obj.ActorPortNumber))
		}

	}

	if obj.obj.ActorPortPriority != nil {
		if *obj.obj.ActorPortPriority < 0 || *obj.obj.ActorPortPriority > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= LagLacp.ActorPortPriority <= 65535 but Got %d", *obj.obj.ActorPortPriority))
		}

	}

	if obj.obj.ActorSystemId != nil {
		err := validateMac(obj.ActorSystemId())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on ActorSystemId LagLacp"))
		}
	}

	if obj.obj.ActorSystemPriority != nil {
		if *obj.obj.ActorSystemPriority < 0 || *obj.obj.ActorSystemPriority > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= LagLacp.ActorSystemPriority <= 65535 but Got %d", *obj.obj.ActorSystemPriority))
		}

	}

	if obj.obj.LacpduPeriodicTimeInterval != nil {
		if *obj.obj.LacpduPeriodicTimeInterval < 0 || *obj.obj.LacpduPeriodicTimeInterval > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= LagLacp.LacpduPeriodicTimeInterval <= 65535 but Got %d", *obj.obj.LacpduPeriodicTimeInterval))
		}

	}

	if obj.obj.LacpduTimeout != nil {
		if *obj.obj.LacpduTimeout < 0 || *obj.obj.LacpduTimeout > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= LagLacp.LacpduTimeout <= 65535 but Got %d", *obj.obj.LacpduTimeout))
		}

	}

}

func (obj *lagLacp) setDefault() {
	if obj.obj.ActorKey == nil {
		obj.SetActorKey(0)
	}
	if obj.obj.ActorPortNumber == nil {
		obj.SetActorPortNumber(0)
	}
	if obj.obj.ActorPortPriority == nil {
		obj.SetActorPortPriority(1)
	}
	if obj.obj.ActorSystemId == nil {
		obj.SetActorSystemId("00:00:00:00:00:00")
	}
	if obj.obj.ActorSystemPriority == nil {
		obj.SetActorSystemPriority(0)
	}
	if obj.obj.LacpduPeriodicTimeInterval == nil {
		obj.SetLacpduPeriodicTimeInterval(0)
	}
	if obj.obj.LacpduTimeout == nil {
		obj.SetLacpduTimeout(0)
	}
	if obj.obj.ActorActivity == nil {
		obj.SetActorActivity(LagLacpActorActivity.ACTIVE)

	}

}

type lagStatic struct {
	obj *snappipb.LagStatic
}

func NewLagStatic() LagStatic {
	obj := lagStatic{obj: &snappipb.LagStatic{}}
	obj.setDefault()
	return &obj
}

func (obj *lagStatic) Msg() *snappipb.LagStatic {
	return obj.obj
}

func (obj *lagStatic) SetMsg(msg *snappipb.LagStatic) LagStatic {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *lagStatic) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *lagStatic) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *lagStatic) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagStatic) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *lagStatic) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagStatic) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *lagStatic) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type LagStatic interface {
	Msg() *snappipb.LagStatic
	SetMsg(*snappipb.LagStatic) LagStatic
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	LagId() int32
	SetLagId(value int32) LagStatic
	HasLagId() bool
}

// LagId returns a int32
//  The static lag id
func (obj *lagStatic) LagId() int32 {

	if obj.obj.LagId == nil {
		*obj.obj.LagId = 0
	}

	return *obj.obj.LagId

}

// LagId returns a int32
//  The static lag id
func (obj *lagStatic) HasLagId() bool {
	return obj.obj.LagId != nil
}

// SetLagId sets the int32 value in the LagStatic object
//  The static lag id
func (obj *lagStatic) SetLagId(value int32) LagStatic {
	obj.obj.LagId = &value

	return obj
}

func (obj *lagStatic) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.LagId != nil {
		if *obj.obj.LagId < 0 || *obj.obj.LagId > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= LagStatic.LagId <= 65535 but Got %d", *obj.obj.LagId))
		}

	}

}

func (obj *lagStatic) setDefault() {
	if obj.obj.LagId == nil {
		obj.SetLagId(0)
	}

}

type captureField struct {
	obj *snappipb.CaptureField
}

func NewCaptureField() CaptureField {
	obj := captureField{obj: &snappipb.CaptureField{}}
	obj.setDefault()
	return &obj
}

func (obj *captureField) Msg() *snappipb.CaptureField {
	return obj.obj
}

func (obj *captureField) SetMsg(msg *snappipb.CaptureField) CaptureField {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *captureField) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *captureField) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureField) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureField) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *captureField) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureField) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *captureField) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type CaptureField interface {
	Msg() *snappipb.CaptureField
	SetMsg(*snappipb.CaptureField) CaptureField
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Value() string
	SetValue(value string) CaptureField
	HasValue() bool
	Mask() string
	SetMask(value string) CaptureField
	HasMask() bool
	Negate() bool
	SetNegate(value bool) CaptureField
	HasNegate() bool
}

// Value returns a string
//  description is TBD
func (obj *captureField) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "00"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *captureField) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the CaptureField object
//  description is TBD
func (obj *captureField) SetValue(value string) CaptureField {
	obj.obj.Value = &value

	return obj
}

// Mask returns a string
//  description is TBD
func (obj *captureField) Mask() string {

	if obj.obj.Mask == nil {
		*obj.obj.Mask = "00"
	}

	return *obj.obj.Mask

}

// Mask returns a string
//  description is TBD
func (obj *captureField) HasMask() bool {
	return obj.obj.Mask != nil
}

// SetMask sets the string value in the CaptureField object
//  description is TBD
func (obj *captureField) SetMask(value string) CaptureField {
	obj.obj.Mask = &value

	return obj
}

// Negate returns a bool
//  description is TBD
func (obj *captureField) Negate() bool {

	if obj.obj.Negate == nil {
		*obj.obj.Negate = false
	}

	return *obj.obj.Negate

}

// Negate returns a bool
//  description is TBD
func (obj *captureField) HasNegate() bool {
	return obj.obj.Negate != nil
}

// SetNegate sets the bool value in the CaptureField object
//  description is TBD
func (obj *captureField) SetNegate(value bool) CaptureField {
	obj.obj.Negate = &value

	return obj
}

func (obj *captureField) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateHex(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value CaptureField"))
		}
	}

	if obj.obj.Mask != nil {
		err := validateHex(obj.Mask())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Mask CaptureField"))
		}
	}

}

func (obj *captureField) setDefault() {
	if obj.obj.Value == nil {
		obj.SetValue("00")
	}
	if obj.obj.Mask == nil {
		obj.SetMask("00")
	}
	if obj.obj.Negate == nil {
		obj.SetNegate(false)
	}

}

type isisInterfaceLevel struct {
	obj *snappipb.IsisInterfaceLevel
}

func NewIsisInterfaceLevel() IsisInterfaceLevel {
	obj := isisInterfaceLevel{obj: &snappipb.IsisInterfaceLevel{}}
	obj.setDefault()
	return &obj
}

func (obj *isisInterfaceLevel) Msg() *snappipb.IsisInterfaceLevel {
	return obj.obj
}

func (obj *isisInterfaceLevel) SetMsg(msg *snappipb.IsisInterfaceLevel) IsisInterfaceLevel {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisInterfaceLevel) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisInterfaceLevel) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisInterfaceLevel) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisInterfaceLevel) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisInterfaceLevel) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisInterfaceLevel) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisInterfaceLevel) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisInterfaceLevel interface {
	Msg() *snappipb.IsisInterfaceLevel
	SetMsg(*snappipb.IsisInterfaceLevel) IsisInterfaceLevel
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Priority() int32
	SetPriority(value int32) IsisInterfaceLevel
	HasPriority() bool
	HelloInterval() int32
	SetHelloInterval(value int32) IsisInterfaceLevel
	HasHelloInterval() bool
	DeadInterval() int32
	SetDeadInterval(value int32) IsisInterfaceLevel
	HasDeadInterval() bool
}

// Priority returns a int32
//  The Priority setting in Level 1 LAN Hellos for Designated Router election.
func (obj *isisInterfaceLevel) Priority() int32 {

	if obj.obj.Priority == nil {
		*obj.obj.Priority = 0
	}

	return *obj.obj.Priority

}

// Priority returns a int32
//  The Priority setting in Level 1 LAN Hellos for Designated Router election.
func (obj *isisInterfaceLevel) HasPriority() bool {
	return obj.obj.Priority != nil
}

// SetPriority sets the int32 value in the IsisInterfaceLevel object
//  The Priority setting in Level 1 LAN Hellos for Designated Router election.
func (obj *isisInterfaceLevel) SetPriority(value int32) IsisInterfaceLevel {
	obj.obj.Priority = &value

	return obj
}

// HelloInterval returns a int32
//  The Hello interval for Level 1 Hello messages, in seconds.
func (obj *isisInterfaceLevel) HelloInterval() int32 {

	if obj.obj.HelloInterval == nil {
		*obj.obj.HelloInterval = 10
	}

	return *obj.obj.HelloInterval

}

// HelloInterval returns a int32
//  The Hello interval for Level 1 Hello messages, in seconds.
func (obj *isisInterfaceLevel) HasHelloInterval() bool {
	return obj.obj.HelloInterval != nil
}

// SetHelloInterval sets the int32 value in the IsisInterfaceLevel object
//  The Hello interval for Level 1 Hello messages, in seconds.
func (obj *isisInterfaceLevel) SetHelloInterval(value int32) IsisInterfaceLevel {
	obj.obj.HelloInterval = &value

	return obj
}

// DeadInterval returns a int32
//  The Dead (Holding Time) interval for Level 1 Hello messages, in seconds.
func (obj *isisInterfaceLevel) DeadInterval() int32 {

	if obj.obj.DeadInterval == nil {
		*obj.obj.DeadInterval = 30
	}

	return *obj.obj.DeadInterval

}

// DeadInterval returns a int32
//  The Dead (Holding Time) interval for Level 1 Hello messages, in seconds.
func (obj *isisInterfaceLevel) HasDeadInterval() bool {
	return obj.obj.DeadInterval != nil
}

// SetDeadInterval sets the int32 value in the IsisInterfaceLevel object
//  The Dead (Holding Time) interval for Level 1 Hello messages, in seconds.
func (obj *isisInterfaceLevel) SetDeadInterval(value int32) IsisInterfaceLevel {
	obj.obj.DeadInterval = &value

	return obj
}

func (obj *isisInterfaceLevel) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *isisInterfaceLevel) setDefault() {
	if obj.obj.Priority == nil {
		obj.SetPriority(0)
	}
	if obj.obj.HelloInterval == nil {
		obj.SetHelloInterval(10)
	}
	if obj.obj.DeadInterval == nil {
		obj.SetDeadInterval(30)
	}

}

type isisMT struct {
	obj *snappipb.IsisMT
}

func NewIsisMT() IsisMT {
	obj := isisMT{obj: &snappipb.IsisMT{}}
	obj.setDefault()
	return &obj
}

func (obj *isisMT) Msg() *snappipb.IsisMT {
	return obj.obj
}

func (obj *isisMT) SetMsg(msg *snappipb.IsisMT) IsisMT {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisMT) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisMT) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisMT) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisMT) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisMT) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisMT) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisMT) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisMT interface {
	Msg() *snappipb.IsisMT
	SetMsg(*snappipb.IsisMT) IsisMT
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	MtId() int32
	SetMtId(value int32) IsisMT
	HasMtId() bool
	LinkMetric() int32
	SetLinkMetric(value int32) IsisMT
	HasLinkMetric() bool
}

// MtId returns a int32
//  The Multi Topology ID for one of the topologies supported on the ISIS interface.
func (obj *isisMT) MtId() int32 {

	if obj.obj.MtId == nil {
		*obj.obj.MtId = 0
	}

	return *obj.obj.MtId

}

// MtId returns a int32
//  The Multi Topology ID for one of the topologies supported on the ISIS interface.
func (obj *isisMT) HasMtId() bool {
	return obj.obj.MtId != nil
}

// SetMtId sets the int32 value in the IsisMT object
//  The Multi Topology ID for one of the topologies supported on the ISIS interface.
func (obj *isisMT) SetMtId(value int32) IsisMT {
	obj.obj.MtId = &value

	return obj
}

// LinkMetric returns a int32
//  Specifies the link metric for this topology on the ISIS interface.
func (obj *isisMT) LinkMetric() int32 {

	if obj.obj.LinkMetric == nil {
		*obj.obj.LinkMetric = 10
	}

	return *obj.obj.LinkMetric

}

// LinkMetric returns a int32
//  Specifies the link metric for this topology on the ISIS interface.
func (obj *isisMT) HasLinkMetric() bool {
	return obj.obj.LinkMetric != nil
}

// SetLinkMetric sets the int32 value in the IsisMT object
//  Specifies the link metric for this topology on the ISIS interface.
func (obj *isisMT) SetLinkMetric(value int32) IsisMT {
	obj.obj.LinkMetric = &value

	return obj
}

func (obj *isisMT) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.MtId != nil {
		if *obj.obj.MtId < 0 || *obj.obj.MtId > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= IsisMT.MtId <= 65535 but Got %d", *obj.obj.MtId))
		}

	}

	if obj.obj.LinkMetric != nil {
		if *obj.obj.LinkMetric < 0 || *obj.obj.LinkMetric > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= IsisMT.LinkMetric <= 16777215 but Got %d", *obj.obj.LinkMetric))
		}

	}

}

func (obj *isisMT) setDefault() {
	if obj.obj.MtId == nil {
		obj.SetMtId(0)
	}
	if obj.obj.LinkMetric == nil {
		obj.SetLinkMetric(10)
	}

}

type linkStateTE struct {
	obj *snappipb.LinkStateTE
}

func NewLinkStateTE() LinkStateTE {
	obj := linkStateTE{obj: &snappipb.LinkStateTE{}}
	obj.setDefault()
	return &obj
}

func (obj *linkStateTE) Msg() *snappipb.LinkStateTE {
	return obj.obj
}

func (obj *linkStateTE) SetMsg(msg *snappipb.LinkStateTE) LinkStateTE {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *linkStateTE) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *linkStateTE) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *linkStateTE) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *linkStateTE) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *linkStateTE) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *linkStateTE) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *linkStateTE) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type LinkStateTE interface {
	Msg() *snappipb.LinkStateTE
	SetMsg(*snappipb.LinkStateTE) LinkStateTE
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	AdministrativeGroup() string
	SetAdministrativeGroup(value string) LinkStateTE
	HasAdministrativeGroup() bool
	MetricLevel() int64
	SetMetricLevel(value int64) LinkStateTE
	HasMetricLevel() bool
	MaxBandwith() int64
	SetMaxBandwith(value int64) LinkStateTE
	HasMaxBandwith() bool
	MaxReservableBandwidth() int64
	SetMaxReservableBandwidth(value int64) LinkStateTE
	HasMaxReservableBandwidth() bool
	PriorityBandwidths() LinkStatepriorityBandwidths
	SetPriorityBandwidths(value LinkStatepriorityBandwidths) LinkStateTE
	HasPriorityBandwidths() bool
}

// AdministrativeGroup returns a string
//  The Administrative group sub-TLV (sub-TLV 3). It is a 4-octet
//  user-defined bit mask used to assign administrative group numbers
//  to the interface, for use in assigning colors and resource classes.
//  Each set bit corresponds to a single administrative group for this
//  interface. The settings translate into Group numbers, which range
//  from 0 to 31 (integers).
func (obj *linkStateTE) AdministrativeGroup() string {

	if obj.obj.AdministrativeGroup == nil {
		*obj.obj.AdministrativeGroup = "00000000"
	}

	return *obj.obj.AdministrativeGroup

}

// AdministrativeGroup returns a string
//  The Administrative group sub-TLV (sub-TLV 3). It is a 4-octet
//  user-defined bit mask used to assign administrative group numbers
//  to the interface, for use in assigning colors and resource classes.
//  Each set bit corresponds to a single administrative group for this
//  interface. The settings translate into Group numbers, which range
//  from 0 to 31 (integers).
func (obj *linkStateTE) HasAdministrativeGroup() bool {
	return obj.obj.AdministrativeGroup != nil
}

// SetAdministrativeGroup sets the string value in the LinkStateTE object
//  The Administrative group sub-TLV (sub-TLV 3). It is a 4-octet
//  user-defined bit mask used to assign administrative group numbers
//  to the interface, for use in assigning colors and resource classes.
//  Each set bit corresponds to a single administrative group for this
//  interface. The settings translate into Group numbers, which range
//  from 0 to 31 (integers).
func (obj *linkStateTE) SetAdministrativeGroup(value string) LinkStateTE {
	obj.obj.AdministrativeGroup = &value

	return obj
}

// MetricLevel returns a int64
//  The user-assigned link metric for Traffic Engineering.
func (obj *linkStateTE) MetricLevel() int64 {

	if obj.obj.MetricLevel == nil {
		*obj.obj.MetricLevel = 0
	}

	return *obj.obj.MetricLevel

}

// MetricLevel returns a int64
//  The user-assigned link metric for Traffic Engineering.
func (obj *linkStateTE) HasMetricLevel() bool {
	return obj.obj.MetricLevel != nil
}

// SetMetricLevel sets the int64 value in the LinkStateTE object
//  The user-assigned link metric for Traffic Engineering.
func (obj *linkStateTE) SetMetricLevel(value int64) LinkStateTE {
	obj.obj.MetricLevel = &value

	return obj
}

// MaxBandwith returns a int64
//  The maximum link bandwidth (sub-TLV 9) in bytes/sec allowed for this
//  link for a direction.
func (obj *linkStateTE) MaxBandwith() int64 {

	if obj.obj.MaxBandwith == nil {
		*obj.obj.MaxBandwith = 125000000
	}

	return *obj.obj.MaxBandwith

}

// MaxBandwith returns a int64
//  The maximum link bandwidth (sub-TLV 9) in bytes/sec allowed for this
//  link for a direction.
func (obj *linkStateTE) HasMaxBandwith() bool {
	return obj.obj.MaxBandwith != nil
}

// SetMaxBandwith sets the int64 value in the LinkStateTE object
//  The maximum link bandwidth (sub-TLV 9) in bytes/sec allowed for this
//  link for a direction.
func (obj *linkStateTE) SetMaxBandwith(value int64) LinkStateTE {
	obj.obj.MaxBandwith = &value

	return obj
}

// MaxReservableBandwidth returns a int64
//  The maximum link bandwidth (sub-TLV 10) in bytes/sec allowed for this
//  link in a direction.
func (obj *linkStateTE) MaxReservableBandwidth() int64 {

	if obj.obj.MaxReservableBandwidth == nil {
		*obj.obj.MaxReservableBandwidth = 125000000
	}

	return *obj.obj.MaxReservableBandwidth

}

// MaxReservableBandwidth returns a int64
//  The maximum link bandwidth (sub-TLV 10) in bytes/sec allowed for this
//  link in a direction.
func (obj *linkStateTE) HasMaxReservableBandwidth() bool {
	return obj.obj.MaxReservableBandwidth != nil
}

// SetMaxReservableBandwidth sets the int64 value in the LinkStateTE object
//  The maximum link bandwidth (sub-TLV 10) in bytes/sec allowed for this
//  link in a direction.
func (obj *linkStateTE) SetMaxReservableBandwidth(value int64) LinkStateTE {
	obj.obj.MaxReservableBandwidth = &value

	return obj
}

// PriorityBandwidths returns a LinkStatepriorityBandwidths
//  Configuration of bandwidths of priority 0 through priority 7.
func (obj *linkStateTE) PriorityBandwidths() LinkStatepriorityBandwidths {
	if obj.obj.PriorityBandwidths == nil {
		obj.obj.PriorityBandwidths = NewLinkStatepriorityBandwidths().Msg()
	}
	return &linkStatepriorityBandwidths{obj: obj.obj.PriorityBandwidths}
}

// PriorityBandwidths returns a LinkStatepriorityBandwidths
//  Configuration of bandwidths of priority 0 through priority 7.
func (obj *linkStateTE) HasPriorityBandwidths() bool {
	return obj.obj.PriorityBandwidths != nil
}

// SetPriorityBandwidths sets the LinkStatepriorityBandwidths value in the LinkStateTE object
//  Configuration of bandwidths of priority 0 through priority 7.
func (obj *linkStateTE) SetPriorityBandwidths(value LinkStatepriorityBandwidths) LinkStateTE {
	obj.PriorityBandwidths().SetMsg(value.Msg())

	return obj
}

func (obj *linkStateTE) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.AdministrativeGroup != nil {
		err := validateHex(obj.AdministrativeGroup())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on AdministrativeGroup LinkStateTE"))
		}
	}

	if obj.obj.MetricLevel != nil {
		if *obj.obj.MetricLevel < 0 || *obj.obj.MetricLevel > 4261412864 {
			validation = append(
				validation, fmt.Sprintf("0 <= LinkStateTE.MetricLevel <= 4261412864 but Got %d", *obj.obj.MetricLevel))
		}

	}

	if obj.obj.MaxBandwith != nil {
		if *obj.obj.MaxBandwith < 0 || *obj.obj.MaxBandwith > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= LinkStateTE.MaxBandwith <= 4294967295 but Got %d", *obj.obj.MaxBandwith))
		}

	}

	if obj.obj.MaxReservableBandwidth != nil {
		if *obj.obj.MaxReservableBandwidth < 0 || *obj.obj.MaxReservableBandwidth > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= LinkStateTE.MaxReservableBandwidth <= 4294967295 but Got %d", *obj.obj.MaxReservableBandwidth))
		}

	}

	if obj.obj.PriorityBandwidths != nil {
		obj.PriorityBandwidths().validateObj(set_default)
	}
}

func (obj *linkStateTE) setDefault() {
	if obj.obj.AdministrativeGroup == nil {
		obj.SetAdministrativeGroup("00000000")
	}
	if obj.obj.MetricLevel == nil {
		obj.SetMetricLevel(0)
	}
	if obj.obj.MaxBandwith == nil {
		obj.SetMaxBandwith(125000000)
	}
	if obj.obj.MaxReservableBandwidth == nil {
		obj.SetMaxReservableBandwidth(125000000)
	}

}

type isisInterfaceAuthentication struct {
	obj *snappipb.IsisInterfaceAuthentication
}

func NewIsisInterfaceAuthentication() IsisInterfaceAuthentication {
	obj := isisInterfaceAuthentication{obj: &snappipb.IsisInterfaceAuthentication{}}
	obj.setDefault()
	return &obj
}

func (obj *isisInterfaceAuthentication) Msg() *snappipb.IsisInterfaceAuthentication {
	return obj.obj
}

func (obj *isisInterfaceAuthentication) SetMsg(msg *snappipb.IsisInterfaceAuthentication) IsisInterfaceAuthentication {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisInterfaceAuthentication) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisInterfaceAuthentication) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisInterfaceAuthentication) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisInterfaceAuthentication) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisInterfaceAuthentication) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisInterfaceAuthentication) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisInterfaceAuthentication) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisInterfaceAuthentication interface {
	Msg() *snappipb.IsisInterfaceAuthentication
	SetMsg(*snappipb.IsisInterfaceAuthentication) IsisInterfaceAuthentication
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	AuthType() IsisInterfaceAuthenticationAuthTypeEnum
	SetAuthType(value IsisInterfaceAuthenticationAuthTypeEnum) IsisInterfaceAuthentication
	Md5() string
	SetMd5(value string) IsisInterfaceAuthentication
	HasMd5() bool
	Password() string
	SetPassword(value string) IsisInterfaceAuthentication
	HasPassword() bool
}

type IsisInterfaceAuthenticationAuthTypeEnum string

var IsisInterfaceAuthenticationAuthType = struct {
	MD5      IsisInterfaceAuthenticationAuthTypeEnum
	PASSWORD IsisInterfaceAuthenticationAuthTypeEnum
}{
	MD5:      IsisInterfaceAuthenticationAuthTypeEnum("md5"),
	PASSWORD: IsisInterfaceAuthenticationAuthTypeEnum("password"),
}

func (obj *isisInterfaceAuthentication) AuthType() IsisInterfaceAuthenticationAuthTypeEnum {
	return IsisInterfaceAuthenticationAuthTypeEnum(obj.obj.AuthType.Enum().String())
}

func (obj *isisInterfaceAuthentication) SetAuthType(value IsisInterfaceAuthenticationAuthTypeEnum) IsisInterfaceAuthentication {
	intValue, ok := snappipb.IsisInterfaceAuthentication_AuthType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on IsisInterfaceAuthenticationAuthTypeEnum", string(value)))
		return obj
	}
	obj.obj.AuthType = snappipb.IsisInterfaceAuthentication_AuthType_Enum(intValue)

	return obj
}

// Md5 returns a string
//  MD5 key to be used for authentication.
func (obj *isisInterfaceAuthentication) Md5() string {

	return *obj.obj.Md5

}

// Md5 returns a string
//  MD5 key to be used for authentication.
func (obj *isisInterfaceAuthentication) HasMd5() bool {
	return obj.obj.Md5 != nil
}

// SetMd5 sets the string value in the IsisInterfaceAuthentication object
//  MD5 key to be used for authentication.
func (obj *isisInterfaceAuthentication) SetMd5(value string) IsisInterfaceAuthentication {
	obj.obj.Md5 = &value

	return obj
}

// Password returns a string
//  The password, in clear text, to be used for Authentication.
func (obj *isisInterfaceAuthentication) Password() string {

	return *obj.obj.Password

}

// Password returns a string
//  The password, in clear text, to be used for Authentication.
func (obj *isisInterfaceAuthentication) HasPassword() bool {
	return obj.obj.Password != nil
}

// SetPassword sets the string value in the IsisInterfaceAuthentication object
//  The password, in clear text, to be used for Authentication.
func (obj *isisInterfaceAuthentication) SetPassword(value string) IsisInterfaceAuthentication {
	obj.obj.Password = &value

	return obj
}

func (obj *isisInterfaceAuthentication) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// AuthType required
	if obj.obj.AuthType.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("AuthType is required field on IsisInterfaceAuthentication and got value %s", obj.obj.AuthType.String()))
	}

}

func (obj *isisInterfaceAuthentication) setDefault() {

}

type isisInterfaceAdvanced struct {
	obj *snappipb.IsisInterfaceAdvanced
}

func NewIsisInterfaceAdvanced() IsisInterfaceAdvanced {
	obj := isisInterfaceAdvanced{obj: &snappipb.IsisInterfaceAdvanced{}}
	obj.setDefault()
	return &obj
}

func (obj *isisInterfaceAdvanced) Msg() *snappipb.IsisInterfaceAdvanced {
	return obj.obj
}

func (obj *isisInterfaceAdvanced) SetMsg(msg *snappipb.IsisInterfaceAdvanced) IsisInterfaceAdvanced {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisInterfaceAdvanced) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisInterfaceAdvanced) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisInterfaceAdvanced) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisInterfaceAdvanced) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisInterfaceAdvanced) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisInterfaceAdvanced) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisInterfaceAdvanced) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisInterfaceAdvanced interface {
	Msg() *snappipb.IsisInterfaceAdvanced
	SetMsg(*snappipb.IsisInterfaceAdvanced) IsisInterfaceAdvanced
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	AutoAdjustMtu() bool
	SetAutoAdjustMtu(value bool) IsisInterfaceAdvanced
	HasAutoAdjustMtu() bool
	AutoAdjustArea() bool
	SetAutoAdjustArea(value bool) IsisInterfaceAdvanced
	HasAutoAdjustArea() bool
	AutoAdjustSupportedProtocols() bool
	SetAutoAdjustSupportedProtocols(value bool) IsisInterfaceAdvanced
	HasAutoAdjustSupportedProtocols() bool
}

// AutoAdjustMtu returns a bool
//  If a padded Hello message is received on the interface, the length of
//  the Hello packets sent out on that interface is adjusted to match.
func (obj *isisInterfaceAdvanced) AutoAdjustMtu() bool {

	if obj.obj.AutoAdjustMtu == nil {
		*obj.obj.AutoAdjustMtu = true
	}

	return *obj.obj.AutoAdjustMtu

}

// AutoAdjustMtu returns a bool
//  If a padded Hello message is received on the interface, the length of
//  the Hello packets sent out on that interface is adjusted to match.
func (obj *isisInterfaceAdvanced) HasAutoAdjustMtu() bool {
	return obj.obj.AutoAdjustMtu != nil
}

// SetAutoAdjustMtu sets the bool value in the IsisInterfaceAdvanced object
//  If a padded Hello message is received on the interface, the length of
//  the Hello packets sent out on that interface is adjusted to match.
func (obj *isisInterfaceAdvanced) SetAutoAdjustMtu(value bool) IsisInterfaceAdvanced {
	obj.obj.AutoAdjustMtu = &value

	return obj
}

// AutoAdjustArea returns a bool
//  If a Level 1 Hello is received on this emulated router for an area
//  not currently in its area list, an area from the received Hello is
//  added to that list. This ensures an area match for all future
//  Level 1 Hellos from the source L1 router.
func (obj *isisInterfaceAdvanced) AutoAdjustArea() bool {

	if obj.obj.AutoAdjustArea == nil {
		*obj.obj.AutoAdjustArea = true
	}

	return *obj.obj.AutoAdjustArea

}

// AutoAdjustArea returns a bool
//  If a Level 1 Hello is received on this emulated router for an area
//  not currently in its area list, an area from the received Hello is
//  added to that list. This ensures an area match for all future
//  Level 1 Hellos from the source L1 router.
func (obj *isisInterfaceAdvanced) HasAutoAdjustArea() bool {
	return obj.obj.AutoAdjustArea != nil
}

// SetAutoAdjustArea sets the bool value in the IsisInterfaceAdvanced object
//  If a Level 1 Hello is received on this emulated router for an area
//  not currently in its area list, an area from the received Hello is
//  added to that list. This ensures an area match for all future
//  Level 1 Hellos from the source L1 router.
func (obj *isisInterfaceAdvanced) SetAutoAdjustArea(value bool) IsisInterfaceAdvanced {
	obj.obj.AutoAdjustArea = &value

	return obj
}

// AutoAdjustSupportedProtocols returns a bool
//  If a Hello message listing supported protocols is received on this
//  emulated router, the supported protocols advertised by this router
//  are changed to match exactly.
func (obj *isisInterfaceAdvanced) AutoAdjustSupportedProtocols() bool {

	if obj.obj.AutoAdjustSupportedProtocols == nil {
		*obj.obj.AutoAdjustSupportedProtocols = false
	}

	return *obj.obj.AutoAdjustSupportedProtocols

}

// AutoAdjustSupportedProtocols returns a bool
//  If a Hello message listing supported protocols is received on this
//  emulated router, the supported protocols advertised by this router
//  are changed to match exactly.
func (obj *isisInterfaceAdvanced) HasAutoAdjustSupportedProtocols() bool {
	return obj.obj.AutoAdjustSupportedProtocols != nil
}

// SetAutoAdjustSupportedProtocols sets the bool value in the IsisInterfaceAdvanced object
//  If a Hello message listing supported protocols is received on this
//  emulated router, the supported protocols advertised by this router
//  are changed to match exactly.
func (obj *isisInterfaceAdvanced) SetAutoAdjustSupportedProtocols(value bool) IsisInterfaceAdvanced {
	obj.obj.AutoAdjustSupportedProtocols = &value

	return obj
}

func (obj *isisInterfaceAdvanced) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *isisInterfaceAdvanced) setDefault() {
	if obj.obj.AutoAdjustMtu == nil {
		obj.SetAutoAdjustMtu(true)
	}
	if obj.obj.AutoAdjustArea == nil {
		obj.SetAutoAdjustArea(true)
	}
	if obj.obj.AutoAdjustSupportedProtocols == nil {
		obj.SetAutoAdjustSupportedProtocols(false)
	}

}

type isisInterfaceLinkProtection struct {
	obj *snappipb.IsisInterfaceLinkProtection
}

func NewIsisInterfaceLinkProtection() IsisInterfaceLinkProtection {
	obj := isisInterfaceLinkProtection{obj: &snappipb.IsisInterfaceLinkProtection{}}
	obj.setDefault()
	return &obj
}

func (obj *isisInterfaceLinkProtection) Msg() *snappipb.IsisInterfaceLinkProtection {
	return obj.obj
}

func (obj *isisInterfaceLinkProtection) SetMsg(msg *snappipb.IsisInterfaceLinkProtection) IsisInterfaceLinkProtection {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisInterfaceLinkProtection) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisInterfaceLinkProtection) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisInterfaceLinkProtection) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisInterfaceLinkProtection) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisInterfaceLinkProtection) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisInterfaceLinkProtection) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisInterfaceLinkProtection) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisInterfaceLinkProtection interface {
	Msg() *snappipb.IsisInterfaceLinkProtection
	SetMsg(*snappipb.IsisInterfaceLinkProtection) IsisInterfaceLinkProtection
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	ExtraTraffic() bool
	SetExtraTraffic(value bool) IsisInterfaceLinkProtection
	HasExtraTraffic() bool
	Unprotected() bool
	SetUnprotected(value bool) IsisInterfaceLinkProtection
	HasUnprotected() bool
	Shared() bool
	SetShared(value bool) IsisInterfaceLinkProtection
	HasShared() bool
	Dedicated1To1() bool
	SetDedicated1To1(value bool) IsisInterfaceLinkProtection
	HasDedicated1To1() bool
	Dedicated1Plus1() bool
	SetDedicated1Plus1(value bool) IsisInterfaceLinkProtection
	HasDedicated1Plus1() bool
	Enhanced() bool
	SetEnhanced(value bool) IsisInterfaceLinkProtection
	HasEnhanced() bool
	Reserved40() bool
	SetReserved40(value bool) IsisInterfaceLinkProtection
	HasReserved40() bool
	Reserved80() bool
	SetReserved80(value bool) IsisInterfaceLinkProtection
	HasReserved80() bool
}

// ExtraTraffic returns a bool
//  Enable this to protect other link or links. LSPs on a link of this type are lost
//  if any of the links fail.
func (obj *isisInterfaceLinkProtection) ExtraTraffic() bool {

	if obj.obj.ExtraTraffic == nil {
		*obj.obj.ExtraTraffic = false
	}

	return *obj.obj.ExtraTraffic

}

// ExtraTraffic returns a bool
//  Enable this to protect other link or links. LSPs on a link of this type are lost
//  if any of the links fail.
func (obj *isisInterfaceLinkProtection) HasExtraTraffic() bool {
	return obj.obj.ExtraTraffic != nil
}

// SetExtraTraffic sets the bool value in the IsisInterfaceLinkProtection object
//  Enable this to protect other link or links. LSPs on a link of this type are lost
//  if any of the links fail.
func (obj *isisInterfaceLinkProtection) SetExtraTraffic(value bool) IsisInterfaceLinkProtection {
	obj.obj.ExtraTraffic = &value

	return obj
}

// Unprotected returns a bool
//  Enabling this signifies that there is no other link protecting this
//  link. LSPs on a link of this type are lost if the link fails.
func (obj *isisInterfaceLinkProtection) Unprotected() bool {

	if obj.obj.Unprotected == nil {
		*obj.obj.Unprotected = false
	}

	return *obj.obj.Unprotected

}

// Unprotected returns a bool
//  Enabling this signifies that there is no other link protecting this
//  link. LSPs on a link of this type are lost if the link fails.
func (obj *isisInterfaceLinkProtection) HasUnprotected() bool {
	return obj.obj.Unprotected != nil
}

// SetUnprotected sets the bool value in the IsisInterfaceLinkProtection object
//  Enabling this signifies that there is no other link protecting this
//  link. LSPs on a link of this type are lost if the link fails.
func (obj *isisInterfaceLinkProtection) SetUnprotected(value bool) IsisInterfaceLinkProtection {
	obj.obj.Unprotected = &value

	return obj
}

// Shared returns a bool
//  Enable this to share the Extra Traffic links between one or more
//  links of type Shared.There are one or more disjoint links of type
//  Extra Traffic that are protecting this link.
func (obj *isisInterfaceLinkProtection) Shared() bool {

	if obj.obj.Shared == nil {
		*obj.obj.Shared = false
	}

	return *obj.obj.Shared

}

// Shared returns a bool
//  Enable this to share the Extra Traffic links between one or more
//  links of type Shared.There are one or more disjoint links of type
//  Extra Traffic that are protecting this link.
func (obj *isisInterfaceLinkProtection) HasShared() bool {
	return obj.obj.Shared != nil
}

// SetShared sets the bool value in the IsisInterfaceLinkProtection object
//  Enable this to share the Extra Traffic links between one or more
//  links of type Shared.There are one or more disjoint links of type
//  Extra Traffic that are protecting this link.
func (obj *isisInterfaceLinkProtection) SetShared(value bool) IsisInterfaceLinkProtection {
	obj.obj.Shared = &value

	return obj
}

// Dedicated1To1 returns a bool
//  Enabling this signifies that there is one dedicated disjoint link
//  of type Extra Traffic that is protecting this link.
func (obj *isisInterfaceLinkProtection) Dedicated1To1() bool {

	if obj.obj.Dedicated_1To_1 == nil {
		*obj.obj.Dedicated_1To_1 = false
	}

	return *obj.obj.Dedicated_1To_1

}

// Dedicated1To1 returns a bool
//  Enabling this signifies that there is one dedicated disjoint link
//  of type Extra Traffic that is protecting this link.
func (obj *isisInterfaceLinkProtection) HasDedicated1To1() bool {
	return obj.obj.Dedicated_1To_1 != nil
}

// SetDedicated1To1 sets the bool value in the IsisInterfaceLinkProtection object
//  Enabling this signifies that there is one dedicated disjoint link
//  of type Extra Traffic that is protecting this link.
func (obj *isisInterfaceLinkProtection) SetDedicated1To1(value bool) IsisInterfaceLinkProtection {
	obj.obj.Dedicated_1To_1 = &value

	return obj
}

// Dedicated1Plus1 returns a bool
//  Enabling this signifies that a dedicated disjoint link is protecting
//  this link. However, the protecting link is not advertised in the
//  link state database and is therefore not available for the routing
//  of LSPs.
func (obj *isisInterfaceLinkProtection) Dedicated1Plus1() bool {

	if obj.obj.Dedicated_1Plus_1 == nil {
		*obj.obj.Dedicated_1Plus_1 = false
	}

	return *obj.obj.Dedicated_1Plus_1

}

// Dedicated1Plus1 returns a bool
//  Enabling this signifies that a dedicated disjoint link is protecting
//  this link. However, the protecting link is not advertised in the
//  link state database and is therefore not available for the routing
//  of LSPs.
func (obj *isisInterfaceLinkProtection) HasDedicated1Plus1() bool {
	return obj.obj.Dedicated_1Plus_1 != nil
}

// SetDedicated1Plus1 sets the bool value in the IsisInterfaceLinkProtection object
//  Enabling this signifies that a dedicated disjoint link is protecting
//  this link. However, the protecting link is not advertised in the
//  link state database and is therefore not available for the routing
//  of LSPs.
func (obj *isisInterfaceLinkProtection) SetDedicated1Plus1(value bool) IsisInterfaceLinkProtection {
	obj.obj.Dedicated_1Plus_1 = &value

	return obj
}

// Enhanced returns a bool
//  Enabling this signifies that a protection scheme that is more
//  reliable than Dedicated 1+1.
func (obj *isisInterfaceLinkProtection) Enhanced() bool {

	if obj.obj.Enhanced == nil {
		*obj.obj.Enhanced = false
	}

	return *obj.obj.Enhanced

}

// Enhanced returns a bool
//  Enabling this signifies that a protection scheme that is more
//  reliable than Dedicated 1+1.
func (obj *isisInterfaceLinkProtection) HasEnhanced() bool {
	return obj.obj.Enhanced != nil
}

// SetEnhanced sets the bool value in the IsisInterfaceLinkProtection object
//  Enabling this signifies that a protection scheme that is more
//  reliable than Dedicated 1+1.
func (obj *isisInterfaceLinkProtection) SetEnhanced(value bool) IsisInterfaceLinkProtection {
	obj.obj.Enhanced = &value

	return obj
}

// Reserved40 returns a bool
//  This is a Protection Scheme with value 0x40.
func (obj *isisInterfaceLinkProtection) Reserved40() bool {

	if obj.obj.Reserved_40 == nil {
		*obj.obj.Reserved_40 = false
	}

	return *obj.obj.Reserved_40

}

// Reserved40 returns a bool
//  This is a Protection Scheme with value 0x40.
func (obj *isisInterfaceLinkProtection) HasReserved40() bool {
	return obj.obj.Reserved_40 != nil
}

// SetReserved40 sets the bool value in the IsisInterfaceLinkProtection object
//  This is a Protection Scheme with value 0x40.
func (obj *isisInterfaceLinkProtection) SetReserved40(value bool) IsisInterfaceLinkProtection {
	obj.obj.Reserved_40 = &value

	return obj
}

// Reserved80 returns a bool
//  This is a Protection Scheme with value 0x80.
func (obj *isisInterfaceLinkProtection) Reserved80() bool {

	if obj.obj.Reserved_80 == nil {
		*obj.obj.Reserved_80 = false
	}

	return *obj.obj.Reserved_80

}

// Reserved80 returns a bool
//  This is a Protection Scheme with value 0x80.
func (obj *isisInterfaceLinkProtection) HasReserved80() bool {
	return obj.obj.Reserved_80 != nil
}

// SetReserved80 sets the bool value in the IsisInterfaceLinkProtection object
//  This is a Protection Scheme with value 0x80.
func (obj *isisInterfaceLinkProtection) SetReserved80(value bool) IsisInterfaceLinkProtection {
	obj.obj.Reserved_80 = &value

	return obj
}

func (obj *isisInterfaceLinkProtection) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *isisInterfaceLinkProtection) setDefault() {
	if obj.obj.ExtraTraffic == nil {
		obj.SetExtraTraffic(false)
	}
	if obj.obj.Unprotected == nil {
		obj.SetUnprotected(false)
	}
	if obj.obj.Shared == nil {
		obj.SetShared(false)
	}
	if obj.obj.Dedicated_1To_1 == nil {
		obj.SetDedicated1To1(false)
	}
	if obj.obj.Dedicated_1Plus_1 == nil {
		obj.SetDedicated1Plus1(false)
	}
	if obj.obj.Enhanced == nil {
		obj.SetEnhanced(false)
	}
	if obj.obj.Reserved_40 == nil {
		obj.SetReserved40(false)
	}
	if obj.obj.Reserved_80 == nil {
		obj.SetReserved80(false)
	}

}

type isisAuthenticationBase struct {
	obj *snappipb.IsisAuthenticationBase
}

func NewIsisAuthenticationBase() IsisAuthenticationBase {
	obj := isisAuthenticationBase{obj: &snappipb.IsisAuthenticationBase{}}
	obj.setDefault()
	return &obj
}

func (obj *isisAuthenticationBase) Msg() *snappipb.IsisAuthenticationBase {
	return obj.obj
}

func (obj *isisAuthenticationBase) SetMsg(msg *snappipb.IsisAuthenticationBase) IsisAuthenticationBase {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *isisAuthenticationBase) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *isisAuthenticationBase) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisAuthenticationBase) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisAuthenticationBase) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *isisAuthenticationBase) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *isisAuthenticationBase) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *isisAuthenticationBase) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type IsisAuthenticationBase interface {
	Msg() *snappipb.IsisAuthenticationBase
	SetMsg(*snappipb.IsisAuthenticationBase) IsisAuthenticationBase
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	AuthType() IsisAuthenticationBaseAuthTypeEnum
	SetAuthType(value IsisAuthenticationBaseAuthTypeEnum) IsisAuthenticationBase
	Md5() string
	SetMd5(value string) IsisAuthenticationBase
	HasMd5() bool
	Password() string
	SetPassword(value string) IsisAuthenticationBase
	HasPassword() bool
}

type IsisAuthenticationBaseAuthTypeEnum string

var IsisAuthenticationBaseAuthType = struct {
	MD5      IsisAuthenticationBaseAuthTypeEnum
	PASSWORD IsisAuthenticationBaseAuthTypeEnum
}{
	MD5:      IsisAuthenticationBaseAuthTypeEnum("md5"),
	PASSWORD: IsisAuthenticationBaseAuthTypeEnum("password"),
}

func (obj *isisAuthenticationBase) AuthType() IsisAuthenticationBaseAuthTypeEnum {
	return IsisAuthenticationBaseAuthTypeEnum(obj.obj.AuthType.Enum().String())
}

func (obj *isisAuthenticationBase) SetAuthType(value IsisAuthenticationBaseAuthTypeEnum) IsisAuthenticationBase {
	intValue, ok := snappipb.IsisAuthenticationBase_AuthType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on IsisAuthenticationBaseAuthTypeEnum", string(value)))
		return obj
	}
	obj.obj.AuthType = snappipb.IsisAuthenticationBase_AuthType_Enum(intValue)

	return obj
}

// Md5 returns a string
//  Authentication as an MD5 key.
func (obj *isisAuthenticationBase) Md5() string {

	return *obj.obj.Md5

}

// Md5 returns a string
//  Authentication as an MD5 key.
func (obj *isisAuthenticationBase) HasMd5() bool {
	return obj.obj.Md5 != nil
}

// SetMd5 sets the string value in the IsisAuthenticationBase object
//  Authentication as an MD5 key.
func (obj *isisAuthenticationBase) SetMd5(value string) IsisAuthenticationBase {
	obj.obj.Md5 = &value

	return obj
}

// Password returns a string
//  Authentication as a clear text password.
func (obj *isisAuthenticationBase) Password() string {

	return *obj.obj.Password

}

// Password returns a string
//  Authentication as a clear text password.
func (obj *isisAuthenticationBase) HasPassword() bool {
	return obj.obj.Password != nil
}

// SetPassword sets the string value in the IsisAuthenticationBase object
//  Authentication as a clear text password.
func (obj *isisAuthenticationBase) SetPassword(value string) IsisAuthenticationBase {
	obj.obj.Password = &value

	return obj
}

func (obj *isisAuthenticationBase) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// AuthType required
	if obj.obj.AuthType.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("AuthType is required field on IsisAuthenticationBase and got value %s", obj.obj.AuthType.String()))
	}

}

func (obj *isisAuthenticationBase) setDefault() {

}

type v4RouteAddress struct {
	obj *snappipb.V4RouteAddress
}

func NewV4RouteAddress() V4RouteAddress {
	obj := v4RouteAddress{obj: &snappipb.V4RouteAddress{}}
	obj.setDefault()
	return &obj
}

func (obj *v4RouteAddress) Msg() *snappipb.V4RouteAddress {
	return obj.obj
}

func (obj *v4RouteAddress) SetMsg(msg *snappipb.V4RouteAddress) V4RouteAddress {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *v4RouteAddress) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *v4RouteAddress) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *v4RouteAddress) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *v4RouteAddress) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *v4RouteAddress) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *v4RouteAddress) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *v4RouteAddress) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type V4RouteAddress interface {
	Msg() *snappipb.V4RouteAddress
	SetMsg(*snappipb.V4RouteAddress) V4RouteAddress
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Address() string
	SetAddress(value string) V4RouteAddress
	Prefix() int32
	SetPrefix(value int32) V4RouteAddress
	HasPrefix() bool
	Count() int32
	SetCount(value int32) V4RouteAddress
	HasCount() bool
	Step() int32
	SetStep(value int32) V4RouteAddress
	HasStep() bool
}

// Address returns a string
//  The starting address of the network.
func (obj *v4RouteAddress) Address() string {

	return obj.obj.Address
}

// SetAddress sets the string value in the V4RouteAddress object
//  The starting address of the network.
func (obj *v4RouteAddress) SetAddress(value string) V4RouteAddress {
	obj.obj.Address = value

	return obj
}

// Prefix returns a int32
//  The IPv4 network prefix length to be applied to the address.
func (obj *v4RouteAddress) Prefix() int32 {

	if obj.obj.Prefix == nil {
		*obj.obj.Prefix = 24
	}

	return *obj.obj.Prefix

}

// Prefix returns a int32
//  The IPv4 network prefix length to be applied to the address.
func (obj *v4RouteAddress) HasPrefix() bool {
	return obj.obj.Prefix != nil
}

// SetPrefix sets the int32 value in the V4RouteAddress object
//  The IPv4 network prefix length to be applied to the address.
func (obj *v4RouteAddress) SetPrefix(value int32) V4RouteAddress {
	obj.obj.Prefix = &value

	return obj
}

// Count returns a int32
//  The total number of addresses in the range.
func (obj *v4RouteAddress) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  The total number of addresses in the range.
func (obj *v4RouteAddress) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the V4RouteAddress object
//  The total number of addresses in the range.
func (obj *v4RouteAddress) SetCount(value int32) V4RouteAddress {
	obj.obj.Count = &value

	return obj
}

// Step returns a int32
//  Increments the network address prefixes within a route range  where multiple routes are present.  The value is incremented according to the Prefix Length and Step.
func (obj *v4RouteAddress) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  Increments the network address prefixes within a route range  where multiple routes are present.  The value is incremented according to the Prefix Length and Step.
func (obj *v4RouteAddress) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the V4RouteAddress object
//  Increments the network address prefixes within a route range  where multiple routes are present.  The value is incremented according to the Prefix Length and Step.
func (obj *v4RouteAddress) SetStep(value int32) V4RouteAddress {
	obj.obj.Step = &value

	return obj
}

func (obj *v4RouteAddress) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Address required
	if obj.obj.Address == "" {
		validation = append(validation, "Address is required field on interface V4RouteAddress")
	} else {
		err := validateIpv4(obj.Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Address V4RouteAddress"))
		}
	}

	if obj.obj.Prefix != nil {
		if *obj.obj.Prefix < 0 || *obj.obj.Prefix > 32 {
			validation = append(
				validation, fmt.Sprintf("0 <= V4RouteAddress.Prefix <= 32 but Got %d", *obj.obj.Prefix))
		}

	}

	if obj.obj.Count != nil {
		if *obj.obj.Count < 1 {
			validation = append(
				validation, fmt.Sprintf("1 <= V4RouteAddress.Count <= any but Got %d", *obj.obj.Count))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 1 {
			validation = append(
				validation, fmt.Sprintf("1 <= V4RouteAddress.Step <= any but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *v4RouteAddress) setDefault() {
	if obj.obj.Prefix == nil {
		obj.SetPrefix(24)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}

}

type v6RouteAddress struct {
	obj *snappipb.V6RouteAddress
}

func NewV6RouteAddress() V6RouteAddress {
	obj := v6RouteAddress{obj: &snappipb.V6RouteAddress{}}
	obj.setDefault()
	return &obj
}

func (obj *v6RouteAddress) Msg() *snappipb.V6RouteAddress {
	return obj.obj
}

func (obj *v6RouteAddress) SetMsg(msg *snappipb.V6RouteAddress) V6RouteAddress {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *v6RouteAddress) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *v6RouteAddress) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *v6RouteAddress) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *v6RouteAddress) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *v6RouteAddress) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *v6RouteAddress) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *v6RouteAddress) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type V6RouteAddress interface {
	Msg() *snappipb.V6RouteAddress
	SetMsg(*snappipb.V6RouteAddress) V6RouteAddress
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Address() string
	SetAddress(value string) V6RouteAddress
	Prefix() int32
	SetPrefix(value int32) V6RouteAddress
	HasPrefix() bool
	Count() int32
	SetCount(value int32) V6RouteAddress
	HasCount() bool
	Step() int32
	SetStep(value int32) V6RouteAddress
	HasStep() bool
}

// Address returns a string
//  The starting address of the network.
func (obj *v6RouteAddress) Address() string {

	return obj.obj.Address
}

// SetAddress sets the string value in the V6RouteAddress object
//  The starting address of the network.
func (obj *v6RouteAddress) SetAddress(value string) V6RouteAddress {
	obj.obj.Address = value

	return obj
}

// Prefix returns a int32
//  The IPv6 network prefix length to be applied to the address.
func (obj *v6RouteAddress) Prefix() int32 {

	if obj.obj.Prefix == nil {
		*obj.obj.Prefix = 64
	}

	return *obj.obj.Prefix

}

// Prefix returns a int32
//  The IPv6 network prefix length to be applied to the address.
func (obj *v6RouteAddress) HasPrefix() bool {
	return obj.obj.Prefix != nil
}

// SetPrefix sets the int32 value in the V6RouteAddress object
//  The IPv6 network prefix length to be applied to the address.
func (obj *v6RouteAddress) SetPrefix(value int32) V6RouteAddress {
	obj.obj.Prefix = &value

	return obj
}

// Count returns a int32
//  The total number of addresses in the range.
func (obj *v6RouteAddress) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  The total number of addresses in the range.
func (obj *v6RouteAddress) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the V6RouteAddress object
//  The total number of addresses in the range.
func (obj *v6RouteAddress) SetCount(value int32) V6RouteAddress {
	obj.obj.Count = &value

	return obj
}

// Step returns a int32
//  Increments the network address prefixes within a route range  where multiple routes are present.  The value is incremented according to the Prefix Length and Step.
func (obj *v6RouteAddress) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  Increments the network address prefixes within a route range  where multiple routes are present.  The value is incremented according to the Prefix Length and Step.
func (obj *v6RouteAddress) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the V6RouteAddress object
//  Increments the network address prefixes within a route range  where multiple routes are present.  The value is incremented according to the Prefix Length and Step.
func (obj *v6RouteAddress) SetStep(value int32) V6RouteAddress {
	obj.obj.Step = &value

	return obj
}

func (obj *v6RouteAddress) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Address required
	if obj.obj.Address == "" {
		validation = append(validation, "Address is required field on interface V6RouteAddress")
	} else {
		err := validateIpv6(obj.Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Address V6RouteAddress"))
		}
	}

	if obj.obj.Prefix != nil {
		if *obj.obj.Prefix < 0 || *obj.obj.Prefix > 128 {
			validation = append(
				validation, fmt.Sprintf("0 <= V6RouteAddress.Prefix <= 128 but Got %d", *obj.obj.Prefix))
		}

	}

	if obj.obj.Count != nil {
		if *obj.obj.Count < 1 {
			validation = append(
				validation, fmt.Sprintf("1 <= V6RouteAddress.Count <= any but Got %d", *obj.obj.Count))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 1 {
			validation = append(
				validation, fmt.Sprintf("1 <= V6RouteAddress.Step <= any but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *v6RouteAddress) setDefault() {
	if obj.obj.Prefix == nil {
		obj.SetPrefix(64)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}

}

type bgpV4Peer struct {
	obj *snappipb.BgpV4Peer
}

func NewBgpV4Peer() BgpV4Peer {
	obj := bgpV4Peer{obj: &snappipb.BgpV4Peer{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpV4Peer) Msg() *snappipb.BgpV4Peer {
	return obj.obj
}

func (obj *bgpV4Peer) SetMsg(msg *snappipb.BgpV4Peer) BgpV4Peer {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpV4Peer) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpV4Peer) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV4Peer) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV4Peer) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV4Peer) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV4Peer) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpV4Peer) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpV4Peer interface {
	Msg() *snappipb.BgpV4Peer
	SetMsg(*snappipb.BgpV4Peer) BgpV4Peer
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PeerAddress() string
	SetPeerAddress(value string) BgpV4Peer
	AsType() BgpV4PeerAsTypeEnum
	SetAsType(value BgpV4PeerAsTypeEnum) BgpV4Peer
	AsNumber() int32
	SetAsNumber(value int32) BgpV4Peer
	AsNumberWidth() BgpV4PeerAsNumberWidthEnum
	SetAsNumberWidth(value BgpV4PeerAsNumberWidthEnum) BgpV4Peer
	HasAsNumberWidth() bool
	Advanced() BgpAdvanced
	SetAdvanced(value BgpAdvanced) BgpV4Peer
	HasAdvanced() bool
	Capability() BgpCapability
	SetCapability(value BgpCapability) BgpV4Peer
	HasCapability() bool
	V4Routes() BgpV4PeerBgpV4RouteRangeIter
	V6Routes() BgpV4PeerBgpV6RouteRangeIter
	V4SrtePolicies() BgpV4PeerBgpSrteV4PolicyIter
	V6SrtePolicies() BgpV4PeerBgpSrteV6PolicyIter
	Name() string
	SetName(value string) BgpV4Peer
}

// PeerAddress returns a string
//  IPv4 address of the BGP peer for the session.
func (obj *bgpV4Peer) PeerAddress() string {

	return obj.obj.PeerAddress
}

// SetPeerAddress sets the string value in the BgpV4Peer object
//  IPv4 address of the BGP peer for the session.
func (obj *bgpV4Peer) SetPeerAddress(value string) BgpV4Peer {
	obj.obj.PeerAddress = value

	return obj
}

type BgpV4PeerAsTypeEnum string

var BgpV4PeerAsType = struct {
	IBGP BgpV4PeerAsTypeEnum
	EBGP BgpV4PeerAsTypeEnum
}{
	IBGP: BgpV4PeerAsTypeEnum("ibgp"),
	EBGP: BgpV4PeerAsTypeEnum("ebgp"),
}

func (obj *bgpV4Peer) AsType() BgpV4PeerAsTypeEnum {
	return BgpV4PeerAsTypeEnum(obj.obj.AsType.Enum().String())
}

func (obj *bgpV4Peer) SetAsType(value BgpV4PeerAsTypeEnum) BgpV4Peer {
	intValue, ok := snappipb.BgpV4Peer_AsType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpV4PeerAsTypeEnum", string(value)))
		return obj
	}
	obj.obj.AsType = snappipb.BgpV4Peer_AsType_Enum(intValue)

	return obj
}

// AsNumber returns a int32
//  Autonomous System Number (AS number or ASN)
func (obj *bgpV4Peer) AsNumber() int32 {

	return obj.obj.AsNumber
}

// SetAsNumber sets the int32 value in the BgpV4Peer object
//  Autonomous System Number (AS number or ASN)
func (obj *bgpV4Peer) SetAsNumber(value int32) BgpV4Peer {
	obj.obj.AsNumber = value

	return obj
}

type BgpV4PeerAsNumberWidthEnum string

var BgpV4PeerAsNumberWidth = struct {
	TWO  BgpV4PeerAsNumberWidthEnum
	FOUR BgpV4PeerAsNumberWidthEnum
}{
	TWO:  BgpV4PeerAsNumberWidthEnum("two"),
	FOUR: BgpV4PeerAsNumberWidthEnum("four"),
}

func (obj *bgpV4Peer) AsNumberWidth() BgpV4PeerAsNumberWidthEnum {
	return BgpV4PeerAsNumberWidthEnum(obj.obj.AsNumberWidth.Enum().String())
}

// AsNumberWidth returns a string
//  The width in bytes of the as_number values. Any as_number values that exceeds the width MUST result in an error.
func (obj *bgpV4Peer) HasAsNumberWidth() bool {
	return obj.obj.AsNumberWidth != nil
}

func (obj *bgpV4Peer) SetAsNumberWidth(value BgpV4PeerAsNumberWidthEnum) BgpV4Peer {
	intValue, ok := snappipb.BgpV4Peer_AsNumberWidth_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpV4PeerAsNumberWidthEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpV4Peer_AsNumberWidth_Enum(intValue)
	obj.obj.AsNumberWidth = &enumValue

	return obj
}

// Advanced returns a BgpAdvanced
//  description is TBD
func (obj *bgpV4Peer) Advanced() BgpAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = NewBgpAdvanced().Msg()
	}
	return &bgpAdvanced{obj: obj.obj.Advanced}
}

// Advanced returns a BgpAdvanced
//  description is TBD
func (obj *bgpV4Peer) HasAdvanced() bool {
	return obj.obj.Advanced != nil
}

// SetAdvanced sets the BgpAdvanced value in the BgpV4Peer object
//  description is TBD
func (obj *bgpV4Peer) SetAdvanced(value BgpAdvanced) BgpV4Peer {
	obj.Advanced().SetMsg(value.Msg())

	return obj
}

// Capability returns a BgpCapability
//  description is TBD
func (obj *bgpV4Peer) Capability() BgpCapability {
	if obj.obj.Capability == nil {
		obj.obj.Capability = NewBgpCapability().Msg()
	}
	return &bgpCapability{obj: obj.obj.Capability}
}

// Capability returns a BgpCapability
//  description is TBD
func (obj *bgpV4Peer) HasCapability() bool {
	return obj.obj.Capability != nil
}

// SetCapability sets the BgpCapability value in the BgpV4Peer object
//  description is TBD
func (obj *bgpV4Peer) SetCapability(value BgpCapability) BgpV4Peer {
	obj.Capability().SetMsg(value.Msg())

	return obj
}

// V4Routes returns a []BgpV4RouteRange
//  Emulated BGPv4 route ranges.
func (obj *bgpV4Peer) V4Routes() BgpV4PeerBgpV4RouteRangeIter {
	if obj.obj.V4Routes == nil {
		obj.obj.V4Routes = []*snappipb.BgpV4RouteRange{}
	}
	return &bgpV4PeerBgpV4RouteRangeIter{obj: obj}
}

type bgpV4PeerBgpV4RouteRangeIter struct {
	obj *bgpV4Peer
}

type BgpV4PeerBgpV4RouteRangeIter interface {
	Add() BgpV4RouteRange
	Items() []BgpV4RouteRange
}

func (obj *bgpV4PeerBgpV4RouteRangeIter) Add() BgpV4RouteRange {
	newObj := &snappipb.BgpV4RouteRange{}
	obj.obj.obj.V4Routes = append(obj.obj.obj.V4Routes, newObj)
	newLibObj := &bgpV4RouteRange{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV4PeerBgpV4RouteRangeIter) Items() []BgpV4RouteRange {
	slice := []BgpV4RouteRange{}
	for _, item := range obj.obj.obj.V4Routes {
		slice = append(slice, &bgpV4RouteRange{obj: item})
	}
	return slice
}

// V6Routes returns a []BgpV6RouteRange
//  Emulated BGPv6 route ranges.
func (obj *bgpV4Peer) V6Routes() BgpV4PeerBgpV6RouteRangeIter {
	if obj.obj.V6Routes == nil {
		obj.obj.V6Routes = []*snappipb.BgpV6RouteRange{}
	}
	return &bgpV4PeerBgpV6RouteRangeIter{obj: obj}
}

type bgpV4PeerBgpV6RouteRangeIter struct {
	obj *bgpV4Peer
}

type BgpV4PeerBgpV6RouteRangeIter interface {
	Add() BgpV6RouteRange
	Items() []BgpV6RouteRange
}

func (obj *bgpV4PeerBgpV6RouteRangeIter) Add() BgpV6RouteRange {
	newObj := &snappipb.BgpV6RouteRange{}
	obj.obj.obj.V6Routes = append(obj.obj.obj.V6Routes, newObj)
	newLibObj := &bgpV6RouteRange{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV4PeerBgpV6RouteRangeIter) Items() []BgpV6RouteRange {
	slice := []BgpV6RouteRange{}
	for _, item := range obj.obj.obj.V6Routes {
		slice = append(slice, &bgpV6RouteRange{obj: item})
	}
	return slice
}

// V4SrtePolicies returns a []BgpSrteV4Policy
//  Segment Routing Traffic Engineering (SR TE) Policies for IPv4 Address Family Identifier (AFI).
func (obj *bgpV4Peer) V4SrtePolicies() BgpV4PeerBgpSrteV4PolicyIter {
	if obj.obj.V4SrtePolicies == nil {
		obj.obj.V4SrtePolicies = []*snappipb.BgpSrteV4Policy{}
	}
	return &bgpV4PeerBgpSrteV4PolicyIter{obj: obj}
}

type bgpV4PeerBgpSrteV4PolicyIter struct {
	obj *bgpV4Peer
}

type BgpV4PeerBgpSrteV4PolicyIter interface {
	Add() BgpSrteV4Policy
	Items() []BgpSrteV4Policy
}

func (obj *bgpV4PeerBgpSrteV4PolicyIter) Add() BgpSrteV4Policy {
	newObj := &snappipb.BgpSrteV4Policy{}
	obj.obj.obj.V4SrtePolicies = append(obj.obj.obj.V4SrtePolicies, newObj)
	newLibObj := &bgpSrteV4Policy{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV4PeerBgpSrteV4PolicyIter) Items() []BgpSrteV4Policy {
	slice := []BgpSrteV4Policy{}
	for _, item := range obj.obj.obj.V4SrtePolicies {
		slice = append(slice, &bgpSrteV4Policy{obj: item})
	}
	return slice
}

// V6SrtePolicies returns a []BgpSrteV6Policy
//  Segment Routing Traffic Engineering (SR TE) Policies for IPv6 Address Family Identifier (AFI).
func (obj *bgpV4Peer) V6SrtePolicies() BgpV4PeerBgpSrteV6PolicyIter {
	if obj.obj.V6SrtePolicies == nil {
		obj.obj.V6SrtePolicies = []*snappipb.BgpSrteV6Policy{}
	}
	return &bgpV4PeerBgpSrteV6PolicyIter{obj: obj}
}

type bgpV4PeerBgpSrteV6PolicyIter struct {
	obj *bgpV4Peer
}

type BgpV4PeerBgpSrteV6PolicyIter interface {
	Add() BgpSrteV6Policy
	Items() []BgpSrteV6Policy
}

func (obj *bgpV4PeerBgpSrteV6PolicyIter) Add() BgpSrteV6Policy {
	newObj := &snappipb.BgpSrteV6Policy{}
	obj.obj.obj.V6SrtePolicies = append(obj.obj.obj.V6SrtePolicies, newObj)
	newLibObj := &bgpSrteV6Policy{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV4PeerBgpSrteV6PolicyIter) Items() []BgpSrteV6Policy {
	slice := []BgpSrteV6Policy{}
	for _, item := range obj.obj.obj.V6SrtePolicies {
		slice = append(slice, &bgpSrteV6Policy{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpV4Peer) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the BgpV4Peer object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpV4Peer) SetName(value string) BgpV4Peer {
	obj.obj.Name = value

	return obj
}

func (obj *bgpV4Peer) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// PeerAddress required
	if obj.obj.PeerAddress == "" {
		validation = append(validation, "PeerAddress is required field on interface BgpV4Peer")
	} else {
		err := validateIpv4(obj.PeerAddress())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on PeerAddress BgpV4Peer"))
		}
	}

	// AsType required
	if obj.obj.AsType.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("AsType is required field on BgpV4Peer and got value %s", obj.obj.AsType.String()))
	}

	// AsNumber required
	if obj.obj.AsNumber == 0 {
		validation = append(validation, "AsNumber is required field on interface BgpV4Peer")
	}

	if obj.obj.Advanced != nil {
		obj.Advanced().validateObj(set_default)
	}

	if obj.obj.Capability != nil {
		obj.Capability().validateObj(set_default)
	}
	if obj.obj.V4Routes != nil {
		for _, item := range obj.V4Routes().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.V6Routes != nil {
		for _, item := range obj.V6Routes().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.V4SrtePolicies != nil {
		for _, item := range obj.V4SrtePolicies().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.V6SrtePolicies != nil {
		for _, item := range obj.V6SrtePolicies().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface BgpV4Peer")
	}
}

func (obj *bgpV4Peer) setDefault() {
	if obj.obj.AsNumberWidth == nil {
		obj.SetAsNumberWidth(BgpV4PeerAsNumberWidth.FOUR)

	}

}

type bgpV6Peer struct {
	obj *snappipb.BgpV6Peer
}

func NewBgpV6Peer() BgpV6Peer {
	obj := bgpV6Peer{obj: &snappipb.BgpV6Peer{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpV6Peer) Msg() *snappipb.BgpV6Peer {
	return obj.obj
}

func (obj *bgpV6Peer) SetMsg(msg *snappipb.BgpV6Peer) BgpV6Peer {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpV6Peer) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpV6Peer) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV6Peer) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV6Peer) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV6Peer) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV6Peer) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpV6Peer) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpV6Peer interface {
	Msg() *snappipb.BgpV6Peer
	SetMsg(*snappipb.BgpV6Peer) BgpV6Peer
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PeerAddress() string
	SetPeerAddress(value string) BgpV6Peer
	SegmentRouting() BgpV6SegmentRouting
	SetSegmentRouting(value BgpV6SegmentRouting) BgpV6Peer
	HasSegmentRouting() bool
	AsType() BgpV6PeerAsTypeEnum
	SetAsType(value BgpV6PeerAsTypeEnum) BgpV6Peer
	AsNumber() int32
	SetAsNumber(value int32) BgpV6Peer
	AsNumberWidth() BgpV6PeerAsNumberWidthEnum
	SetAsNumberWidth(value BgpV6PeerAsNumberWidthEnum) BgpV6Peer
	HasAsNumberWidth() bool
	Advanced() BgpAdvanced
	SetAdvanced(value BgpAdvanced) BgpV6Peer
	HasAdvanced() bool
	Capability() BgpCapability
	SetCapability(value BgpCapability) BgpV6Peer
	HasCapability() bool
	V4Routes() BgpV6PeerBgpV4RouteRangeIter
	V6Routes() BgpV6PeerBgpV6RouteRangeIter
	V4SrtePolicies() BgpV6PeerBgpSrteV4PolicyIter
	V6SrtePolicies() BgpV6PeerBgpSrteV6PolicyIter
	Name() string
	SetName(value string) BgpV6Peer
}

// PeerAddress returns a string
//  IPv6 address of the BGP peer for the session
func (obj *bgpV6Peer) PeerAddress() string {

	return obj.obj.PeerAddress
}

// SetPeerAddress sets the string value in the BgpV6Peer object
//  IPv6 address of the BGP peer for the session
func (obj *bgpV6Peer) SetPeerAddress(value string) BgpV6Peer {
	obj.obj.PeerAddress = value

	return obj
}

// SegmentRouting returns a BgpV6SegmentRouting
//  description is TBD
func (obj *bgpV6Peer) SegmentRouting() BgpV6SegmentRouting {
	if obj.obj.SegmentRouting == nil {
		obj.obj.SegmentRouting = NewBgpV6SegmentRouting().Msg()
	}
	return &bgpV6SegmentRouting{obj: obj.obj.SegmentRouting}
}

// SegmentRouting returns a BgpV6SegmentRouting
//  description is TBD
func (obj *bgpV6Peer) HasSegmentRouting() bool {
	return obj.obj.SegmentRouting != nil
}

// SetSegmentRouting sets the BgpV6SegmentRouting value in the BgpV6Peer object
//  description is TBD
func (obj *bgpV6Peer) SetSegmentRouting(value BgpV6SegmentRouting) BgpV6Peer {
	obj.SegmentRouting().SetMsg(value.Msg())

	return obj
}

type BgpV6PeerAsTypeEnum string

var BgpV6PeerAsType = struct {
	IBGP BgpV6PeerAsTypeEnum
	EBGP BgpV6PeerAsTypeEnum
}{
	IBGP: BgpV6PeerAsTypeEnum("ibgp"),
	EBGP: BgpV6PeerAsTypeEnum("ebgp"),
}

func (obj *bgpV6Peer) AsType() BgpV6PeerAsTypeEnum {
	return BgpV6PeerAsTypeEnum(obj.obj.AsType.Enum().String())
}

func (obj *bgpV6Peer) SetAsType(value BgpV6PeerAsTypeEnum) BgpV6Peer {
	intValue, ok := snappipb.BgpV6Peer_AsType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpV6PeerAsTypeEnum", string(value)))
		return obj
	}
	obj.obj.AsType = snappipb.BgpV6Peer_AsType_Enum(intValue)

	return obj
}

// AsNumber returns a int32
//  Autonomous System Number (AS number or ASN)
func (obj *bgpV6Peer) AsNumber() int32 {

	return obj.obj.AsNumber
}

// SetAsNumber sets the int32 value in the BgpV6Peer object
//  Autonomous System Number (AS number or ASN)
func (obj *bgpV6Peer) SetAsNumber(value int32) BgpV6Peer {
	obj.obj.AsNumber = value

	return obj
}

type BgpV6PeerAsNumberWidthEnum string

var BgpV6PeerAsNumberWidth = struct {
	TWO  BgpV6PeerAsNumberWidthEnum
	FOUR BgpV6PeerAsNumberWidthEnum
}{
	TWO:  BgpV6PeerAsNumberWidthEnum("two"),
	FOUR: BgpV6PeerAsNumberWidthEnum("four"),
}

func (obj *bgpV6Peer) AsNumberWidth() BgpV6PeerAsNumberWidthEnum {
	return BgpV6PeerAsNumberWidthEnum(obj.obj.AsNumberWidth.Enum().String())
}

// AsNumberWidth returns a string
//  The width in bytes of the as_number values. Any as_number values that exceeds the width MUST result in an error.
func (obj *bgpV6Peer) HasAsNumberWidth() bool {
	return obj.obj.AsNumberWidth != nil
}

func (obj *bgpV6Peer) SetAsNumberWidth(value BgpV6PeerAsNumberWidthEnum) BgpV6Peer {
	intValue, ok := snappipb.BgpV6Peer_AsNumberWidth_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpV6PeerAsNumberWidthEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpV6Peer_AsNumberWidth_Enum(intValue)
	obj.obj.AsNumberWidth = &enumValue

	return obj
}

// Advanced returns a BgpAdvanced
//  description is TBD
func (obj *bgpV6Peer) Advanced() BgpAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = NewBgpAdvanced().Msg()
	}
	return &bgpAdvanced{obj: obj.obj.Advanced}
}

// Advanced returns a BgpAdvanced
//  description is TBD
func (obj *bgpV6Peer) HasAdvanced() bool {
	return obj.obj.Advanced != nil
}

// SetAdvanced sets the BgpAdvanced value in the BgpV6Peer object
//  description is TBD
func (obj *bgpV6Peer) SetAdvanced(value BgpAdvanced) BgpV6Peer {
	obj.Advanced().SetMsg(value.Msg())

	return obj
}

// Capability returns a BgpCapability
//  description is TBD
func (obj *bgpV6Peer) Capability() BgpCapability {
	if obj.obj.Capability == nil {
		obj.obj.Capability = NewBgpCapability().Msg()
	}
	return &bgpCapability{obj: obj.obj.Capability}
}

// Capability returns a BgpCapability
//  description is TBD
func (obj *bgpV6Peer) HasCapability() bool {
	return obj.obj.Capability != nil
}

// SetCapability sets the BgpCapability value in the BgpV6Peer object
//  description is TBD
func (obj *bgpV6Peer) SetCapability(value BgpCapability) BgpV6Peer {
	obj.Capability().SetMsg(value.Msg())

	return obj
}

// V4Routes returns a []BgpV4RouteRange
//  Emulated BGPv4 route ranges.
func (obj *bgpV6Peer) V4Routes() BgpV6PeerBgpV4RouteRangeIter {
	if obj.obj.V4Routes == nil {
		obj.obj.V4Routes = []*snappipb.BgpV4RouteRange{}
	}
	return &bgpV6PeerBgpV4RouteRangeIter{obj: obj}
}

type bgpV6PeerBgpV4RouteRangeIter struct {
	obj *bgpV6Peer
}

type BgpV6PeerBgpV4RouteRangeIter interface {
	Add() BgpV4RouteRange
	Items() []BgpV4RouteRange
}

func (obj *bgpV6PeerBgpV4RouteRangeIter) Add() BgpV4RouteRange {
	newObj := &snappipb.BgpV4RouteRange{}
	obj.obj.obj.V4Routes = append(obj.obj.obj.V4Routes, newObj)
	newLibObj := &bgpV4RouteRange{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV6PeerBgpV4RouteRangeIter) Items() []BgpV4RouteRange {
	slice := []BgpV4RouteRange{}
	for _, item := range obj.obj.obj.V4Routes {
		slice = append(slice, &bgpV4RouteRange{obj: item})
	}
	return slice
}

// V6Routes returns a []BgpV6RouteRange
//  Emulated BGPv6 route ranges.
func (obj *bgpV6Peer) V6Routes() BgpV6PeerBgpV6RouteRangeIter {
	if obj.obj.V6Routes == nil {
		obj.obj.V6Routes = []*snappipb.BgpV6RouteRange{}
	}
	return &bgpV6PeerBgpV6RouteRangeIter{obj: obj}
}

type bgpV6PeerBgpV6RouteRangeIter struct {
	obj *bgpV6Peer
}

type BgpV6PeerBgpV6RouteRangeIter interface {
	Add() BgpV6RouteRange
	Items() []BgpV6RouteRange
}

func (obj *bgpV6PeerBgpV6RouteRangeIter) Add() BgpV6RouteRange {
	newObj := &snappipb.BgpV6RouteRange{}
	obj.obj.obj.V6Routes = append(obj.obj.obj.V6Routes, newObj)
	newLibObj := &bgpV6RouteRange{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV6PeerBgpV6RouteRangeIter) Items() []BgpV6RouteRange {
	slice := []BgpV6RouteRange{}
	for _, item := range obj.obj.obj.V6Routes {
		slice = append(slice, &bgpV6RouteRange{obj: item})
	}
	return slice
}

// V4SrtePolicies returns a []BgpSrteV4Policy
//  Segment Routing Traffic Engineering (SR TE) Policies for IPv4 Address Family Identifier (AFI).
func (obj *bgpV6Peer) V4SrtePolicies() BgpV6PeerBgpSrteV4PolicyIter {
	if obj.obj.V4SrtePolicies == nil {
		obj.obj.V4SrtePolicies = []*snappipb.BgpSrteV4Policy{}
	}
	return &bgpV6PeerBgpSrteV4PolicyIter{obj: obj}
}

type bgpV6PeerBgpSrteV4PolicyIter struct {
	obj *bgpV6Peer
}

type BgpV6PeerBgpSrteV4PolicyIter interface {
	Add() BgpSrteV4Policy
	Items() []BgpSrteV4Policy
}

func (obj *bgpV6PeerBgpSrteV4PolicyIter) Add() BgpSrteV4Policy {
	newObj := &snappipb.BgpSrteV4Policy{}
	obj.obj.obj.V4SrtePolicies = append(obj.obj.obj.V4SrtePolicies, newObj)
	newLibObj := &bgpSrteV4Policy{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV6PeerBgpSrteV4PolicyIter) Items() []BgpSrteV4Policy {
	slice := []BgpSrteV4Policy{}
	for _, item := range obj.obj.obj.V4SrtePolicies {
		slice = append(slice, &bgpSrteV4Policy{obj: item})
	}
	return slice
}

// V6SrtePolicies returns a []BgpSrteV6Policy
//  Segment Routing Traffic Engineering (SR TE) Policies for IPv6 Address Family Identifier (AFI).
func (obj *bgpV6Peer) V6SrtePolicies() BgpV6PeerBgpSrteV6PolicyIter {
	if obj.obj.V6SrtePolicies == nil {
		obj.obj.V6SrtePolicies = []*snappipb.BgpSrteV6Policy{}
	}
	return &bgpV6PeerBgpSrteV6PolicyIter{obj: obj}
}

type bgpV6PeerBgpSrteV6PolicyIter struct {
	obj *bgpV6Peer
}

type BgpV6PeerBgpSrteV6PolicyIter interface {
	Add() BgpSrteV6Policy
	Items() []BgpSrteV6Policy
}

func (obj *bgpV6PeerBgpSrteV6PolicyIter) Add() BgpSrteV6Policy {
	newObj := &snappipb.BgpSrteV6Policy{}
	obj.obj.obj.V6SrtePolicies = append(obj.obj.obj.V6SrtePolicies, newObj)
	newLibObj := &bgpSrteV6Policy{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV6PeerBgpSrteV6PolicyIter) Items() []BgpSrteV6Policy {
	slice := []BgpSrteV6Policy{}
	for _, item := range obj.obj.obj.V6SrtePolicies {
		slice = append(slice, &bgpSrteV6Policy{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpV6Peer) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the BgpV6Peer object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpV6Peer) SetName(value string) BgpV6Peer {
	obj.obj.Name = value

	return obj
}

func (obj *bgpV6Peer) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// PeerAddress required
	if obj.obj.PeerAddress == "" {
		validation = append(validation, "PeerAddress is required field on interface BgpV6Peer")
	} else {
		err := validateIpv6(obj.PeerAddress())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on PeerAddress BgpV6Peer"))
		}
	}

	if obj.obj.SegmentRouting != nil {
		obj.SegmentRouting().validateObj(set_default)
	}

	// AsType required
	if obj.obj.AsType.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("AsType is required field on BgpV6Peer and got value %s", obj.obj.AsType.String()))
	}

	// AsNumber required
	if obj.obj.AsNumber == 0 {
		validation = append(validation, "AsNumber is required field on interface BgpV6Peer")
	}

	if obj.obj.Advanced != nil {
		obj.Advanced().validateObj(set_default)
	}

	if obj.obj.Capability != nil {
		obj.Capability().validateObj(set_default)
	}
	if obj.obj.V4Routes != nil {
		for _, item := range obj.V4Routes().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.V6Routes != nil {
		for _, item := range obj.V6Routes().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.V4SrtePolicies != nil {
		for _, item := range obj.V4SrtePolicies().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.V6SrtePolicies != nil {
		for _, item := range obj.V6SrtePolicies().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface BgpV6Peer")
	}
}

func (obj *bgpV6Peer) setDefault() {
	if obj.obj.AsNumberWidth == nil {
		obj.SetAsNumberWidth(BgpV6PeerAsNumberWidth.FOUR)

	}

}

type patternFlowEthernetDst struct {
	obj *snappipb.PatternFlowEthernetDst
}

func NewPatternFlowEthernetDst() PatternFlowEthernetDst {
	obj := patternFlowEthernetDst{obj: &snappipb.PatternFlowEthernetDst{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetDst) Msg() *snappipb.PatternFlowEthernetDst {
	return obj.obj
}

func (obj *patternFlowEthernetDst) SetMsg(msg *snappipb.PatternFlowEthernetDst) PatternFlowEthernetDst {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetDst) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetDst) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetDst) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetDst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetDst) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetDst) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetDst) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetDst interface {
	Msg() *snappipb.PatternFlowEthernetDst
	SetMsg(*snappipb.PatternFlowEthernetDst) PatternFlowEthernetDst
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowEthernetDstChoiceEnum
	SetChoice(value PatternFlowEthernetDstChoiceEnum) PatternFlowEthernetDst
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowEthernetDst
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowEthernetDst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetDst
	HasMetricGroup() bool
	Increment() PatternFlowEthernetDstCounter
	SetIncrement(value PatternFlowEthernetDstCounter) PatternFlowEthernetDst
	HasIncrement() bool
	Decrement() PatternFlowEthernetDstCounter
	SetDecrement(value PatternFlowEthernetDstCounter) PatternFlowEthernetDst
	HasDecrement() bool
}

type PatternFlowEthernetDstChoiceEnum string

var PatternFlowEthernetDstChoice = struct {
	VALUE     PatternFlowEthernetDstChoiceEnum
	VALUES    PatternFlowEthernetDstChoiceEnum
	INCREMENT PatternFlowEthernetDstChoiceEnum
	DECREMENT PatternFlowEthernetDstChoiceEnum
}{
	VALUE:     PatternFlowEthernetDstChoiceEnum("value"),
	VALUES:    PatternFlowEthernetDstChoiceEnum("values"),
	INCREMENT: PatternFlowEthernetDstChoiceEnum("increment"),
	DECREMENT: PatternFlowEthernetDstChoiceEnum("decrement"),
}

func (obj *patternFlowEthernetDst) Choice() PatternFlowEthernetDstChoiceEnum {
	return PatternFlowEthernetDstChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowEthernetDst) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowEthernetDst) SetChoice(value PatternFlowEthernetDstChoiceEnum) PatternFlowEthernetDst {
	intValue, ok := snappipb.PatternFlowEthernetDst_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowEthernetDstChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowEthernetDst_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetDst) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "00:00:00:00:00:00"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetDst) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowEthernetDst object
//  description is TBD
func (obj *patternFlowEthernetDst) SetValue(value string) PatternFlowEthernetDst {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowEthernetDstChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowEthernetDst) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowEthernetDst object
//  description is TBD
func (obj *patternFlowEthernetDst) SetValues(value []string) PatternFlowEthernetDst {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowEthernetDstChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetDst) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetDst) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowEthernetDst object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetDst) SetMetricGroup(value string) PatternFlowEthernetDst {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowEthernetDstCounter
//  description is TBD
func (obj *patternFlowEthernetDst) Increment() PatternFlowEthernetDstCounter {
	obj.SetChoice(PatternFlowEthernetDstChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowEthernetDstCounter().Msg()
	}
	return &patternFlowEthernetDstCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowEthernetDstCounter
//  description is TBD
func (obj *patternFlowEthernetDst) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowEthernetDstCounter value in the PatternFlowEthernetDst object
//  description is TBD
func (obj *patternFlowEthernetDst) SetIncrement(value PatternFlowEthernetDstCounter) PatternFlowEthernetDst {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetDstChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowEthernetDstCounter
//  description is TBD
func (obj *patternFlowEthernetDst) Decrement() PatternFlowEthernetDstCounter {
	obj.SetChoice(PatternFlowEthernetDstChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowEthernetDstCounter().Msg()
	}
	return &patternFlowEthernetDstCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowEthernetDstCounter
//  description is TBD
func (obj *patternFlowEthernetDst) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowEthernetDstCounter value in the PatternFlowEthernetDst object
//  description is TBD
func (obj *patternFlowEthernetDst) SetDecrement(value PatternFlowEthernetDstCounter) PatternFlowEthernetDst {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetDstChoice.DECREMENT)
	return obj
}

func (obj *patternFlowEthernetDst) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateMac(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowEthernetDst"))
		}
	}

	if obj.obj.Values != nil {
		err := validateMacSlice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowEthernetDst"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowEthernetDst) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowEthernetDstChoice.VALUE)
		obj.SetValue("00:00:00:00:00:00")
	}

}

type patternFlowEthernetSrc struct {
	obj *snappipb.PatternFlowEthernetSrc
}

func NewPatternFlowEthernetSrc() PatternFlowEthernetSrc {
	obj := patternFlowEthernetSrc{obj: &snappipb.PatternFlowEthernetSrc{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetSrc) Msg() *snappipb.PatternFlowEthernetSrc {
	return obj.obj
}

func (obj *patternFlowEthernetSrc) SetMsg(msg *snappipb.PatternFlowEthernetSrc) PatternFlowEthernetSrc {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetSrc) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetSrc) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetSrc) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetSrc) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetSrc) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetSrc) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetSrc) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetSrc interface {
	Msg() *snappipb.PatternFlowEthernetSrc
	SetMsg(*snappipb.PatternFlowEthernetSrc) PatternFlowEthernetSrc
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowEthernetSrcChoiceEnum
	SetChoice(value PatternFlowEthernetSrcChoiceEnum) PatternFlowEthernetSrc
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowEthernetSrc
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowEthernetSrc
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetSrc
	HasMetricGroup() bool
	Increment() PatternFlowEthernetSrcCounter
	SetIncrement(value PatternFlowEthernetSrcCounter) PatternFlowEthernetSrc
	HasIncrement() bool
	Decrement() PatternFlowEthernetSrcCounter
	SetDecrement(value PatternFlowEthernetSrcCounter) PatternFlowEthernetSrc
	HasDecrement() bool
}

type PatternFlowEthernetSrcChoiceEnum string

var PatternFlowEthernetSrcChoice = struct {
	VALUE     PatternFlowEthernetSrcChoiceEnum
	VALUES    PatternFlowEthernetSrcChoiceEnum
	INCREMENT PatternFlowEthernetSrcChoiceEnum
	DECREMENT PatternFlowEthernetSrcChoiceEnum
}{
	VALUE:     PatternFlowEthernetSrcChoiceEnum("value"),
	VALUES:    PatternFlowEthernetSrcChoiceEnum("values"),
	INCREMENT: PatternFlowEthernetSrcChoiceEnum("increment"),
	DECREMENT: PatternFlowEthernetSrcChoiceEnum("decrement"),
}

func (obj *patternFlowEthernetSrc) Choice() PatternFlowEthernetSrcChoiceEnum {
	return PatternFlowEthernetSrcChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowEthernetSrc) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowEthernetSrc) SetChoice(value PatternFlowEthernetSrcChoiceEnum) PatternFlowEthernetSrc {
	intValue, ok := snappipb.PatternFlowEthernetSrc_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowEthernetSrcChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowEthernetSrc_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetSrc) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "00:00:00:00:00:00"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetSrc) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowEthernetSrc object
//  description is TBD
func (obj *patternFlowEthernetSrc) SetValue(value string) PatternFlowEthernetSrc {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowEthernetSrcChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowEthernetSrc) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowEthernetSrc object
//  description is TBD
func (obj *patternFlowEthernetSrc) SetValues(value []string) PatternFlowEthernetSrc {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowEthernetSrcChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetSrc) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetSrc) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowEthernetSrc object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetSrc) SetMetricGroup(value string) PatternFlowEthernetSrc {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowEthernetSrcCounter
//  description is TBD
func (obj *patternFlowEthernetSrc) Increment() PatternFlowEthernetSrcCounter {
	obj.SetChoice(PatternFlowEthernetSrcChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowEthernetSrcCounter().Msg()
	}
	return &patternFlowEthernetSrcCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowEthernetSrcCounter
//  description is TBD
func (obj *patternFlowEthernetSrc) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowEthernetSrcCounter value in the PatternFlowEthernetSrc object
//  description is TBD
func (obj *patternFlowEthernetSrc) SetIncrement(value PatternFlowEthernetSrcCounter) PatternFlowEthernetSrc {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetSrcChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowEthernetSrcCounter
//  description is TBD
func (obj *patternFlowEthernetSrc) Decrement() PatternFlowEthernetSrcCounter {
	obj.SetChoice(PatternFlowEthernetSrcChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowEthernetSrcCounter().Msg()
	}
	return &patternFlowEthernetSrcCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowEthernetSrcCounter
//  description is TBD
func (obj *patternFlowEthernetSrc) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowEthernetSrcCounter value in the PatternFlowEthernetSrc object
//  description is TBD
func (obj *patternFlowEthernetSrc) SetDecrement(value PatternFlowEthernetSrcCounter) PatternFlowEthernetSrc {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetSrcChoice.DECREMENT)
	return obj
}

func (obj *patternFlowEthernetSrc) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateMac(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowEthernetSrc"))
		}
	}

	if obj.obj.Values != nil {
		err := validateMacSlice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowEthernetSrc"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowEthernetSrc) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowEthernetSrcChoice.VALUE)
		obj.SetValue("00:00:00:00:00:00")
	}

}

type patternFlowEthernetEtherType struct {
	obj *snappipb.PatternFlowEthernetEtherType
}

func NewPatternFlowEthernetEtherType() PatternFlowEthernetEtherType {
	obj := patternFlowEthernetEtherType{obj: &snappipb.PatternFlowEthernetEtherType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetEtherType) Msg() *snappipb.PatternFlowEthernetEtherType {
	return obj.obj
}

func (obj *patternFlowEthernetEtherType) SetMsg(msg *snappipb.PatternFlowEthernetEtherType) PatternFlowEthernetEtherType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetEtherType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetEtherType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetEtherType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetEtherType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetEtherType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetEtherType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetEtherType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetEtherType interface {
	Msg() *snappipb.PatternFlowEthernetEtherType
	SetMsg(*snappipb.PatternFlowEthernetEtherType) PatternFlowEthernetEtherType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowEthernetEtherTypeChoiceEnum
	SetChoice(value PatternFlowEthernetEtherTypeChoiceEnum) PatternFlowEthernetEtherType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowEthernetEtherType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowEthernetEtherType
	Auto() PatternFlowEthernetEtherTypeAutoEnum
	SetAuto(value PatternFlowEthernetEtherTypeAutoEnum) PatternFlowEthernetEtherType
	HasAuto() bool
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetEtherType
	HasMetricGroup() bool
	Increment() PatternFlowEthernetEtherTypeCounter
	SetIncrement(value PatternFlowEthernetEtherTypeCounter) PatternFlowEthernetEtherType
	HasIncrement() bool
	Decrement() PatternFlowEthernetEtherTypeCounter
	SetDecrement(value PatternFlowEthernetEtherTypeCounter) PatternFlowEthernetEtherType
	HasDecrement() bool
}

type PatternFlowEthernetEtherTypeChoiceEnum string

var PatternFlowEthernetEtherTypeChoice = struct {
	VALUE     PatternFlowEthernetEtherTypeChoiceEnum
	VALUES    PatternFlowEthernetEtherTypeChoiceEnum
	AUTO      PatternFlowEthernetEtherTypeChoiceEnum
	INCREMENT PatternFlowEthernetEtherTypeChoiceEnum
	DECREMENT PatternFlowEthernetEtherTypeChoiceEnum
}{
	VALUE:     PatternFlowEthernetEtherTypeChoiceEnum("value"),
	VALUES:    PatternFlowEthernetEtherTypeChoiceEnum("values"),
	AUTO:      PatternFlowEthernetEtherTypeChoiceEnum("auto"),
	INCREMENT: PatternFlowEthernetEtherTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowEthernetEtherTypeChoiceEnum("decrement"),
}

func (obj *patternFlowEthernetEtherType) Choice() PatternFlowEthernetEtherTypeChoiceEnum {
	return PatternFlowEthernetEtherTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowEthernetEtherType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowEthernetEtherType) SetChoice(value PatternFlowEthernetEtherTypeChoiceEnum) PatternFlowEthernetEtherType {
	intValue, ok := snappipb.PatternFlowEthernetEtherType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowEthernetEtherTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowEthernetEtherType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "auto" {
		obj.obj.Auto = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherType) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 65535
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowEthernetEtherType object
//  description is TBD
func (obj *patternFlowEthernetEtherType) SetValue(value int32) PatternFlowEthernetEtherType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowEthernetEtherTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowEthernetEtherType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowEthernetEtherType object
//  description is TBD
func (obj *patternFlowEthernetEtherType) SetValues(value []int32) PatternFlowEthernetEtherType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowEthernetEtherTypeChoice.VALUES)
	return obj
}

type PatternFlowEthernetEtherTypeAutoEnum string

var PatternFlowEthernetEtherTypeAuto = struct {
	AUTO PatternFlowEthernetEtherTypeAutoEnum
}{
	AUTO: PatternFlowEthernetEtherTypeAutoEnum("auto"),
}

func (obj *patternFlowEthernetEtherType) Auto() PatternFlowEthernetEtherTypeAutoEnum {
	return PatternFlowEthernetEtherTypeAutoEnum(obj.obj.Auto.Enum().String())
}

// Auto returns a string
//  description is TBD
func (obj *patternFlowEthernetEtherType) HasAuto() bool {
	return obj.obj.Auto != nil
}

func (obj *patternFlowEthernetEtherType) SetAuto(value PatternFlowEthernetEtherTypeAutoEnum) PatternFlowEthernetEtherType {
	intValue, ok := snappipb.PatternFlowEthernetEtherType_Auto_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowEthernetEtherTypeAutoEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowEthernetEtherType_Auto_Enum(intValue)
	obj.obj.Auto = &enumValue

	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetEtherType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetEtherType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowEthernetEtherType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetEtherType) SetMetricGroup(value string) PatternFlowEthernetEtherType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowEthernetEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetEtherType) Increment() PatternFlowEthernetEtherTypeCounter {
	obj.SetChoice(PatternFlowEthernetEtherTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowEthernetEtherTypeCounter().Msg()
	}
	return &patternFlowEthernetEtherTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowEthernetEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetEtherType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowEthernetEtherTypeCounter value in the PatternFlowEthernetEtherType object
//  description is TBD
func (obj *patternFlowEthernetEtherType) SetIncrement(value PatternFlowEthernetEtherTypeCounter) PatternFlowEthernetEtherType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetEtherTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowEthernetEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetEtherType) Decrement() PatternFlowEthernetEtherTypeCounter {
	obj.SetChoice(PatternFlowEthernetEtherTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowEthernetEtherTypeCounter().Msg()
	}
	return &patternFlowEthernetEtherTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowEthernetEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetEtherType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowEthernetEtherTypeCounter value in the PatternFlowEthernetEtherType object
//  description is TBD
func (obj *patternFlowEthernetEtherType) SetDecrement(value PatternFlowEthernetEtherTypeCounter) PatternFlowEthernetEtherType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetEtherTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowEthernetEtherType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetEtherType.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetEtherType.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowEthernetEtherType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowEthernetEtherTypeChoice.AUTO)
		if obj.obj.Auto == nil {
			obj.SetAuto(PatternFlowEthernetEtherTypeAuto.AUTO)

		}

	}

}

type patternFlowEthernetPfcQueue struct {
	obj *snappipb.PatternFlowEthernetPfcQueue
}

func NewPatternFlowEthernetPfcQueue() PatternFlowEthernetPfcQueue {
	obj := patternFlowEthernetPfcQueue{obj: &snappipb.PatternFlowEthernetPfcQueue{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPfcQueue) Msg() *snappipb.PatternFlowEthernetPfcQueue {
	return obj.obj
}

func (obj *patternFlowEthernetPfcQueue) SetMsg(msg *snappipb.PatternFlowEthernetPfcQueue) PatternFlowEthernetPfcQueue {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPfcQueue) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPfcQueue) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPfcQueue) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPfcQueue) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPfcQueue) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPfcQueue) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPfcQueue) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPfcQueue interface {
	Msg() *snappipb.PatternFlowEthernetPfcQueue
	SetMsg(*snappipb.PatternFlowEthernetPfcQueue) PatternFlowEthernetPfcQueue
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowEthernetPfcQueueChoiceEnum
	SetChoice(value PatternFlowEthernetPfcQueueChoiceEnum) PatternFlowEthernetPfcQueue
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowEthernetPfcQueue
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowEthernetPfcQueue
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPfcQueue
	HasMetricGroup() bool
	Increment() PatternFlowEthernetPfcQueueCounter
	SetIncrement(value PatternFlowEthernetPfcQueueCounter) PatternFlowEthernetPfcQueue
	HasIncrement() bool
	Decrement() PatternFlowEthernetPfcQueueCounter
	SetDecrement(value PatternFlowEthernetPfcQueueCounter) PatternFlowEthernetPfcQueue
	HasDecrement() bool
}

type PatternFlowEthernetPfcQueueChoiceEnum string

var PatternFlowEthernetPfcQueueChoice = struct {
	VALUE     PatternFlowEthernetPfcQueueChoiceEnum
	VALUES    PatternFlowEthernetPfcQueueChoiceEnum
	INCREMENT PatternFlowEthernetPfcQueueChoiceEnum
	DECREMENT PatternFlowEthernetPfcQueueChoiceEnum
}{
	VALUE:     PatternFlowEthernetPfcQueueChoiceEnum("value"),
	VALUES:    PatternFlowEthernetPfcQueueChoiceEnum("values"),
	INCREMENT: PatternFlowEthernetPfcQueueChoiceEnum("increment"),
	DECREMENT: PatternFlowEthernetPfcQueueChoiceEnum("decrement"),
}

func (obj *patternFlowEthernetPfcQueue) Choice() PatternFlowEthernetPfcQueueChoiceEnum {
	return PatternFlowEthernetPfcQueueChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowEthernetPfcQueue) SetChoice(value PatternFlowEthernetPfcQueueChoiceEnum) PatternFlowEthernetPfcQueue {
	intValue, ok := snappipb.PatternFlowEthernetPfcQueue_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowEthernetPfcQueueChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowEthernetPfcQueue_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowEthernetPfcQueue object
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) SetValue(value int32) PatternFlowEthernetPfcQueue {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowEthernetPfcQueueChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowEthernetPfcQueue object
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) SetValues(value []int32) PatternFlowEthernetPfcQueue {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowEthernetPfcQueueChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPfcQueue) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPfcQueue) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowEthernetPfcQueue object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPfcQueue) SetMetricGroup(value string) PatternFlowEthernetPfcQueue {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowEthernetPfcQueueCounter
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) Increment() PatternFlowEthernetPfcQueueCounter {
	obj.SetChoice(PatternFlowEthernetPfcQueueChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowEthernetPfcQueueCounter().Msg()
	}
	return &patternFlowEthernetPfcQueueCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowEthernetPfcQueueCounter
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowEthernetPfcQueueCounter value in the PatternFlowEthernetPfcQueue object
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) SetIncrement(value PatternFlowEthernetPfcQueueCounter) PatternFlowEthernetPfcQueue {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPfcQueueChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowEthernetPfcQueueCounter
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) Decrement() PatternFlowEthernetPfcQueueCounter {
	obj.SetChoice(PatternFlowEthernetPfcQueueChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowEthernetPfcQueueCounter().Msg()
	}
	return &patternFlowEthernetPfcQueueCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowEthernetPfcQueueCounter
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowEthernetPfcQueueCounter value in the PatternFlowEthernetPfcQueue object
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) SetDecrement(value PatternFlowEthernetPfcQueueCounter) PatternFlowEthernetPfcQueue {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPfcQueueChoice.DECREMENT)
	return obj
}

func (obj *patternFlowEthernetPfcQueue) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPfcQueue.Value <= 7 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPfcQueue.Values <= 7 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowEthernetPfcQueue) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowEthernetPfcQueueChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowVlanPriority struct {
	obj *snappipb.PatternFlowVlanPriority
}

func NewPatternFlowVlanPriority() PatternFlowVlanPriority {
	obj := patternFlowVlanPriority{obj: &snappipb.PatternFlowVlanPriority{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVlanPriority) Msg() *snappipb.PatternFlowVlanPriority {
	return obj.obj
}

func (obj *patternFlowVlanPriority) SetMsg(msg *snappipb.PatternFlowVlanPriority) PatternFlowVlanPriority {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVlanPriority) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVlanPriority) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanPriority) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanPriority) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanPriority) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanPriority) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVlanPriority) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVlanPriority interface {
	Msg() *snappipb.PatternFlowVlanPriority
	SetMsg(*snappipb.PatternFlowVlanPriority) PatternFlowVlanPriority
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowVlanPriorityChoiceEnum
	SetChoice(value PatternFlowVlanPriorityChoiceEnum) PatternFlowVlanPriority
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowVlanPriority
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowVlanPriority
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVlanPriority
	HasMetricGroup() bool
	Increment() PatternFlowVlanPriorityCounter
	SetIncrement(value PatternFlowVlanPriorityCounter) PatternFlowVlanPriority
	HasIncrement() bool
	Decrement() PatternFlowVlanPriorityCounter
	SetDecrement(value PatternFlowVlanPriorityCounter) PatternFlowVlanPriority
	HasDecrement() bool
}

type PatternFlowVlanPriorityChoiceEnum string

var PatternFlowVlanPriorityChoice = struct {
	VALUE     PatternFlowVlanPriorityChoiceEnum
	VALUES    PatternFlowVlanPriorityChoiceEnum
	INCREMENT PatternFlowVlanPriorityChoiceEnum
	DECREMENT PatternFlowVlanPriorityChoiceEnum
}{
	VALUE:     PatternFlowVlanPriorityChoiceEnum("value"),
	VALUES:    PatternFlowVlanPriorityChoiceEnum("values"),
	INCREMENT: PatternFlowVlanPriorityChoiceEnum("increment"),
	DECREMENT: PatternFlowVlanPriorityChoiceEnum("decrement"),
}

func (obj *patternFlowVlanPriority) Choice() PatternFlowVlanPriorityChoiceEnum {
	return PatternFlowVlanPriorityChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowVlanPriority) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowVlanPriority) SetChoice(value PatternFlowVlanPriorityChoiceEnum) PatternFlowVlanPriority {
	intValue, ok := snappipb.PatternFlowVlanPriority_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowVlanPriorityChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowVlanPriority_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanPriority) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanPriority) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowVlanPriority object
//  description is TBD
func (obj *patternFlowVlanPriority) SetValue(value int32) PatternFlowVlanPriority {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowVlanPriorityChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVlanPriority) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowVlanPriority object
//  description is TBD
func (obj *patternFlowVlanPriority) SetValues(value []int32) PatternFlowVlanPriority {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowVlanPriorityChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanPriority) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanPriority) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowVlanPriority object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanPriority) SetMetricGroup(value string) PatternFlowVlanPriority {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowVlanPriorityCounter
//  description is TBD
func (obj *patternFlowVlanPriority) Increment() PatternFlowVlanPriorityCounter {
	obj.SetChoice(PatternFlowVlanPriorityChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowVlanPriorityCounter().Msg()
	}
	return &patternFlowVlanPriorityCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowVlanPriorityCounter
//  description is TBD
func (obj *patternFlowVlanPriority) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowVlanPriorityCounter value in the PatternFlowVlanPriority object
//  description is TBD
func (obj *patternFlowVlanPriority) SetIncrement(value PatternFlowVlanPriorityCounter) PatternFlowVlanPriority {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVlanPriorityChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowVlanPriorityCounter
//  description is TBD
func (obj *patternFlowVlanPriority) Decrement() PatternFlowVlanPriorityCounter {
	obj.SetChoice(PatternFlowVlanPriorityChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowVlanPriorityCounter().Msg()
	}
	return &patternFlowVlanPriorityCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowVlanPriorityCounter
//  description is TBD
func (obj *patternFlowVlanPriority) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowVlanPriorityCounter value in the PatternFlowVlanPriority object
//  description is TBD
func (obj *patternFlowVlanPriority) SetDecrement(value PatternFlowVlanPriorityCounter) PatternFlowVlanPriority {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVlanPriorityChoice.DECREMENT)
	return obj
}

func (obj *patternFlowVlanPriority) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanPriority.Value <= 7 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanPriority.Values <= 7 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowVlanPriority) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowVlanPriorityChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowVlanCfi struct {
	obj *snappipb.PatternFlowVlanCfi
}

func NewPatternFlowVlanCfi() PatternFlowVlanCfi {
	obj := patternFlowVlanCfi{obj: &snappipb.PatternFlowVlanCfi{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVlanCfi) Msg() *snappipb.PatternFlowVlanCfi {
	return obj.obj
}

func (obj *patternFlowVlanCfi) SetMsg(msg *snappipb.PatternFlowVlanCfi) PatternFlowVlanCfi {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVlanCfi) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVlanCfi) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanCfi) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanCfi) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanCfi) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanCfi) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVlanCfi) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVlanCfi interface {
	Msg() *snappipb.PatternFlowVlanCfi
	SetMsg(*snappipb.PatternFlowVlanCfi) PatternFlowVlanCfi
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowVlanCfiChoiceEnum
	SetChoice(value PatternFlowVlanCfiChoiceEnum) PatternFlowVlanCfi
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowVlanCfi
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowVlanCfi
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVlanCfi
	HasMetricGroup() bool
	Increment() PatternFlowVlanCfiCounter
	SetIncrement(value PatternFlowVlanCfiCounter) PatternFlowVlanCfi
	HasIncrement() bool
	Decrement() PatternFlowVlanCfiCounter
	SetDecrement(value PatternFlowVlanCfiCounter) PatternFlowVlanCfi
	HasDecrement() bool
}

type PatternFlowVlanCfiChoiceEnum string

var PatternFlowVlanCfiChoice = struct {
	VALUE     PatternFlowVlanCfiChoiceEnum
	VALUES    PatternFlowVlanCfiChoiceEnum
	INCREMENT PatternFlowVlanCfiChoiceEnum
	DECREMENT PatternFlowVlanCfiChoiceEnum
}{
	VALUE:     PatternFlowVlanCfiChoiceEnum("value"),
	VALUES:    PatternFlowVlanCfiChoiceEnum("values"),
	INCREMENT: PatternFlowVlanCfiChoiceEnum("increment"),
	DECREMENT: PatternFlowVlanCfiChoiceEnum("decrement"),
}

func (obj *patternFlowVlanCfi) Choice() PatternFlowVlanCfiChoiceEnum {
	return PatternFlowVlanCfiChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowVlanCfi) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowVlanCfi) SetChoice(value PatternFlowVlanCfiChoiceEnum) PatternFlowVlanCfi {
	intValue, ok := snappipb.PatternFlowVlanCfi_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowVlanCfiChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowVlanCfi_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanCfi) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanCfi) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowVlanCfi object
//  description is TBD
func (obj *patternFlowVlanCfi) SetValue(value int32) PatternFlowVlanCfi {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowVlanCfiChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVlanCfi) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowVlanCfi object
//  description is TBD
func (obj *patternFlowVlanCfi) SetValues(value []int32) PatternFlowVlanCfi {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowVlanCfiChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanCfi) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanCfi) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowVlanCfi object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanCfi) SetMetricGroup(value string) PatternFlowVlanCfi {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowVlanCfiCounter
//  description is TBD
func (obj *patternFlowVlanCfi) Increment() PatternFlowVlanCfiCounter {
	obj.SetChoice(PatternFlowVlanCfiChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowVlanCfiCounter().Msg()
	}
	return &patternFlowVlanCfiCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowVlanCfiCounter
//  description is TBD
func (obj *patternFlowVlanCfi) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowVlanCfiCounter value in the PatternFlowVlanCfi object
//  description is TBD
func (obj *patternFlowVlanCfi) SetIncrement(value PatternFlowVlanCfiCounter) PatternFlowVlanCfi {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVlanCfiChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowVlanCfiCounter
//  description is TBD
func (obj *patternFlowVlanCfi) Decrement() PatternFlowVlanCfiCounter {
	obj.SetChoice(PatternFlowVlanCfiChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowVlanCfiCounter().Msg()
	}
	return &patternFlowVlanCfiCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowVlanCfiCounter
//  description is TBD
func (obj *patternFlowVlanCfi) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowVlanCfiCounter value in the PatternFlowVlanCfi object
//  description is TBD
func (obj *patternFlowVlanCfi) SetDecrement(value PatternFlowVlanCfiCounter) PatternFlowVlanCfi {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVlanCfiChoice.DECREMENT)
	return obj
}

func (obj *patternFlowVlanCfi) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanCfi.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanCfi.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowVlanCfi) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowVlanCfiChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowVlanId struct {
	obj *snappipb.PatternFlowVlanId
}

func NewPatternFlowVlanId() PatternFlowVlanId {
	obj := patternFlowVlanId{obj: &snappipb.PatternFlowVlanId{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVlanId) Msg() *snappipb.PatternFlowVlanId {
	return obj.obj
}

func (obj *patternFlowVlanId) SetMsg(msg *snappipb.PatternFlowVlanId) PatternFlowVlanId {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVlanId) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVlanId) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanId) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanId) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanId) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanId) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVlanId) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVlanId interface {
	Msg() *snappipb.PatternFlowVlanId
	SetMsg(*snappipb.PatternFlowVlanId) PatternFlowVlanId
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowVlanIdChoiceEnum
	SetChoice(value PatternFlowVlanIdChoiceEnum) PatternFlowVlanId
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowVlanId
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowVlanId
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVlanId
	HasMetricGroup() bool
	Increment() PatternFlowVlanIdCounter
	SetIncrement(value PatternFlowVlanIdCounter) PatternFlowVlanId
	HasIncrement() bool
	Decrement() PatternFlowVlanIdCounter
	SetDecrement(value PatternFlowVlanIdCounter) PatternFlowVlanId
	HasDecrement() bool
}

type PatternFlowVlanIdChoiceEnum string

var PatternFlowVlanIdChoice = struct {
	VALUE     PatternFlowVlanIdChoiceEnum
	VALUES    PatternFlowVlanIdChoiceEnum
	INCREMENT PatternFlowVlanIdChoiceEnum
	DECREMENT PatternFlowVlanIdChoiceEnum
}{
	VALUE:     PatternFlowVlanIdChoiceEnum("value"),
	VALUES:    PatternFlowVlanIdChoiceEnum("values"),
	INCREMENT: PatternFlowVlanIdChoiceEnum("increment"),
	DECREMENT: PatternFlowVlanIdChoiceEnum("decrement"),
}

func (obj *patternFlowVlanId) Choice() PatternFlowVlanIdChoiceEnum {
	return PatternFlowVlanIdChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowVlanId) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowVlanId) SetChoice(value PatternFlowVlanIdChoiceEnum) PatternFlowVlanId {
	intValue, ok := snappipb.PatternFlowVlanId_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowVlanIdChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowVlanId_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanId) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanId) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowVlanId object
//  description is TBD
func (obj *patternFlowVlanId) SetValue(value int32) PatternFlowVlanId {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowVlanIdChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVlanId) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowVlanId object
//  description is TBD
func (obj *patternFlowVlanId) SetValues(value []int32) PatternFlowVlanId {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowVlanIdChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanId) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanId) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowVlanId object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanId) SetMetricGroup(value string) PatternFlowVlanId {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowVlanIdCounter
//  description is TBD
func (obj *patternFlowVlanId) Increment() PatternFlowVlanIdCounter {
	obj.SetChoice(PatternFlowVlanIdChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowVlanIdCounter().Msg()
	}
	return &patternFlowVlanIdCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowVlanIdCounter
//  description is TBD
func (obj *patternFlowVlanId) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowVlanIdCounter value in the PatternFlowVlanId object
//  description is TBD
func (obj *patternFlowVlanId) SetIncrement(value PatternFlowVlanIdCounter) PatternFlowVlanId {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVlanIdChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowVlanIdCounter
//  description is TBD
func (obj *patternFlowVlanId) Decrement() PatternFlowVlanIdCounter {
	obj.SetChoice(PatternFlowVlanIdChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowVlanIdCounter().Msg()
	}
	return &patternFlowVlanIdCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowVlanIdCounter
//  description is TBD
func (obj *patternFlowVlanId) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowVlanIdCounter value in the PatternFlowVlanId object
//  description is TBD
func (obj *patternFlowVlanId) SetDecrement(value PatternFlowVlanIdCounter) PatternFlowVlanId {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVlanIdChoice.DECREMENT)
	return obj
}

func (obj *patternFlowVlanId) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 4095 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanId.Value <= 4095 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 4095 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanId.Values <= 4095 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowVlanId) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowVlanIdChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowVlanTpid struct {
	obj *snappipb.PatternFlowVlanTpid
}

func NewPatternFlowVlanTpid() PatternFlowVlanTpid {
	obj := patternFlowVlanTpid{obj: &snappipb.PatternFlowVlanTpid{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVlanTpid) Msg() *snappipb.PatternFlowVlanTpid {
	return obj.obj
}

func (obj *patternFlowVlanTpid) SetMsg(msg *snappipb.PatternFlowVlanTpid) PatternFlowVlanTpid {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVlanTpid) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVlanTpid) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanTpid) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanTpid) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanTpid) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanTpid) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVlanTpid) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVlanTpid interface {
	Msg() *snappipb.PatternFlowVlanTpid
	SetMsg(*snappipb.PatternFlowVlanTpid) PatternFlowVlanTpid
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowVlanTpidChoiceEnum
	SetChoice(value PatternFlowVlanTpidChoiceEnum) PatternFlowVlanTpid
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowVlanTpid
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowVlanTpid
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVlanTpid
	HasMetricGroup() bool
	Increment() PatternFlowVlanTpidCounter
	SetIncrement(value PatternFlowVlanTpidCounter) PatternFlowVlanTpid
	HasIncrement() bool
	Decrement() PatternFlowVlanTpidCounter
	SetDecrement(value PatternFlowVlanTpidCounter) PatternFlowVlanTpid
	HasDecrement() bool
}

type PatternFlowVlanTpidChoiceEnum string

var PatternFlowVlanTpidChoice = struct {
	VALUE     PatternFlowVlanTpidChoiceEnum
	VALUES    PatternFlowVlanTpidChoiceEnum
	INCREMENT PatternFlowVlanTpidChoiceEnum
	DECREMENT PatternFlowVlanTpidChoiceEnum
}{
	VALUE:     PatternFlowVlanTpidChoiceEnum("value"),
	VALUES:    PatternFlowVlanTpidChoiceEnum("values"),
	INCREMENT: PatternFlowVlanTpidChoiceEnum("increment"),
	DECREMENT: PatternFlowVlanTpidChoiceEnum("decrement"),
}

func (obj *patternFlowVlanTpid) Choice() PatternFlowVlanTpidChoiceEnum {
	return PatternFlowVlanTpidChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowVlanTpid) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowVlanTpid) SetChoice(value PatternFlowVlanTpidChoiceEnum) PatternFlowVlanTpid {
	intValue, ok := snappipb.PatternFlowVlanTpid_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowVlanTpidChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowVlanTpid_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanTpid) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 33024
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanTpid) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowVlanTpid object
//  description is TBD
func (obj *patternFlowVlanTpid) SetValue(value int32) PatternFlowVlanTpid {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowVlanTpidChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVlanTpid) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowVlanTpid object
//  description is TBD
func (obj *patternFlowVlanTpid) SetValues(value []int32) PatternFlowVlanTpid {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowVlanTpidChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanTpid) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanTpid) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowVlanTpid object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanTpid) SetMetricGroup(value string) PatternFlowVlanTpid {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowVlanTpidCounter
//  description is TBD
func (obj *patternFlowVlanTpid) Increment() PatternFlowVlanTpidCounter {
	obj.SetChoice(PatternFlowVlanTpidChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowVlanTpidCounter().Msg()
	}
	return &patternFlowVlanTpidCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowVlanTpidCounter
//  description is TBD
func (obj *patternFlowVlanTpid) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowVlanTpidCounter value in the PatternFlowVlanTpid object
//  description is TBD
func (obj *patternFlowVlanTpid) SetIncrement(value PatternFlowVlanTpidCounter) PatternFlowVlanTpid {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVlanTpidChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowVlanTpidCounter
//  description is TBD
func (obj *patternFlowVlanTpid) Decrement() PatternFlowVlanTpidCounter {
	obj.SetChoice(PatternFlowVlanTpidChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowVlanTpidCounter().Msg()
	}
	return &patternFlowVlanTpidCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowVlanTpidCounter
//  description is TBD
func (obj *patternFlowVlanTpid) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowVlanTpidCounter value in the PatternFlowVlanTpid object
//  description is TBD
func (obj *patternFlowVlanTpid) SetDecrement(value PatternFlowVlanTpidCounter) PatternFlowVlanTpid {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVlanTpidChoice.DECREMENT)
	return obj
}

func (obj *patternFlowVlanTpid) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanTpid.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanTpid.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowVlanTpid) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowVlanTpidChoice.VALUE)
		obj.SetValue(33024)
	}

}

type patternFlowVxlanFlags struct {
	obj *snappipb.PatternFlowVxlanFlags
}

func NewPatternFlowVxlanFlags() PatternFlowVxlanFlags {
	obj := patternFlowVxlanFlags{obj: &snappipb.PatternFlowVxlanFlags{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVxlanFlags) Msg() *snappipb.PatternFlowVxlanFlags {
	return obj.obj
}

func (obj *patternFlowVxlanFlags) SetMsg(msg *snappipb.PatternFlowVxlanFlags) PatternFlowVxlanFlags {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVxlanFlags) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVxlanFlags) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanFlags) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanFlags) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanFlags) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanFlags) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVxlanFlags) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVxlanFlags interface {
	Msg() *snappipb.PatternFlowVxlanFlags
	SetMsg(*snappipb.PatternFlowVxlanFlags) PatternFlowVxlanFlags
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowVxlanFlagsChoiceEnum
	SetChoice(value PatternFlowVxlanFlagsChoiceEnum) PatternFlowVxlanFlags
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowVxlanFlags
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowVxlanFlags
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVxlanFlags
	HasMetricGroup() bool
	Increment() PatternFlowVxlanFlagsCounter
	SetIncrement(value PatternFlowVxlanFlagsCounter) PatternFlowVxlanFlags
	HasIncrement() bool
	Decrement() PatternFlowVxlanFlagsCounter
	SetDecrement(value PatternFlowVxlanFlagsCounter) PatternFlowVxlanFlags
	HasDecrement() bool
}

type PatternFlowVxlanFlagsChoiceEnum string

var PatternFlowVxlanFlagsChoice = struct {
	VALUE     PatternFlowVxlanFlagsChoiceEnum
	VALUES    PatternFlowVxlanFlagsChoiceEnum
	INCREMENT PatternFlowVxlanFlagsChoiceEnum
	DECREMENT PatternFlowVxlanFlagsChoiceEnum
}{
	VALUE:     PatternFlowVxlanFlagsChoiceEnum("value"),
	VALUES:    PatternFlowVxlanFlagsChoiceEnum("values"),
	INCREMENT: PatternFlowVxlanFlagsChoiceEnum("increment"),
	DECREMENT: PatternFlowVxlanFlagsChoiceEnum("decrement"),
}

func (obj *patternFlowVxlanFlags) Choice() PatternFlowVxlanFlagsChoiceEnum {
	return PatternFlowVxlanFlagsChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowVxlanFlags) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowVxlanFlags) SetChoice(value PatternFlowVxlanFlagsChoiceEnum) PatternFlowVxlanFlags {
	intValue, ok := snappipb.PatternFlowVxlanFlags_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowVxlanFlagsChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowVxlanFlags_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlags) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 8
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlags) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowVxlanFlags object
//  description is TBD
func (obj *patternFlowVxlanFlags) SetValue(value int32) PatternFlowVxlanFlags {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowVxlanFlagsChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVxlanFlags) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowVxlanFlags object
//  description is TBD
func (obj *patternFlowVxlanFlags) SetValues(value []int32) PatternFlowVxlanFlags {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowVxlanFlagsChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanFlags) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanFlags) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowVxlanFlags object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanFlags) SetMetricGroup(value string) PatternFlowVxlanFlags {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowVxlanFlagsCounter
//  description is TBD
func (obj *patternFlowVxlanFlags) Increment() PatternFlowVxlanFlagsCounter {
	obj.SetChoice(PatternFlowVxlanFlagsChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowVxlanFlagsCounter().Msg()
	}
	return &patternFlowVxlanFlagsCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowVxlanFlagsCounter
//  description is TBD
func (obj *patternFlowVxlanFlags) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowVxlanFlagsCounter value in the PatternFlowVxlanFlags object
//  description is TBD
func (obj *patternFlowVxlanFlags) SetIncrement(value PatternFlowVxlanFlagsCounter) PatternFlowVxlanFlags {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVxlanFlagsChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowVxlanFlagsCounter
//  description is TBD
func (obj *patternFlowVxlanFlags) Decrement() PatternFlowVxlanFlagsCounter {
	obj.SetChoice(PatternFlowVxlanFlagsChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowVxlanFlagsCounter().Msg()
	}
	return &patternFlowVxlanFlagsCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowVxlanFlagsCounter
//  description is TBD
func (obj *patternFlowVxlanFlags) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowVxlanFlagsCounter value in the PatternFlowVxlanFlags object
//  description is TBD
func (obj *patternFlowVxlanFlags) SetDecrement(value PatternFlowVxlanFlagsCounter) PatternFlowVxlanFlags {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVxlanFlagsChoice.DECREMENT)
	return obj
}

func (obj *patternFlowVxlanFlags) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanFlags.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanFlags.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowVxlanFlags) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowVxlanFlagsChoice.VALUE)
		obj.SetValue(8)
	}

}

type patternFlowVxlanReserved0 struct {
	obj *snappipb.PatternFlowVxlanReserved0
}

func NewPatternFlowVxlanReserved0() PatternFlowVxlanReserved0 {
	obj := patternFlowVxlanReserved0{obj: &snappipb.PatternFlowVxlanReserved0{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVxlanReserved0) Msg() *snappipb.PatternFlowVxlanReserved0 {
	return obj.obj
}

func (obj *patternFlowVxlanReserved0) SetMsg(msg *snappipb.PatternFlowVxlanReserved0) PatternFlowVxlanReserved0 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVxlanReserved0) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVxlanReserved0) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanReserved0) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved0) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanReserved0) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved0) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVxlanReserved0) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVxlanReserved0 interface {
	Msg() *snappipb.PatternFlowVxlanReserved0
	SetMsg(*snappipb.PatternFlowVxlanReserved0) PatternFlowVxlanReserved0
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowVxlanReserved0ChoiceEnum
	SetChoice(value PatternFlowVxlanReserved0ChoiceEnum) PatternFlowVxlanReserved0
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowVxlanReserved0
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowVxlanReserved0
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVxlanReserved0
	HasMetricGroup() bool
	Increment() PatternFlowVxlanReserved0Counter
	SetIncrement(value PatternFlowVxlanReserved0Counter) PatternFlowVxlanReserved0
	HasIncrement() bool
	Decrement() PatternFlowVxlanReserved0Counter
	SetDecrement(value PatternFlowVxlanReserved0Counter) PatternFlowVxlanReserved0
	HasDecrement() bool
}

type PatternFlowVxlanReserved0ChoiceEnum string

var PatternFlowVxlanReserved0Choice = struct {
	VALUE     PatternFlowVxlanReserved0ChoiceEnum
	VALUES    PatternFlowVxlanReserved0ChoiceEnum
	INCREMENT PatternFlowVxlanReserved0ChoiceEnum
	DECREMENT PatternFlowVxlanReserved0ChoiceEnum
}{
	VALUE:     PatternFlowVxlanReserved0ChoiceEnum("value"),
	VALUES:    PatternFlowVxlanReserved0ChoiceEnum("values"),
	INCREMENT: PatternFlowVxlanReserved0ChoiceEnum("increment"),
	DECREMENT: PatternFlowVxlanReserved0ChoiceEnum("decrement"),
}

func (obj *patternFlowVxlanReserved0) Choice() PatternFlowVxlanReserved0ChoiceEnum {
	return PatternFlowVxlanReserved0ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowVxlanReserved0) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowVxlanReserved0) SetChoice(value PatternFlowVxlanReserved0ChoiceEnum) PatternFlowVxlanReserved0 {
	intValue, ok := snappipb.PatternFlowVxlanReserved0_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowVxlanReserved0ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowVxlanReserved0_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowVxlanReserved0 object
//  description is TBD
func (obj *patternFlowVxlanReserved0) SetValue(value int32) PatternFlowVxlanReserved0 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowVxlanReserved0Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVxlanReserved0) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowVxlanReserved0 object
//  description is TBD
func (obj *patternFlowVxlanReserved0) SetValues(value []int32) PatternFlowVxlanReserved0 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowVxlanReserved0Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanReserved0) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanReserved0) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowVxlanReserved0 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanReserved0) SetMetricGroup(value string) PatternFlowVxlanReserved0 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowVxlanReserved0Counter
//  description is TBD
func (obj *patternFlowVxlanReserved0) Increment() PatternFlowVxlanReserved0Counter {
	obj.SetChoice(PatternFlowVxlanReserved0Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowVxlanReserved0Counter().Msg()
	}
	return &patternFlowVxlanReserved0Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowVxlanReserved0Counter
//  description is TBD
func (obj *patternFlowVxlanReserved0) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowVxlanReserved0Counter value in the PatternFlowVxlanReserved0 object
//  description is TBD
func (obj *patternFlowVxlanReserved0) SetIncrement(value PatternFlowVxlanReserved0Counter) PatternFlowVxlanReserved0 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVxlanReserved0Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowVxlanReserved0Counter
//  description is TBD
func (obj *patternFlowVxlanReserved0) Decrement() PatternFlowVxlanReserved0Counter {
	obj.SetChoice(PatternFlowVxlanReserved0Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowVxlanReserved0Counter().Msg()
	}
	return &patternFlowVxlanReserved0Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowVxlanReserved0Counter
//  description is TBD
func (obj *patternFlowVxlanReserved0) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowVxlanReserved0Counter value in the PatternFlowVxlanReserved0 object
//  description is TBD
func (obj *patternFlowVxlanReserved0) SetDecrement(value PatternFlowVxlanReserved0Counter) PatternFlowVxlanReserved0 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVxlanReserved0Choice.DECREMENT)
	return obj
}

func (obj *patternFlowVxlanReserved0) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanReserved0.Value <= 16777215 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanReserved0.Values <= 16777215 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowVxlanReserved0) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowVxlanReserved0Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowVxlanVni struct {
	obj *snappipb.PatternFlowVxlanVni
}

func NewPatternFlowVxlanVni() PatternFlowVxlanVni {
	obj := patternFlowVxlanVni{obj: &snappipb.PatternFlowVxlanVni{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVxlanVni) Msg() *snappipb.PatternFlowVxlanVni {
	return obj.obj
}

func (obj *patternFlowVxlanVni) SetMsg(msg *snappipb.PatternFlowVxlanVni) PatternFlowVxlanVni {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVxlanVni) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVxlanVni) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanVni) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanVni) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanVni) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanVni) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVxlanVni) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVxlanVni interface {
	Msg() *snappipb.PatternFlowVxlanVni
	SetMsg(*snappipb.PatternFlowVxlanVni) PatternFlowVxlanVni
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowVxlanVniChoiceEnum
	SetChoice(value PatternFlowVxlanVniChoiceEnum) PatternFlowVxlanVni
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowVxlanVni
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowVxlanVni
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVxlanVni
	HasMetricGroup() bool
	Increment() PatternFlowVxlanVniCounter
	SetIncrement(value PatternFlowVxlanVniCounter) PatternFlowVxlanVni
	HasIncrement() bool
	Decrement() PatternFlowVxlanVniCounter
	SetDecrement(value PatternFlowVxlanVniCounter) PatternFlowVxlanVni
	HasDecrement() bool
}

type PatternFlowVxlanVniChoiceEnum string

var PatternFlowVxlanVniChoice = struct {
	VALUE     PatternFlowVxlanVniChoiceEnum
	VALUES    PatternFlowVxlanVniChoiceEnum
	INCREMENT PatternFlowVxlanVniChoiceEnum
	DECREMENT PatternFlowVxlanVniChoiceEnum
}{
	VALUE:     PatternFlowVxlanVniChoiceEnum("value"),
	VALUES:    PatternFlowVxlanVniChoiceEnum("values"),
	INCREMENT: PatternFlowVxlanVniChoiceEnum("increment"),
	DECREMENT: PatternFlowVxlanVniChoiceEnum("decrement"),
}

func (obj *patternFlowVxlanVni) Choice() PatternFlowVxlanVniChoiceEnum {
	return PatternFlowVxlanVniChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowVxlanVni) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowVxlanVni) SetChoice(value PatternFlowVxlanVniChoiceEnum) PatternFlowVxlanVni {
	intValue, ok := snappipb.PatternFlowVxlanVni_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowVxlanVniChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowVxlanVni_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanVni) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanVni) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowVxlanVni object
//  description is TBD
func (obj *patternFlowVxlanVni) SetValue(value int32) PatternFlowVxlanVni {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowVxlanVniChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVxlanVni) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowVxlanVni object
//  description is TBD
func (obj *patternFlowVxlanVni) SetValues(value []int32) PatternFlowVxlanVni {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowVxlanVniChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanVni) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanVni) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowVxlanVni object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanVni) SetMetricGroup(value string) PatternFlowVxlanVni {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowVxlanVniCounter
//  description is TBD
func (obj *patternFlowVxlanVni) Increment() PatternFlowVxlanVniCounter {
	obj.SetChoice(PatternFlowVxlanVniChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowVxlanVniCounter().Msg()
	}
	return &patternFlowVxlanVniCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowVxlanVniCounter
//  description is TBD
func (obj *patternFlowVxlanVni) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowVxlanVniCounter value in the PatternFlowVxlanVni object
//  description is TBD
func (obj *patternFlowVxlanVni) SetIncrement(value PatternFlowVxlanVniCounter) PatternFlowVxlanVni {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVxlanVniChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowVxlanVniCounter
//  description is TBD
func (obj *patternFlowVxlanVni) Decrement() PatternFlowVxlanVniCounter {
	obj.SetChoice(PatternFlowVxlanVniChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowVxlanVniCounter().Msg()
	}
	return &patternFlowVxlanVniCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowVxlanVniCounter
//  description is TBD
func (obj *patternFlowVxlanVni) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowVxlanVniCounter value in the PatternFlowVxlanVni object
//  description is TBD
func (obj *patternFlowVxlanVni) SetDecrement(value PatternFlowVxlanVniCounter) PatternFlowVxlanVni {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVxlanVniChoice.DECREMENT)
	return obj
}

func (obj *patternFlowVxlanVni) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanVni.Value <= 16777215 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanVni.Values <= 16777215 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowVxlanVni) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowVxlanVniChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowVxlanReserved1 struct {
	obj *snappipb.PatternFlowVxlanReserved1
}

func NewPatternFlowVxlanReserved1() PatternFlowVxlanReserved1 {
	obj := patternFlowVxlanReserved1{obj: &snappipb.PatternFlowVxlanReserved1{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVxlanReserved1) Msg() *snappipb.PatternFlowVxlanReserved1 {
	return obj.obj
}

func (obj *patternFlowVxlanReserved1) SetMsg(msg *snappipb.PatternFlowVxlanReserved1) PatternFlowVxlanReserved1 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVxlanReserved1) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVxlanReserved1) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanReserved1) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanReserved1) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved1) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVxlanReserved1) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVxlanReserved1 interface {
	Msg() *snappipb.PatternFlowVxlanReserved1
	SetMsg(*snappipb.PatternFlowVxlanReserved1) PatternFlowVxlanReserved1
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowVxlanReserved1ChoiceEnum
	SetChoice(value PatternFlowVxlanReserved1ChoiceEnum) PatternFlowVxlanReserved1
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowVxlanReserved1
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowVxlanReserved1
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVxlanReserved1
	HasMetricGroup() bool
	Increment() PatternFlowVxlanReserved1Counter
	SetIncrement(value PatternFlowVxlanReserved1Counter) PatternFlowVxlanReserved1
	HasIncrement() bool
	Decrement() PatternFlowVxlanReserved1Counter
	SetDecrement(value PatternFlowVxlanReserved1Counter) PatternFlowVxlanReserved1
	HasDecrement() bool
}

type PatternFlowVxlanReserved1ChoiceEnum string

var PatternFlowVxlanReserved1Choice = struct {
	VALUE     PatternFlowVxlanReserved1ChoiceEnum
	VALUES    PatternFlowVxlanReserved1ChoiceEnum
	INCREMENT PatternFlowVxlanReserved1ChoiceEnum
	DECREMENT PatternFlowVxlanReserved1ChoiceEnum
}{
	VALUE:     PatternFlowVxlanReserved1ChoiceEnum("value"),
	VALUES:    PatternFlowVxlanReserved1ChoiceEnum("values"),
	INCREMENT: PatternFlowVxlanReserved1ChoiceEnum("increment"),
	DECREMENT: PatternFlowVxlanReserved1ChoiceEnum("decrement"),
}

func (obj *patternFlowVxlanReserved1) Choice() PatternFlowVxlanReserved1ChoiceEnum {
	return PatternFlowVxlanReserved1ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowVxlanReserved1) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowVxlanReserved1) SetChoice(value PatternFlowVxlanReserved1ChoiceEnum) PatternFlowVxlanReserved1 {
	intValue, ok := snappipb.PatternFlowVxlanReserved1_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowVxlanReserved1ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowVxlanReserved1_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowVxlanReserved1 object
//  description is TBD
func (obj *patternFlowVxlanReserved1) SetValue(value int32) PatternFlowVxlanReserved1 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowVxlanReserved1Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVxlanReserved1) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowVxlanReserved1 object
//  description is TBD
func (obj *patternFlowVxlanReserved1) SetValues(value []int32) PatternFlowVxlanReserved1 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowVxlanReserved1Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanReserved1) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanReserved1) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowVxlanReserved1 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanReserved1) SetMetricGroup(value string) PatternFlowVxlanReserved1 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowVxlanReserved1Counter
//  description is TBD
func (obj *patternFlowVxlanReserved1) Increment() PatternFlowVxlanReserved1Counter {
	obj.SetChoice(PatternFlowVxlanReserved1Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowVxlanReserved1Counter().Msg()
	}
	return &patternFlowVxlanReserved1Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowVxlanReserved1Counter
//  description is TBD
func (obj *patternFlowVxlanReserved1) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowVxlanReserved1Counter value in the PatternFlowVxlanReserved1 object
//  description is TBD
func (obj *patternFlowVxlanReserved1) SetIncrement(value PatternFlowVxlanReserved1Counter) PatternFlowVxlanReserved1 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVxlanReserved1Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowVxlanReserved1Counter
//  description is TBD
func (obj *patternFlowVxlanReserved1) Decrement() PatternFlowVxlanReserved1Counter {
	obj.SetChoice(PatternFlowVxlanReserved1Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowVxlanReserved1Counter().Msg()
	}
	return &patternFlowVxlanReserved1Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowVxlanReserved1Counter
//  description is TBD
func (obj *patternFlowVxlanReserved1) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowVxlanReserved1Counter value in the PatternFlowVxlanReserved1 object
//  description is TBD
func (obj *patternFlowVxlanReserved1) SetDecrement(value PatternFlowVxlanReserved1Counter) PatternFlowVxlanReserved1 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowVxlanReserved1Choice.DECREMENT)
	return obj
}

func (obj *patternFlowVxlanReserved1) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanReserved1.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanReserved1.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowVxlanReserved1) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowVxlanReserved1Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4Version struct {
	obj *snappipb.PatternFlowIpv4Version
}

func NewPatternFlowIpv4Version() PatternFlowIpv4Version {
	obj := patternFlowIpv4Version{obj: &snappipb.PatternFlowIpv4Version{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4Version) Msg() *snappipb.PatternFlowIpv4Version {
	return obj.obj
}

func (obj *patternFlowIpv4Version) SetMsg(msg *snappipb.PatternFlowIpv4Version) PatternFlowIpv4Version {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4Version) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4Version) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Version) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Version) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Version) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Version) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4Version) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4Version interface {
	Msg() *snappipb.PatternFlowIpv4Version
	SetMsg(*snappipb.PatternFlowIpv4Version) PatternFlowIpv4Version
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4VersionChoiceEnum
	SetChoice(value PatternFlowIpv4VersionChoiceEnum) PatternFlowIpv4Version
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4Version
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4Version
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Version
	HasMetricGroup() bool
	Increment() PatternFlowIpv4VersionCounter
	SetIncrement(value PatternFlowIpv4VersionCounter) PatternFlowIpv4Version
	HasIncrement() bool
	Decrement() PatternFlowIpv4VersionCounter
	SetDecrement(value PatternFlowIpv4VersionCounter) PatternFlowIpv4Version
	HasDecrement() bool
}

type PatternFlowIpv4VersionChoiceEnum string

var PatternFlowIpv4VersionChoice = struct {
	VALUE     PatternFlowIpv4VersionChoiceEnum
	VALUES    PatternFlowIpv4VersionChoiceEnum
	INCREMENT PatternFlowIpv4VersionChoiceEnum
	DECREMENT PatternFlowIpv4VersionChoiceEnum
}{
	VALUE:     PatternFlowIpv4VersionChoiceEnum("value"),
	VALUES:    PatternFlowIpv4VersionChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4VersionChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4VersionChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4Version) Choice() PatternFlowIpv4VersionChoiceEnum {
	return PatternFlowIpv4VersionChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4Version) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4Version) SetChoice(value PatternFlowIpv4VersionChoiceEnum) PatternFlowIpv4Version {
	intValue, ok := snappipb.PatternFlowIpv4Version_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4VersionChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4Version_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Version) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 4
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Version) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4Version object
//  description is TBD
func (obj *patternFlowIpv4Version) SetValue(value int32) PatternFlowIpv4Version {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4VersionChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4Version) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4Version object
//  description is TBD
func (obj *patternFlowIpv4Version) SetValues(value []int32) PatternFlowIpv4Version {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4VersionChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Version) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Version) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4Version object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Version) SetMetricGroup(value string) PatternFlowIpv4Version {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4VersionCounter
//  description is TBD
func (obj *patternFlowIpv4Version) Increment() PatternFlowIpv4VersionCounter {
	obj.SetChoice(PatternFlowIpv4VersionChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4VersionCounter().Msg()
	}
	return &patternFlowIpv4VersionCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4VersionCounter
//  description is TBD
func (obj *patternFlowIpv4Version) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4VersionCounter value in the PatternFlowIpv4Version object
//  description is TBD
func (obj *patternFlowIpv4Version) SetIncrement(value PatternFlowIpv4VersionCounter) PatternFlowIpv4Version {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4VersionChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4VersionCounter
//  description is TBD
func (obj *patternFlowIpv4Version) Decrement() PatternFlowIpv4VersionCounter {
	obj.SetChoice(PatternFlowIpv4VersionChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4VersionCounter().Msg()
	}
	return &patternFlowIpv4VersionCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4VersionCounter
//  description is TBD
func (obj *patternFlowIpv4Version) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4VersionCounter value in the PatternFlowIpv4Version object
//  description is TBD
func (obj *patternFlowIpv4Version) SetDecrement(value PatternFlowIpv4VersionCounter) PatternFlowIpv4Version {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4VersionChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4Version) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4Version.Value <= 15 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4Version.Values <= 15 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4Version) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4VersionChoice.VALUE)
		obj.SetValue(4)
	}

}

type patternFlowIpv4HeaderLength struct {
	obj *snappipb.PatternFlowIpv4HeaderLength
}

func NewPatternFlowIpv4HeaderLength() PatternFlowIpv4HeaderLength {
	obj := patternFlowIpv4HeaderLength{obj: &snappipb.PatternFlowIpv4HeaderLength{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4HeaderLength) Msg() *snappipb.PatternFlowIpv4HeaderLength {
	return obj.obj
}

func (obj *patternFlowIpv4HeaderLength) SetMsg(msg *snappipb.PatternFlowIpv4HeaderLength) PatternFlowIpv4HeaderLength {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4HeaderLength) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4HeaderLength) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4HeaderLength) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4HeaderLength) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderLength) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4HeaderLength) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4HeaderLength interface {
	Msg() *snappipb.PatternFlowIpv4HeaderLength
	SetMsg(*snappipb.PatternFlowIpv4HeaderLength) PatternFlowIpv4HeaderLength
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4HeaderLengthChoiceEnum
	SetChoice(value PatternFlowIpv4HeaderLengthChoiceEnum) PatternFlowIpv4HeaderLength
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4HeaderLength
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4HeaderLength
	Auto() PatternFlowIpv4HeaderLengthAutoEnum
	SetAuto(value PatternFlowIpv4HeaderLengthAutoEnum) PatternFlowIpv4HeaderLength
	HasAuto() bool
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4HeaderLength
	HasMetricGroup() bool
	Increment() PatternFlowIpv4HeaderLengthCounter
	SetIncrement(value PatternFlowIpv4HeaderLengthCounter) PatternFlowIpv4HeaderLength
	HasIncrement() bool
	Decrement() PatternFlowIpv4HeaderLengthCounter
	SetDecrement(value PatternFlowIpv4HeaderLengthCounter) PatternFlowIpv4HeaderLength
	HasDecrement() bool
}

type PatternFlowIpv4HeaderLengthChoiceEnum string

var PatternFlowIpv4HeaderLengthChoice = struct {
	VALUE     PatternFlowIpv4HeaderLengthChoiceEnum
	VALUES    PatternFlowIpv4HeaderLengthChoiceEnum
	AUTO      PatternFlowIpv4HeaderLengthChoiceEnum
	INCREMENT PatternFlowIpv4HeaderLengthChoiceEnum
	DECREMENT PatternFlowIpv4HeaderLengthChoiceEnum
}{
	VALUE:     PatternFlowIpv4HeaderLengthChoiceEnum("value"),
	VALUES:    PatternFlowIpv4HeaderLengthChoiceEnum("values"),
	AUTO:      PatternFlowIpv4HeaderLengthChoiceEnum("auto"),
	INCREMENT: PatternFlowIpv4HeaderLengthChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4HeaderLengthChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4HeaderLength) Choice() PatternFlowIpv4HeaderLengthChoiceEnum {
	return PatternFlowIpv4HeaderLengthChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4HeaderLength) SetChoice(value PatternFlowIpv4HeaderLengthChoiceEnum) PatternFlowIpv4HeaderLength {
	intValue, ok := snappipb.PatternFlowIpv4HeaderLength_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4HeaderLengthChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4HeaderLength_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "auto" {
		obj.obj.Auto = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 5
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4HeaderLength object
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) SetValue(value int32) PatternFlowIpv4HeaderLength {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4HeaderLengthChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4HeaderLength object
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) SetValues(value []int32) PatternFlowIpv4HeaderLength {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4HeaderLengthChoice.VALUES)
	return obj
}

type PatternFlowIpv4HeaderLengthAutoEnum string

var PatternFlowIpv4HeaderLengthAuto = struct {
	AUTO PatternFlowIpv4HeaderLengthAutoEnum
}{
	AUTO: PatternFlowIpv4HeaderLengthAutoEnum("auto"),
}

func (obj *patternFlowIpv4HeaderLength) Auto() PatternFlowIpv4HeaderLengthAutoEnum {
	return PatternFlowIpv4HeaderLengthAutoEnum(obj.obj.Auto.Enum().String())
}

// Auto returns a string
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) HasAuto() bool {
	return obj.obj.Auto != nil
}

func (obj *patternFlowIpv4HeaderLength) SetAuto(value PatternFlowIpv4HeaderLengthAutoEnum) PatternFlowIpv4HeaderLength {
	intValue, ok := snappipb.PatternFlowIpv4HeaderLength_Auto_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4HeaderLengthAutoEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4HeaderLength_Auto_Enum(intValue)
	obj.obj.Auto = &enumValue

	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4HeaderLength) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4HeaderLength) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4HeaderLength object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4HeaderLength) SetMetricGroup(value string) PatternFlowIpv4HeaderLength {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4HeaderLengthCounter
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) Increment() PatternFlowIpv4HeaderLengthCounter {
	obj.SetChoice(PatternFlowIpv4HeaderLengthChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4HeaderLengthCounter().Msg()
	}
	return &patternFlowIpv4HeaderLengthCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4HeaderLengthCounter
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4HeaderLengthCounter value in the PatternFlowIpv4HeaderLength object
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) SetIncrement(value PatternFlowIpv4HeaderLengthCounter) PatternFlowIpv4HeaderLength {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4HeaderLengthChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4HeaderLengthCounter
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) Decrement() PatternFlowIpv4HeaderLengthCounter {
	obj.SetChoice(PatternFlowIpv4HeaderLengthChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4HeaderLengthCounter().Msg()
	}
	return &patternFlowIpv4HeaderLengthCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4HeaderLengthCounter
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4HeaderLengthCounter value in the PatternFlowIpv4HeaderLength object
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) SetDecrement(value PatternFlowIpv4HeaderLengthCounter) PatternFlowIpv4HeaderLength {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4HeaderLengthChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4HeaderLength) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4HeaderLength.Value <= 15 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4HeaderLength.Values <= 15 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4HeaderLength) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4HeaderLengthChoice.AUTO)
		if obj.obj.Auto == nil {
			obj.SetAuto(PatternFlowIpv4HeaderLengthAuto.AUTO)

		}

	}

}

type flowIpv4Priority struct {
	obj *snappipb.FlowIpv4Priority
}

func NewFlowIpv4Priority() FlowIpv4Priority {
	obj := flowIpv4Priority{obj: &snappipb.FlowIpv4Priority{}}
	obj.setDefault()
	return &obj
}

func (obj *flowIpv4Priority) Msg() *snappipb.FlowIpv4Priority {
	return obj.obj
}

func (obj *flowIpv4Priority) SetMsg(msg *snappipb.FlowIpv4Priority) FlowIpv4Priority {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowIpv4Priority) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowIpv4Priority) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIpv4Priority) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Priority) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIpv4Priority) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Priority) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowIpv4Priority) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowIpv4Priority interface {
	Msg() *snappipb.FlowIpv4Priority
	SetMsg(*snappipb.FlowIpv4Priority) FlowIpv4Priority
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() FlowIpv4PriorityChoiceEnum
	SetChoice(value FlowIpv4PriorityChoiceEnum) FlowIpv4Priority
	HasChoice() bool
	Raw() PatternFlowIpv4PriorityRaw
	SetRaw(value PatternFlowIpv4PriorityRaw) FlowIpv4Priority
	HasRaw() bool
	Tos() FlowIpv4Tos
	SetTos(value FlowIpv4Tos) FlowIpv4Priority
	HasTos() bool
	Dscp() FlowIpv4Dscp
	SetDscp(value FlowIpv4Dscp) FlowIpv4Priority
	HasDscp() bool
}

type FlowIpv4PriorityChoiceEnum string

var FlowIpv4PriorityChoice = struct {
	RAW  FlowIpv4PriorityChoiceEnum
	TOS  FlowIpv4PriorityChoiceEnum
	DSCP FlowIpv4PriorityChoiceEnum
}{
	RAW:  FlowIpv4PriorityChoiceEnum("raw"),
	TOS:  FlowIpv4PriorityChoiceEnum("tos"),
	DSCP: FlowIpv4PriorityChoiceEnum("dscp"),
}

func (obj *flowIpv4Priority) Choice() FlowIpv4PriorityChoiceEnum {
	return FlowIpv4PriorityChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *flowIpv4Priority) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *flowIpv4Priority) SetChoice(value FlowIpv4PriorityChoiceEnum) FlowIpv4Priority {
	intValue, ok := snappipb.FlowIpv4Priority_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowIpv4PriorityChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowIpv4Priority_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "raw" {
		obj.obj.Raw = nil
	}

	if string(value) != "tos" {
		obj.obj.Tos = nil
	}

	if string(value) != "dscp" {
		obj.obj.Dscp = nil
	}

	return obj
}

// Raw returns a PatternFlowIpv4PriorityRaw
//  description is TBD
func (obj *flowIpv4Priority) Raw() PatternFlowIpv4PriorityRaw {
	obj.SetChoice(FlowIpv4PriorityChoice.RAW)
	if obj.obj.Raw == nil {
		obj.obj.Raw = NewPatternFlowIpv4PriorityRaw().Msg()
	}
	return &patternFlowIpv4PriorityRaw{obj: obj.obj.Raw}
}

// Raw returns a PatternFlowIpv4PriorityRaw
//  description is TBD
func (obj *flowIpv4Priority) HasRaw() bool {
	return obj.obj.Raw != nil
}

// SetRaw sets the PatternFlowIpv4PriorityRaw value in the FlowIpv4Priority object
//  description is TBD
func (obj *flowIpv4Priority) SetRaw(value PatternFlowIpv4PriorityRaw) FlowIpv4Priority {
	obj.Raw().SetMsg(value.Msg())
	obj.SetChoice(FlowIpv4PriorityChoice.RAW)
	return obj
}

// Tos returns a FlowIpv4Tos
//  description is TBD
func (obj *flowIpv4Priority) Tos() FlowIpv4Tos {
	obj.SetChoice(FlowIpv4PriorityChoice.TOS)
	if obj.obj.Tos == nil {
		obj.obj.Tos = NewFlowIpv4Tos().Msg()
	}
	return &flowIpv4Tos{obj: obj.obj.Tos}
}

// Tos returns a FlowIpv4Tos
//  description is TBD
func (obj *flowIpv4Priority) HasTos() bool {
	return obj.obj.Tos != nil
}

// SetTos sets the FlowIpv4Tos value in the FlowIpv4Priority object
//  description is TBD
func (obj *flowIpv4Priority) SetTos(value FlowIpv4Tos) FlowIpv4Priority {
	obj.Tos().SetMsg(value.Msg())
	obj.SetChoice(FlowIpv4PriorityChoice.TOS)
	return obj
}

// Dscp returns a FlowIpv4Dscp
//  description is TBD
func (obj *flowIpv4Priority) Dscp() FlowIpv4Dscp {
	obj.SetChoice(FlowIpv4PriorityChoice.DSCP)
	if obj.obj.Dscp == nil {
		obj.obj.Dscp = NewFlowIpv4Dscp().Msg()
	}
	return &flowIpv4Dscp{obj: obj.obj.Dscp}
}

// Dscp returns a FlowIpv4Dscp
//  description is TBD
func (obj *flowIpv4Priority) HasDscp() bool {
	return obj.obj.Dscp != nil
}

// SetDscp sets the FlowIpv4Dscp value in the FlowIpv4Priority object
//  description is TBD
func (obj *flowIpv4Priority) SetDscp(value FlowIpv4Dscp) FlowIpv4Priority {
	obj.Dscp().SetMsg(value.Msg())
	obj.SetChoice(FlowIpv4PriorityChoice.DSCP)
	return obj
}

func (obj *flowIpv4Priority) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Raw != nil {
		obj.Raw().validateObj(set_default)
	}

	if obj.obj.Tos != nil {
		obj.Tos().validateObj(set_default)
	}

	if obj.obj.Dscp != nil {
		obj.Dscp().validateObj(set_default)
	}
}

func (obj *flowIpv4Priority) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(FlowIpv4PriorityChoice.DSCP)
		obj.Dscp()
	}

}

type patternFlowIpv4TotalLength struct {
	obj *snappipb.PatternFlowIpv4TotalLength
}

func NewPatternFlowIpv4TotalLength() PatternFlowIpv4TotalLength {
	obj := patternFlowIpv4TotalLength{obj: &snappipb.PatternFlowIpv4TotalLength{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TotalLength) Msg() *snappipb.PatternFlowIpv4TotalLength {
	return obj.obj
}

func (obj *patternFlowIpv4TotalLength) SetMsg(msg *snappipb.PatternFlowIpv4TotalLength) PatternFlowIpv4TotalLength {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TotalLength) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TotalLength) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TotalLength) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TotalLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TotalLength) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TotalLength) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TotalLength) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TotalLength interface {
	Msg() *snappipb.PatternFlowIpv4TotalLength
	SetMsg(*snappipb.PatternFlowIpv4TotalLength) PatternFlowIpv4TotalLength
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4TotalLengthChoiceEnum
	SetChoice(value PatternFlowIpv4TotalLengthChoiceEnum) PatternFlowIpv4TotalLength
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4TotalLength
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TotalLength
	Auto() PatternFlowIpv4TotalLengthAutoEnum
	SetAuto(value PatternFlowIpv4TotalLengthAutoEnum) PatternFlowIpv4TotalLength
	HasAuto() bool
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TotalLength
	HasMetricGroup() bool
	Increment() PatternFlowIpv4TotalLengthCounter
	SetIncrement(value PatternFlowIpv4TotalLengthCounter) PatternFlowIpv4TotalLength
	HasIncrement() bool
	Decrement() PatternFlowIpv4TotalLengthCounter
	SetDecrement(value PatternFlowIpv4TotalLengthCounter) PatternFlowIpv4TotalLength
	HasDecrement() bool
}

type PatternFlowIpv4TotalLengthChoiceEnum string

var PatternFlowIpv4TotalLengthChoice = struct {
	VALUE     PatternFlowIpv4TotalLengthChoiceEnum
	VALUES    PatternFlowIpv4TotalLengthChoiceEnum
	AUTO      PatternFlowIpv4TotalLengthChoiceEnum
	INCREMENT PatternFlowIpv4TotalLengthChoiceEnum
	DECREMENT PatternFlowIpv4TotalLengthChoiceEnum
}{
	VALUE:     PatternFlowIpv4TotalLengthChoiceEnum("value"),
	VALUES:    PatternFlowIpv4TotalLengthChoiceEnum("values"),
	AUTO:      PatternFlowIpv4TotalLengthChoiceEnum("auto"),
	INCREMENT: PatternFlowIpv4TotalLengthChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4TotalLengthChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4TotalLength) Choice() PatternFlowIpv4TotalLengthChoiceEnum {
	return PatternFlowIpv4TotalLengthChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4TotalLength) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4TotalLength) SetChoice(value PatternFlowIpv4TotalLengthChoiceEnum) PatternFlowIpv4TotalLength {
	intValue, ok := snappipb.PatternFlowIpv4TotalLength_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4TotalLengthChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4TotalLength_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "auto" {
		obj.obj.Auto = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLength) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 46
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLength) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4TotalLength object
//  description is TBD
func (obj *patternFlowIpv4TotalLength) SetValue(value int32) PatternFlowIpv4TotalLength {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4TotalLengthChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TotalLength) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4TotalLength object
//  description is TBD
func (obj *patternFlowIpv4TotalLength) SetValues(value []int32) PatternFlowIpv4TotalLength {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4TotalLengthChoice.VALUES)
	return obj
}

type PatternFlowIpv4TotalLengthAutoEnum string

var PatternFlowIpv4TotalLengthAuto = struct {
	AUTO PatternFlowIpv4TotalLengthAutoEnum
}{
	AUTO: PatternFlowIpv4TotalLengthAutoEnum("auto"),
}

func (obj *patternFlowIpv4TotalLength) Auto() PatternFlowIpv4TotalLengthAutoEnum {
	return PatternFlowIpv4TotalLengthAutoEnum(obj.obj.Auto.Enum().String())
}

// Auto returns a string
//  description is TBD
func (obj *patternFlowIpv4TotalLength) HasAuto() bool {
	return obj.obj.Auto != nil
}

func (obj *patternFlowIpv4TotalLength) SetAuto(value PatternFlowIpv4TotalLengthAutoEnum) PatternFlowIpv4TotalLength {
	intValue, ok := snappipb.PatternFlowIpv4TotalLength_Auto_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4TotalLengthAutoEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4TotalLength_Auto_Enum(intValue)
	obj.obj.Auto = &enumValue

	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TotalLength) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TotalLength) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4TotalLength object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TotalLength) SetMetricGroup(value string) PatternFlowIpv4TotalLength {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4TotalLengthCounter
//  description is TBD
func (obj *patternFlowIpv4TotalLength) Increment() PatternFlowIpv4TotalLengthCounter {
	obj.SetChoice(PatternFlowIpv4TotalLengthChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4TotalLengthCounter().Msg()
	}
	return &patternFlowIpv4TotalLengthCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4TotalLengthCounter
//  description is TBD
func (obj *patternFlowIpv4TotalLength) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4TotalLengthCounter value in the PatternFlowIpv4TotalLength object
//  description is TBD
func (obj *patternFlowIpv4TotalLength) SetIncrement(value PatternFlowIpv4TotalLengthCounter) PatternFlowIpv4TotalLength {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TotalLengthChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4TotalLengthCounter
//  description is TBD
func (obj *patternFlowIpv4TotalLength) Decrement() PatternFlowIpv4TotalLengthCounter {
	obj.SetChoice(PatternFlowIpv4TotalLengthChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4TotalLengthCounter().Msg()
	}
	return &patternFlowIpv4TotalLengthCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4TotalLengthCounter
//  description is TBD
func (obj *patternFlowIpv4TotalLength) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4TotalLengthCounter value in the PatternFlowIpv4TotalLength object
//  description is TBD
func (obj *patternFlowIpv4TotalLength) SetDecrement(value PatternFlowIpv4TotalLengthCounter) PatternFlowIpv4TotalLength {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TotalLengthChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4TotalLength) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TotalLength.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TotalLength.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4TotalLength) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4TotalLengthChoice.AUTO)
		if obj.obj.Auto == nil {
			obj.SetAuto(PatternFlowIpv4TotalLengthAuto.AUTO)

		}

	}

}

type patternFlowIpv4Identification struct {
	obj *snappipb.PatternFlowIpv4Identification
}

func NewPatternFlowIpv4Identification() PatternFlowIpv4Identification {
	obj := patternFlowIpv4Identification{obj: &snappipb.PatternFlowIpv4Identification{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4Identification) Msg() *snappipb.PatternFlowIpv4Identification {
	return obj.obj
}

func (obj *patternFlowIpv4Identification) SetMsg(msg *snappipb.PatternFlowIpv4Identification) PatternFlowIpv4Identification {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4Identification) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4Identification) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Identification) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Identification) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Identification) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Identification) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4Identification) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4Identification interface {
	Msg() *snappipb.PatternFlowIpv4Identification
	SetMsg(*snappipb.PatternFlowIpv4Identification) PatternFlowIpv4Identification
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4IdentificationChoiceEnum
	SetChoice(value PatternFlowIpv4IdentificationChoiceEnum) PatternFlowIpv4Identification
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4Identification
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4Identification
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Identification
	HasMetricGroup() bool
	Increment() PatternFlowIpv4IdentificationCounter
	SetIncrement(value PatternFlowIpv4IdentificationCounter) PatternFlowIpv4Identification
	HasIncrement() bool
	Decrement() PatternFlowIpv4IdentificationCounter
	SetDecrement(value PatternFlowIpv4IdentificationCounter) PatternFlowIpv4Identification
	HasDecrement() bool
}

type PatternFlowIpv4IdentificationChoiceEnum string

var PatternFlowIpv4IdentificationChoice = struct {
	VALUE     PatternFlowIpv4IdentificationChoiceEnum
	VALUES    PatternFlowIpv4IdentificationChoiceEnum
	INCREMENT PatternFlowIpv4IdentificationChoiceEnum
	DECREMENT PatternFlowIpv4IdentificationChoiceEnum
}{
	VALUE:     PatternFlowIpv4IdentificationChoiceEnum("value"),
	VALUES:    PatternFlowIpv4IdentificationChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4IdentificationChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4IdentificationChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4Identification) Choice() PatternFlowIpv4IdentificationChoiceEnum {
	return PatternFlowIpv4IdentificationChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4Identification) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4Identification) SetChoice(value PatternFlowIpv4IdentificationChoiceEnum) PatternFlowIpv4Identification {
	intValue, ok := snappipb.PatternFlowIpv4Identification_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4IdentificationChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4Identification_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Identification) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Identification) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4Identification object
//  description is TBD
func (obj *patternFlowIpv4Identification) SetValue(value int32) PatternFlowIpv4Identification {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4IdentificationChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4Identification) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4Identification object
//  description is TBD
func (obj *patternFlowIpv4Identification) SetValues(value []int32) PatternFlowIpv4Identification {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4IdentificationChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Identification) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Identification) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4Identification object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Identification) SetMetricGroup(value string) PatternFlowIpv4Identification {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4IdentificationCounter
//  description is TBD
func (obj *patternFlowIpv4Identification) Increment() PatternFlowIpv4IdentificationCounter {
	obj.SetChoice(PatternFlowIpv4IdentificationChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4IdentificationCounter().Msg()
	}
	return &patternFlowIpv4IdentificationCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4IdentificationCounter
//  description is TBD
func (obj *patternFlowIpv4Identification) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4IdentificationCounter value in the PatternFlowIpv4Identification object
//  description is TBD
func (obj *patternFlowIpv4Identification) SetIncrement(value PatternFlowIpv4IdentificationCounter) PatternFlowIpv4Identification {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4IdentificationChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4IdentificationCounter
//  description is TBD
func (obj *patternFlowIpv4Identification) Decrement() PatternFlowIpv4IdentificationCounter {
	obj.SetChoice(PatternFlowIpv4IdentificationChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4IdentificationCounter().Msg()
	}
	return &patternFlowIpv4IdentificationCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4IdentificationCounter
//  description is TBD
func (obj *patternFlowIpv4Identification) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4IdentificationCounter value in the PatternFlowIpv4Identification object
//  description is TBD
func (obj *patternFlowIpv4Identification) SetDecrement(value PatternFlowIpv4IdentificationCounter) PatternFlowIpv4Identification {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4IdentificationChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4Identification) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4Identification.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4Identification.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4Identification) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4IdentificationChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4Reserved struct {
	obj *snappipb.PatternFlowIpv4Reserved
}

func NewPatternFlowIpv4Reserved() PatternFlowIpv4Reserved {
	obj := patternFlowIpv4Reserved{obj: &snappipb.PatternFlowIpv4Reserved{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4Reserved) Msg() *snappipb.PatternFlowIpv4Reserved {
	return obj.obj
}

func (obj *patternFlowIpv4Reserved) SetMsg(msg *snappipb.PatternFlowIpv4Reserved) PatternFlowIpv4Reserved {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4Reserved) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4Reserved) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Reserved) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Reserved) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Reserved) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Reserved) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4Reserved) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4Reserved interface {
	Msg() *snappipb.PatternFlowIpv4Reserved
	SetMsg(*snappipb.PatternFlowIpv4Reserved) PatternFlowIpv4Reserved
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4ReservedChoiceEnum
	SetChoice(value PatternFlowIpv4ReservedChoiceEnum) PatternFlowIpv4Reserved
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4Reserved
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4Reserved
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Reserved
	HasMetricGroup() bool
	Increment() PatternFlowIpv4ReservedCounter
	SetIncrement(value PatternFlowIpv4ReservedCounter) PatternFlowIpv4Reserved
	HasIncrement() bool
	Decrement() PatternFlowIpv4ReservedCounter
	SetDecrement(value PatternFlowIpv4ReservedCounter) PatternFlowIpv4Reserved
	HasDecrement() bool
}

type PatternFlowIpv4ReservedChoiceEnum string

var PatternFlowIpv4ReservedChoice = struct {
	VALUE     PatternFlowIpv4ReservedChoiceEnum
	VALUES    PatternFlowIpv4ReservedChoiceEnum
	INCREMENT PatternFlowIpv4ReservedChoiceEnum
	DECREMENT PatternFlowIpv4ReservedChoiceEnum
}{
	VALUE:     PatternFlowIpv4ReservedChoiceEnum("value"),
	VALUES:    PatternFlowIpv4ReservedChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4ReservedChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4ReservedChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4Reserved) Choice() PatternFlowIpv4ReservedChoiceEnum {
	return PatternFlowIpv4ReservedChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4Reserved) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4Reserved) SetChoice(value PatternFlowIpv4ReservedChoiceEnum) PatternFlowIpv4Reserved {
	intValue, ok := snappipb.PatternFlowIpv4Reserved_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4ReservedChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4Reserved_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Reserved) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Reserved) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4Reserved object
//  description is TBD
func (obj *patternFlowIpv4Reserved) SetValue(value int32) PatternFlowIpv4Reserved {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4ReservedChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4Reserved) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4Reserved object
//  description is TBD
func (obj *patternFlowIpv4Reserved) SetValues(value []int32) PatternFlowIpv4Reserved {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4ReservedChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Reserved) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Reserved) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4Reserved object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Reserved) SetMetricGroup(value string) PatternFlowIpv4Reserved {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4ReservedCounter
//  description is TBD
func (obj *patternFlowIpv4Reserved) Increment() PatternFlowIpv4ReservedCounter {
	obj.SetChoice(PatternFlowIpv4ReservedChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4ReservedCounter().Msg()
	}
	return &patternFlowIpv4ReservedCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4ReservedCounter
//  description is TBD
func (obj *patternFlowIpv4Reserved) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4ReservedCounter value in the PatternFlowIpv4Reserved object
//  description is TBD
func (obj *patternFlowIpv4Reserved) SetIncrement(value PatternFlowIpv4ReservedCounter) PatternFlowIpv4Reserved {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4ReservedChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4ReservedCounter
//  description is TBD
func (obj *patternFlowIpv4Reserved) Decrement() PatternFlowIpv4ReservedCounter {
	obj.SetChoice(PatternFlowIpv4ReservedChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4ReservedCounter().Msg()
	}
	return &patternFlowIpv4ReservedCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4ReservedCounter
//  description is TBD
func (obj *patternFlowIpv4Reserved) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4ReservedCounter value in the PatternFlowIpv4Reserved object
//  description is TBD
func (obj *patternFlowIpv4Reserved) SetDecrement(value PatternFlowIpv4ReservedCounter) PatternFlowIpv4Reserved {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4ReservedChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4Reserved) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4Reserved.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4Reserved.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4Reserved) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4ReservedChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4DontFragment struct {
	obj *snappipb.PatternFlowIpv4DontFragment
}

func NewPatternFlowIpv4DontFragment() PatternFlowIpv4DontFragment {
	obj := patternFlowIpv4DontFragment{obj: &snappipb.PatternFlowIpv4DontFragment{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4DontFragment) Msg() *snappipb.PatternFlowIpv4DontFragment {
	return obj.obj
}

func (obj *patternFlowIpv4DontFragment) SetMsg(msg *snappipb.PatternFlowIpv4DontFragment) PatternFlowIpv4DontFragment {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4DontFragment) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4DontFragment) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DontFragment) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DontFragment) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DontFragment) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DontFragment) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4DontFragment) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4DontFragment interface {
	Msg() *snappipb.PatternFlowIpv4DontFragment
	SetMsg(*snappipb.PatternFlowIpv4DontFragment) PatternFlowIpv4DontFragment
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4DontFragmentChoiceEnum
	SetChoice(value PatternFlowIpv4DontFragmentChoiceEnum) PatternFlowIpv4DontFragment
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4DontFragment
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4DontFragment
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4DontFragment
	HasMetricGroup() bool
	Increment() PatternFlowIpv4DontFragmentCounter
	SetIncrement(value PatternFlowIpv4DontFragmentCounter) PatternFlowIpv4DontFragment
	HasIncrement() bool
	Decrement() PatternFlowIpv4DontFragmentCounter
	SetDecrement(value PatternFlowIpv4DontFragmentCounter) PatternFlowIpv4DontFragment
	HasDecrement() bool
}

type PatternFlowIpv4DontFragmentChoiceEnum string

var PatternFlowIpv4DontFragmentChoice = struct {
	VALUE     PatternFlowIpv4DontFragmentChoiceEnum
	VALUES    PatternFlowIpv4DontFragmentChoiceEnum
	INCREMENT PatternFlowIpv4DontFragmentChoiceEnum
	DECREMENT PatternFlowIpv4DontFragmentChoiceEnum
}{
	VALUE:     PatternFlowIpv4DontFragmentChoiceEnum("value"),
	VALUES:    PatternFlowIpv4DontFragmentChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4DontFragmentChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4DontFragmentChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4DontFragment) Choice() PatternFlowIpv4DontFragmentChoiceEnum {
	return PatternFlowIpv4DontFragmentChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4DontFragment) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4DontFragment) SetChoice(value PatternFlowIpv4DontFragmentChoiceEnum) PatternFlowIpv4DontFragment {
	intValue, ok := snappipb.PatternFlowIpv4DontFragment_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4DontFragmentChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4DontFragment_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragment) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragment) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4DontFragment object
//  description is TBD
func (obj *patternFlowIpv4DontFragment) SetValue(value int32) PatternFlowIpv4DontFragment {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4DontFragmentChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4DontFragment) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4DontFragment object
//  description is TBD
func (obj *patternFlowIpv4DontFragment) SetValues(value []int32) PatternFlowIpv4DontFragment {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4DontFragmentChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DontFragment) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DontFragment) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4DontFragment object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DontFragment) SetMetricGroup(value string) PatternFlowIpv4DontFragment {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4DontFragmentCounter
//  description is TBD
func (obj *patternFlowIpv4DontFragment) Increment() PatternFlowIpv4DontFragmentCounter {
	obj.SetChoice(PatternFlowIpv4DontFragmentChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4DontFragmentCounter().Msg()
	}
	return &patternFlowIpv4DontFragmentCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4DontFragmentCounter
//  description is TBD
func (obj *patternFlowIpv4DontFragment) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4DontFragmentCounter value in the PatternFlowIpv4DontFragment object
//  description is TBD
func (obj *patternFlowIpv4DontFragment) SetIncrement(value PatternFlowIpv4DontFragmentCounter) PatternFlowIpv4DontFragment {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4DontFragmentChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4DontFragmentCounter
//  description is TBD
func (obj *patternFlowIpv4DontFragment) Decrement() PatternFlowIpv4DontFragmentCounter {
	obj.SetChoice(PatternFlowIpv4DontFragmentChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4DontFragmentCounter().Msg()
	}
	return &patternFlowIpv4DontFragmentCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4DontFragmentCounter
//  description is TBD
func (obj *patternFlowIpv4DontFragment) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4DontFragmentCounter value in the PatternFlowIpv4DontFragment object
//  description is TBD
func (obj *patternFlowIpv4DontFragment) SetDecrement(value PatternFlowIpv4DontFragmentCounter) PatternFlowIpv4DontFragment {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4DontFragmentChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4DontFragment) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DontFragment.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DontFragment.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4DontFragment) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4DontFragmentChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4MoreFragments struct {
	obj *snappipb.PatternFlowIpv4MoreFragments
}

func NewPatternFlowIpv4MoreFragments() PatternFlowIpv4MoreFragments {
	obj := patternFlowIpv4MoreFragments{obj: &snappipb.PatternFlowIpv4MoreFragments{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4MoreFragments) Msg() *snappipb.PatternFlowIpv4MoreFragments {
	return obj.obj
}

func (obj *patternFlowIpv4MoreFragments) SetMsg(msg *snappipb.PatternFlowIpv4MoreFragments) PatternFlowIpv4MoreFragments {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4MoreFragments) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4MoreFragments) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4MoreFragments) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4MoreFragments) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4MoreFragments) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4MoreFragments) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4MoreFragments) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4MoreFragments interface {
	Msg() *snappipb.PatternFlowIpv4MoreFragments
	SetMsg(*snappipb.PatternFlowIpv4MoreFragments) PatternFlowIpv4MoreFragments
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4MoreFragmentsChoiceEnum
	SetChoice(value PatternFlowIpv4MoreFragmentsChoiceEnum) PatternFlowIpv4MoreFragments
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4MoreFragments
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4MoreFragments
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4MoreFragments
	HasMetricGroup() bool
	Increment() PatternFlowIpv4MoreFragmentsCounter
	SetIncrement(value PatternFlowIpv4MoreFragmentsCounter) PatternFlowIpv4MoreFragments
	HasIncrement() bool
	Decrement() PatternFlowIpv4MoreFragmentsCounter
	SetDecrement(value PatternFlowIpv4MoreFragmentsCounter) PatternFlowIpv4MoreFragments
	HasDecrement() bool
}

type PatternFlowIpv4MoreFragmentsChoiceEnum string

var PatternFlowIpv4MoreFragmentsChoice = struct {
	VALUE     PatternFlowIpv4MoreFragmentsChoiceEnum
	VALUES    PatternFlowIpv4MoreFragmentsChoiceEnum
	INCREMENT PatternFlowIpv4MoreFragmentsChoiceEnum
	DECREMENT PatternFlowIpv4MoreFragmentsChoiceEnum
}{
	VALUE:     PatternFlowIpv4MoreFragmentsChoiceEnum("value"),
	VALUES:    PatternFlowIpv4MoreFragmentsChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4MoreFragmentsChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4MoreFragmentsChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4MoreFragments) Choice() PatternFlowIpv4MoreFragmentsChoiceEnum {
	return PatternFlowIpv4MoreFragmentsChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4MoreFragments) SetChoice(value PatternFlowIpv4MoreFragmentsChoiceEnum) PatternFlowIpv4MoreFragments {
	intValue, ok := snappipb.PatternFlowIpv4MoreFragments_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4MoreFragmentsChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4MoreFragments_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4MoreFragments object
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) SetValue(value int32) PatternFlowIpv4MoreFragments {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4MoreFragmentsChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4MoreFragments object
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) SetValues(value []int32) PatternFlowIpv4MoreFragments {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4MoreFragmentsChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4MoreFragments) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4MoreFragments) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4MoreFragments object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4MoreFragments) SetMetricGroup(value string) PatternFlowIpv4MoreFragments {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4MoreFragmentsCounter
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) Increment() PatternFlowIpv4MoreFragmentsCounter {
	obj.SetChoice(PatternFlowIpv4MoreFragmentsChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4MoreFragmentsCounter().Msg()
	}
	return &patternFlowIpv4MoreFragmentsCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4MoreFragmentsCounter
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4MoreFragmentsCounter value in the PatternFlowIpv4MoreFragments object
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) SetIncrement(value PatternFlowIpv4MoreFragmentsCounter) PatternFlowIpv4MoreFragments {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4MoreFragmentsChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4MoreFragmentsCounter
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) Decrement() PatternFlowIpv4MoreFragmentsCounter {
	obj.SetChoice(PatternFlowIpv4MoreFragmentsChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4MoreFragmentsCounter().Msg()
	}
	return &patternFlowIpv4MoreFragmentsCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4MoreFragmentsCounter
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4MoreFragmentsCounter value in the PatternFlowIpv4MoreFragments object
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) SetDecrement(value PatternFlowIpv4MoreFragmentsCounter) PatternFlowIpv4MoreFragments {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4MoreFragmentsChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4MoreFragments) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4MoreFragments.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4MoreFragments.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4MoreFragments) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4MoreFragmentsChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4FragmentOffset struct {
	obj *snappipb.PatternFlowIpv4FragmentOffset
}

func NewPatternFlowIpv4FragmentOffset() PatternFlowIpv4FragmentOffset {
	obj := patternFlowIpv4FragmentOffset{obj: &snappipb.PatternFlowIpv4FragmentOffset{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4FragmentOffset) Msg() *snappipb.PatternFlowIpv4FragmentOffset {
	return obj.obj
}

func (obj *patternFlowIpv4FragmentOffset) SetMsg(msg *snappipb.PatternFlowIpv4FragmentOffset) PatternFlowIpv4FragmentOffset {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4FragmentOffset) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4FragmentOffset) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4FragmentOffset) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4FragmentOffset) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4FragmentOffset) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4FragmentOffset) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4FragmentOffset) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4FragmentOffset interface {
	Msg() *snappipb.PatternFlowIpv4FragmentOffset
	SetMsg(*snappipb.PatternFlowIpv4FragmentOffset) PatternFlowIpv4FragmentOffset
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4FragmentOffsetChoiceEnum
	SetChoice(value PatternFlowIpv4FragmentOffsetChoiceEnum) PatternFlowIpv4FragmentOffset
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4FragmentOffset
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4FragmentOffset
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4FragmentOffset
	HasMetricGroup() bool
	Increment() PatternFlowIpv4FragmentOffsetCounter
	SetIncrement(value PatternFlowIpv4FragmentOffsetCounter) PatternFlowIpv4FragmentOffset
	HasIncrement() bool
	Decrement() PatternFlowIpv4FragmentOffsetCounter
	SetDecrement(value PatternFlowIpv4FragmentOffsetCounter) PatternFlowIpv4FragmentOffset
	HasDecrement() bool
}

type PatternFlowIpv4FragmentOffsetChoiceEnum string

var PatternFlowIpv4FragmentOffsetChoice = struct {
	VALUE     PatternFlowIpv4FragmentOffsetChoiceEnum
	VALUES    PatternFlowIpv4FragmentOffsetChoiceEnum
	INCREMENT PatternFlowIpv4FragmentOffsetChoiceEnum
	DECREMENT PatternFlowIpv4FragmentOffsetChoiceEnum
}{
	VALUE:     PatternFlowIpv4FragmentOffsetChoiceEnum("value"),
	VALUES:    PatternFlowIpv4FragmentOffsetChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4FragmentOffsetChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4FragmentOffsetChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4FragmentOffset) Choice() PatternFlowIpv4FragmentOffsetChoiceEnum {
	return PatternFlowIpv4FragmentOffsetChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4FragmentOffset) SetChoice(value PatternFlowIpv4FragmentOffsetChoiceEnum) PatternFlowIpv4FragmentOffset {
	intValue, ok := snappipb.PatternFlowIpv4FragmentOffset_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4FragmentOffsetChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4FragmentOffset_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4FragmentOffset object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) SetValue(value int32) PatternFlowIpv4FragmentOffset {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4FragmentOffsetChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4FragmentOffset object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) SetValues(value []int32) PatternFlowIpv4FragmentOffset {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4FragmentOffsetChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4FragmentOffset) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4FragmentOffset) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4FragmentOffset object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4FragmentOffset) SetMetricGroup(value string) PatternFlowIpv4FragmentOffset {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4FragmentOffsetCounter
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) Increment() PatternFlowIpv4FragmentOffsetCounter {
	obj.SetChoice(PatternFlowIpv4FragmentOffsetChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4FragmentOffsetCounter().Msg()
	}
	return &patternFlowIpv4FragmentOffsetCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4FragmentOffsetCounter
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4FragmentOffsetCounter value in the PatternFlowIpv4FragmentOffset object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) SetIncrement(value PatternFlowIpv4FragmentOffsetCounter) PatternFlowIpv4FragmentOffset {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4FragmentOffsetChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4FragmentOffsetCounter
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) Decrement() PatternFlowIpv4FragmentOffsetCounter {
	obj.SetChoice(PatternFlowIpv4FragmentOffsetChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4FragmentOffsetCounter().Msg()
	}
	return &patternFlowIpv4FragmentOffsetCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4FragmentOffsetCounter
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4FragmentOffsetCounter value in the PatternFlowIpv4FragmentOffset object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) SetDecrement(value PatternFlowIpv4FragmentOffsetCounter) PatternFlowIpv4FragmentOffset {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4FragmentOffsetChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4FragmentOffset) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 31 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4FragmentOffset.Value <= 31 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 31 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4FragmentOffset.Values <= 31 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4FragmentOffset) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4FragmentOffsetChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4TimeToLive struct {
	obj *snappipb.PatternFlowIpv4TimeToLive
}

func NewPatternFlowIpv4TimeToLive() PatternFlowIpv4TimeToLive {
	obj := patternFlowIpv4TimeToLive{obj: &snappipb.PatternFlowIpv4TimeToLive{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TimeToLive) Msg() *snappipb.PatternFlowIpv4TimeToLive {
	return obj.obj
}

func (obj *patternFlowIpv4TimeToLive) SetMsg(msg *snappipb.PatternFlowIpv4TimeToLive) PatternFlowIpv4TimeToLive {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TimeToLive) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TimeToLive) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TimeToLive) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TimeToLive) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TimeToLive) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TimeToLive) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TimeToLive) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TimeToLive interface {
	Msg() *snappipb.PatternFlowIpv4TimeToLive
	SetMsg(*snappipb.PatternFlowIpv4TimeToLive) PatternFlowIpv4TimeToLive
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4TimeToLiveChoiceEnum
	SetChoice(value PatternFlowIpv4TimeToLiveChoiceEnum) PatternFlowIpv4TimeToLive
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4TimeToLive
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TimeToLive
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TimeToLive
	HasMetricGroup() bool
	Increment() PatternFlowIpv4TimeToLiveCounter
	SetIncrement(value PatternFlowIpv4TimeToLiveCounter) PatternFlowIpv4TimeToLive
	HasIncrement() bool
	Decrement() PatternFlowIpv4TimeToLiveCounter
	SetDecrement(value PatternFlowIpv4TimeToLiveCounter) PatternFlowIpv4TimeToLive
	HasDecrement() bool
}

type PatternFlowIpv4TimeToLiveChoiceEnum string

var PatternFlowIpv4TimeToLiveChoice = struct {
	VALUE     PatternFlowIpv4TimeToLiveChoiceEnum
	VALUES    PatternFlowIpv4TimeToLiveChoiceEnum
	INCREMENT PatternFlowIpv4TimeToLiveChoiceEnum
	DECREMENT PatternFlowIpv4TimeToLiveChoiceEnum
}{
	VALUE:     PatternFlowIpv4TimeToLiveChoiceEnum("value"),
	VALUES:    PatternFlowIpv4TimeToLiveChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4TimeToLiveChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4TimeToLiveChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4TimeToLive) Choice() PatternFlowIpv4TimeToLiveChoiceEnum {
	return PatternFlowIpv4TimeToLiveChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4TimeToLive) SetChoice(value PatternFlowIpv4TimeToLiveChoiceEnum) PatternFlowIpv4TimeToLive {
	intValue, ok := snappipb.PatternFlowIpv4TimeToLive_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4TimeToLiveChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4TimeToLive_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 64
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4TimeToLive object
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) SetValue(value int32) PatternFlowIpv4TimeToLive {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4TimeToLiveChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4TimeToLive object
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) SetValues(value []int32) PatternFlowIpv4TimeToLive {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4TimeToLiveChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TimeToLive) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TimeToLive) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4TimeToLive object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TimeToLive) SetMetricGroup(value string) PatternFlowIpv4TimeToLive {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4TimeToLiveCounter
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) Increment() PatternFlowIpv4TimeToLiveCounter {
	obj.SetChoice(PatternFlowIpv4TimeToLiveChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4TimeToLiveCounter().Msg()
	}
	return &patternFlowIpv4TimeToLiveCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4TimeToLiveCounter
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4TimeToLiveCounter value in the PatternFlowIpv4TimeToLive object
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) SetIncrement(value PatternFlowIpv4TimeToLiveCounter) PatternFlowIpv4TimeToLive {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TimeToLiveChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4TimeToLiveCounter
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) Decrement() PatternFlowIpv4TimeToLiveCounter {
	obj.SetChoice(PatternFlowIpv4TimeToLiveChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4TimeToLiveCounter().Msg()
	}
	return &patternFlowIpv4TimeToLiveCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4TimeToLiveCounter
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4TimeToLiveCounter value in the PatternFlowIpv4TimeToLive object
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) SetDecrement(value PatternFlowIpv4TimeToLiveCounter) PatternFlowIpv4TimeToLive {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TimeToLiveChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4TimeToLive) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TimeToLive.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TimeToLive.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4TimeToLive) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4TimeToLiveChoice.VALUE)
		obj.SetValue(64)
	}

}

type patternFlowIpv4Protocol struct {
	obj *snappipb.PatternFlowIpv4Protocol
}

func NewPatternFlowIpv4Protocol() PatternFlowIpv4Protocol {
	obj := patternFlowIpv4Protocol{obj: &snappipb.PatternFlowIpv4Protocol{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4Protocol) Msg() *snappipb.PatternFlowIpv4Protocol {
	return obj.obj
}

func (obj *patternFlowIpv4Protocol) SetMsg(msg *snappipb.PatternFlowIpv4Protocol) PatternFlowIpv4Protocol {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4Protocol) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4Protocol) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Protocol) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Protocol) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Protocol) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Protocol) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4Protocol) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4Protocol interface {
	Msg() *snappipb.PatternFlowIpv4Protocol
	SetMsg(*snappipb.PatternFlowIpv4Protocol) PatternFlowIpv4Protocol
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4ProtocolChoiceEnum
	SetChoice(value PatternFlowIpv4ProtocolChoiceEnum) PatternFlowIpv4Protocol
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4Protocol
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4Protocol
	Auto() PatternFlowIpv4ProtocolAutoEnum
	SetAuto(value PatternFlowIpv4ProtocolAutoEnum) PatternFlowIpv4Protocol
	HasAuto() bool
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Protocol
	HasMetricGroup() bool
	Increment() PatternFlowIpv4ProtocolCounter
	SetIncrement(value PatternFlowIpv4ProtocolCounter) PatternFlowIpv4Protocol
	HasIncrement() bool
	Decrement() PatternFlowIpv4ProtocolCounter
	SetDecrement(value PatternFlowIpv4ProtocolCounter) PatternFlowIpv4Protocol
	HasDecrement() bool
}

type PatternFlowIpv4ProtocolChoiceEnum string

var PatternFlowIpv4ProtocolChoice = struct {
	VALUE     PatternFlowIpv4ProtocolChoiceEnum
	VALUES    PatternFlowIpv4ProtocolChoiceEnum
	AUTO      PatternFlowIpv4ProtocolChoiceEnum
	INCREMENT PatternFlowIpv4ProtocolChoiceEnum
	DECREMENT PatternFlowIpv4ProtocolChoiceEnum
}{
	VALUE:     PatternFlowIpv4ProtocolChoiceEnum("value"),
	VALUES:    PatternFlowIpv4ProtocolChoiceEnum("values"),
	AUTO:      PatternFlowIpv4ProtocolChoiceEnum("auto"),
	INCREMENT: PatternFlowIpv4ProtocolChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4ProtocolChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4Protocol) Choice() PatternFlowIpv4ProtocolChoiceEnum {
	return PatternFlowIpv4ProtocolChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4Protocol) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4Protocol) SetChoice(value PatternFlowIpv4ProtocolChoiceEnum) PatternFlowIpv4Protocol {
	intValue, ok := snappipb.PatternFlowIpv4Protocol_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4ProtocolChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4Protocol_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "auto" {
		obj.obj.Auto = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Protocol) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 61
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Protocol) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4Protocol object
//  description is TBD
func (obj *patternFlowIpv4Protocol) SetValue(value int32) PatternFlowIpv4Protocol {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4ProtocolChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4Protocol) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4Protocol object
//  description is TBD
func (obj *patternFlowIpv4Protocol) SetValues(value []int32) PatternFlowIpv4Protocol {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4ProtocolChoice.VALUES)
	return obj
}

type PatternFlowIpv4ProtocolAutoEnum string

var PatternFlowIpv4ProtocolAuto = struct {
	AUTO PatternFlowIpv4ProtocolAutoEnum
}{
	AUTO: PatternFlowIpv4ProtocolAutoEnum("auto"),
}

func (obj *patternFlowIpv4Protocol) Auto() PatternFlowIpv4ProtocolAutoEnum {
	return PatternFlowIpv4ProtocolAutoEnum(obj.obj.Auto.Enum().String())
}

// Auto returns a string
//  description is TBD
func (obj *patternFlowIpv4Protocol) HasAuto() bool {
	return obj.obj.Auto != nil
}

func (obj *patternFlowIpv4Protocol) SetAuto(value PatternFlowIpv4ProtocolAutoEnum) PatternFlowIpv4Protocol {
	intValue, ok := snappipb.PatternFlowIpv4Protocol_Auto_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4ProtocolAutoEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4Protocol_Auto_Enum(intValue)
	obj.obj.Auto = &enumValue

	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Protocol) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Protocol) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4Protocol object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Protocol) SetMetricGroup(value string) PatternFlowIpv4Protocol {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4ProtocolCounter
//  description is TBD
func (obj *patternFlowIpv4Protocol) Increment() PatternFlowIpv4ProtocolCounter {
	obj.SetChoice(PatternFlowIpv4ProtocolChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4ProtocolCounter().Msg()
	}
	return &patternFlowIpv4ProtocolCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4ProtocolCounter
//  description is TBD
func (obj *patternFlowIpv4Protocol) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4ProtocolCounter value in the PatternFlowIpv4Protocol object
//  description is TBD
func (obj *patternFlowIpv4Protocol) SetIncrement(value PatternFlowIpv4ProtocolCounter) PatternFlowIpv4Protocol {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4ProtocolChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4ProtocolCounter
//  description is TBD
func (obj *patternFlowIpv4Protocol) Decrement() PatternFlowIpv4ProtocolCounter {
	obj.SetChoice(PatternFlowIpv4ProtocolChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4ProtocolCounter().Msg()
	}
	return &patternFlowIpv4ProtocolCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4ProtocolCounter
//  description is TBD
func (obj *patternFlowIpv4Protocol) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4ProtocolCounter value in the PatternFlowIpv4Protocol object
//  description is TBD
func (obj *patternFlowIpv4Protocol) SetDecrement(value PatternFlowIpv4ProtocolCounter) PatternFlowIpv4Protocol {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4ProtocolChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4Protocol) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4Protocol.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4Protocol.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4Protocol) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4ProtocolChoice.AUTO)
		if obj.obj.Auto == nil {
			obj.SetAuto(PatternFlowIpv4ProtocolAuto.AUTO)

		}

	}

}

type patternFlowIpv4HeaderChecksum struct {
	obj *snappipb.PatternFlowIpv4HeaderChecksum
}

func NewPatternFlowIpv4HeaderChecksum() PatternFlowIpv4HeaderChecksum {
	obj := patternFlowIpv4HeaderChecksum{obj: &snappipb.PatternFlowIpv4HeaderChecksum{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4HeaderChecksum) Msg() *snappipb.PatternFlowIpv4HeaderChecksum {
	return obj.obj
}

func (obj *patternFlowIpv4HeaderChecksum) SetMsg(msg *snappipb.PatternFlowIpv4HeaderChecksum) PatternFlowIpv4HeaderChecksum {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4HeaderChecksum) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4HeaderChecksum) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4HeaderChecksum) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderChecksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4HeaderChecksum) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderChecksum) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4HeaderChecksum) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4HeaderChecksum interface {
	Msg() *snappipb.PatternFlowIpv4HeaderChecksum
	SetMsg(*snappipb.PatternFlowIpv4HeaderChecksum) PatternFlowIpv4HeaderChecksum
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4HeaderChecksumChoiceEnum
	SetChoice(value PatternFlowIpv4HeaderChecksumChoiceEnum) PatternFlowIpv4HeaderChecksum
	Generated() PatternFlowIpv4HeaderChecksumGeneratedEnum
	SetGenerated(value PatternFlowIpv4HeaderChecksumGeneratedEnum) PatternFlowIpv4HeaderChecksum
	HasGenerated() bool
	Custom() int32
	SetCustom(value int32) PatternFlowIpv4HeaderChecksum
	HasCustom() bool
}

type PatternFlowIpv4HeaderChecksumChoiceEnum string

var PatternFlowIpv4HeaderChecksumChoice = struct {
	GENERATED PatternFlowIpv4HeaderChecksumChoiceEnum
	CUSTOM    PatternFlowIpv4HeaderChecksumChoiceEnum
}{
	GENERATED: PatternFlowIpv4HeaderChecksumChoiceEnum("generated"),
	CUSTOM:    PatternFlowIpv4HeaderChecksumChoiceEnum("custom"),
}

func (obj *patternFlowIpv4HeaderChecksum) Choice() PatternFlowIpv4HeaderChecksumChoiceEnum {
	return PatternFlowIpv4HeaderChecksumChoiceEnum(obj.obj.Choice.Enum().String())
}

func (obj *patternFlowIpv4HeaderChecksum) SetChoice(value PatternFlowIpv4HeaderChecksumChoiceEnum) PatternFlowIpv4HeaderChecksum {
	intValue, ok := snappipb.PatternFlowIpv4HeaderChecksum_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4HeaderChecksumChoiceEnum", string(value)))
		return obj
	}
	obj.obj.Choice = snappipb.PatternFlowIpv4HeaderChecksum_Choice_Enum(intValue)

	if string(value) != "generated" {
		obj.obj.Generated = nil
	}

	if string(value) != "custom" {
		obj.obj.Custom = nil
	}

	return obj
}

type PatternFlowIpv4HeaderChecksumGeneratedEnum string

var PatternFlowIpv4HeaderChecksumGenerated = struct {
	GOOD PatternFlowIpv4HeaderChecksumGeneratedEnum
	BAD  PatternFlowIpv4HeaderChecksumGeneratedEnum
}{
	GOOD: PatternFlowIpv4HeaderChecksumGeneratedEnum("good"),
	BAD:  PatternFlowIpv4HeaderChecksumGeneratedEnum("bad"),
}

func (obj *patternFlowIpv4HeaderChecksum) Generated() PatternFlowIpv4HeaderChecksumGeneratedEnum {
	return PatternFlowIpv4HeaderChecksumGeneratedEnum(obj.obj.Generated.Enum().String())
}

// Generated returns a string
//  A system generated checksum value
func (obj *patternFlowIpv4HeaderChecksum) HasGenerated() bool {
	return obj.obj.Generated != nil
}

func (obj *patternFlowIpv4HeaderChecksum) SetGenerated(value PatternFlowIpv4HeaderChecksumGeneratedEnum) PatternFlowIpv4HeaderChecksum {
	intValue, ok := snappipb.PatternFlowIpv4HeaderChecksum_Generated_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4HeaderChecksumGeneratedEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4HeaderChecksum_Generated_Enum(intValue)
	obj.obj.Generated = &enumValue

	return obj
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIpv4HeaderChecksum) Custom() int32 {

	return *obj.obj.Custom

}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIpv4HeaderChecksum) HasCustom() bool {
	return obj.obj.Custom != nil
}

// SetCustom sets the int32 value in the PatternFlowIpv4HeaderChecksum object
//  A custom checksum value
func (obj *patternFlowIpv4HeaderChecksum) SetCustom(value int32) PatternFlowIpv4HeaderChecksum {
	obj.obj.Custom = &value
	obj.SetChoice(PatternFlowIpv4HeaderChecksumChoice.CUSTOM)
	return obj
}

func (obj *patternFlowIpv4HeaderChecksum) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Choice required
	if obj.obj.Choice.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("Choice is required field on PatternFlowIpv4HeaderChecksum and got value %s", obj.obj.Choice.String()))
	}

	if obj.obj.Custom != nil {
		if *obj.obj.Custom < 0 || *obj.obj.Custom > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4HeaderChecksum.Custom <= 65535 but Got %d", *obj.obj.Custom))
		}

	}

}

func (obj *patternFlowIpv4HeaderChecksum) setDefault() {
	if obj.obj.Choice.Number() == 0 {
		obj.SetChoice(PatternFlowIpv4HeaderChecksumChoice.GENERATED)
		if obj.obj.Generated == nil {
			obj.SetGenerated(PatternFlowIpv4HeaderChecksumGenerated.GOOD)

		}

	}

}

type patternFlowIpv4Src struct {
	obj *snappipb.PatternFlowIpv4Src
}

func NewPatternFlowIpv4Src() PatternFlowIpv4Src {
	obj := patternFlowIpv4Src{obj: &snappipb.PatternFlowIpv4Src{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4Src) Msg() *snappipb.PatternFlowIpv4Src {
	return obj.obj
}

func (obj *patternFlowIpv4Src) SetMsg(msg *snappipb.PatternFlowIpv4Src) PatternFlowIpv4Src {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4Src) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4Src) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Src) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Src) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Src) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Src) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4Src) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4Src interface {
	Msg() *snappipb.PatternFlowIpv4Src
	SetMsg(*snappipb.PatternFlowIpv4Src) PatternFlowIpv4Src
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4SrcChoiceEnum
	SetChoice(value PatternFlowIpv4SrcChoiceEnum) PatternFlowIpv4Src
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowIpv4Src
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowIpv4Src
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Src
	HasMetricGroup() bool
	Increment() PatternFlowIpv4SrcCounter
	SetIncrement(value PatternFlowIpv4SrcCounter) PatternFlowIpv4Src
	HasIncrement() bool
	Decrement() PatternFlowIpv4SrcCounter
	SetDecrement(value PatternFlowIpv4SrcCounter) PatternFlowIpv4Src
	HasDecrement() bool
}

type PatternFlowIpv4SrcChoiceEnum string

var PatternFlowIpv4SrcChoice = struct {
	VALUE     PatternFlowIpv4SrcChoiceEnum
	VALUES    PatternFlowIpv4SrcChoiceEnum
	INCREMENT PatternFlowIpv4SrcChoiceEnum
	DECREMENT PatternFlowIpv4SrcChoiceEnum
}{
	VALUE:     PatternFlowIpv4SrcChoiceEnum("value"),
	VALUES:    PatternFlowIpv4SrcChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4SrcChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4SrcChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4Src) Choice() PatternFlowIpv4SrcChoiceEnum {
	return PatternFlowIpv4SrcChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4Src) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4Src) SetChoice(value PatternFlowIpv4SrcChoiceEnum) PatternFlowIpv4Src {
	intValue, ok := snappipb.PatternFlowIpv4Src_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4SrcChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4Src_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv4Src) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "0.0.0.0"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv4Src) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowIpv4Src object
//  description is TBD
func (obj *patternFlowIpv4Src) SetValue(value string) PatternFlowIpv4Src {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4SrcChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowIpv4Src) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowIpv4Src object
//  description is TBD
func (obj *patternFlowIpv4Src) SetValues(value []string) PatternFlowIpv4Src {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4SrcChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Src) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Src) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4Src object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Src) SetMetricGroup(value string) PatternFlowIpv4Src {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4SrcCounter
//  description is TBD
func (obj *patternFlowIpv4Src) Increment() PatternFlowIpv4SrcCounter {
	obj.SetChoice(PatternFlowIpv4SrcChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4SrcCounter().Msg()
	}
	return &patternFlowIpv4SrcCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4SrcCounter
//  description is TBD
func (obj *patternFlowIpv4Src) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4SrcCounter value in the PatternFlowIpv4Src object
//  description is TBD
func (obj *patternFlowIpv4Src) SetIncrement(value PatternFlowIpv4SrcCounter) PatternFlowIpv4Src {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4SrcChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4SrcCounter
//  description is TBD
func (obj *patternFlowIpv4Src) Decrement() PatternFlowIpv4SrcCounter {
	obj.SetChoice(PatternFlowIpv4SrcChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4SrcCounter().Msg()
	}
	return &patternFlowIpv4SrcCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4SrcCounter
//  description is TBD
func (obj *patternFlowIpv4Src) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4SrcCounter value in the PatternFlowIpv4Src object
//  description is TBD
func (obj *patternFlowIpv4Src) SetDecrement(value PatternFlowIpv4SrcCounter) PatternFlowIpv4Src {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4SrcChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4Src) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateIpv4(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowIpv4Src"))
		}
	}

	if obj.obj.Values != nil {
		err := validateIpv4Slice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowIpv4Src"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4Src) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4SrcChoice.VALUE)
		obj.SetValue("0.0.0.0")
	}

}

type patternFlowIpv4Dst struct {
	obj *snappipb.PatternFlowIpv4Dst
}

func NewPatternFlowIpv4Dst() PatternFlowIpv4Dst {
	obj := patternFlowIpv4Dst{obj: &snappipb.PatternFlowIpv4Dst{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4Dst) Msg() *snappipb.PatternFlowIpv4Dst {
	return obj.obj
}

func (obj *patternFlowIpv4Dst) SetMsg(msg *snappipb.PatternFlowIpv4Dst) PatternFlowIpv4Dst {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4Dst) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4Dst) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Dst) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Dst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4Dst) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Dst) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4Dst) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4Dst interface {
	Msg() *snappipb.PatternFlowIpv4Dst
	SetMsg(*snappipb.PatternFlowIpv4Dst) PatternFlowIpv4Dst
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4DstChoiceEnum
	SetChoice(value PatternFlowIpv4DstChoiceEnum) PatternFlowIpv4Dst
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowIpv4Dst
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowIpv4Dst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Dst
	HasMetricGroup() bool
	Increment() PatternFlowIpv4DstCounter
	SetIncrement(value PatternFlowIpv4DstCounter) PatternFlowIpv4Dst
	HasIncrement() bool
	Decrement() PatternFlowIpv4DstCounter
	SetDecrement(value PatternFlowIpv4DstCounter) PatternFlowIpv4Dst
	HasDecrement() bool
}

type PatternFlowIpv4DstChoiceEnum string

var PatternFlowIpv4DstChoice = struct {
	VALUE     PatternFlowIpv4DstChoiceEnum
	VALUES    PatternFlowIpv4DstChoiceEnum
	INCREMENT PatternFlowIpv4DstChoiceEnum
	DECREMENT PatternFlowIpv4DstChoiceEnum
}{
	VALUE:     PatternFlowIpv4DstChoiceEnum("value"),
	VALUES:    PatternFlowIpv4DstChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4DstChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4DstChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4Dst) Choice() PatternFlowIpv4DstChoiceEnum {
	return PatternFlowIpv4DstChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4Dst) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4Dst) SetChoice(value PatternFlowIpv4DstChoiceEnum) PatternFlowIpv4Dst {
	intValue, ok := snappipb.PatternFlowIpv4Dst_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4DstChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4Dst_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv4Dst) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "0.0.0.0"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv4Dst) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowIpv4Dst object
//  description is TBD
func (obj *patternFlowIpv4Dst) SetValue(value string) PatternFlowIpv4Dst {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4DstChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowIpv4Dst) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowIpv4Dst object
//  description is TBD
func (obj *patternFlowIpv4Dst) SetValues(value []string) PatternFlowIpv4Dst {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4DstChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Dst) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Dst) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4Dst object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Dst) SetMetricGroup(value string) PatternFlowIpv4Dst {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4DstCounter
//  description is TBD
func (obj *patternFlowIpv4Dst) Increment() PatternFlowIpv4DstCounter {
	obj.SetChoice(PatternFlowIpv4DstChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4DstCounter().Msg()
	}
	return &patternFlowIpv4DstCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4DstCounter
//  description is TBD
func (obj *patternFlowIpv4Dst) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4DstCounter value in the PatternFlowIpv4Dst object
//  description is TBD
func (obj *patternFlowIpv4Dst) SetIncrement(value PatternFlowIpv4DstCounter) PatternFlowIpv4Dst {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4DstChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4DstCounter
//  description is TBD
func (obj *patternFlowIpv4Dst) Decrement() PatternFlowIpv4DstCounter {
	obj.SetChoice(PatternFlowIpv4DstChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4DstCounter().Msg()
	}
	return &patternFlowIpv4DstCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4DstCounter
//  description is TBD
func (obj *patternFlowIpv4Dst) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4DstCounter value in the PatternFlowIpv4Dst object
//  description is TBD
func (obj *patternFlowIpv4Dst) SetDecrement(value PatternFlowIpv4DstCounter) PatternFlowIpv4Dst {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4DstChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4Dst) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateIpv4(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowIpv4Dst"))
		}
	}

	if obj.obj.Values != nil {
		err := validateIpv4Slice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowIpv4Dst"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4Dst) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4DstChoice.VALUE)
		obj.SetValue("0.0.0.0")
	}

}

type patternFlowIpv6Version struct {
	obj *snappipb.PatternFlowIpv6Version
}

func NewPatternFlowIpv6Version() PatternFlowIpv6Version {
	obj := patternFlowIpv6Version{obj: &snappipb.PatternFlowIpv6Version{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6Version) Msg() *snappipb.PatternFlowIpv6Version {
	return obj.obj
}

func (obj *patternFlowIpv6Version) SetMsg(msg *snappipb.PatternFlowIpv6Version) PatternFlowIpv6Version {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6Version) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6Version) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6Version) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Version) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6Version) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Version) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6Version) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6Version interface {
	Msg() *snappipb.PatternFlowIpv6Version
	SetMsg(*snappipb.PatternFlowIpv6Version) PatternFlowIpv6Version
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv6VersionChoiceEnum
	SetChoice(value PatternFlowIpv6VersionChoiceEnum) PatternFlowIpv6Version
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv6Version
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6Version
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6Version
	HasMetricGroup() bool
	Increment() PatternFlowIpv6VersionCounter
	SetIncrement(value PatternFlowIpv6VersionCounter) PatternFlowIpv6Version
	HasIncrement() bool
	Decrement() PatternFlowIpv6VersionCounter
	SetDecrement(value PatternFlowIpv6VersionCounter) PatternFlowIpv6Version
	HasDecrement() bool
}

type PatternFlowIpv6VersionChoiceEnum string

var PatternFlowIpv6VersionChoice = struct {
	VALUE     PatternFlowIpv6VersionChoiceEnum
	VALUES    PatternFlowIpv6VersionChoiceEnum
	INCREMENT PatternFlowIpv6VersionChoiceEnum
	DECREMENT PatternFlowIpv6VersionChoiceEnum
}{
	VALUE:     PatternFlowIpv6VersionChoiceEnum("value"),
	VALUES:    PatternFlowIpv6VersionChoiceEnum("values"),
	INCREMENT: PatternFlowIpv6VersionChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv6VersionChoiceEnum("decrement"),
}

func (obj *patternFlowIpv6Version) Choice() PatternFlowIpv6VersionChoiceEnum {
	return PatternFlowIpv6VersionChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv6Version) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv6Version) SetChoice(value PatternFlowIpv6VersionChoiceEnum) PatternFlowIpv6Version {
	intValue, ok := snappipb.PatternFlowIpv6Version_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv6VersionChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv6Version_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6Version) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 6
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6Version) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv6Version object
//  description is TBD
func (obj *patternFlowIpv6Version) SetValue(value int32) PatternFlowIpv6Version {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv6VersionChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6Version) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv6Version object
//  description is TBD
func (obj *patternFlowIpv6Version) SetValues(value []int32) PatternFlowIpv6Version {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv6VersionChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Version) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Version) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv6Version object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Version) SetMetricGroup(value string) PatternFlowIpv6Version {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv6VersionCounter
//  description is TBD
func (obj *patternFlowIpv6Version) Increment() PatternFlowIpv6VersionCounter {
	obj.SetChoice(PatternFlowIpv6VersionChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv6VersionCounter().Msg()
	}
	return &patternFlowIpv6VersionCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv6VersionCounter
//  description is TBD
func (obj *patternFlowIpv6Version) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv6VersionCounter value in the PatternFlowIpv6Version object
//  description is TBD
func (obj *patternFlowIpv6Version) SetIncrement(value PatternFlowIpv6VersionCounter) PatternFlowIpv6Version {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6VersionChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv6VersionCounter
//  description is TBD
func (obj *patternFlowIpv6Version) Decrement() PatternFlowIpv6VersionCounter {
	obj.SetChoice(PatternFlowIpv6VersionChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv6VersionCounter().Msg()
	}
	return &patternFlowIpv6VersionCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv6VersionCounter
//  description is TBD
func (obj *patternFlowIpv6Version) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv6VersionCounter value in the PatternFlowIpv6Version object
//  description is TBD
func (obj *patternFlowIpv6Version) SetDecrement(value PatternFlowIpv6VersionCounter) PatternFlowIpv6Version {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6VersionChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv6Version) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6Version.Value <= 15 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6Version.Values <= 15 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv6Version) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv6VersionChoice.VALUE)
		obj.SetValue(6)
	}

}

type patternFlowIpv6TrafficClass struct {
	obj *snappipb.PatternFlowIpv6TrafficClass
}

func NewPatternFlowIpv6TrafficClass() PatternFlowIpv6TrafficClass {
	obj := patternFlowIpv6TrafficClass{obj: &snappipb.PatternFlowIpv6TrafficClass{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6TrafficClass) Msg() *snappipb.PatternFlowIpv6TrafficClass {
	return obj.obj
}

func (obj *patternFlowIpv6TrafficClass) SetMsg(msg *snappipb.PatternFlowIpv6TrafficClass) PatternFlowIpv6TrafficClass {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6TrafficClass) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6TrafficClass) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6TrafficClass) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6TrafficClass) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6TrafficClass) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6TrafficClass) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6TrafficClass) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6TrafficClass interface {
	Msg() *snappipb.PatternFlowIpv6TrafficClass
	SetMsg(*snappipb.PatternFlowIpv6TrafficClass) PatternFlowIpv6TrafficClass
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv6TrafficClassChoiceEnum
	SetChoice(value PatternFlowIpv6TrafficClassChoiceEnum) PatternFlowIpv6TrafficClass
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv6TrafficClass
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6TrafficClass
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6TrafficClass
	HasMetricGroup() bool
	Increment() PatternFlowIpv6TrafficClassCounter
	SetIncrement(value PatternFlowIpv6TrafficClassCounter) PatternFlowIpv6TrafficClass
	HasIncrement() bool
	Decrement() PatternFlowIpv6TrafficClassCounter
	SetDecrement(value PatternFlowIpv6TrafficClassCounter) PatternFlowIpv6TrafficClass
	HasDecrement() bool
}

type PatternFlowIpv6TrafficClassChoiceEnum string

var PatternFlowIpv6TrafficClassChoice = struct {
	VALUE     PatternFlowIpv6TrafficClassChoiceEnum
	VALUES    PatternFlowIpv6TrafficClassChoiceEnum
	INCREMENT PatternFlowIpv6TrafficClassChoiceEnum
	DECREMENT PatternFlowIpv6TrafficClassChoiceEnum
}{
	VALUE:     PatternFlowIpv6TrafficClassChoiceEnum("value"),
	VALUES:    PatternFlowIpv6TrafficClassChoiceEnum("values"),
	INCREMENT: PatternFlowIpv6TrafficClassChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv6TrafficClassChoiceEnum("decrement"),
}

func (obj *patternFlowIpv6TrafficClass) Choice() PatternFlowIpv6TrafficClassChoiceEnum {
	return PatternFlowIpv6TrafficClassChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv6TrafficClass) SetChoice(value PatternFlowIpv6TrafficClassChoiceEnum) PatternFlowIpv6TrafficClass {
	intValue, ok := snappipb.PatternFlowIpv6TrafficClass_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv6TrafficClassChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv6TrafficClass_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv6TrafficClass object
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) SetValue(value int32) PatternFlowIpv6TrafficClass {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv6TrafficClassChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv6TrafficClass object
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) SetValues(value []int32) PatternFlowIpv6TrafficClass {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv6TrafficClassChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6TrafficClass) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6TrafficClass) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv6TrafficClass object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6TrafficClass) SetMetricGroup(value string) PatternFlowIpv6TrafficClass {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv6TrafficClassCounter
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) Increment() PatternFlowIpv6TrafficClassCounter {
	obj.SetChoice(PatternFlowIpv6TrafficClassChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv6TrafficClassCounter().Msg()
	}
	return &patternFlowIpv6TrafficClassCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv6TrafficClassCounter
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv6TrafficClassCounter value in the PatternFlowIpv6TrafficClass object
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) SetIncrement(value PatternFlowIpv6TrafficClassCounter) PatternFlowIpv6TrafficClass {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6TrafficClassChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv6TrafficClassCounter
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) Decrement() PatternFlowIpv6TrafficClassCounter {
	obj.SetChoice(PatternFlowIpv6TrafficClassChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv6TrafficClassCounter().Msg()
	}
	return &patternFlowIpv6TrafficClassCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv6TrafficClassCounter
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv6TrafficClassCounter value in the PatternFlowIpv6TrafficClass object
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) SetDecrement(value PatternFlowIpv6TrafficClassCounter) PatternFlowIpv6TrafficClass {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6TrafficClassChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv6TrafficClass) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6TrafficClass.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6TrafficClass.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv6TrafficClass) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv6TrafficClassChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv6FlowLabel struct {
	obj *snappipb.PatternFlowIpv6FlowLabel
}

func NewPatternFlowIpv6FlowLabel() PatternFlowIpv6FlowLabel {
	obj := patternFlowIpv6FlowLabel{obj: &snappipb.PatternFlowIpv6FlowLabel{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6FlowLabel) Msg() *snappipb.PatternFlowIpv6FlowLabel {
	return obj.obj
}

func (obj *patternFlowIpv6FlowLabel) SetMsg(msg *snappipb.PatternFlowIpv6FlowLabel) PatternFlowIpv6FlowLabel {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6FlowLabel) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6FlowLabel) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6FlowLabel) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6FlowLabel) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6FlowLabel) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6FlowLabel) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6FlowLabel) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6FlowLabel interface {
	Msg() *snappipb.PatternFlowIpv6FlowLabel
	SetMsg(*snappipb.PatternFlowIpv6FlowLabel) PatternFlowIpv6FlowLabel
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv6FlowLabelChoiceEnum
	SetChoice(value PatternFlowIpv6FlowLabelChoiceEnum) PatternFlowIpv6FlowLabel
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv6FlowLabel
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6FlowLabel
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6FlowLabel
	HasMetricGroup() bool
	Increment() PatternFlowIpv6FlowLabelCounter
	SetIncrement(value PatternFlowIpv6FlowLabelCounter) PatternFlowIpv6FlowLabel
	HasIncrement() bool
	Decrement() PatternFlowIpv6FlowLabelCounter
	SetDecrement(value PatternFlowIpv6FlowLabelCounter) PatternFlowIpv6FlowLabel
	HasDecrement() bool
}

type PatternFlowIpv6FlowLabelChoiceEnum string

var PatternFlowIpv6FlowLabelChoice = struct {
	VALUE     PatternFlowIpv6FlowLabelChoiceEnum
	VALUES    PatternFlowIpv6FlowLabelChoiceEnum
	INCREMENT PatternFlowIpv6FlowLabelChoiceEnum
	DECREMENT PatternFlowIpv6FlowLabelChoiceEnum
}{
	VALUE:     PatternFlowIpv6FlowLabelChoiceEnum("value"),
	VALUES:    PatternFlowIpv6FlowLabelChoiceEnum("values"),
	INCREMENT: PatternFlowIpv6FlowLabelChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv6FlowLabelChoiceEnum("decrement"),
}

func (obj *patternFlowIpv6FlowLabel) Choice() PatternFlowIpv6FlowLabelChoiceEnum {
	return PatternFlowIpv6FlowLabelChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv6FlowLabel) SetChoice(value PatternFlowIpv6FlowLabelChoiceEnum) PatternFlowIpv6FlowLabel {
	intValue, ok := snappipb.PatternFlowIpv6FlowLabel_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv6FlowLabelChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv6FlowLabel_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv6FlowLabel object
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) SetValue(value int32) PatternFlowIpv6FlowLabel {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv6FlowLabelChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv6FlowLabel object
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) SetValues(value []int32) PatternFlowIpv6FlowLabel {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv6FlowLabelChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6FlowLabel) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6FlowLabel) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv6FlowLabel object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6FlowLabel) SetMetricGroup(value string) PatternFlowIpv6FlowLabel {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv6FlowLabelCounter
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) Increment() PatternFlowIpv6FlowLabelCounter {
	obj.SetChoice(PatternFlowIpv6FlowLabelChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv6FlowLabelCounter().Msg()
	}
	return &patternFlowIpv6FlowLabelCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv6FlowLabelCounter
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv6FlowLabelCounter value in the PatternFlowIpv6FlowLabel object
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) SetIncrement(value PatternFlowIpv6FlowLabelCounter) PatternFlowIpv6FlowLabel {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6FlowLabelChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv6FlowLabelCounter
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) Decrement() PatternFlowIpv6FlowLabelCounter {
	obj.SetChoice(PatternFlowIpv6FlowLabelChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv6FlowLabelCounter().Msg()
	}
	return &patternFlowIpv6FlowLabelCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv6FlowLabelCounter
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv6FlowLabelCounter value in the PatternFlowIpv6FlowLabel object
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) SetDecrement(value PatternFlowIpv6FlowLabelCounter) PatternFlowIpv6FlowLabel {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6FlowLabelChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv6FlowLabel) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1048575 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6FlowLabel.Value <= 1048575 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1048575 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6FlowLabel.Values <= 1048575 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv6FlowLabel) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv6FlowLabelChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv6PayloadLength struct {
	obj *snappipb.PatternFlowIpv6PayloadLength
}

func NewPatternFlowIpv6PayloadLength() PatternFlowIpv6PayloadLength {
	obj := patternFlowIpv6PayloadLength{obj: &snappipb.PatternFlowIpv6PayloadLength{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6PayloadLength) Msg() *snappipb.PatternFlowIpv6PayloadLength {
	return obj.obj
}

func (obj *patternFlowIpv6PayloadLength) SetMsg(msg *snappipb.PatternFlowIpv6PayloadLength) PatternFlowIpv6PayloadLength {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6PayloadLength) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6PayloadLength) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6PayloadLength) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6PayloadLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6PayloadLength) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6PayloadLength) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6PayloadLength) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6PayloadLength interface {
	Msg() *snappipb.PatternFlowIpv6PayloadLength
	SetMsg(*snappipb.PatternFlowIpv6PayloadLength) PatternFlowIpv6PayloadLength
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv6PayloadLengthChoiceEnum
	SetChoice(value PatternFlowIpv6PayloadLengthChoiceEnum) PatternFlowIpv6PayloadLength
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv6PayloadLength
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6PayloadLength
	Auto() PatternFlowIpv6PayloadLengthAutoEnum
	SetAuto(value PatternFlowIpv6PayloadLengthAutoEnum) PatternFlowIpv6PayloadLength
	HasAuto() bool
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6PayloadLength
	HasMetricGroup() bool
	Increment() PatternFlowIpv6PayloadLengthCounter
	SetIncrement(value PatternFlowIpv6PayloadLengthCounter) PatternFlowIpv6PayloadLength
	HasIncrement() bool
	Decrement() PatternFlowIpv6PayloadLengthCounter
	SetDecrement(value PatternFlowIpv6PayloadLengthCounter) PatternFlowIpv6PayloadLength
	HasDecrement() bool
}

type PatternFlowIpv6PayloadLengthChoiceEnum string

var PatternFlowIpv6PayloadLengthChoice = struct {
	VALUE     PatternFlowIpv6PayloadLengthChoiceEnum
	VALUES    PatternFlowIpv6PayloadLengthChoiceEnum
	AUTO      PatternFlowIpv6PayloadLengthChoiceEnum
	INCREMENT PatternFlowIpv6PayloadLengthChoiceEnum
	DECREMENT PatternFlowIpv6PayloadLengthChoiceEnum
}{
	VALUE:     PatternFlowIpv6PayloadLengthChoiceEnum("value"),
	VALUES:    PatternFlowIpv6PayloadLengthChoiceEnum("values"),
	AUTO:      PatternFlowIpv6PayloadLengthChoiceEnum("auto"),
	INCREMENT: PatternFlowIpv6PayloadLengthChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv6PayloadLengthChoiceEnum("decrement"),
}

func (obj *patternFlowIpv6PayloadLength) Choice() PatternFlowIpv6PayloadLengthChoiceEnum {
	return PatternFlowIpv6PayloadLengthChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv6PayloadLength) SetChoice(value PatternFlowIpv6PayloadLengthChoiceEnum) PatternFlowIpv6PayloadLength {
	intValue, ok := snappipb.PatternFlowIpv6PayloadLength_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv6PayloadLengthChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv6PayloadLength_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "auto" {
		obj.obj.Auto = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv6PayloadLength object
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) SetValue(value int32) PatternFlowIpv6PayloadLength {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv6PayloadLengthChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv6PayloadLength object
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) SetValues(value []int32) PatternFlowIpv6PayloadLength {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv6PayloadLengthChoice.VALUES)
	return obj
}

type PatternFlowIpv6PayloadLengthAutoEnum string

var PatternFlowIpv6PayloadLengthAuto = struct {
	AUTO PatternFlowIpv6PayloadLengthAutoEnum
}{
	AUTO: PatternFlowIpv6PayloadLengthAutoEnum("auto"),
}

func (obj *patternFlowIpv6PayloadLength) Auto() PatternFlowIpv6PayloadLengthAutoEnum {
	return PatternFlowIpv6PayloadLengthAutoEnum(obj.obj.Auto.Enum().String())
}

// Auto returns a string
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) HasAuto() bool {
	return obj.obj.Auto != nil
}

func (obj *patternFlowIpv6PayloadLength) SetAuto(value PatternFlowIpv6PayloadLengthAutoEnum) PatternFlowIpv6PayloadLength {
	intValue, ok := snappipb.PatternFlowIpv6PayloadLength_Auto_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv6PayloadLengthAutoEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv6PayloadLength_Auto_Enum(intValue)
	obj.obj.Auto = &enumValue

	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6PayloadLength) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6PayloadLength) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv6PayloadLength object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6PayloadLength) SetMetricGroup(value string) PatternFlowIpv6PayloadLength {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv6PayloadLengthCounter
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) Increment() PatternFlowIpv6PayloadLengthCounter {
	obj.SetChoice(PatternFlowIpv6PayloadLengthChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv6PayloadLengthCounter().Msg()
	}
	return &patternFlowIpv6PayloadLengthCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv6PayloadLengthCounter
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv6PayloadLengthCounter value in the PatternFlowIpv6PayloadLength object
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) SetIncrement(value PatternFlowIpv6PayloadLengthCounter) PatternFlowIpv6PayloadLength {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6PayloadLengthChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv6PayloadLengthCounter
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) Decrement() PatternFlowIpv6PayloadLengthCounter {
	obj.SetChoice(PatternFlowIpv6PayloadLengthChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv6PayloadLengthCounter().Msg()
	}
	return &patternFlowIpv6PayloadLengthCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv6PayloadLengthCounter
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv6PayloadLengthCounter value in the PatternFlowIpv6PayloadLength object
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) SetDecrement(value PatternFlowIpv6PayloadLengthCounter) PatternFlowIpv6PayloadLength {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6PayloadLengthChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv6PayloadLength) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6PayloadLength.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6PayloadLength.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv6PayloadLength) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv6PayloadLengthChoice.AUTO)
		if obj.obj.Auto == nil {
			obj.SetAuto(PatternFlowIpv6PayloadLengthAuto.AUTO)

		}

	}

}

type patternFlowIpv6NextHeader struct {
	obj *snappipb.PatternFlowIpv6NextHeader
}

func NewPatternFlowIpv6NextHeader() PatternFlowIpv6NextHeader {
	obj := patternFlowIpv6NextHeader{obj: &snappipb.PatternFlowIpv6NextHeader{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6NextHeader) Msg() *snappipb.PatternFlowIpv6NextHeader {
	return obj.obj
}

func (obj *patternFlowIpv6NextHeader) SetMsg(msg *snappipb.PatternFlowIpv6NextHeader) PatternFlowIpv6NextHeader {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6NextHeader) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6NextHeader) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6NextHeader) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6NextHeader) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6NextHeader) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6NextHeader) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6NextHeader) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6NextHeader interface {
	Msg() *snappipb.PatternFlowIpv6NextHeader
	SetMsg(*snappipb.PatternFlowIpv6NextHeader) PatternFlowIpv6NextHeader
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv6NextHeaderChoiceEnum
	SetChoice(value PatternFlowIpv6NextHeaderChoiceEnum) PatternFlowIpv6NextHeader
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv6NextHeader
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6NextHeader
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6NextHeader
	HasMetricGroup() bool
	Increment() PatternFlowIpv6NextHeaderCounter
	SetIncrement(value PatternFlowIpv6NextHeaderCounter) PatternFlowIpv6NextHeader
	HasIncrement() bool
	Decrement() PatternFlowIpv6NextHeaderCounter
	SetDecrement(value PatternFlowIpv6NextHeaderCounter) PatternFlowIpv6NextHeader
	HasDecrement() bool
}

type PatternFlowIpv6NextHeaderChoiceEnum string

var PatternFlowIpv6NextHeaderChoice = struct {
	VALUE     PatternFlowIpv6NextHeaderChoiceEnum
	VALUES    PatternFlowIpv6NextHeaderChoiceEnum
	INCREMENT PatternFlowIpv6NextHeaderChoiceEnum
	DECREMENT PatternFlowIpv6NextHeaderChoiceEnum
}{
	VALUE:     PatternFlowIpv6NextHeaderChoiceEnum("value"),
	VALUES:    PatternFlowIpv6NextHeaderChoiceEnum("values"),
	INCREMENT: PatternFlowIpv6NextHeaderChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv6NextHeaderChoiceEnum("decrement"),
}

func (obj *patternFlowIpv6NextHeader) Choice() PatternFlowIpv6NextHeaderChoiceEnum {
	return PatternFlowIpv6NextHeaderChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv6NextHeader) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv6NextHeader) SetChoice(value PatternFlowIpv6NextHeaderChoiceEnum) PatternFlowIpv6NextHeader {
	intValue, ok := snappipb.PatternFlowIpv6NextHeader_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv6NextHeaderChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv6NextHeader_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeader) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 59
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeader) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv6NextHeader object
//  description is TBD
func (obj *patternFlowIpv6NextHeader) SetValue(value int32) PatternFlowIpv6NextHeader {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv6NextHeaderChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6NextHeader) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv6NextHeader object
//  description is TBD
func (obj *patternFlowIpv6NextHeader) SetValues(value []int32) PatternFlowIpv6NextHeader {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv6NextHeaderChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6NextHeader) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6NextHeader) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv6NextHeader object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6NextHeader) SetMetricGroup(value string) PatternFlowIpv6NextHeader {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv6NextHeaderCounter
//  description is TBD
func (obj *patternFlowIpv6NextHeader) Increment() PatternFlowIpv6NextHeaderCounter {
	obj.SetChoice(PatternFlowIpv6NextHeaderChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv6NextHeaderCounter().Msg()
	}
	return &patternFlowIpv6NextHeaderCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv6NextHeaderCounter
//  description is TBD
func (obj *patternFlowIpv6NextHeader) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv6NextHeaderCounter value in the PatternFlowIpv6NextHeader object
//  description is TBD
func (obj *patternFlowIpv6NextHeader) SetIncrement(value PatternFlowIpv6NextHeaderCounter) PatternFlowIpv6NextHeader {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6NextHeaderChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv6NextHeaderCounter
//  description is TBD
func (obj *patternFlowIpv6NextHeader) Decrement() PatternFlowIpv6NextHeaderCounter {
	obj.SetChoice(PatternFlowIpv6NextHeaderChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv6NextHeaderCounter().Msg()
	}
	return &patternFlowIpv6NextHeaderCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv6NextHeaderCounter
//  description is TBD
func (obj *patternFlowIpv6NextHeader) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv6NextHeaderCounter value in the PatternFlowIpv6NextHeader object
//  description is TBD
func (obj *patternFlowIpv6NextHeader) SetDecrement(value PatternFlowIpv6NextHeaderCounter) PatternFlowIpv6NextHeader {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6NextHeaderChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv6NextHeader) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6NextHeader.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6NextHeader.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv6NextHeader) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv6NextHeaderChoice.VALUE)
		obj.SetValue(59)
	}

}

type patternFlowIpv6HopLimit struct {
	obj *snappipb.PatternFlowIpv6HopLimit
}

func NewPatternFlowIpv6HopLimit() PatternFlowIpv6HopLimit {
	obj := patternFlowIpv6HopLimit{obj: &snappipb.PatternFlowIpv6HopLimit{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6HopLimit) Msg() *snappipb.PatternFlowIpv6HopLimit {
	return obj.obj
}

func (obj *patternFlowIpv6HopLimit) SetMsg(msg *snappipb.PatternFlowIpv6HopLimit) PatternFlowIpv6HopLimit {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6HopLimit) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6HopLimit) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6HopLimit) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6HopLimit) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6HopLimit) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6HopLimit) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6HopLimit) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6HopLimit interface {
	Msg() *snappipb.PatternFlowIpv6HopLimit
	SetMsg(*snappipb.PatternFlowIpv6HopLimit) PatternFlowIpv6HopLimit
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv6HopLimitChoiceEnum
	SetChoice(value PatternFlowIpv6HopLimitChoiceEnum) PatternFlowIpv6HopLimit
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv6HopLimit
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6HopLimit
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6HopLimit
	HasMetricGroup() bool
	Increment() PatternFlowIpv6HopLimitCounter
	SetIncrement(value PatternFlowIpv6HopLimitCounter) PatternFlowIpv6HopLimit
	HasIncrement() bool
	Decrement() PatternFlowIpv6HopLimitCounter
	SetDecrement(value PatternFlowIpv6HopLimitCounter) PatternFlowIpv6HopLimit
	HasDecrement() bool
}

type PatternFlowIpv6HopLimitChoiceEnum string

var PatternFlowIpv6HopLimitChoice = struct {
	VALUE     PatternFlowIpv6HopLimitChoiceEnum
	VALUES    PatternFlowIpv6HopLimitChoiceEnum
	INCREMENT PatternFlowIpv6HopLimitChoiceEnum
	DECREMENT PatternFlowIpv6HopLimitChoiceEnum
}{
	VALUE:     PatternFlowIpv6HopLimitChoiceEnum("value"),
	VALUES:    PatternFlowIpv6HopLimitChoiceEnum("values"),
	INCREMENT: PatternFlowIpv6HopLimitChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv6HopLimitChoiceEnum("decrement"),
}

func (obj *patternFlowIpv6HopLimit) Choice() PatternFlowIpv6HopLimitChoiceEnum {
	return PatternFlowIpv6HopLimitChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv6HopLimit) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv6HopLimit) SetChoice(value PatternFlowIpv6HopLimitChoiceEnum) PatternFlowIpv6HopLimit {
	intValue, ok := snappipb.PatternFlowIpv6HopLimit_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv6HopLimitChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv6HopLimit_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimit) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 64
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimit) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv6HopLimit object
//  description is TBD
func (obj *patternFlowIpv6HopLimit) SetValue(value int32) PatternFlowIpv6HopLimit {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv6HopLimitChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6HopLimit) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv6HopLimit object
//  description is TBD
func (obj *patternFlowIpv6HopLimit) SetValues(value []int32) PatternFlowIpv6HopLimit {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv6HopLimitChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6HopLimit) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6HopLimit) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv6HopLimit object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6HopLimit) SetMetricGroup(value string) PatternFlowIpv6HopLimit {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv6HopLimitCounter
//  description is TBD
func (obj *patternFlowIpv6HopLimit) Increment() PatternFlowIpv6HopLimitCounter {
	obj.SetChoice(PatternFlowIpv6HopLimitChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv6HopLimitCounter().Msg()
	}
	return &patternFlowIpv6HopLimitCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv6HopLimitCounter
//  description is TBD
func (obj *patternFlowIpv6HopLimit) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv6HopLimitCounter value in the PatternFlowIpv6HopLimit object
//  description is TBD
func (obj *patternFlowIpv6HopLimit) SetIncrement(value PatternFlowIpv6HopLimitCounter) PatternFlowIpv6HopLimit {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6HopLimitChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv6HopLimitCounter
//  description is TBD
func (obj *patternFlowIpv6HopLimit) Decrement() PatternFlowIpv6HopLimitCounter {
	obj.SetChoice(PatternFlowIpv6HopLimitChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv6HopLimitCounter().Msg()
	}
	return &patternFlowIpv6HopLimitCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv6HopLimitCounter
//  description is TBD
func (obj *patternFlowIpv6HopLimit) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv6HopLimitCounter value in the PatternFlowIpv6HopLimit object
//  description is TBD
func (obj *patternFlowIpv6HopLimit) SetDecrement(value PatternFlowIpv6HopLimitCounter) PatternFlowIpv6HopLimit {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6HopLimitChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv6HopLimit) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6HopLimit.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6HopLimit.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv6HopLimit) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv6HopLimitChoice.VALUE)
		obj.SetValue(64)
	}

}

type patternFlowIpv6Src struct {
	obj *snappipb.PatternFlowIpv6Src
}

func NewPatternFlowIpv6Src() PatternFlowIpv6Src {
	obj := patternFlowIpv6Src{obj: &snappipb.PatternFlowIpv6Src{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6Src) Msg() *snappipb.PatternFlowIpv6Src {
	return obj.obj
}

func (obj *patternFlowIpv6Src) SetMsg(msg *snappipb.PatternFlowIpv6Src) PatternFlowIpv6Src {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6Src) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6Src) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6Src) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Src) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6Src) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Src) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6Src) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6Src interface {
	Msg() *snappipb.PatternFlowIpv6Src
	SetMsg(*snappipb.PatternFlowIpv6Src) PatternFlowIpv6Src
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv6SrcChoiceEnum
	SetChoice(value PatternFlowIpv6SrcChoiceEnum) PatternFlowIpv6Src
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowIpv6Src
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowIpv6Src
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6Src
	HasMetricGroup() bool
	Increment() PatternFlowIpv6SrcCounter
	SetIncrement(value PatternFlowIpv6SrcCounter) PatternFlowIpv6Src
	HasIncrement() bool
	Decrement() PatternFlowIpv6SrcCounter
	SetDecrement(value PatternFlowIpv6SrcCounter) PatternFlowIpv6Src
	HasDecrement() bool
}

type PatternFlowIpv6SrcChoiceEnum string

var PatternFlowIpv6SrcChoice = struct {
	VALUE     PatternFlowIpv6SrcChoiceEnum
	VALUES    PatternFlowIpv6SrcChoiceEnum
	INCREMENT PatternFlowIpv6SrcChoiceEnum
	DECREMENT PatternFlowIpv6SrcChoiceEnum
}{
	VALUE:     PatternFlowIpv6SrcChoiceEnum("value"),
	VALUES:    PatternFlowIpv6SrcChoiceEnum("values"),
	INCREMENT: PatternFlowIpv6SrcChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv6SrcChoiceEnum("decrement"),
}

func (obj *patternFlowIpv6Src) Choice() PatternFlowIpv6SrcChoiceEnum {
	return PatternFlowIpv6SrcChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv6Src) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv6Src) SetChoice(value PatternFlowIpv6SrcChoiceEnum) PatternFlowIpv6Src {
	intValue, ok := snappipb.PatternFlowIpv6Src_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv6SrcChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv6Src_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv6Src) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "::0"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv6Src) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowIpv6Src object
//  description is TBD
func (obj *patternFlowIpv6Src) SetValue(value string) PatternFlowIpv6Src {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv6SrcChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowIpv6Src) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowIpv6Src object
//  description is TBD
func (obj *patternFlowIpv6Src) SetValues(value []string) PatternFlowIpv6Src {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv6SrcChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Src) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Src) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv6Src object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Src) SetMetricGroup(value string) PatternFlowIpv6Src {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv6SrcCounter
//  description is TBD
func (obj *patternFlowIpv6Src) Increment() PatternFlowIpv6SrcCounter {
	obj.SetChoice(PatternFlowIpv6SrcChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv6SrcCounter().Msg()
	}
	return &patternFlowIpv6SrcCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv6SrcCounter
//  description is TBD
func (obj *patternFlowIpv6Src) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv6SrcCounter value in the PatternFlowIpv6Src object
//  description is TBD
func (obj *patternFlowIpv6Src) SetIncrement(value PatternFlowIpv6SrcCounter) PatternFlowIpv6Src {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6SrcChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv6SrcCounter
//  description is TBD
func (obj *patternFlowIpv6Src) Decrement() PatternFlowIpv6SrcCounter {
	obj.SetChoice(PatternFlowIpv6SrcChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv6SrcCounter().Msg()
	}
	return &patternFlowIpv6SrcCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv6SrcCounter
//  description is TBD
func (obj *patternFlowIpv6Src) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv6SrcCounter value in the PatternFlowIpv6Src object
//  description is TBD
func (obj *patternFlowIpv6Src) SetDecrement(value PatternFlowIpv6SrcCounter) PatternFlowIpv6Src {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6SrcChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv6Src) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateIpv6(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowIpv6Src"))
		}
	}

	if obj.obj.Values != nil {
		err := validateIpv6Slice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowIpv6Src"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv6Src) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv6SrcChoice.VALUE)
		obj.SetValue("::0")
	}

}

type patternFlowIpv6Dst struct {
	obj *snappipb.PatternFlowIpv6Dst
}

func NewPatternFlowIpv6Dst() PatternFlowIpv6Dst {
	obj := patternFlowIpv6Dst{obj: &snappipb.PatternFlowIpv6Dst{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6Dst) Msg() *snappipb.PatternFlowIpv6Dst {
	return obj.obj
}

func (obj *patternFlowIpv6Dst) SetMsg(msg *snappipb.PatternFlowIpv6Dst) PatternFlowIpv6Dst {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6Dst) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6Dst) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6Dst) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Dst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6Dst) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Dst) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6Dst) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6Dst interface {
	Msg() *snappipb.PatternFlowIpv6Dst
	SetMsg(*snappipb.PatternFlowIpv6Dst) PatternFlowIpv6Dst
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv6DstChoiceEnum
	SetChoice(value PatternFlowIpv6DstChoiceEnum) PatternFlowIpv6Dst
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowIpv6Dst
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowIpv6Dst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6Dst
	HasMetricGroup() bool
	Increment() PatternFlowIpv6DstCounter
	SetIncrement(value PatternFlowIpv6DstCounter) PatternFlowIpv6Dst
	HasIncrement() bool
	Decrement() PatternFlowIpv6DstCounter
	SetDecrement(value PatternFlowIpv6DstCounter) PatternFlowIpv6Dst
	HasDecrement() bool
}

type PatternFlowIpv6DstChoiceEnum string

var PatternFlowIpv6DstChoice = struct {
	VALUE     PatternFlowIpv6DstChoiceEnum
	VALUES    PatternFlowIpv6DstChoiceEnum
	INCREMENT PatternFlowIpv6DstChoiceEnum
	DECREMENT PatternFlowIpv6DstChoiceEnum
}{
	VALUE:     PatternFlowIpv6DstChoiceEnum("value"),
	VALUES:    PatternFlowIpv6DstChoiceEnum("values"),
	INCREMENT: PatternFlowIpv6DstChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv6DstChoiceEnum("decrement"),
}

func (obj *patternFlowIpv6Dst) Choice() PatternFlowIpv6DstChoiceEnum {
	return PatternFlowIpv6DstChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv6Dst) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv6Dst) SetChoice(value PatternFlowIpv6DstChoiceEnum) PatternFlowIpv6Dst {
	intValue, ok := snappipb.PatternFlowIpv6Dst_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv6DstChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv6Dst_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv6Dst) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "::0"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv6Dst) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowIpv6Dst object
//  description is TBD
func (obj *patternFlowIpv6Dst) SetValue(value string) PatternFlowIpv6Dst {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv6DstChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowIpv6Dst) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowIpv6Dst object
//  description is TBD
func (obj *patternFlowIpv6Dst) SetValues(value []string) PatternFlowIpv6Dst {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv6DstChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Dst) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Dst) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv6Dst object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Dst) SetMetricGroup(value string) PatternFlowIpv6Dst {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv6DstCounter
//  description is TBD
func (obj *patternFlowIpv6Dst) Increment() PatternFlowIpv6DstCounter {
	obj.SetChoice(PatternFlowIpv6DstChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv6DstCounter().Msg()
	}
	return &patternFlowIpv6DstCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv6DstCounter
//  description is TBD
func (obj *patternFlowIpv6Dst) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv6DstCounter value in the PatternFlowIpv6Dst object
//  description is TBD
func (obj *patternFlowIpv6Dst) SetIncrement(value PatternFlowIpv6DstCounter) PatternFlowIpv6Dst {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6DstChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv6DstCounter
//  description is TBD
func (obj *patternFlowIpv6Dst) Decrement() PatternFlowIpv6DstCounter {
	obj.SetChoice(PatternFlowIpv6DstChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv6DstCounter().Msg()
	}
	return &patternFlowIpv6DstCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv6DstCounter
//  description is TBD
func (obj *patternFlowIpv6Dst) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv6DstCounter value in the PatternFlowIpv6Dst object
//  description is TBD
func (obj *patternFlowIpv6Dst) SetDecrement(value PatternFlowIpv6DstCounter) PatternFlowIpv6Dst {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv6DstChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv6Dst) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateIpv6(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowIpv6Dst"))
		}
	}

	if obj.obj.Values != nil {
		err := validateIpv6Slice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowIpv6Dst"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv6Dst) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv6DstChoice.VALUE)
		obj.SetValue("::0")
	}

}

type patternFlowPfcPauseDst struct {
	obj *snappipb.PatternFlowPfcPauseDst
}

func NewPatternFlowPfcPauseDst() PatternFlowPfcPauseDst {
	obj := patternFlowPfcPauseDst{obj: &snappipb.PatternFlowPfcPauseDst{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPauseDst) Msg() *snappipb.PatternFlowPfcPauseDst {
	return obj.obj
}

func (obj *patternFlowPfcPauseDst) SetMsg(msg *snappipb.PatternFlowPfcPauseDst) PatternFlowPfcPauseDst {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPauseDst) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPauseDst) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseDst) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseDst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseDst) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseDst) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPauseDst) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPauseDst interface {
	Msg() *snappipb.PatternFlowPfcPauseDst
	SetMsg(*snappipb.PatternFlowPfcPauseDst) PatternFlowPfcPauseDst
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPauseDstChoiceEnum
	SetChoice(value PatternFlowPfcPauseDstChoiceEnum) PatternFlowPfcPauseDst
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowPfcPauseDst
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowPfcPauseDst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPauseDst
	HasMetricGroup() bool
	Increment() PatternFlowPfcPauseDstCounter
	SetIncrement(value PatternFlowPfcPauseDstCounter) PatternFlowPfcPauseDst
	HasIncrement() bool
	Decrement() PatternFlowPfcPauseDstCounter
	SetDecrement(value PatternFlowPfcPauseDstCounter) PatternFlowPfcPauseDst
	HasDecrement() bool
}

type PatternFlowPfcPauseDstChoiceEnum string

var PatternFlowPfcPauseDstChoice = struct {
	VALUE     PatternFlowPfcPauseDstChoiceEnum
	VALUES    PatternFlowPfcPauseDstChoiceEnum
	INCREMENT PatternFlowPfcPauseDstChoiceEnum
	DECREMENT PatternFlowPfcPauseDstChoiceEnum
}{
	VALUE:     PatternFlowPfcPauseDstChoiceEnum("value"),
	VALUES:    PatternFlowPfcPauseDstChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPauseDstChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPauseDstChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPauseDst) Choice() PatternFlowPfcPauseDstChoiceEnum {
	return PatternFlowPfcPauseDstChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPauseDst) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPauseDst) SetChoice(value PatternFlowPfcPauseDstChoiceEnum) PatternFlowPfcPauseDst {
	intValue, ok := snappipb.PatternFlowPfcPauseDst_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPauseDstChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPauseDst_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowPfcPauseDst) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "01:80:c2:00:00:01"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowPfcPauseDst) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowPfcPauseDst object
//  description is TBD
func (obj *patternFlowPfcPauseDst) SetValue(value string) PatternFlowPfcPauseDst {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPauseDstChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowPfcPauseDst) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowPfcPauseDst object
//  description is TBD
func (obj *patternFlowPfcPauseDst) SetValues(value []string) PatternFlowPfcPauseDst {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPauseDstChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseDst) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseDst) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPauseDst object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseDst) SetMetricGroup(value string) PatternFlowPfcPauseDst {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPauseDstCounter
//  description is TBD
func (obj *patternFlowPfcPauseDst) Increment() PatternFlowPfcPauseDstCounter {
	obj.SetChoice(PatternFlowPfcPauseDstChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPauseDstCounter().Msg()
	}
	return &patternFlowPfcPauseDstCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPauseDstCounter
//  description is TBD
func (obj *patternFlowPfcPauseDst) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPauseDstCounter value in the PatternFlowPfcPauseDst object
//  description is TBD
func (obj *patternFlowPfcPauseDst) SetIncrement(value PatternFlowPfcPauseDstCounter) PatternFlowPfcPauseDst {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPauseDstChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPauseDstCounter
//  description is TBD
func (obj *patternFlowPfcPauseDst) Decrement() PatternFlowPfcPauseDstCounter {
	obj.SetChoice(PatternFlowPfcPauseDstChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPauseDstCounter().Msg()
	}
	return &patternFlowPfcPauseDstCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPauseDstCounter
//  description is TBD
func (obj *patternFlowPfcPauseDst) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPauseDstCounter value in the PatternFlowPfcPauseDst object
//  description is TBD
func (obj *patternFlowPfcPauseDst) SetDecrement(value PatternFlowPfcPauseDstCounter) PatternFlowPfcPauseDst {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPauseDstChoice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPauseDst) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateMac(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowPfcPauseDst"))
		}
	}

	if obj.obj.Values != nil {
		err := validateMacSlice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowPfcPauseDst"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPauseDst) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPauseDstChoice.VALUE)
		obj.SetValue("01:80:c2:00:00:01")
	}

}

type patternFlowPfcPauseSrc struct {
	obj *snappipb.PatternFlowPfcPauseSrc
}

func NewPatternFlowPfcPauseSrc() PatternFlowPfcPauseSrc {
	obj := patternFlowPfcPauseSrc{obj: &snappipb.PatternFlowPfcPauseSrc{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPauseSrc) Msg() *snappipb.PatternFlowPfcPauseSrc {
	return obj.obj
}

func (obj *patternFlowPfcPauseSrc) SetMsg(msg *snappipb.PatternFlowPfcPauseSrc) PatternFlowPfcPauseSrc {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPauseSrc) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPauseSrc) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseSrc) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseSrc) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseSrc) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseSrc) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPauseSrc) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPauseSrc interface {
	Msg() *snappipb.PatternFlowPfcPauseSrc
	SetMsg(*snappipb.PatternFlowPfcPauseSrc) PatternFlowPfcPauseSrc
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPauseSrcChoiceEnum
	SetChoice(value PatternFlowPfcPauseSrcChoiceEnum) PatternFlowPfcPauseSrc
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowPfcPauseSrc
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowPfcPauseSrc
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPauseSrc
	HasMetricGroup() bool
	Increment() PatternFlowPfcPauseSrcCounter
	SetIncrement(value PatternFlowPfcPauseSrcCounter) PatternFlowPfcPauseSrc
	HasIncrement() bool
	Decrement() PatternFlowPfcPauseSrcCounter
	SetDecrement(value PatternFlowPfcPauseSrcCounter) PatternFlowPfcPauseSrc
	HasDecrement() bool
}

type PatternFlowPfcPauseSrcChoiceEnum string

var PatternFlowPfcPauseSrcChoice = struct {
	VALUE     PatternFlowPfcPauseSrcChoiceEnum
	VALUES    PatternFlowPfcPauseSrcChoiceEnum
	INCREMENT PatternFlowPfcPauseSrcChoiceEnum
	DECREMENT PatternFlowPfcPauseSrcChoiceEnum
}{
	VALUE:     PatternFlowPfcPauseSrcChoiceEnum("value"),
	VALUES:    PatternFlowPfcPauseSrcChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPauseSrcChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPauseSrcChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPauseSrc) Choice() PatternFlowPfcPauseSrcChoiceEnum {
	return PatternFlowPfcPauseSrcChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPauseSrc) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPauseSrc) SetChoice(value PatternFlowPfcPauseSrcChoiceEnum) PatternFlowPfcPauseSrc {
	intValue, ok := snappipb.PatternFlowPfcPauseSrc_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPauseSrcChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPauseSrc_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowPfcPauseSrc) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "00:00:00:00:00:00"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowPfcPauseSrc) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowPfcPauseSrc object
//  description is TBD
func (obj *patternFlowPfcPauseSrc) SetValue(value string) PatternFlowPfcPauseSrc {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPauseSrcChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowPfcPauseSrc) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowPfcPauseSrc object
//  description is TBD
func (obj *patternFlowPfcPauseSrc) SetValues(value []string) PatternFlowPfcPauseSrc {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPauseSrcChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseSrc) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseSrc) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPauseSrc object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseSrc) SetMetricGroup(value string) PatternFlowPfcPauseSrc {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPauseSrcCounter
//  description is TBD
func (obj *patternFlowPfcPauseSrc) Increment() PatternFlowPfcPauseSrcCounter {
	obj.SetChoice(PatternFlowPfcPauseSrcChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPauseSrcCounter().Msg()
	}
	return &patternFlowPfcPauseSrcCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPauseSrcCounter
//  description is TBD
func (obj *patternFlowPfcPauseSrc) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPauseSrcCounter value in the PatternFlowPfcPauseSrc object
//  description is TBD
func (obj *patternFlowPfcPauseSrc) SetIncrement(value PatternFlowPfcPauseSrcCounter) PatternFlowPfcPauseSrc {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPauseSrcChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPauseSrcCounter
//  description is TBD
func (obj *patternFlowPfcPauseSrc) Decrement() PatternFlowPfcPauseSrcCounter {
	obj.SetChoice(PatternFlowPfcPauseSrcChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPauseSrcCounter().Msg()
	}
	return &patternFlowPfcPauseSrcCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPauseSrcCounter
//  description is TBD
func (obj *patternFlowPfcPauseSrc) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPauseSrcCounter value in the PatternFlowPfcPauseSrc object
//  description is TBD
func (obj *patternFlowPfcPauseSrc) SetDecrement(value PatternFlowPfcPauseSrcCounter) PatternFlowPfcPauseSrc {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPauseSrcChoice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPauseSrc) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateMac(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowPfcPauseSrc"))
		}
	}

	if obj.obj.Values != nil {
		err := validateMacSlice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowPfcPauseSrc"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPauseSrc) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPauseSrcChoice.VALUE)
		obj.SetValue("00:00:00:00:00:00")
	}

}

type patternFlowPfcPauseEtherType struct {
	obj *snappipb.PatternFlowPfcPauseEtherType
}

func NewPatternFlowPfcPauseEtherType() PatternFlowPfcPauseEtherType {
	obj := patternFlowPfcPauseEtherType{obj: &snappipb.PatternFlowPfcPauseEtherType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPauseEtherType) Msg() *snappipb.PatternFlowPfcPauseEtherType {
	return obj.obj
}

func (obj *patternFlowPfcPauseEtherType) SetMsg(msg *snappipb.PatternFlowPfcPauseEtherType) PatternFlowPfcPauseEtherType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPauseEtherType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPauseEtherType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseEtherType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseEtherType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseEtherType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseEtherType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPauseEtherType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPauseEtherType interface {
	Msg() *snappipb.PatternFlowPfcPauseEtherType
	SetMsg(*snappipb.PatternFlowPfcPauseEtherType) PatternFlowPfcPauseEtherType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPauseEtherTypeChoiceEnum
	SetChoice(value PatternFlowPfcPauseEtherTypeChoiceEnum) PatternFlowPfcPauseEtherType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPfcPauseEtherType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPauseEtherType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPauseEtherType
	HasMetricGroup() bool
	Increment() PatternFlowPfcPauseEtherTypeCounter
	SetIncrement(value PatternFlowPfcPauseEtherTypeCounter) PatternFlowPfcPauseEtherType
	HasIncrement() bool
	Decrement() PatternFlowPfcPauseEtherTypeCounter
	SetDecrement(value PatternFlowPfcPauseEtherTypeCounter) PatternFlowPfcPauseEtherType
	HasDecrement() bool
}

type PatternFlowPfcPauseEtherTypeChoiceEnum string

var PatternFlowPfcPauseEtherTypeChoice = struct {
	VALUE     PatternFlowPfcPauseEtherTypeChoiceEnum
	VALUES    PatternFlowPfcPauseEtherTypeChoiceEnum
	INCREMENT PatternFlowPfcPauseEtherTypeChoiceEnum
	DECREMENT PatternFlowPfcPauseEtherTypeChoiceEnum
}{
	VALUE:     PatternFlowPfcPauseEtherTypeChoiceEnum("value"),
	VALUES:    PatternFlowPfcPauseEtherTypeChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPauseEtherTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPauseEtherTypeChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPauseEtherType) Choice() PatternFlowPfcPauseEtherTypeChoiceEnum {
	return PatternFlowPfcPauseEtherTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPauseEtherType) SetChoice(value PatternFlowPfcPauseEtherTypeChoiceEnum) PatternFlowPfcPauseEtherType {
	intValue, ok := snappipb.PatternFlowPfcPauseEtherType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPauseEtherTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPauseEtherType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 34824
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPfcPauseEtherType object
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) SetValue(value int32) PatternFlowPfcPauseEtherType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPauseEtherTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPfcPauseEtherType object
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) SetValues(value []int32) PatternFlowPfcPauseEtherType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPauseEtherTypeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseEtherType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseEtherType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPauseEtherType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseEtherType) SetMetricGroup(value string) PatternFlowPfcPauseEtherType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) Increment() PatternFlowPfcPauseEtherTypeCounter {
	obj.SetChoice(PatternFlowPfcPauseEtherTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPauseEtherTypeCounter().Msg()
	}
	return &patternFlowPfcPauseEtherTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPauseEtherTypeCounter value in the PatternFlowPfcPauseEtherType object
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) SetIncrement(value PatternFlowPfcPauseEtherTypeCounter) PatternFlowPfcPauseEtherType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPauseEtherTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) Decrement() PatternFlowPfcPauseEtherTypeCounter {
	obj.SetChoice(PatternFlowPfcPauseEtherTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPauseEtherTypeCounter().Msg()
	}
	return &patternFlowPfcPauseEtherTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPauseEtherTypeCounter value in the PatternFlowPfcPauseEtherType object
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) SetDecrement(value PatternFlowPfcPauseEtherTypeCounter) PatternFlowPfcPauseEtherType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPauseEtherTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPauseEtherType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseEtherType.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseEtherType.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPauseEtherType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPauseEtherTypeChoice.VALUE)
		obj.SetValue(34824)
	}

}

type patternFlowPfcPauseControlOpCode struct {
	obj *snappipb.PatternFlowPfcPauseControlOpCode
}

func NewPatternFlowPfcPauseControlOpCode() PatternFlowPfcPauseControlOpCode {
	obj := patternFlowPfcPauseControlOpCode{obj: &snappipb.PatternFlowPfcPauseControlOpCode{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPauseControlOpCode) Msg() *snappipb.PatternFlowPfcPauseControlOpCode {
	return obj.obj
}

func (obj *patternFlowPfcPauseControlOpCode) SetMsg(msg *snappipb.PatternFlowPfcPauseControlOpCode) PatternFlowPfcPauseControlOpCode {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPauseControlOpCode) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPauseControlOpCode) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseControlOpCode) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseControlOpCode) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseControlOpCode) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseControlOpCode) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPauseControlOpCode) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPauseControlOpCode interface {
	Msg() *snappipb.PatternFlowPfcPauseControlOpCode
	SetMsg(*snappipb.PatternFlowPfcPauseControlOpCode) PatternFlowPfcPauseControlOpCode
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPauseControlOpCodeChoiceEnum
	SetChoice(value PatternFlowPfcPauseControlOpCodeChoiceEnum) PatternFlowPfcPauseControlOpCode
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPfcPauseControlOpCode
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPauseControlOpCode
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPauseControlOpCode
	HasMetricGroup() bool
	Increment() PatternFlowPfcPauseControlOpCodeCounter
	SetIncrement(value PatternFlowPfcPauseControlOpCodeCounter) PatternFlowPfcPauseControlOpCode
	HasIncrement() bool
	Decrement() PatternFlowPfcPauseControlOpCodeCounter
	SetDecrement(value PatternFlowPfcPauseControlOpCodeCounter) PatternFlowPfcPauseControlOpCode
	HasDecrement() bool
}

type PatternFlowPfcPauseControlOpCodeChoiceEnum string

var PatternFlowPfcPauseControlOpCodeChoice = struct {
	VALUE     PatternFlowPfcPauseControlOpCodeChoiceEnum
	VALUES    PatternFlowPfcPauseControlOpCodeChoiceEnum
	INCREMENT PatternFlowPfcPauseControlOpCodeChoiceEnum
	DECREMENT PatternFlowPfcPauseControlOpCodeChoiceEnum
}{
	VALUE:     PatternFlowPfcPauseControlOpCodeChoiceEnum("value"),
	VALUES:    PatternFlowPfcPauseControlOpCodeChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPauseControlOpCodeChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPauseControlOpCodeChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPauseControlOpCode) Choice() PatternFlowPfcPauseControlOpCodeChoiceEnum {
	return PatternFlowPfcPauseControlOpCodeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPauseControlOpCode) SetChoice(value PatternFlowPfcPauseControlOpCodeChoiceEnum) PatternFlowPfcPauseControlOpCode {
	intValue, ok := snappipb.PatternFlowPfcPauseControlOpCode_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPauseControlOpCodeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPauseControlOpCode_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 257
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPfcPauseControlOpCode object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) SetValue(value int32) PatternFlowPfcPauseControlOpCode {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPauseControlOpCodeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPfcPauseControlOpCode object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) SetValues(value []int32) PatternFlowPfcPauseControlOpCode {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPauseControlOpCodeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseControlOpCode) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseControlOpCode) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPauseControlOpCode object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseControlOpCode) SetMetricGroup(value string) PatternFlowPfcPauseControlOpCode {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) Increment() PatternFlowPfcPauseControlOpCodeCounter {
	obj.SetChoice(PatternFlowPfcPauseControlOpCodeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPauseControlOpCodeCounter().Msg()
	}
	return &patternFlowPfcPauseControlOpCodeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPauseControlOpCodeCounter value in the PatternFlowPfcPauseControlOpCode object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) SetIncrement(value PatternFlowPfcPauseControlOpCodeCounter) PatternFlowPfcPauseControlOpCode {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPauseControlOpCodeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) Decrement() PatternFlowPfcPauseControlOpCodeCounter {
	obj.SetChoice(PatternFlowPfcPauseControlOpCodeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPauseControlOpCodeCounter().Msg()
	}
	return &patternFlowPfcPauseControlOpCodeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPauseControlOpCodeCounter value in the PatternFlowPfcPauseControlOpCode object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) SetDecrement(value PatternFlowPfcPauseControlOpCodeCounter) PatternFlowPfcPauseControlOpCode {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPauseControlOpCodeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPauseControlOpCode) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseControlOpCode.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseControlOpCode.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPauseControlOpCode) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPauseControlOpCodeChoice.VALUE)
		obj.SetValue(257)
	}

}

type patternFlowPfcPauseClassEnableVector struct {
	obj *snappipb.PatternFlowPfcPauseClassEnableVector
}

func NewPatternFlowPfcPauseClassEnableVector() PatternFlowPfcPauseClassEnableVector {
	obj := patternFlowPfcPauseClassEnableVector{obj: &snappipb.PatternFlowPfcPauseClassEnableVector{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPauseClassEnableVector) Msg() *snappipb.PatternFlowPfcPauseClassEnableVector {
	return obj.obj
}

func (obj *patternFlowPfcPauseClassEnableVector) SetMsg(msg *snappipb.PatternFlowPfcPauseClassEnableVector) PatternFlowPfcPauseClassEnableVector {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPauseClassEnableVector) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPauseClassEnableVector) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseClassEnableVector) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseClassEnableVector) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseClassEnableVector) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseClassEnableVector) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPauseClassEnableVector) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPauseClassEnableVector interface {
	Msg() *snappipb.PatternFlowPfcPauseClassEnableVector
	SetMsg(*snappipb.PatternFlowPfcPauseClassEnableVector) PatternFlowPfcPauseClassEnableVector
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPauseClassEnableVectorChoiceEnum
	SetChoice(value PatternFlowPfcPauseClassEnableVectorChoiceEnum) PatternFlowPfcPauseClassEnableVector
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPfcPauseClassEnableVector
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPauseClassEnableVector
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPauseClassEnableVector
	HasMetricGroup() bool
	Increment() PatternFlowPfcPauseClassEnableVectorCounter
	SetIncrement(value PatternFlowPfcPauseClassEnableVectorCounter) PatternFlowPfcPauseClassEnableVector
	HasIncrement() bool
	Decrement() PatternFlowPfcPauseClassEnableVectorCounter
	SetDecrement(value PatternFlowPfcPauseClassEnableVectorCounter) PatternFlowPfcPauseClassEnableVector
	HasDecrement() bool
}

type PatternFlowPfcPauseClassEnableVectorChoiceEnum string

var PatternFlowPfcPauseClassEnableVectorChoice = struct {
	VALUE     PatternFlowPfcPauseClassEnableVectorChoiceEnum
	VALUES    PatternFlowPfcPauseClassEnableVectorChoiceEnum
	INCREMENT PatternFlowPfcPauseClassEnableVectorChoiceEnum
	DECREMENT PatternFlowPfcPauseClassEnableVectorChoiceEnum
}{
	VALUE:     PatternFlowPfcPauseClassEnableVectorChoiceEnum("value"),
	VALUES:    PatternFlowPfcPauseClassEnableVectorChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPauseClassEnableVectorChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPauseClassEnableVectorChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPauseClassEnableVector) Choice() PatternFlowPfcPauseClassEnableVectorChoiceEnum {
	return PatternFlowPfcPauseClassEnableVectorChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPauseClassEnableVector) SetChoice(value PatternFlowPfcPauseClassEnableVectorChoiceEnum) PatternFlowPfcPauseClassEnableVector {
	intValue, ok := snappipb.PatternFlowPfcPauseClassEnableVector_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPauseClassEnableVectorChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPauseClassEnableVector_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPfcPauseClassEnableVector object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) SetValue(value int32) PatternFlowPfcPauseClassEnableVector {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPauseClassEnableVectorChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPfcPauseClassEnableVector object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) SetValues(value []int32) PatternFlowPfcPauseClassEnableVector {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPauseClassEnableVectorChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseClassEnableVector) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseClassEnableVector) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPauseClassEnableVector object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseClassEnableVector) SetMetricGroup(value string) PatternFlowPfcPauseClassEnableVector {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPauseClassEnableVectorCounter
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) Increment() PatternFlowPfcPauseClassEnableVectorCounter {
	obj.SetChoice(PatternFlowPfcPauseClassEnableVectorChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPauseClassEnableVectorCounter().Msg()
	}
	return &patternFlowPfcPauseClassEnableVectorCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPauseClassEnableVectorCounter
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPauseClassEnableVectorCounter value in the PatternFlowPfcPauseClassEnableVector object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) SetIncrement(value PatternFlowPfcPauseClassEnableVectorCounter) PatternFlowPfcPauseClassEnableVector {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPauseClassEnableVectorChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPauseClassEnableVectorCounter
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) Decrement() PatternFlowPfcPauseClassEnableVectorCounter {
	obj.SetChoice(PatternFlowPfcPauseClassEnableVectorChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPauseClassEnableVectorCounter().Msg()
	}
	return &patternFlowPfcPauseClassEnableVectorCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPauseClassEnableVectorCounter
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPauseClassEnableVectorCounter value in the PatternFlowPfcPauseClassEnableVector object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) SetDecrement(value PatternFlowPfcPauseClassEnableVectorCounter) PatternFlowPfcPauseClassEnableVector {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPauseClassEnableVectorChoice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPauseClassEnableVector) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseClassEnableVector.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseClassEnableVector.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPauseClassEnableVector) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPauseClassEnableVectorChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowPfcPausePauseClass0 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass0
}

func NewPatternFlowPfcPausePauseClass0() PatternFlowPfcPausePauseClass0 {
	obj := patternFlowPfcPausePauseClass0{obj: &snappipb.PatternFlowPfcPausePauseClass0{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass0) Msg() *snappipb.PatternFlowPfcPausePauseClass0 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass0) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass0) PatternFlowPfcPausePauseClass0 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass0) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass0) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass0) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass0) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass0) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass0) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass0) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass0 interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass0
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass0) PatternFlowPfcPausePauseClass0
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPausePauseClass0ChoiceEnum
	SetChoice(value PatternFlowPfcPausePauseClass0ChoiceEnum) PatternFlowPfcPausePauseClass0
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass0
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass0
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass0
	HasMetricGroup() bool
	Increment() PatternFlowPfcPausePauseClass0Counter
	SetIncrement(value PatternFlowPfcPausePauseClass0Counter) PatternFlowPfcPausePauseClass0
	HasIncrement() bool
	Decrement() PatternFlowPfcPausePauseClass0Counter
	SetDecrement(value PatternFlowPfcPausePauseClass0Counter) PatternFlowPfcPausePauseClass0
	HasDecrement() bool
}

type PatternFlowPfcPausePauseClass0ChoiceEnum string

var PatternFlowPfcPausePauseClass0Choice = struct {
	VALUE     PatternFlowPfcPausePauseClass0ChoiceEnum
	VALUES    PatternFlowPfcPausePauseClass0ChoiceEnum
	INCREMENT PatternFlowPfcPausePauseClass0ChoiceEnum
	DECREMENT PatternFlowPfcPausePauseClass0ChoiceEnum
}{
	VALUE:     PatternFlowPfcPausePauseClass0ChoiceEnum("value"),
	VALUES:    PatternFlowPfcPausePauseClass0ChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPausePauseClass0ChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPausePauseClass0ChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPausePauseClass0) Choice() PatternFlowPfcPausePauseClass0ChoiceEnum {
	return PatternFlowPfcPausePauseClass0ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPausePauseClass0) SetChoice(value PatternFlowPfcPausePauseClass0ChoiceEnum) PatternFlowPfcPausePauseClass0 {
	intValue, ok := snappipb.PatternFlowPfcPausePauseClass0_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPausePauseClass0ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPausePauseClass0_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPfcPausePauseClass0 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) SetValue(value int32) PatternFlowPfcPausePauseClass0 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPausePauseClass0Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPfcPausePauseClass0 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) SetValues(value []int32) PatternFlowPfcPausePauseClass0 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPausePauseClass0Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass0) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass0) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPausePauseClass0 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass0) SetMetricGroup(value string) PatternFlowPfcPausePauseClass0 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass0Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) Increment() PatternFlowPfcPausePauseClass0Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass0Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPausePauseClass0Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass0Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPausePauseClass0Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPausePauseClass0Counter value in the PatternFlowPfcPausePauseClass0 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) SetIncrement(value PatternFlowPfcPausePauseClass0Counter) PatternFlowPfcPausePauseClass0 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass0Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPausePauseClass0Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) Decrement() PatternFlowPfcPausePauseClass0Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass0Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPausePauseClass0Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass0Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPausePauseClass0Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPausePauseClass0Counter value in the PatternFlowPfcPausePauseClass0 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) SetDecrement(value PatternFlowPfcPausePauseClass0Counter) PatternFlowPfcPausePauseClass0 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass0Choice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPausePauseClass0) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass0.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass0.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPausePauseClass0) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPausePauseClass0Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowPfcPausePauseClass1 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass1
}

func NewPatternFlowPfcPausePauseClass1() PatternFlowPfcPausePauseClass1 {
	obj := patternFlowPfcPausePauseClass1{obj: &snappipb.PatternFlowPfcPausePauseClass1{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass1) Msg() *snappipb.PatternFlowPfcPausePauseClass1 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass1) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass1) PatternFlowPfcPausePauseClass1 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass1) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass1) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass1) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass1) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass1) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass1) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass1 interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass1
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass1) PatternFlowPfcPausePauseClass1
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPausePauseClass1ChoiceEnum
	SetChoice(value PatternFlowPfcPausePauseClass1ChoiceEnum) PatternFlowPfcPausePauseClass1
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass1
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass1
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass1
	HasMetricGroup() bool
	Increment() PatternFlowPfcPausePauseClass1Counter
	SetIncrement(value PatternFlowPfcPausePauseClass1Counter) PatternFlowPfcPausePauseClass1
	HasIncrement() bool
	Decrement() PatternFlowPfcPausePauseClass1Counter
	SetDecrement(value PatternFlowPfcPausePauseClass1Counter) PatternFlowPfcPausePauseClass1
	HasDecrement() bool
}

type PatternFlowPfcPausePauseClass1ChoiceEnum string

var PatternFlowPfcPausePauseClass1Choice = struct {
	VALUE     PatternFlowPfcPausePauseClass1ChoiceEnum
	VALUES    PatternFlowPfcPausePauseClass1ChoiceEnum
	INCREMENT PatternFlowPfcPausePauseClass1ChoiceEnum
	DECREMENT PatternFlowPfcPausePauseClass1ChoiceEnum
}{
	VALUE:     PatternFlowPfcPausePauseClass1ChoiceEnum("value"),
	VALUES:    PatternFlowPfcPausePauseClass1ChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPausePauseClass1ChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPausePauseClass1ChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPausePauseClass1) Choice() PatternFlowPfcPausePauseClass1ChoiceEnum {
	return PatternFlowPfcPausePauseClass1ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPausePauseClass1) SetChoice(value PatternFlowPfcPausePauseClass1ChoiceEnum) PatternFlowPfcPausePauseClass1 {
	intValue, ok := snappipb.PatternFlowPfcPausePauseClass1_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPausePauseClass1ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPausePauseClass1_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPfcPausePauseClass1 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) SetValue(value int32) PatternFlowPfcPausePauseClass1 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPausePauseClass1Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPfcPausePauseClass1 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) SetValues(value []int32) PatternFlowPfcPausePauseClass1 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPausePauseClass1Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass1) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass1) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPausePauseClass1 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass1) SetMetricGroup(value string) PatternFlowPfcPausePauseClass1 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass1Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) Increment() PatternFlowPfcPausePauseClass1Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass1Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPausePauseClass1Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass1Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPausePauseClass1Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPausePauseClass1Counter value in the PatternFlowPfcPausePauseClass1 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) SetIncrement(value PatternFlowPfcPausePauseClass1Counter) PatternFlowPfcPausePauseClass1 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass1Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPausePauseClass1Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) Decrement() PatternFlowPfcPausePauseClass1Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass1Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPausePauseClass1Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass1Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPausePauseClass1Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPausePauseClass1Counter value in the PatternFlowPfcPausePauseClass1 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) SetDecrement(value PatternFlowPfcPausePauseClass1Counter) PatternFlowPfcPausePauseClass1 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass1Choice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPausePauseClass1) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass1.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass1.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPausePauseClass1) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPausePauseClass1Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowPfcPausePauseClass2 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass2
}

func NewPatternFlowPfcPausePauseClass2() PatternFlowPfcPausePauseClass2 {
	obj := patternFlowPfcPausePauseClass2{obj: &snappipb.PatternFlowPfcPausePauseClass2{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass2) Msg() *snappipb.PatternFlowPfcPausePauseClass2 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass2) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass2) PatternFlowPfcPausePauseClass2 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass2) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass2) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass2) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass2) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass2) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass2) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass2) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass2 interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass2
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass2) PatternFlowPfcPausePauseClass2
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPausePauseClass2ChoiceEnum
	SetChoice(value PatternFlowPfcPausePauseClass2ChoiceEnum) PatternFlowPfcPausePauseClass2
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass2
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass2
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass2
	HasMetricGroup() bool
	Increment() PatternFlowPfcPausePauseClass2Counter
	SetIncrement(value PatternFlowPfcPausePauseClass2Counter) PatternFlowPfcPausePauseClass2
	HasIncrement() bool
	Decrement() PatternFlowPfcPausePauseClass2Counter
	SetDecrement(value PatternFlowPfcPausePauseClass2Counter) PatternFlowPfcPausePauseClass2
	HasDecrement() bool
}

type PatternFlowPfcPausePauseClass2ChoiceEnum string

var PatternFlowPfcPausePauseClass2Choice = struct {
	VALUE     PatternFlowPfcPausePauseClass2ChoiceEnum
	VALUES    PatternFlowPfcPausePauseClass2ChoiceEnum
	INCREMENT PatternFlowPfcPausePauseClass2ChoiceEnum
	DECREMENT PatternFlowPfcPausePauseClass2ChoiceEnum
}{
	VALUE:     PatternFlowPfcPausePauseClass2ChoiceEnum("value"),
	VALUES:    PatternFlowPfcPausePauseClass2ChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPausePauseClass2ChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPausePauseClass2ChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPausePauseClass2) Choice() PatternFlowPfcPausePauseClass2ChoiceEnum {
	return PatternFlowPfcPausePauseClass2ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPausePauseClass2) SetChoice(value PatternFlowPfcPausePauseClass2ChoiceEnum) PatternFlowPfcPausePauseClass2 {
	intValue, ok := snappipb.PatternFlowPfcPausePauseClass2_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPausePauseClass2ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPausePauseClass2_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPfcPausePauseClass2 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) SetValue(value int32) PatternFlowPfcPausePauseClass2 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPausePauseClass2Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPfcPausePauseClass2 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) SetValues(value []int32) PatternFlowPfcPausePauseClass2 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPausePauseClass2Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass2) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass2) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPausePauseClass2 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass2) SetMetricGroup(value string) PatternFlowPfcPausePauseClass2 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass2Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) Increment() PatternFlowPfcPausePauseClass2Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass2Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPausePauseClass2Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass2Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPausePauseClass2Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPausePauseClass2Counter value in the PatternFlowPfcPausePauseClass2 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) SetIncrement(value PatternFlowPfcPausePauseClass2Counter) PatternFlowPfcPausePauseClass2 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass2Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPausePauseClass2Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) Decrement() PatternFlowPfcPausePauseClass2Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass2Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPausePauseClass2Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass2Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPausePauseClass2Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPausePauseClass2Counter value in the PatternFlowPfcPausePauseClass2 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) SetDecrement(value PatternFlowPfcPausePauseClass2Counter) PatternFlowPfcPausePauseClass2 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass2Choice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPausePauseClass2) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass2.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass2.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPausePauseClass2) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPausePauseClass2Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowPfcPausePauseClass3 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass3
}

func NewPatternFlowPfcPausePauseClass3() PatternFlowPfcPausePauseClass3 {
	obj := patternFlowPfcPausePauseClass3{obj: &snappipb.PatternFlowPfcPausePauseClass3{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass3) Msg() *snappipb.PatternFlowPfcPausePauseClass3 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass3) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass3) PatternFlowPfcPausePauseClass3 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass3) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass3) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass3) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass3) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass3) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass3) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass3) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass3 interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass3
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass3) PatternFlowPfcPausePauseClass3
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPausePauseClass3ChoiceEnum
	SetChoice(value PatternFlowPfcPausePauseClass3ChoiceEnum) PatternFlowPfcPausePauseClass3
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass3
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass3
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass3
	HasMetricGroup() bool
	Increment() PatternFlowPfcPausePauseClass3Counter
	SetIncrement(value PatternFlowPfcPausePauseClass3Counter) PatternFlowPfcPausePauseClass3
	HasIncrement() bool
	Decrement() PatternFlowPfcPausePauseClass3Counter
	SetDecrement(value PatternFlowPfcPausePauseClass3Counter) PatternFlowPfcPausePauseClass3
	HasDecrement() bool
}

type PatternFlowPfcPausePauseClass3ChoiceEnum string

var PatternFlowPfcPausePauseClass3Choice = struct {
	VALUE     PatternFlowPfcPausePauseClass3ChoiceEnum
	VALUES    PatternFlowPfcPausePauseClass3ChoiceEnum
	INCREMENT PatternFlowPfcPausePauseClass3ChoiceEnum
	DECREMENT PatternFlowPfcPausePauseClass3ChoiceEnum
}{
	VALUE:     PatternFlowPfcPausePauseClass3ChoiceEnum("value"),
	VALUES:    PatternFlowPfcPausePauseClass3ChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPausePauseClass3ChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPausePauseClass3ChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPausePauseClass3) Choice() PatternFlowPfcPausePauseClass3ChoiceEnum {
	return PatternFlowPfcPausePauseClass3ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPausePauseClass3) SetChoice(value PatternFlowPfcPausePauseClass3ChoiceEnum) PatternFlowPfcPausePauseClass3 {
	intValue, ok := snappipb.PatternFlowPfcPausePauseClass3_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPausePauseClass3ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPausePauseClass3_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPfcPausePauseClass3 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) SetValue(value int32) PatternFlowPfcPausePauseClass3 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPausePauseClass3Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPfcPausePauseClass3 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) SetValues(value []int32) PatternFlowPfcPausePauseClass3 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPausePauseClass3Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass3) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass3) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPausePauseClass3 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass3) SetMetricGroup(value string) PatternFlowPfcPausePauseClass3 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass3Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) Increment() PatternFlowPfcPausePauseClass3Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass3Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPausePauseClass3Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass3Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPausePauseClass3Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPausePauseClass3Counter value in the PatternFlowPfcPausePauseClass3 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) SetIncrement(value PatternFlowPfcPausePauseClass3Counter) PatternFlowPfcPausePauseClass3 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass3Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPausePauseClass3Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) Decrement() PatternFlowPfcPausePauseClass3Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass3Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPausePauseClass3Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass3Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPausePauseClass3Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPausePauseClass3Counter value in the PatternFlowPfcPausePauseClass3 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) SetDecrement(value PatternFlowPfcPausePauseClass3Counter) PatternFlowPfcPausePauseClass3 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass3Choice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPausePauseClass3) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass3.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass3.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPausePauseClass3) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPausePauseClass3Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowPfcPausePauseClass4 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass4
}

func NewPatternFlowPfcPausePauseClass4() PatternFlowPfcPausePauseClass4 {
	obj := patternFlowPfcPausePauseClass4{obj: &snappipb.PatternFlowPfcPausePauseClass4{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass4) Msg() *snappipb.PatternFlowPfcPausePauseClass4 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass4) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass4) PatternFlowPfcPausePauseClass4 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass4) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass4) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass4) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass4) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass4) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass4) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass4) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass4 interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass4
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass4) PatternFlowPfcPausePauseClass4
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPausePauseClass4ChoiceEnum
	SetChoice(value PatternFlowPfcPausePauseClass4ChoiceEnum) PatternFlowPfcPausePauseClass4
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass4
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass4
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass4
	HasMetricGroup() bool
	Increment() PatternFlowPfcPausePauseClass4Counter
	SetIncrement(value PatternFlowPfcPausePauseClass4Counter) PatternFlowPfcPausePauseClass4
	HasIncrement() bool
	Decrement() PatternFlowPfcPausePauseClass4Counter
	SetDecrement(value PatternFlowPfcPausePauseClass4Counter) PatternFlowPfcPausePauseClass4
	HasDecrement() bool
}

type PatternFlowPfcPausePauseClass4ChoiceEnum string

var PatternFlowPfcPausePauseClass4Choice = struct {
	VALUE     PatternFlowPfcPausePauseClass4ChoiceEnum
	VALUES    PatternFlowPfcPausePauseClass4ChoiceEnum
	INCREMENT PatternFlowPfcPausePauseClass4ChoiceEnum
	DECREMENT PatternFlowPfcPausePauseClass4ChoiceEnum
}{
	VALUE:     PatternFlowPfcPausePauseClass4ChoiceEnum("value"),
	VALUES:    PatternFlowPfcPausePauseClass4ChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPausePauseClass4ChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPausePauseClass4ChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPausePauseClass4) Choice() PatternFlowPfcPausePauseClass4ChoiceEnum {
	return PatternFlowPfcPausePauseClass4ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPausePauseClass4) SetChoice(value PatternFlowPfcPausePauseClass4ChoiceEnum) PatternFlowPfcPausePauseClass4 {
	intValue, ok := snappipb.PatternFlowPfcPausePauseClass4_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPausePauseClass4ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPausePauseClass4_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPfcPausePauseClass4 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) SetValue(value int32) PatternFlowPfcPausePauseClass4 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPausePauseClass4Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPfcPausePauseClass4 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) SetValues(value []int32) PatternFlowPfcPausePauseClass4 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPausePauseClass4Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass4) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass4) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPausePauseClass4 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass4) SetMetricGroup(value string) PatternFlowPfcPausePauseClass4 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass4Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) Increment() PatternFlowPfcPausePauseClass4Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass4Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPausePauseClass4Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass4Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPausePauseClass4Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPausePauseClass4Counter value in the PatternFlowPfcPausePauseClass4 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) SetIncrement(value PatternFlowPfcPausePauseClass4Counter) PatternFlowPfcPausePauseClass4 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass4Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPausePauseClass4Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) Decrement() PatternFlowPfcPausePauseClass4Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass4Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPausePauseClass4Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass4Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPausePauseClass4Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPausePauseClass4Counter value in the PatternFlowPfcPausePauseClass4 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) SetDecrement(value PatternFlowPfcPausePauseClass4Counter) PatternFlowPfcPausePauseClass4 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass4Choice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPausePauseClass4) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass4.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass4.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPausePauseClass4) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPausePauseClass4Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowPfcPausePauseClass5 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass5
}

func NewPatternFlowPfcPausePauseClass5() PatternFlowPfcPausePauseClass5 {
	obj := patternFlowPfcPausePauseClass5{obj: &snappipb.PatternFlowPfcPausePauseClass5{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass5) Msg() *snappipb.PatternFlowPfcPausePauseClass5 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass5) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass5) PatternFlowPfcPausePauseClass5 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass5) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass5) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass5) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass5) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass5) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass5) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass5) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass5 interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass5
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass5) PatternFlowPfcPausePauseClass5
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPausePauseClass5ChoiceEnum
	SetChoice(value PatternFlowPfcPausePauseClass5ChoiceEnum) PatternFlowPfcPausePauseClass5
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass5
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass5
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass5
	HasMetricGroup() bool
	Increment() PatternFlowPfcPausePauseClass5Counter
	SetIncrement(value PatternFlowPfcPausePauseClass5Counter) PatternFlowPfcPausePauseClass5
	HasIncrement() bool
	Decrement() PatternFlowPfcPausePauseClass5Counter
	SetDecrement(value PatternFlowPfcPausePauseClass5Counter) PatternFlowPfcPausePauseClass5
	HasDecrement() bool
}

type PatternFlowPfcPausePauseClass5ChoiceEnum string

var PatternFlowPfcPausePauseClass5Choice = struct {
	VALUE     PatternFlowPfcPausePauseClass5ChoiceEnum
	VALUES    PatternFlowPfcPausePauseClass5ChoiceEnum
	INCREMENT PatternFlowPfcPausePauseClass5ChoiceEnum
	DECREMENT PatternFlowPfcPausePauseClass5ChoiceEnum
}{
	VALUE:     PatternFlowPfcPausePauseClass5ChoiceEnum("value"),
	VALUES:    PatternFlowPfcPausePauseClass5ChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPausePauseClass5ChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPausePauseClass5ChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPausePauseClass5) Choice() PatternFlowPfcPausePauseClass5ChoiceEnum {
	return PatternFlowPfcPausePauseClass5ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPausePauseClass5) SetChoice(value PatternFlowPfcPausePauseClass5ChoiceEnum) PatternFlowPfcPausePauseClass5 {
	intValue, ok := snappipb.PatternFlowPfcPausePauseClass5_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPausePauseClass5ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPausePauseClass5_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPfcPausePauseClass5 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) SetValue(value int32) PatternFlowPfcPausePauseClass5 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPausePauseClass5Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPfcPausePauseClass5 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) SetValues(value []int32) PatternFlowPfcPausePauseClass5 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPausePauseClass5Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass5) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass5) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPausePauseClass5 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass5) SetMetricGroup(value string) PatternFlowPfcPausePauseClass5 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass5Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) Increment() PatternFlowPfcPausePauseClass5Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass5Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPausePauseClass5Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass5Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPausePauseClass5Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPausePauseClass5Counter value in the PatternFlowPfcPausePauseClass5 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) SetIncrement(value PatternFlowPfcPausePauseClass5Counter) PatternFlowPfcPausePauseClass5 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass5Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPausePauseClass5Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) Decrement() PatternFlowPfcPausePauseClass5Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass5Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPausePauseClass5Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass5Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPausePauseClass5Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPausePauseClass5Counter value in the PatternFlowPfcPausePauseClass5 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) SetDecrement(value PatternFlowPfcPausePauseClass5Counter) PatternFlowPfcPausePauseClass5 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass5Choice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPausePauseClass5) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass5.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass5.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPausePauseClass5) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPausePauseClass5Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowPfcPausePauseClass6 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass6
}

func NewPatternFlowPfcPausePauseClass6() PatternFlowPfcPausePauseClass6 {
	obj := patternFlowPfcPausePauseClass6{obj: &snappipb.PatternFlowPfcPausePauseClass6{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass6) Msg() *snappipb.PatternFlowPfcPausePauseClass6 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass6) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass6) PatternFlowPfcPausePauseClass6 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass6) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass6) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass6) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass6) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass6) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass6) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass6 interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass6
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass6) PatternFlowPfcPausePauseClass6
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPausePauseClass6ChoiceEnum
	SetChoice(value PatternFlowPfcPausePauseClass6ChoiceEnum) PatternFlowPfcPausePauseClass6
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass6
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass6
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass6
	HasMetricGroup() bool
	Increment() PatternFlowPfcPausePauseClass6Counter
	SetIncrement(value PatternFlowPfcPausePauseClass6Counter) PatternFlowPfcPausePauseClass6
	HasIncrement() bool
	Decrement() PatternFlowPfcPausePauseClass6Counter
	SetDecrement(value PatternFlowPfcPausePauseClass6Counter) PatternFlowPfcPausePauseClass6
	HasDecrement() bool
}

type PatternFlowPfcPausePauseClass6ChoiceEnum string

var PatternFlowPfcPausePauseClass6Choice = struct {
	VALUE     PatternFlowPfcPausePauseClass6ChoiceEnum
	VALUES    PatternFlowPfcPausePauseClass6ChoiceEnum
	INCREMENT PatternFlowPfcPausePauseClass6ChoiceEnum
	DECREMENT PatternFlowPfcPausePauseClass6ChoiceEnum
}{
	VALUE:     PatternFlowPfcPausePauseClass6ChoiceEnum("value"),
	VALUES:    PatternFlowPfcPausePauseClass6ChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPausePauseClass6ChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPausePauseClass6ChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPausePauseClass6) Choice() PatternFlowPfcPausePauseClass6ChoiceEnum {
	return PatternFlowPfcPausePauseClass6ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPausePauseClass6) SetChoice(value PatternFlowPfcPausePauseClass6ChoiceEnum) PatternFlowPfcPausePauseClass6 {
	intValue, ok := snappipb.PatternFlowPfcPausePauseClass6_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPausePauseClass6ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPausePauseClass6_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPfcPausePauseClass6 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) SetValue(value int32) PatternFlowPfcPausePauseClass6 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPausePauseClass6Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPfcPausePauseClass6 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) SetValues(value []int32) PatternFlowPfcPausePauseClass6 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPausePauseClass6Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass6) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass6) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPausePauseClass6 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass6) SetMetricGroup(value string) PatternFlowPfcPausePauseClass6 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass6Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) Increment() PatternFlowPfcPausePauseClass6Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass6Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPausePauseClass6Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass6Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPausePauseClass6Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPausePauseClass6Counter value in the PatternFlowPfcPausePauseClass6 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) SetIncrement(value PatternFlowPfcPausePauseClass6Counter) PatternFlowPfcPausePauseClass6 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass6Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPausePauseClass6Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) Decrement() PatternFlowPfcPausePauseClass6Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass6Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPausePauseClass6Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass6Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPausePauseClass6Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPausePauseClass6Counter value in the PatternFlowPfcPausePauseClass6 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) SetDecrement(value PatternFlowPfcPausePauseClass6Counter) PatternFlowPfcPausePauseClass6 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass6Choice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPausePauseClass6) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass6.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass6.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPausePauseClass6) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPausePauseClass6Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowPfcPausePauseClass7 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass7
}

func NewPatternFlowPfcPausePauseClass7() PatternFlowPfcPausePauseClass7 {
	obj := patternFlowPfcPausePauseClass7{obj: &snappipb.PatternFlowPfcPausePauseClass7{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass7) Msg() *snappipb.PatternFlowPfcPausePauseClass7 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass7) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass7) PatternFlowPfcPausePauseClass7 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass7) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass7) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass7) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass7) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass7) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass7) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass7) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass7 interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass7
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass7) PatternFlowPfcPausePauseClass7
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPfcPausePauseClass7ChoiceEnum
	SetChoice(value PatternFlowPfcPausePauseClass7ChoiceEnum) PatternFlowPfcPausePauseClass7
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass7
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass7
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass7
	HasMetricGroup() bool
	Increment() PatternFlowPfcPausePauseClass7Counter
	SetIncrement(value PatternFlowPfcPausePauseClass7Counter) PatternFlowPfcPausePauseClass7
	HasIncrement() bool
	Decrement() PatternFlowPfcPausePauseClass7Counter
	SetDecrement(value PatternFlowPfcPausePauseClass7Counter) PatternFlowPfcPausePauseClass7
	HasDecrement() bool
}

type PatternFlowPfcPausePauseClass7ChoiceEnum string

var PatternFlowPfcPausePauseClass7Choice = struct {
	VALUE     PatternFlowPfcPausePauseClass7ChoiceEnum
	VALUES    PatternFlowPfcPausePauseClass7ChoiceEnum
	INCREMENT PatternFlowPfcPausePauseClass7ChoiceEnum
	DECREMENT PatternFlowPfcPausePauseClass7ChoiceEnum
}{
	VALUE:     PatternFlowPfcPausePauseClass7ChoiceEnum("value"),
	VALUES:    PatternFlowPfcPausePauseClass7ChoiceEnum("values"),
	INCREMENT: PatternFlowPfcPausePauseClass7ChoiceEnum("increment"),
	DECREMENT: PatternFlowPfcPausePauseClass7ChoiceEnum("decrement"),
}

func (obj *patternFlowPfcPausePauseClass7) Choice() PatternFlowPfcPausePauseClass7ChoiceEnum {
	return PatternFlowPfcPausePauseClass7ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPfcPausePauseClass7) SetChoice(value PatternFlowPfcPausePauseClass7ChoiceEnum) PatternFlowPfcPausePauseClass7 {
	intValue, ok := snappipb.PatternFlowPfcPausePauseClass7_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPfcPausePauseClass7ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPfcPausePauseClass7_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPfcPausePauseClass7 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) SetValue(value int32) PatternFlowPfcPausePauseClass7 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPfcPausePauseClass7Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPfcPausePauseClass7 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) SetValues(value []int32) PatternFlowPfcPausePauseClass7 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPfcPausePauseClass7Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass7) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass7) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPfcPausePauseClass7 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass7) SetMetricGroup(value string) PatternFlowPfcPausePauseClass7 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass7Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) Increment() PatternFlowPfcPausePauseClass7Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass7Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPfcPausePauseClass7Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass7Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPfcPausePauseClass7Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPfcPausePauseClass7Counter value in the PatternFlowPfcPausePauseClass7 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) SetIncrement(value PatternFlowPfcPausePauseClass7Counter) PatternFlowPfcPausePauseClass7 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass7Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPfcPausePauseClass7Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) Decrement() PatternFlowPfcPausePauseClass7Counter {
	obj.SetChoice(PatternFlowPfcPausePauseClass7Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPfcPausePauseClass7Counter().Msg()
	}
	return &patternFlowPfcPausePauseClass7Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPfcPausePauseClass7Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPfcPausePauseClass7Counter value in the PatternFlowPfcPausePauseClass7 object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) SetDecrement(value PatternFlowPfcPausePauseClass7Counter) PatternFlowPfcPausePauseClass7 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPfcPausePauseClass7Choice.DECREMENT)
	return obj
}

func (obj *patternFlowPfcPausePauseClass7) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass7.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass7.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPfcPausePauseClass7) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPfcPausePauseClass7Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowEthernetPauseDst struct {
	obj *snappipb.PatternFlowEthernetPauseDst
}

func NewPatternFlowEthernetPauseDst() PatternFlowEthernetPauseDst {
	obj := patternFlowEthernetPauseDst{obj: &snappipb.PatternFlowEthernetPauseDst{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPauseDst) Msg() *snappipb.PatternFlowEthernetPauseDst {
	return obj.obj
}

func (obj *patternFlowEthernetPauseDst) SetMsg(msg *snappipb.PatternFlowEthernetPauseDst) PatternFlowEthernetPauseDst {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPauseDst) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPauseDst) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseDst) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseDst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseDst) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseDst) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPauseDst) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPauseDst interface {
	Msg() *snappipb.PatternFlowEthernetPauseDst
	SetMsg(*snappipb.PatternFlowEthernetPauseDst) PatternFlowEthernetPauseDst
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowEthernetPauseDstChoiceEnum
	SetChoice(value PatternFlowEthernetPauseDstChoiceEnum) PatternFlowEthernetPauseDst
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowEthernetPauseDst
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowEthernetPauseDst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPauseDst
	HasMetricGroup() bool
	Increment() PatternFlowEthernetPauseDstCounter
	SetIncrement(value PatternFlowEthernetPauseDstCounter) PatternFlowEthernetPauseDst
	HasIncrement() bool
	Decrement() PatternFlowEthernetPauseDstCounter
	SetDecrement(value PatternFlowEthernetPauseDstCounter) PatternFlowEthernetPauseDst
	HasDecrement() bool
}

type PatternFlowEthernetPauseDstChoiceEnum string

var PatternFlowEthernetPauseDstChoice = struct {
	VALUE     PatternFlowEthernetPauseDstChoiceEnum
	VALUES    PatternFlowEthernetPauseDstChoiceEnum
	INCREMENT PatternFlowEthernetPauseDstChoiceEnum
	DECREMENT PatternFlowEthernetPauseDstChoiceEnum
}{
	VALUE:     PatternFlowEthernetPauseDstChoiceEnum("value"),
	VALUES:    PatternFlowEthernetPauseDstChoiceEnum("values"),
	INCREMENT: PatternFlowEthernetPauseDstChoiceEnum("increment"),
	DECREMENT: PatternFlowEthernetPauseDstChoiceEnum("decrement"),
}

func (obj *patternFlowEthernetPauseDst) Choice() PatternFlowEthernetPauseDstChoiceEnum {
	return PatternFlowEthernetPauseDstChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseDst) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowEthernetPauseDst) SetChoice(value PatternFlowEthernetPauseDstChoiceEnum) PatternFlowEthernetPauseDst {
	intValue, ok := snappipb.PatternFlowEthernetPauseDst_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowEthernetPauseDstChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowEthernetPauseDst_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseDst) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "01:80:c2:00:00:01"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseDst) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowEthernetPauseDst object
//  description is TBD
func (obj *patternFlowEthernetPauseDst) SetValue(value string) PatternFlowEthernetPauseDst {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowEthernetPauseDstChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowEthernetPauseDst) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowEthernetPauseDst object
//  description is TBD
func (obj *patternFlowEthernetPauseDst) SetValues(value []string) PatternFlowEthernetPauseDst {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowEthernetPauseDstChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseDst) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseDst) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowEthernetPauseDst object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseDst) SetMetricGroup(value string) PatternFlowEthernetPauseDst {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowEthernetPauseDstCounter
//  description is TBD
func (obj *patternFlowEthernetPauseDst) Increment() PatternFlowEthernetPauseDstCounter {
	obj.SetChoice(PatternFlowEthernetPauseDstChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowEthernetPauseDstCounter().Msg()
	}
	return &patternFlowEthernetPauseDstCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowEthernetPauseDstCounter
//  description is TBD
func (obj *patternFlowEthernetPauseDst) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowEthernetPauseDstCounter value in the PatternFlowEthernetPauseDst object
//  description is TBD
func (obj *patternFlowEthernetPauseDst) SetIncrement(value PatternFlowEthernetPauseDstCounter) PatternFlowEthernetPauseDst {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPauseDstChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowEthernetPauseDstCounter
//  description is TBD
func (obj *patternFlowEthernetPauseDst) Decrement() PatternFlowEthernetPauseDstCounter {
	obj.SetChoice(PatternFlowEthernetPauseDstChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowEthernetPauseDstCounter().Msg()
	}
	return &patternFlowEthernetPauseDstCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowEthernetPauseDstCounter
//  description is TBD
func (obj *patternFlowEthernetPauseDst) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowEthernetPauseDstCounter value in the PatternFlowEthernetPauseDst object
//  description is TBD
func (obj *patternFlowEthernetPauseDst) SetDecrement(value PatternFlowEthernetPauseDstCounter) PatternFlowEthernetPauseDst {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPauseDstChoice.DECREMENT)
	return obj
}

func (obj *patternFlowEthernetPauseDst) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateMac(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowEthernetPauseDst"))
		}
	}

	if obj.obj.Values != nil {
		err := validateMacSlice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowEthernetPauseDst"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowEthernetPauseDst) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowEthernetPauseDstChoice.VALUE)
		obj.SetValue("01:80:c2:00:00:01")
	}

}

type patternFlowEthernetPauseSrc struct {
	obj *snappipb.PatternFlowEthernetPauseSrc
}

func NewPatternFlowEthernetPauseSrc() PatternFlowEthernetPauseSrc {
	obj := patternFlowEthernetPauseSrc{obj: &snappipb.PatternFlowEthernetPauseSrc{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPauseSrc) Msg() *snappipb.PatternFlowEthernetPauseSrc {
	return obj.obj
}

func (obj *patternFlowEthernetPauseSrc) SetMsg(msg *snappipb.PatternFlowEthernetPauseSrc) PatternFlowEthernetPauseSrc {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPauseSrc) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPauseSrc) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseSrc) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseSrc) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseSrc) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseSrc) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPauseSrc) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPauseSrc interface {
	Msg() *snappipb.PatternFlowEthernetPauseSrc
	SetMsg(*snappipb.PatternFlowEthernetPauseSrc) PatternFlowEthernetPauseSrc
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowEthernetPauseSrcChoiceEnum
	SetChoice(value PatternFlowEthernetPauseSrcChoiceEnum) PatternFlowEthernetPauseSrc
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowEthernetPauseSrc
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowEthernetPauseSrc
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPauseSrc
	HasMetricGroup() bool
	Increment() PatternFlowEthernetPauseSrcCounter
	SetIncrement(value PatternFlowEthernetPauseSrcCounter) PatternFlowEthernetPauseSrc
	HasIncrement() bool
	Decrement() PatternFlowEthernetPauseSrcCounter
	SetDecrement(value PatternFlowEthernetPauseSrcCounter) PatternFlowEthernetPauseSrc
	HasDecrement() bool
}

type PatternFlowEthernetPauseSrcChoiceEnum string

var PatternFlowEthernetPauseSrcChoice = struct {
	VALUE     PatternFlowEthernetPauseSrcChoiceEnum
	VALUES    PatternFlowEthernetPauseSrcChoiceEnum
	INCREMENT PatternFlowEthernetPauseSrcChoiceEnum
	DECREMENT PatternFlowEthernetPauseSrcChoiceEnum
}{
	VALUE:     PatternFlowEthernetPauseSrcChoiceEnum("value"),
	VALUES:    PatternFlowEthernetPauseSrcChoiceEnum("values"),
	INCREMENT: PatternFlowEthernetPauseSrcChoiceEnum("increment"),
	DECREMENT: PatternFlowEthernetPauseSrcChoiceEnum("decrement"),
}

func (obj *patternFlowEthernetPauseSrc) Choice() PatternFlowEthernetPauseSrcChoiceEnum {
	return PatternFlowEthernetPauseSrcChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowEthernetPauseSrc) SetChoice(value PatternFlowEthernetPauseSrcChoiceEnum) PatternFlowEthernetPauseSrc {
	intValue, ok := snappipb.PatternFlowEthernetPauseSrc_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowEthernetPauseSrcChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowEthernetPauseSrc_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "00:00:00:00:00:00"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowEthernetPauseSrc object
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) SetValue(value string) PatternFlowEthernetPauseSrc {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowEthernetPauseSrcChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowEthernetPauseSrc object
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) SetValues(value []string) PatternFlowEthernetPauseSrc {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowEthernetPauseSrcChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseSrc) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseSrc) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowEthernetPauseSrc object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseSrc) SetMetricGroup(value string) PatternFlowEthernetPauseSrc {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowEthernetPauseSrcCounter
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) Increment() PatternFlowEthernetPauseSrcCounter {
	obj.SetChoice(PatternFlowEthernetPauseSrcChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowEthernetPauseSrcCounter().Msg()
	}
	return &patternFlowEthernetPauseSrcCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowEthernetPauseSrcCounter
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowEthernetPauseSrcCounter value in the PatternFlowEthernetPauseSrc object
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) SetIncrement(value PatternFlowEthernetPauseSrcCounter) PatternFlowEthernetPauseSrc {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPauseSrcChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowEthernetPauseSrcCounter
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) Decrement() PatternFlowEthernetPauseSrcCounter {
	obj.SetChoice(PatternFlowEthernetPauseSrcChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowEthernetPauseSrcCounter().Msg()
	}
	return &patternFlowEthernetPauseSrcCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowEthernetPauseSrcCounter
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowEthernetPauseSrcCounter value in the PatternFlowEthernetPauseSrc object
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) SetDecrement(value PatternFlowEthernetPauseSrcCounter) PatternFlowEthernetPauseSrc {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPauseSrcChoice.DECREMENT)
	return obj
}

func (obj *patternFlowEthernetPauseSrc) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateMac(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowEthernetPauseSrc"))
		}
	}

	if obj.obj.Values != nil {
		err := validateMacSlice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowEthernetPauseSrc"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowEthernetPauseSrc) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowEthernetPauseSrcChoice.VALUE)
		obj.SetValue("00:00:00:00:00:00")
	}

}

type patternFlowEthernetPauseEtherType struct {
	obj *snappipb.PatternFlowEthernetPauseEtherType
}

func NewPatternFlowEthernetPauseEtherType() PatternFlowEthernetPauseEtherType {
	obj := patternFlowEthernetPauseEtherType{obj: &snappipb.PatternFlowEthernetPauseEtherType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPauseEtherType) Msg() *snappipb.PatternFlowEthernetPauseEtherType {
	return obj.obj
}

func (obj *patternFlowEthernetPauseEtherType) SetMsg(msg *snappipb.PatternFlowEthernetPauseEtherType) PatternFlowEthernetPauseEtherType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPauseEtherType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPauseEtherType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseEtherType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseEtherType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseEtherType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseEtherType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPauseEtherType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPauseEtherType interface {
	Msg() *snappipb.PatternFlowEthernetPauseEtherType
	SetMsg(*snappipb.PatternFlowEthernetPauseEtherType) PatternFlowEthernetPauseEtherType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowEthernetPauseEtherTypeChoiceEnum
	SetChoice(value PatternFlowEthernetPauseEtherTypeChoiceEnum) PatternFlowEthernetPauseEtherType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowEthernetPauseEtherType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowEthernetPauseEtherType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPauseEtherType
	HasMetricGroup() bool
	Increment() PatternFlowEthernetPauseEtherTypeCounter
	SetIncrement(value PatternFlowEthernetPauseEtherTypeCounter) PatternFlowEthernetPauseEtherType
	HasIncrement() bool
	Decrement() PatternFlowEthernetPauseEtherTypeCounter
	SetDecrement(value PatternFlowEthernetPauseEtherTypeCounter) PatternFlowEthernetPauseEtherType
	HasDecrement() bool
}

type PatternFlowEthernetPauseEtherTypeChoiceEnum string

var PatternFlowEthernetPauseEtherTypeChoice = struct {
	VALUE     PatternFlowEthernetPauseEtherTypeChoiceEnum
	VALUES    PatternFlowEthernetPauseEtherTypeChoiceEnum
	INCREMENT PatternFlowEthernetPauseEtherTypeChoiceEnum
	DECREMENT PatternFlowEthernetPauseEtherTypeChoiceEnum
}{
	VALUE:     PatternFlowEthernetPauseEtherTypeChoiceEnum("value"),
	VALUES:    PatternFlowEthernetPauseEtherTypeChoiceEnum("values"),
	INCREMENT: PatternFlowEthernetPauseEtherTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowEthernetPauseEtherTypeChoiceEnum("decrement"),
}

func (obj *patternFlowEthernetPauseEtherType) Choice() PatternFlowEthernetPauseEtherTypeChoiceEnum {
	return PatternFlowEthernetPauseEtherTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowEthernetPauseEtherType) SetChoice(value PatternFlowEthernetPauseEtherTypeChoiceEnum) PatternFlowEthernetPauseEtherType {
	intValue, ok := snappipb.PatternFlowEthernetPauseEtherType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowEthernetPauseEtherTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowEthernetPauseEtherType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 34824
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowEthernetPauseEtherType object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) SetValue(value int32) PatternFlowEthernetPauseEtherType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowEthernetPauseEtherTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowEthernetPauseEtherType object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) SetValues(value []int32) PatternFlowEthernetPauseEtherType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowEthernetPauseEtherTypeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseEtherType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseEtherType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowEthernetPauseEtherType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseEtherType) SetMetricGroup(value string) PatternFlowEthernetPauseEtherType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowEthernetPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) Increment() PatternFlowEthernetPauseEtherTypeCounter {
	obj.SetChoice(PatternFlowEthernetPauseEtherTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowEthernetPauseEtherTypeCounter().Msg()
	}
	return &patternFlowEthernetPauseEtherTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowEthernetPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowEthernetPauseEtherTypeCounter value in the PatternFlowEthernetPauseEtherType object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) SetIncrement(value PatternFlowEthernetPauseEtherTypeCounter) PatternFlowEthernetPauseEtherType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPauseEtherTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowEthernetPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) Decrement() PatternFlowEthernetPauseEtherTypeCounter {
	obj.SetChoice(PatternFlowEthernetPauseEtherTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowEthernetPauseEtherTypeCounter().Msg()
	}
	return &patternFlowEthernetPauseEtherTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowEthernetPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowEthernetPauseEtherTypeCounter value in the PatternFlowEthernetPauseEtherType object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) SetDecrement(value PatternFlowEthernetPauseEtherTypeCounter) PatternFlowEthernetPauseEtherType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPauseEtherTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowEthernetPauseEtherType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseEtherType.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseEtherType.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowEthernetPauseEtherType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowEthernetPauseEtherTypeChoice.VALUE)
		obj.SetValue(34824)
	}

}

type patternFlowEthernetPauseControlOpCode struct {
	obj *snappipb.PatternFlowEthernetPauseControlOpCode
}

func NewPatternFlowEthernetPauseControlOpCode() PatternFlowEthernetPauseControlOpCode {
	obj := patternFlowEthernetPauseControlOpCode{obj: &snappipb.PatternFlowEthernetPauseControlOpCode{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPauseControlOpCode) Msg() *snappipb.PatternFlowEthernetPauseControlOpCode {
	return obj.obj
}

func (obj *patternFlowEthernetPauseControlOpCode) SetMsg(msg *snappipb.PatternFlowEthernetPauseControlOpCode) PatternFlowEthernetPauseControlOpCode {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPauseControlOpCode) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPauseControlOpCode) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseControlOpCode) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseControlOpCode) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseControlOpCode) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseControlOpCode) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPauseControlOpCode) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPauseControlOpCode interface {
	Msg() *snappipb.PatternFlowEthernetPauseControlOpCode
	SetMsg(*snappipb.PatternFlowEthernetPauseControlOpCode) PatternFlowEthernetPauseControlOpCode
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowEthernetPauseControlOpCodeChoiceEnum
	SetChoice(value PatternFlowEthernetPauseControlOpCodeChoiceEnum) PatternFlowEthernetPauseControlOpCode
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowEthernetPauseControlOpCode
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowEthernetPauseControlOpCode
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPauseControlOpCode
	HasMetricGroup() bool
	Increment() PatternFlowEthernetPauseControlOpCodeCounter
	SetIncrement(value PatternFlowEthernetPauseControlOpCodeCounter) PatternFlowEthernetPauseControlOpCode
	HasIncrement() bool
	Decrement() PatternFlowEthernetPauseControlOpCodeCounter
	SetDecrement(value PatternFlowEthernetPauseControlOpCodeCounter) PatternFlowEthernetPauseControlOpCode
	HasDecrement() bool
}

type PatternFlowEthernetPauseControlOpCodeChoiceEnum string

var PatternFlowEthernetPauseControlOpCodeChoice = struct {
	VALUE     PatternFlowEthernetPauseControlOpCodeChoiceEnum
	VALUES    PatternFlowEthernetPauseControlOpCodeChoiceEnum
	INCREMENT PatternFlowEthernetPauseControlOpCodeChoiceEnum
	DECREMENT PatternFlowEthernetPauseControlOpCodeChoiceEnum
}{
	VALUE:     PatternFlowEthernetPauseControlOpCodeChoiceEnum("value"),
	VALUES:    PatternFlowEthernetPauseControlOpCodeChoiceEnum("values"),
	INCREMENT: PatternFlowEthernetPauseControlOpCodeChoiceEnum("increment"),
	DECREMENT: PatternFlowEthernetPauseControlOpCodeChoiceEnum("decrement"),
}

func (obj *patternFlowEthernetPauseControlOpCode) Choice() PatternFlowEthernetPauseControlOpCodeChoiceEnum {
	return PatternFlowEthernetPauseControlOpCodeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowEthernetPauseControlOpCode) SetChoice(value PatternFlowEthernetPauseControlOpCodeChoiceEnum) PatternFlowEthernetPauseControlOpCode {
	intValue, ok := snappipb.PatternFlowEthernetPauseControlOpCode_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowEthernetPauseControlOpCodeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowEthernetPauseControlOpCode_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 1
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowEthernetPauseControlOpCode object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) SetValue(value int32) PatternFlowEthernetPauseControlOpCode {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowEthernetPauseControlOpCodeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowEthernetPauseControlOpCode object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) SetValues(value []int32) PatternFlowEthernetPauseControlOpCode {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowEthernetPauseControlOpCodeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseControlOpCode) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseControlOpCode) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowEthernetPauseControlOpCode object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseControlOpCode) SetMetricGroup(value string) PatternFlowEthernetPauseControlOpCode {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowEthernetPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) Increment() PatternFlowEthernetPauseControlOpCodeCounter {
	obj.SetChoice(PatternFlowEthernetPauseControlOpCodeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowEthernetPauseControlOpCodeCounter().Msg()
	}
	return &patternFlowEthernetPauseControlOpCodeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowEthernetPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowEthernetPauseControlOpCodeCounter value in the PatternFlowEthernetPauseControlOpCode object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) SetIncrement(value PatternFlowEthernetPauseControlOpCodeCounter) PatternFlowEthernetPauseControlOpCode {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPauseControlOpCodeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowEthernetPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) Decrement() PatternFlowEthernetPauseControlOpCodeCounter {
	obj.SetChoice(PatternFlowEthernetPauseControlOpCodeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowEthernetPauseControlOpCodeCounter().Msg()
	}
	return &patternFlowEthernetPauseControlOpCodeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowEthernetPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowEthernetPauseControlOpCodeCounter value in the PatternFlowEthernetPauseControlOpCode object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) SetDecrement(value PatternFlowEthernetPauseControlOpCodeCounter) PatternFlowEthernetPauseControlOpCode {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPauseControlOpCodeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowEthernetPauseControlOpCode) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseControlOpCode.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseControlOpCode.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowEthernetPauseControlOpCode) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowEthernetPauseControlOpCodeChoice.VALUE)
		obj.SetValue(1)
	}

}

type patternFlowEthernetPauseTime struct {
	obj *snappipb.PatternFlowEthernetPauseTime
}

func NewPatternFlowEthernetPauseTime() PatternFlowEthernetPauseTime {
	obj := patternFlowEthernetPauseTime{obj: &snappipb.PatternFlowEthernetPauseTime{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPauseTime) Msg() *snappipb.PatternFlowEthernetPauseTime {
	return obj.obj
}

func (obj *patternFlowEthernetPauseTime) SetMsg(msg *snappipb.PatternFlowEthernetPauseTime) PatternFlowEthernetPauseTime {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPauseTime) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPauseTime) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseTime) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseTime) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseTime) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseTime) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPauseTime) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPauseTime interface {
	Msg() *snappipb.PatternFlowEthernetPauseTime
	SetMsg(*snappipb.PatternFlowEthernetPauseTime) PatternFlowEthernetPauseTime
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowEthernetPauseTimeChoiceEnum
	SetChoice(value PatternFlowEthernetPauseTimeChoiceEnum) PatternFlowEthernetPauseTime
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowEthernetPauseTime
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowEthernetPauseTime
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPauseTime
	HasMetricGroup() bool
	Increment() PatternFlowEthernetPauseTimeCounter
	SetIncrement(value PatternFlowEthernetPauseTimeCounter) PatternFlowEthernetPauseTime
	HasIncrement() bool
	Decrement() PatternFlowEthernetPauseTimeCounter
	SetDecrement(value PatternFlowEthernetPauseTimeCounter) PatternFlowEthernetPauseTime
	HasDecrement() bool
}

type PatternFlowEthernetPauseTimeChoiceEnum string

var PatternFlowEthernetPauseTimeChoice = struct {
	VALUE     PatternFlowEthernetPauseTimeChoiceEnum
	VALUES    PatternFlowEthernetPauseTimeChoiceEnum
	INCREMENT PatternFlowEthernetPauseTimeChoiceEnum
	DECREMENT PatternFlowEthernetPauseTimeChoiceEnum
}{
	VALUE:     PatternFlowEthernetPauseTimeChoiceEnum("value"),
	VALUES:    PatternFlowEthernetPauseTimeChoiceEnum("values"),
	INCREMENT: PatternFlowEthernetPauseTimeChoiceEnum("increment"),
	DECREMENT: PatternFlowEthernetPauseTimeChoiceEnum("decrement"),
}

func (obj *patternFlowEthernetPauseTime) Choice() PatternFlowEthernetPauseTimeChoiceEnum {
	return PatternFlowEthernetPauseTimeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseTime) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowEthernetPauseTime) SetChoice(value PatternFlowEthernetPauseTimeChoiceEnum) PatternFlowEthernetPauseTime {
	intValue, ok := snappipb.PatternFlowEthernetPauseTime_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowEthernetPauseTimeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowEthernetPauseTime_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTime) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTime) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowEthernetPauseTime object
//  description is TBD
func (obj *patternFlowEthernetPauseTime) SetValue(value int32) PatternFlowEthernetPauseTime {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowEthernetPauseTimeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowEthernetPauseTime) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowEthernetPauseTime object
//  description is TBD
func (obj *patternFlowEthernetPauseTime) SetValues(value []int32) PatternFlowEthernetPauseTime {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowEthernetPauseTimeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseTime) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseTime) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowEthernetPauseTime object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseTime) SetMetricGroup(value string) PatternFlowEthernetPauseTime {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowEthernetPauseTimeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseTime) Increment() PatternFlowEthernetPauseTimeCounter {
	obj.SetChoice(PatternFlowEthernetPauseTimeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowEthernetPauseTimeCounter().Msg()
	}
	return &patternFlowEthernetPauseTimeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowEthernetPauseTimeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseTime) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowEthernetPauseTimeCounter value in the PatternFlowEthernetPauseTime object
//  description is TBD
func (obj *patternFlowEthernetPauseTime) SetIncrement(value PatternFlowEthernetPauseTimeCounter) PatternFlowEthernetPauseTime {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPauseTimeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowEthernetPauseTimeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseTime) Decrement() PatternFlowEthernetPauseTimeCounter {
	obj.SetChoice(PatternFlowEthernetPauseTimeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowEthernetPauseTimeCounter().Msg()
	}
	return &patternFlowEthernetPauseTimeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowEthernetPauseTimeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseTime) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowEthernetPauseTimeCounter value in the PatternFlowEthernetPauseTime object
//  description is TBD
func (obj *patternFlowEthernetPauseTime) SetDecrement(value PatternFlowEthernetPauseTimeCounter) PatternFlowEthernetPauseTime {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowEthernetPauseTimeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowEthernetPauseTime) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseTime.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseTime.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowEthernetPauseTime) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowEthernetPauseTimeChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpSrcPort struct {
	obj *snappipb.PatternFlowTcpSrcPort
}

func NewPatternFlowTcpSrcPort() PatternFlowTcpSrcPort {
	obj := patternFlowTcpSrcPort{obj: &snappipb.PatternFlowTcpSrcPort{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpSrcPort) Msg() *snappipb.PatternFlowTcpSrcPort {
	return obj.obj
}

func (obj *patternFlowTcpSrcPort) SetMsg(msg *snappipb.PatternFlowTcpSrcPort) PatternFlowTcpSrcPort {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpSrcPort) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpSrcPort) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpSrcPort) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSrcPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpSrcPort) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSrcPort) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpSrcPort) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpSrcPort interface {
	Msg() *snappipb.PatternFlowTcpSrcPort
	SetMsg(*snappipb.PatternFlowTcpSrcPort) PatternFlowTcpSrcPort
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpSrcPortChoiceEnum
	SetChoice(value PatternFlowTcpSrcPortChoiceEnum) PatternFlowTcpSrcPort
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpSrcPort
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpSrcPort
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpSrcPort
	HasMetricGroup() bool
	Increment() PatternFlowTcpSrcPortCounter
	SetIncrement(value PatternFlowTcpSrcPortCounter) PatternFlowTcpSrcPort
	HasIncrement() bool
	Decrement() PatternFlowTcpSrcPortCounter
	SetDecrement(value PatternFlowTcpSrcPortCounter) PatternFlowTcpSrcPort
	HasDecrement() bool
}

type PatternFlowTcpSrcPortChoiceEnum string

var PatternFlowTcpSrcPortChoice = struct {
	VALUE     PatternFlowTcpSrcPortChoiceEnum
	VALUES    PatternFlowTcpSrcPortChoiceEnum
	INCREMENT PatternFlowTcpSrcPortChoiceEnum
	DECREMENT PatternFlowTcpSrcPortChoiceEnum
}{
	VALUE:     PatternFlowTcpSrcPortChoiceEnum("value"),
	VALUES:    PatternFlowTcpSrcPortChoiceEnum("values"),
	INCREMENT: PatternFlowTcpSrcPortChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpSrcPortChoiceEnum("decrement"),
}

func (obj *patternFlowTcpSrcPort) Choice() PatternFlowTcpSrcPortChoiceEnum {
	return PatternFlowTcpSrcPortChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpSrcPort) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpSrcPort) SetChoice(value PatternFlowTcpSrcPortChoiceEnum) PatternFlowTcpSrcPort {
	intValue, ok := snappipb.PatternFlowTcpSrcPort_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpSrcPortChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpSrcPort_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPort) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPort) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpSrcPort object
//  description is TBD
func (obj *patternFlowTcpSrcPort) SetValue(value int32) PatternFlowTcpSrcPort {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpSrcPortChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpSrcPort) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpSrcPort object
//  description is TBD
func (obj *patternFlowTcpSrcPort) SetValues(value []int32) PatternFlowTcpSrcPort {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpSrcPortChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpSrcPort) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpSrcPort) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpSrcPort object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpSrcPort) SetMetricGroup(value string) PatternFlowTcpSrcPort {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpSrcPortCounter
//  description is TBD
func (obj *patternFlowTcpSrcPort) Increment() PatternFlowTcpSrcPortCounter {
	obj.SetChoice(PatternFlowTcpSrcPortChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpSrcPortCounter().Msg()
	}
	return &patternFlowTcpSrcPortCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpSrcPortCounter
//  description is TBD
func (obj *patternFlowTcpSrcPort) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpSrcPortCounter value in the PatternFlowTcpSrcPort object
//  description is TBD
func (obj *patternFlowTcpSrcPort) SetIncrement(value PatternFlowTcpSrcPortCounter) PatternFlowTcpSrcPort {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpSrcPortChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpSrcPortCounter
//  description is TBD
func (obj *patternFlowTcpSrcPort) Decrement() PatternFlowTcpSrcPortCounter {
	obj.SetChoice(PatternFlowTcpSrcPortChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpSrcPortCounter().Msg()
	}
	return &patternFlowTcpSrcPortCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpSrcPortCounter
//  description is TBD
func (obj *patternFlowTcpSrcPort) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpSrcPortCounter value in the PatternFlowTcpSrcPort object
//  description is TBD
func (obj *patternFlowTcpSrcPort) SetDecrement(value PatternFlowTcpSrcPortCounter) PatternFlowTcpSrcPort {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpSrcPortChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpSrcPort) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpSrcPort.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpSrcPort.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpSrcPort) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpSrcPortChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpDstPort struct {
	obj *snappipb.PatternFlowTcpDstPort
}

func NewPatternFlowTcpDstPort() PatternFlowTcpDstPort {
	obj := patternFlowTcpDstPort{obj: &snappipb.PatternFlowTcpDstPort{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpDstPort) Msg() *snappipb.PatternFlowTcpDstPort {
	return obj.obj
}

func (obj *patternFlowTcpDstPort) SetMsg(msg *snappipb.PatternFlowTcpDstPort) PatternFlowTcpDstPort {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpDstPort) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpDstPort) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpDstPort) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDstPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpDstPort) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDstPort) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpDstPort) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpDstPort interface {
	Msg() *snappipb.PatternFlowTcpDstPort
	SetMsg(*snappipb.PatternFlowTcpDstPort) PatternFlowTcpDstPort
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpDstPortChoiceEnum
	SetChoice(value PatternFlowTcpDstPortChoiceEnum) PatternFlowTcpDstPort
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpDstPort
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpDstPort
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpDstPort
	HasMetricGroup() bool
	Increment() PatternFlowTcpDstPortCounter
	SetIncrement(value PatternFlowTcpDstPortCounter) PatternFlowTcpDstPort
	HasIncrement() bool
	Decrement() PatternFlowTcpDstPortCounter
	SetDecrement(value PatternFlowTcpDstPortCounter) PatternFlowTcpDstPort
	HasDecrement() bool
}

type PatternFlowTcpDstPortChoiceEnum string

var PatternFlowTcpDstPortChoice = struct {
	VALUE     PatternFlowTcpDstPortChoiceEnum
	VALUES    PatternFlowTcpDstPortChoiceEnum
	INCREMENT PatternFlowTcpDstPortChoiceEnum
	DECREMENT PatternFlowTcpDstPortChoiceEnum
}{
	VALUE:     PatternFlowTcpDstPortChoiceEnum("value"),
	VALUES:    PatternFlowTcpDstPortChoiceEnum("values"),
	INCREMENT: PatternFlowTcpDstPortChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpDstPortChoiceEnum("decrement"),
}

func (obj *patternFlowTcpDstPort) Choice() PatternFlowTcpDstPortChoiceEnum {
	return PatternFlowTcpDstPortChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpDstPort) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpDstPort) SetChoice(value PatternFlowTcpDstPortChoiceEnum) PatternFlowTcpDstPort {
	intValue, ok := snappipb.PatternFlowTcpDstPort_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpDstPortChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpDstPort_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPort) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPort) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpDstPort object
//  description is TBD
func (obj *patternFlowTcpDstPort) SetValue(value int32) PatternFlowTcpDstPort {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpDstPortChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpDstPort) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpDstPort object
//  description is TBD
func (obj *patternFlowTcpDstPort) SetValues(value []int32) PatternFlowTcpDstPort {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpDstPortChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpDstPort) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpDstPort) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpDstPort object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpDstPort) SetMetricGroup(value string) PatternFlowTcpDstPort {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpDstPortCounter
//  description is TBD
func (obj *patternFlowTcpDstPort) Increment() PatternFlowTcpDstPortCounter {
	obj.SetChoice(PatternFlowTcpDstPortChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpDstPortCounter().Msg()
	}
	return &patternFlowTcpDstPortCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpDstPortCounter
//  description is TBD
func (obj *patternFlowTcpDstPort) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpDstPortCounter value in the PatternFlowTcpDstPort object
//  description is TBD
func (obj *patternFlowTcpDstPort) SetIncrement(value PatternFlowTcpDstPortCounter) PatternFlowTcpDstPort {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpDstPortChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpDstPortCounter
//  description is TBD
func (obj *patternFlowTcpDstPort) Decrement() PatternFlowTcpDstPortCounter {
	obj.SetChoice(PatternFlowTcpDstPortChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpDstPortCounter().Msg()
	}
	return &patternFlowTcpDstPortCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpDstPortCounter
//  description is TBD
func (obj *patternFlowTcpDstPort) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpDstPortCounter value in the PatternFlowTcpDstPort object
//  description is TBD
func (obj *patternFlowTcpDstPort) SetDecrement(value PatternFlowTcpDstPortCounter) PatternFlowTcpDstPort {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpDstPortChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpDstPort) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpDstPort.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpDstPort.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpDstPort) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpDstPortChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpSeqNum struct {
	obj *snappipb.PatternFlowTcpSeqNum
}

func NewPatternFlowTcpSeqNum() PatternFlowTcpSeqNum {
	obj := patternFlowTcpSeqNum{obj: &snappipb.PatternFlowTcpSeqNum{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpSeqNum) Msg() *snappipb.PatternFlowTcpSeqNum {
	return obj.obj
}

func (obj *patternFlowTcpSeqNum) SetMsg(msg *snappipb.PatternFlowTcpSeqNum) PatternFlowTcpSeqNum {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpSeqNum) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpSeqNum) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpSeqNum) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSeqNum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpSeqNum) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSeqNum) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpSeqNum) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpSeqNum interface {
	Msg() *snappipb.PatternFlowTcpSeqNum
	SetMsg(*snappipb.PatternFlowTcpSeqNum) PatternFlowTcpSeqNum
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpSeqNumChoiceEnum
	SetChoice(value PatternFlowTcpSeqNumChoiceEnum) PatternFlowTcpSeqNum
	HasChoice() bool
	Value() int64
	SetValue(value int64) PatternFlowTcpSeqNum
	HasValue() bool
	Values() []int64
	SetValues(value []int64) PatternFlowTcpSeqNum
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpSeqNum
	HasMetricGroup() bool
	Increment() PatternFlowTcpSeqNumCounter
	SetIncrement(value PatternFlowTcpSeqNumCounter) PatternFlowTcpSeqNum
	HasIncrement() bool
	Decrement() PatternFlowTcpSeqNumCounter
	SetDecrement(value PatternFlowTcpSeqNumCounter) PatternFlowTcpSeqNum
	HasDecrement() bool
}

type PatternFlowTcpSeqNumChoiceEnum string

var PatternFlowTcpSeqNumChoice = struct {
	VALUE     PatternFlowTcpSeqNumChoiceEnum
	VALUES    PatternFlowTcpSeqNumChoiceEnum
	INCREMENT PatternFlowTcpSeqNumChoiceEnum
	DECREMENT PatternFlowTcpSeqNumChoiceEnum
}{
	VALUE:     PatternFlowTcpSeqNumChoiceEnum("value"),
	VALUES:    PatternFlowTcpSeqNumChoiceEnum("values"),
	INCREMENT: PatternFlowTcpSeqNumChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpSeqNumChoiceEnum("decrement"),
}

func (obj *patternFlowTcpSeqNum) Choice() PatternFlowTcpSeqNumChoiceEnum {
	return PatternFlowTcpSeqNumChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpSeqNum) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpSeqNum) SetChoice(value PatternFlowTcpSeqNumChoiceEnum) PatternFlowTcpSeqNum {
	intValue, ok := snappipb.PatternFlowTcpSeqNum_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpSeqNumChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpSeqNum_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int64
//  description is TBD
func (obj *patternFlowTcpSeqNum) Value() int64 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int64
//  description is TBD
func (obj *patternFlowTcpSeqNum) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int64 value in the PatternFlowTcpSeqNum object
//  description is TBD
func (obj *patternFlowTcpSeqNum) SetValue(value int64) PatternFlowTcpSeqNum {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpSeqNumChoice.VALUE)
	return obj
}

// Values returns a []int64
//  description is TBD
func (obj *patternFlowTcpSeqNum) Values() []int64 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int64, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int64 value in the PatternFlowTcpSeqNum object
//  description is TBD
func (obj *patternFlowTcpSeqNum) SetValues(value []int64) PatternFlowTcpSeqNum {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int64, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpSeqNumChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpSeqNum) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpSeqNum) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpSeqNum object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpSeqNum) SetMetricGroup(value string) PatternFlowTcpSeqNum {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpSeqNumCounter
//  description is TBD
func (obj *patternFlowTcpSeqNum) Increment() PatternFlowTcpSeqNumCounter {
	obj.SetChoice(PatternFlowTcpSeqNumChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpSeqNumCounter().Msg()
	}
	return &patternFlowTcpSeqNumCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpSeqNumCounter
//  description is TBD
func (obj *patternFlowTcpSeqNum) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpSeqNumCounter value in the PatternFlowTcpSeqNum object
//  description is TBD
func (obj *patternFlowTcpSeqNum) SetIncrement(value PatternFlowTcpSeqNumCounter) PatternFlowTcpSeqNum {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpSeqNumChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpSeqNumCounter
//  description is TBD
func (obj *patternFlowTcpSeqNum) Decrement() PatternFlowTcpSeqNumCounter {
	obj.SetChoice(PatternFlowTcpSeqNumChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpSeqNumCounter().Msg()
	}
	return &patternFlowTcpSeqNumCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpSeqNumCounter
//  description is TBD
func (obj *patternFlowTcpSeqNum) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpSeqNumCounter value in the PatternFlowTcpSeqNum object
//  description is TBD
func (obj *patternFlowTcpSeqNum) SetDecrement(value PatternFlowTcpSeqNumCounter) PatternFlowTcpSeqNum {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpSeqNumChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpSeqNum) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpSeqNum.Value <= 4294967295 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpSeqNum.Values <= 4294967295 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpSeqNum) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpSeqNumChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpAckNum struct {
	obj *snappipb.PatternFlowTcpAckNum
}

func NewPatternFlowTcpAckNum() PatternFlowTcpAckNum {
	obj := patternFlowTcpAckNum{obj: &snappipb.PatternFlowTcpAckNum{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpAckNum) Msg() *snappipb.PatternFlowTcpAckNum {
	return obj.obj
}

func (obj *patternFlowTcpAckNum) SetMsg(msg *snappipb.PatternFlowTcpAckNum) PatternFlowTcpAckNum {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpAckNum) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpAckNum) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpAckNum) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpAckNum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpAckNum) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpAckNum) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpAckNum) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpAckNum interface {
	Msg() *snappipb.PatternFlowTcpAckNum
	SetMsg(*snappipb.PatternFlowTcpAckNum) PatternFlowTcpAckNum
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpAckNumChoiceEnum
	SetChoice(value PatternFlowTcpAckNumChoiceEnum) PatternFlowTcpAckNum
	HasChoice() bool
	Value() int64
	SetValue(value int64) PatternFlowTcpAckNum
	HasValue() bool
	Values() []int64
	SetValues(value []int64) PatternFlowTcpAckNum
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpAckNum
	HasMetricGroup() bool
	Increment() PatternFlowTcpAckNumCounter
	SetIncrement(value PatternFlowTcpAckNumCounter) PatternFlowTcpAckNum
	HasIncrement() bool
	Decrement() PatternFlowTcpAckNumCounter
	SetDecrement(value PatternFlowTcpAckNumCounter) PatternFlowTcpAckNum
	HasDecrement() bool
}

type PatternFlowTcpAckNumChoiceEnum string

var PatternFlowTcpAckNumChoice = struct {
	VALUE     PatternFlowTcpAckNumChoiceEnum
	VALUES    PatternFlowTcpAckNumChoiceEnum
	INCREMENT PatternFlowTcpAckNumChoiceEnum
	DECREMENT PatternFlowTcpAckNumChoiceEnum
}{
	VALUE:     PatternFlowTcpAckNumChoiceEnum("value"),
	VALUES:    PatternFlowTcpAckNumChoiceEnum("values"),
	INCREMENT: PatternFlowTcpAckNumChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpAckNumChoiceEnum("decrement"),
}

func (obj *patternFlowTcpAckNum) Choice() PatternFlowTcpAckNumChoiceEnum {
	return PatternFlowTcpAckNumChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpAckNum) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpAckNum) SetChoice(value PatternFlowTcpAckNumChoiceEnum) PatternFlowTcpAckNum {
	intValue, ok := snappipb.PatternFlowTcpAckNum_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpAckNumChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpAckNum_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int64
//  description is TBD
func (obj *patternFlowTcpAckNum) Value() int64 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int64
//  description is TBD
func (obj *patternFlowTcpAckNum) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int64 value in the PatternFlowTcpAckNum object
//  description is TBD
func (obj *patternFlowTcpAckNum) SetValue(value int64) PatternFlowTcpAckNum {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpAckNumChoice.VALUE)
	return obj
}

// Values returns a []int64
//  description is TBD
func (obj *patternFlowTcpAckNum) Values() []int64 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int64, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int64 value in the PatternFlowTcpAckNum object
//  description is TBD
func (obj *patternFlowTcpAckNum) SetValues(value []int64) PatternFlowTcpAckNum {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int64, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpAckNumChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpAckNum) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpAckNum) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpAckNum object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpAckNum) SetMetricGroup(value string) PatternFlowTcpAckNum {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpAckNumCounter
//  description is TBD
func (obj *patternFlowTcpAckNum) Increment() PatternFlowTcpAckNumCounter {
	obj.SetChoice(PatternFlowTcpAckNumChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpAckNumCounter().Msg()
	}
	return &patternFlowTcpAckNumCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpAckNumCounter
//  description is TBD
func (obj *patternFlowTcpAckNum) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpAckNumCounter value in the PatternFlowTcpAckNum object
//  description is TBD
func (obj *patternFlowTcpAckNum) SetIncrement(value PatternFlowTcpAckNumCounter) PatternFlowTcpAckNum {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpAckNumChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpAckNumCounter
//  description is TBD
func (obj *patternFlowTcpAckNum) Decrement() PatternFlowTcpAckNumCounter {
	obj.SetChoice(PatternFlowTcpAckNumChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpAckNumCounter().Msg()
	}
	return &patternFlowTcpAckNumCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpAckNumCounter
//  description is TBD
func (obj *patternFlowTcpAckNum) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpAckNumCounter value in the PatternFlowTcpAckNum object
//  description is TBD
func (obj *patternFlowTcpAckNum) SetDecrement(value PatternFlowTcpAckNumCounter) PatternFlowTcpAckNum {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpAckNumChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpAckNum) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpAckNum.Value <= 4294967295 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpAckNum.Values <= 4294967295 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpAckNum) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpAckNumChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpDataOffset struct {
	obj *snappipb.PatternFlowTcpDataOffset
}

func NewPatternFlowTcpDataOffset() PatternFlowTcpDataOffset {
	obj := patternFlowTcpDataOffset{obj: &snappipb.PatternFlowTcpDataOffset{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpDataOffset) Msg() *snappipb.PatternFlowTcpDataOffset {
	return obj.obj
}

func (obj *patternFlowTcpDataOffset) SetMsg(msg *snappipb.PatternFlowTcpDataOffset) PatternFlowTcpDataOffset {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpDataOffset) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpDataOffset) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpDataOffset) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDataOffset) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpDataOffset) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDataOffset) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpDataOffset) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpDataOffset interface {
	Msg() *snappipb.PatternFlowTcpDataOffset
	SetMsg(*snappipb.PatternFlowTcpDataOffset) PatternFlowTcpDataOffset
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpDataOffsetChoiceEnum
	SetChoice(value PatternFlowTcpDataOffsetChoiceEnum) PatternFlowTcpDataOffset
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpDataOffset
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpDataOffset
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpDataOffset
	HasMetricGroup() bool
	Increment() PatternFlowTcpDataOffsetCounter
	SetIncrement(value PatternFlowTcpDataOffsetCounter) PatternFlowTcpDataOffset
	HasIncrement() bool
	Decrement() PatternFlowTcpDataOffsetCounter
	SetDecrement(value PatternFlowTcpDataOffsetCounter) PatternFlowTcpDataOffset
	HasDecrement() bool
}

type PatternFlowTcpDataOffsetChoiceEnum string

var PatternFlowTcpDataOffsetChoice = struct {
	VALUE     PatternFlowTcpDataOffsetChoiceEnum
	VALUES    PatternFlowTcpDataOffsetChoiceEnum
	INCREMENT PatternFlowTcpDataOffsetChoiceEnum
	DECREMENT PatternFlowTcpDataOffsetChoiceEnum
}{
	VALUE:     PatternFlowTcpDataOffsetChoiceEnum("value"),
	VALUES:    PatternFlowTcpDataOffsetChoiceEnum("values"),
	INCREMENT: PatternFlowTcpDataOffsetChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpDataOffsetChoiceEnum("decrement"),
}

func (obj *patternFlowTcpDataOffset) Choice() PatternFlowTcpDataOffsetChoiceEnum {
	return PatternFlowTcpDataOffsetChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpDataOffset) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpDataOffset) SetChoice(value PatternFlowTcpDataOffsetChoiceEnum) PatternFlowTcpDataOffset {
	intValue, ok := snappipb.PatternFlowTcpDataOffset_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpDataOffsetChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpDataOffset_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffset) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffset) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpDataOffset object
//  description is TBD
func (obj *patternFlowTcpDataOffset) SetValue(value int32) PatternFlowTcpDataOffset {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpDataOffsetChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpDataOffset) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpDataOffset object
//  description is TBD
func (obj *patternFlowTcpDataOffset) SetValues(value []int32) PatternFlowTcpDataOffset {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpDataOffsetChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpDataOffset) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpDataOffset) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpDataOffset object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpDataOffset) SetMetricGroup(value string) PatternFlowTcpDataOffset {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpDataOffsetCounter
//  description is TBD
func (obj *patternFlowTcpDataOffset) Increment() PatternFlowTcpDataOffsetCounter {
	obj.SetChoice(PatternFlowTcpDataOffsetChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpDataOffsetCounter().Msg()
	}
	return &patternFlowTcpDataOffsetCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpDataOffsetCounter
//  description is TBD
func (obj *patternFlowTcpDataOffset) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpDataOffsetCounter value in the PatternFlowTcpDataOffset object
//  description is TBD
func (obj *patternFlowTcpDataOffset) SetIncrement(value PatternFlowTcpDataOffsetCounter) PatternFlowTcpDataOffset {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpDataOffsetChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpDataOffsetCounter
//  description is TBD
func (obj *patternFlowTcpDataOffset) Decrement() PatternFlowTcpDataOffsetCounter {
	obj.SetChoice(PatternFlowTcpDataOffsetChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpDataOffsetCounter().Msg()
	}
	return &patternFlowTcpDataOffsetCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpDataOffsetCounter
//  description is TBD
func (obj *patternFlowTcpDataOffset) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpDataOffsetCounter value in the PatternFlowTcpDataOffset object
//  description is TBD
func (obj *patternFlowTcpDataOffset) SetDecrement(value PatternFlowTcpDataOffsetCounter) PatternFlowTcpDataOffset {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpDataOffsetChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpDataOffset) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpDataOffset.Value <= 15 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpDataOffset.Values <= 15 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpDataOffset) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpDataOffsetChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpEcnNs struct {
	obj *snappipb.PatternFlowTcpEcnNs
}

func NewPatternFlowTcpEcnNs() PatternFlowTcpEcnNs {
	obj := patternFlowTcpEcnNs{obj: &snappipb.PatternFlowTcpEcnNs{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpEcnNs) Msg() *snappipb.PatternFlowTcpEcnNs {
	return obj.obj
}

func (obj *patternFlowTcpEcnNs) SetMsg(msg *snappipb.PatternFlowTcpEcnNs) PatternFlowTcpEcnNs {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpEcnNs) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpEcnNs) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnNs) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnNs) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnNs) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnNs) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpEcnNs) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpEcnNs interface {
	Msg() *snappipb.PatternFlowTcpEcnNs
	SetMsg(*snappipb.PatternFlowTcpEcnNs) PatternFlowTcpEcnNs
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpEcnNsChoiceEnum
	SetChoice(value PatternFlowTcpEcnNsChoiceEnum) PatternFlowTcpEcnNs
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpEcnNs
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpEcnNs
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpEcnNs
	HasMetricGroup() bool
	Increment() PatternFlowTcpEcnNsCounter
	SetIncrement(value PatternFlowTcpEcnNsCounter) PatternFlowTcpEcnNs
	HasIncrement() bool
	Decrement() PatternFlowTcpEcnNsCounter
	SetDecrement(value PatternFlowTcpEcnNsCounter) PatternFlowTcpEcnNs
	HasDecrement() bool
}

type PatternFlowTcpEcnNsChoiceEnum string

var PatternFlowTcpEcnNsChoice = struct {
	VALUE     PatternFlowTcpEcnNsChoiceEnum
	VALUES    PatternFlowTcpEcnNsChoiceEnum
	INCREMENT PatternFlowTcpEcnNsChoiceEnum
	DECREMENT PatternFlowTcpEcnNsChoiceEnum
}{
	VALUE:     PatternFlowTcpEcnNsChoiceEnum("value"),
	VALUES:    PatternFlowTcpEcnNsChoiceEnum("values"),
	INCREMENT: PatternFlowTcpEcnNsChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpEcnNsChoiceEnum("decrement"),
}

func (obj *patternFlowTcpEcnNs) Choice() PatternFlowTcpEcnNsChoiceEnum {
	return PatternFlowTcpEcnNsChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpEcnNs) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpEcnNs) SetChoice(value PatternFlowTcpEcnNsChoiceEnum) PatternFlowTcpEcnNs {
	intValue, ok := snappipb.PatternFlowTcpEcnNs_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpEcnNsChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpEcnNs_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNs) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNs) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpEcnNs object
//  description is TBD
func (obj *patternFlowTcpEcnNs) SetValue(value int32) PatternFlowTcpEcnNs {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpEcnNsChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpEcnNs) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpEcnNs object
//  description is TBD
func (obj *patternFlowTcpEcnNs) SetValues(value []int32) PatternFlowTcpEcnNs {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpEcnNsChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnNs) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnNs) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpEcnNs object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnNs) SetMetricGroup(value string) PatternFlowTcpEcnNs {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpEcnNsCounter
//  description is TBD
func (obj *patternFlowTcpEcnNs) Increment() PatternFlowTcpEcnNsCounter {
	obj.SetChoice(PatternFlowTcpEcnNsChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpEcnNsCounter().Msg()
	}
	return &patternFlowTcpEcnNsCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpEcnNsCounter
//  description is TBD
func (obj *patternFlowTcpEcnNs) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpEcnNsCounter value in the PatternFlowTcpEcnNs object
//  description is TBD
func (obj *patternFlowTcpEcnNs) SetIncrement(value PatternFlowTcpEcnNsCounter) PatternFlowTcpEcnNs {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpEcnNsChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpEcnNsCounter
//  description is TBD
func (obj *patternFlowTcpEcnNs) Decrement() PatternFlowTcpEcnNsCounter {
	obj.SetChoice(PatternFlowTcpEcnNsChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpEcnNsCounter().Msg()
	}
	return &patternFlowTcpEcnNsCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpEcnNsCounter
//  description is TBD
func (obj *patternFlowTcpEcnNs) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpEcnNsCounter value in the PatternFlowTcpEcnNs object
//  description is TBD
func (obj *patternFlowTcpEcnNs) SetDecrement(value PatternFlowTcpEcnNsCounter) PatternFlowTcpEcnNs {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpEcnNsChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpEcnNs) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnNs.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnNs.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpEcnNs) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpEcnNsChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpEcnCwr struct {
	obj *snappipb.PatternFlowTcpEcnCwr
}

func NewPatternFlowTcpEcnCwr() PatternFlowTcpEcnCwr {
	obj := patternFlowTcpEcnCwr{obj: &snappipb.PatternFlowTcpEcnCwr{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpEcnCwr) Msg() *snappipb.PatternFlowTcpEcnCwr {
	return obj.obj
}

func (obj *patternFlowTcpEcnCwr) SetMsg(msg *snappipb.PatternFlowTcpEcnCwr) PatternFlowTcpEcnCwr {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpEcnCwr) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpEcnCwr) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnCwr) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnCwr) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnCwr) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnCwr) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpEcnCwr) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpEcnCwr interface {
	Msg() *snappipb.PatternFlowTcpEcnCwr
	SetMsg(*snappipb.PatternFlowTcpEcnCwr) PatternFlowTcpEcnCwr
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpEcnCwrChoiceEnum
	SetChoice(value PatternFlowTcpEcnCwrChoiceEnum) PatternFlowTcpEcnCwr
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpEcnCwr
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpEcnCwr
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpEcnCwr
	HasMetricGroup() bool
	Increment() PatternFlowTcpEcnCwrCounter
	SetIncrement(value PatternFlowTcpEcnCwrCounter) PatternFlowTcpEcnCwr
	HasIncrement() bool
	Decrement() PatternFlowTcpEcnCwrCounter
	SetDecrement(value PatternFlowTcpEcnCwrCounter) PatternFlowTcpEcnCwr
	HasDecrement() bool
}

type PatternFlowTcpEcnCwrChoiceEnum string

var PatternFlowTcpEcnCwrChoice = struct {
	VALUE     PatternFlowTcpEcnCwrChoiceEnum
	VALUES    PatternFlowTcpEcnCwrChoiceEnum
	INCREMENT PatternFlowTcpEcnCwrChoiceEnum
	DECREMENT PatternFlowTcpEcnCwrChoiceEnum
}{
	VALUE:     PatternFlowTcpEcnCwrChoiceEnum("value"),
	VALUES:    PatternFlowTcpEcnCwrChoiceEnum("values"),
	INCREMENT: PatternFlowTcpEcnCwrChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpEcnCwrChoiceEnum("decrement"),
}

func (obj *patternFlowTcpEcnCwr) Choice() PatternFlowTcpEcnCwrChoiceEnum {
	return PatternFlowTcpEcnCwrChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpEcnCwr) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpEcnCwr) SetChoice(value PatternFlowTcpEcnCwrChoiceEnum) PatternFlowTcpEcnCwr {
	intValue, ok := snappipb.PatternFlowTcpEcnCwr_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpEcnCwrChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpEcnCwr_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwr) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwr) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpEcnCwr object
//  description is TBD
func (obj *patternFlowTcpEcnCwr) SetValue(value int32) PatternFlowTcpEcnCwr {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpEcnCwrChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpEcnCwr) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpEcnCwr object
//  description is TBD
func (obj *patternFlowTcpEcnCwr) SetValues(value []int32) PatternFlowTcpEcnCwr {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpEcnCwrChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnCwr) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnCwr) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpEcnCwr object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnCwr) SetMetricGroup(value string) PatternFlowTcpEcnCwr {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpEcnCwrCounter
//  description is TBD
func (obj *patternFlowTcpEcnCwr) Increment() PatternFlowTcpEcnCwrCounter {
	obj.SetChoice(PatternFlowTcpEcnCwrChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpEcnCwrCounter().Msg()
	}
	return &patternFlowTcpEcnCwrCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpEcnCwrCounter
//  description is TBD
func (obj *patternFlowTcpEcnCwr) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpEcnCwrCounter value in the PatternFlowTcpEcnCwr object
//  description is TBD
func (obj *patternFlowTcpEcnCwr) SetIncrement(value PatternFlowTcpEcnCwrCounter) PatternFlowTcpEcnCwr {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpEcnCwrChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpEcnCwrCounter
//  description is TBD
func (obj *patternFlowTcpEcnCwr) Decrement() PatternFlowTcpEcnCwrCounter {
	obj.SetChoice(PatternFlowTcpEcnCwrChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpEcnCwrCounter().Msg()
	}
	return &patternFlowTcpEcnCwrCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpEcnCwrCounter
//  description is TBD
func (obj *patternFlowTcpEcnCwr) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpEcnCwrCounter value in the PatternFlowTcpEcnCwr object
//  description is TBD
func (obj *patternFlowTcpEcnCwr) SetDecrement(value PatternFlowTcpEcnCwrCounter) PatternFlowTcpEcnCwr {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpEcnCwrChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpEcnCwr) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnCwr.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnCwr.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpEcnCwr) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpEcnCwrChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpEcnEcho struct {
	obj *snappipb.PatternFlowTcpEcnEcho
}

func NewPatternFlowTcpEcnEcho() PatternFlowTcpEcnEcho {
	obj := patternFlowTcpEcnEcho{obj: &snappipb.PatternFlowTcpEcnEcho{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpEcnEcho) Msg() *snappipb.PatternFlowTcpEcnEcho {
	return obj.obj
}

func (obj *patternFlowTcpEcnEcho) SetMsg(msg *snappipb.PatternFlowTcpEcnEcho) PatternFlowTcpEcnEcho {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpEcnEcho) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpEcnEcho) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnEcho) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnEcho) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnEcho) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnEcho) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpEcnEcho) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpEcnEcho interface {
	Msg() *snappipb.PatternFlowTcpEcnEcho
	SetMsg(*snappipb.PatternFlowTcpEcnEcho) PatternFlowTcpEcnEcho
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpEcnEchoChoiceEnum
	SetChoice(value PatternFlowTcpEcnEchoChoiceEnum) PatternFlowTcpEcnEcho
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpEcnEcho
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpEcnEcho
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpEcnEcho
	HasMetricGroup() bool
	Increment() PatternFlowTcpEcnEchoCounter
	SetIncrement(value PatternFlowTcpEcnEchoCounter) PatternFlowTcpEcnEcho
	HasIncrement() bool
	Decrement() PatternFlowTcpEcnEchoCounter
	SetDecrement(value PatternFlowTcpEcnEchoCounter) PatternFlowTcpEcnEcho
	HasDecrement() bool
}

type PatternFlowTcpEcnEchoChoiceEnum string

var PatternFlowTcpEcnEchoChoice = struct {
	VALUE     PatternFlowTcpEcnEchoChoiceEnum
	VALUES    PatternFlowTcpEcnEchoChoiceEnum
	INCREMENT PatternFlowTcpEcnEchoChoiceEnum
	DECREMENT PatternFlowTcpEcnEchoChoiceEnum
}{
	VALUE:     PatternFlowTcpEcnEchoChoiceEnum("value"),
	VALUES:    PatternFlowTcpEcnEchoChoiceEnum("values"),
	INCREMENT: PatternFlowTcpEcnEchoChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpEcnEchoChoiceEnum("decrement"),
}

func (obj *patternFlowTcpEcnEcho) Choice() PatternFlowTcpEcnEchoChoiceEnum {
	return PatternFlowTcpEcnEchoChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpEcnEcho) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpEcnEcho) SetChoice(value PatternFlowTcpEcnEchoChoiceEnum) PatternFlowTcpEcnEcho {
	intValue, ok := snappipb.PatternFlowTcpEcnEcho_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpEcnEchoChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpEcnEcho_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEcho) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEcho) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpEcnEcho object
//  description is TBD
func (obj *patternFlowTcpEcnEcho) SetValue(value int32) PatternFlowTcpEcnEcho {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpEcnEchoChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpEcnEcho) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpEcnEcho object
//  description is TBD
func (obj *patternFlowTcpEcnEcho) SetValues(value []int32) PatternFlowTcpEcnEcho {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpEcnEchoChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnEcho) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnEcho) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpEcnEcho object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnEcho) SetMetricGroup(value string) PatternFlowTcpEcnEcho {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpEcnEchoCounter
//  description is TBD
func (obj *patternFlowTcpEcnEcho) Increment() PatternFlowTcpEcnEchoCounter {
	obj.SetChoice(PatternFlowTcpEcnEchoChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpEcnEchoCounter().Msg()
	}
	return &patternFlowTcpEcnEchoCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpEcnEchoCounter
//  description is TBD
func (obj *patternFlowTcpEcnEcho) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpEcnEchoCounter value in the PatternFlowTcpEcnEcho object
//  description is TBD
func (obj *patternFlowTcpEcnEcho) SetIncrement(value PatternFlowTcpEcnEchoCounter) PatternFlowTcpEcnEcho {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpEcnEchoChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpEcnEchoCounter
//  description is TBD
func (obj *patternFlowTcpEcnEcho) Decrement() PatternFlowTcpEcnEchoCounter {
	obj.SetChoice(PatternFlowTcpEcnEchoChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpEcnEchoCounter().Msg()
	}
	return &patternFlowTcpEcnEchoCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpEcnEchoCounter
//  description is TBD
func (obj *patternFlowTcpEcnEcho) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpEcnEchoCounter value in the PatternFlowTcpEcnEcho object
//  description is TBD
func (obj *patternFlowTcpEcnEcho) SetDecrement(value PatternFlowTcpEcnEchoCounter) PatternFlowTcpEcnEcho {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpEcnEchoChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpEcnEcho) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnEcho.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnEcho.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpEcnEcho) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpEcnEchoChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpCtlUrg struct {
	obj *snappipb.PatternFlowTcpCtlUrg
}

func NewPatternFlowTcpCtlUrg() PatternFlowTcpCtlUrg {
	obj := patternFlowTcpCtlUrg{obj: &snappipb.PatternFlowTcpCtlUrg{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlUrg) Msg() *snappipb.PatternFlowTcpCtlUrg {
	return obj.obj
}

func (obj *patternFlowTcpCtlUrg) SetMsg(msg *snappipb.PatternFlowTcpCtlUrg) PatternFlowTcpCtlUrg {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlUrg) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlUrg) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlUrg) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlUrg) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlUrg) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlUrg) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlUrg) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlUrg interface {
	Msg() *snappipb.PatternFlowTcpCtlUrg
	SetMsg(*snappipb.PatternFlowTcpCtlUrg) PatternFlowTcpCtlUrg
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpCtlUrgChoiceEnum
	SetChoice(value PatternFlowTcpCtlUrgChoiceEnum) PatternFlowTcpCtlUrg
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlUrg
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlUrg
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlUrg
	HasMetricGroup() bool
	Increment() PatternFlowTcpCtlUrgCounter
	SetIncrement(value PatternFlowTcpCtlUrgCounter) PatternFlowTcpCtlUrg
	HasIncrement() bool
	Decrement() PatternFlowTcpCtlUrgCounter
	SetDecrement(value PatternFlowTcpCtlUrgCounter) PatternFlowTcpCtlUrg
	HasDecrement() bool
}

type PatternFlowTcpCtlUrgChoiceEnum string

var PatternFlowTcpCtlUrgChoice = struct {
	VALUE     PatternFlowTcpCtlUrgChoiceEnum
	VALUES    PatternFlowTcpCtlUrgChoiceEnum
	INCREMENT PatternFlowTcpCtlUrgChoiceEnum
	DECREMENT PatternFlowTcpCtlUrgChoiceEnum
}{
	VALUE:     PatternFlowTcpCtlUrgChoiceEnum("value"),
	VALUES:    PatternFlowTcpCtlUrgChoiceEnum("values"),
	INCREMENT: PatternFlowTcpCtlUrgChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpCtlUrgChoiceEnum("decrement"),
}

func (obj *patternFlowTcpCtlUrg) Choice() PatternFlowTcpCtlUrgChoiceEnum {
	return PatternFlowTcpCtlUrgChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpCtlUrg) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpCtlUrg) SetChoice(value PatternFlowTcpCtlUrgChoiceEnum) PatternFlowTcpCtlUrg {
	intValue, ok := snappipb.PatternFlowTcpCtlUrg_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpCtlUrgChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpCtlUrg_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrg) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrg) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpCtlUrg object
//  description is TBD
func (obj *patternFlowTcpCtlUrg) SetValue(value int32) PatternFlowTcpCtlUrg {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpCtlUrgChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlUrg) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpCtlUrg object
//  description is TBD
func (obj *patternFlowTcpCtlUrg) SetValues(value []int32) PatternFlowTcpCtlUrg {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpCtlUrgChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlUrg) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlUrg) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpCtlUrg object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlUrg) SetMetricGroup(value string) PatternFlowTcpCtlUrg {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpCtlUrgCounter
//  description is TBD
func (obj *patternFlowTcpCtlUrg) Increment() PatternFlowTcpCtlUrgCounter {
	obj.SetChoice(PatternFlowTcpCtlUrgChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpCtlUrgCounter().Msg()
	}
	return &patternFlowTcpCtlUrgCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpCtlUrgCounter
//  description is TBD
func (obj *patternFlowTcpCtlUrg) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpCtlUrgCounter value in the PatternFlowTcpCtlUrg object
//  description is TBD
func (obj *patternFlowTcpCtlUrg) SetIncrement(value PatternFlowTcpCtlUrgCounter) PatternFlowTcpCtlUrg {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlUrgChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpCtlUrgCounter
//  description is TBD
func (obj *patternFlowTcpCtlUrg) Decrement() PatternFlowTcpCtlUrgCounter {
	obj.SetChoice(PatternFlowTcpCtlUrgChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpCtlUrgCounter().Msg()
	}
	return &patternFlowTcpCtlUrgCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpCtlUrgCounter
//  description is TBD
func (obj *patternFlowTcpCtlUrg) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpCtlUrgCounter value in the PatternFlowTcpCtlUrg object
//  description is TBD
func (obj *patternFlowTcpCtlUrg) SetDecrement(value PatternFlowTcpCtlUrgCounter) PatternFlowTcpCtlUrg {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlUrgChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpCtlUrg) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlUrg.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlUrg.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpCtlUrg) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpCtlUrgChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpCtlAck struct {
	obj *snappipb.PatternFlowTcpCtlAck
}

func NewPatternFlowTcpCtlAck() PatternFlowTcpCtlAck {
	obj := patternFlowTcpCtlAck{obj: &snappipb.PatternFlowTcpCtlAck{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlAck) Msg() *snappipb.PatternFlowTcpCtlAck {
	return obj.obj
}

func (obj *patternFlowTcpCtlAck) SetMsg(msg *snappipb.PatternFlowTcpCtlAck) PatternFlowTcpCtlAck {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlAck) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlAck) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlAck) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlAck) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlAck) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlAck) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlAck) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlAck interface {
	Msg() *snappipb.PatternFlowTcpCtlAck
	SetMsg(*snappipb.PatternFlowTcpCtlAck) PatternFlowTcpCtlAck
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpCtlAckChoiceEnum
	SetChoice(value PatternFlowTcpCtlAckChoiceEnum) PatternFlowTcpCtlAck
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlAck
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlAck
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlAck
	HasMetricGroup() bool
	Increment() PatternFlowTcpCtlAckCounter
	SetIncrement(value PatternFlowTcpCtlAckCounter) PatternFlowTcpCtlAck
	HasIncrement() bool
	Decrement() PatternFlowTcpCtlAckCounter
	SetDecrement(value PatternFlowTcpCtlAckCounter) PatternFlowTcpCtlAck
	HasDecrement() bool
}

type PatternFlowTcpCtlAckChoiceEnum string

var PatternFlowTcpCtlAckChoice = struct {
	VALUE     PatternFlowTcpCtlAckChoiceEnum
	VALUES    PatternFlowTcpCtlAckChoiceEnum
	INCREMENT PatternFlowTcpCtlAckChoiceEnum
	DECREMENT PatternFlowTcpCtlAckChoiceEnum
}{
	VALUE:     PatternFlowTcpCtlAckChoiceEnum("value"),
	VALUES:    PatternFlowTcpCtlAckChoiceEnum("values"),
	INCREMENT: PatternFlowTcpCtlAckChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpCtlAckChoiceEnum("decrement"),
}

func (obj *patternFlowTcpCtlAck) Choice() PatternFlowTcpCtlAckChoiceEnum {
	return PatternFlowTcpCtlAckChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpCtlAck) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpCtlAck) SetChoice(value PatternFlowTcpCtlAckChoiceEnum) PatternFlowTcpCtlAck {
	intValue, ok := snappipb.PatternFlowTcpCtlAck_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpCtlAckChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpCtlAck_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAck) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAck) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpCtlAck object
//  description is TBD
func (obj *patternFlowTcpCtlAck) SetValue(value int32) PatternFlowTcpCtlAck {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpCtlAckChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlAck) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpCtlAck object
//  description is TBD
func (obj *patternFlowTcpCtlAck) SetValues(value []int32) PatternFlowTcpCtlAck {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpCtlAckChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlAck) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlAck) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpCtlAck object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlAck) SetMetricGroup(value string) PatternFlowTcpCtlAck {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpCtlAckCounter
//  description is TBD
func (obj *patternFlowTcpCtlAck) Increment() PatternFlowTcpCtlAckCounter {
	obj.SetChoice(PatternFlowTcpCtlAckChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpCtlAckCounter().Msg()
	}
	return &patternFlowTcpCtlAckCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpCtlAckCounter
//  description is TBD
func (obj *patternFlowTcpCtlAck) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpCtlAckCounter value in the PatternFlowTcpCtlAck object
//  description is TBD
func (obj *patternFlowTcpCtlAck) SetIncrement(value PatternFlowTcpCtlAckCounter) PatternFlowTcpCtlAck {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlAckChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpCtlAckCounter
//  description is TBD
func (obj *patternFlowTcpCtlAck) Decrement() PatternFlowTcpCtlAckCounter {
	obj.SetChoice(PatternFlowTcpCtlAckChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpCtlAckCounter().Msg()
	}
	return &patternFlowTcpCtlAckCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpCtlAckCounter
//  description is TBD
func (obj *patternFlowTcpCtlAck) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpCtlAckCounter value in the PatternFlowTcpCtlAck object
//  description is TBD
func (obj *patternFlowTcpCtlAck) SetDecrement(value PatternFlowTcpCtlAckCounter) PatternFlowTcpCtlAck {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlAckChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpCtlAck) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlAck.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlAck.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpCtlAck) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpCtlAckChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpCtlPsh struct {
	obj *snappipb.PatternFlowTcpCtlPsh
}

func NewPatternFlowTcpCtlPsh() PatternFlowTcpCtlPsh {
	obj := patternFlowTcpCtlPsh{obj: &snappipb.PatternFlowTcpCtlPsh{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlPsh) Msg() *snappipb.PatternFlowTcpCtlPsh {
	return obj.obj
}

func (obj *patternFlowTcpCtlPsh) SetMsg(msg *snappipb.PatternFlowTcpCtlPsh) PatternFlowTcpCtlPsh {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlPsh) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlPsh) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlPsh) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlPsh) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlPsh) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlPsh) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlPsh) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlPsh interface {
	Msg() *snappipb.PatternFlowTcpCtlPsh
	SetMsg(*snappipb.PatternFlowTcpCtlPsh) PatternFlowTcpCtlPsh
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpCtlPshChoiceEnum
	SetChoice(value PatternFlowTcpCtlPshChoiceEnum) PatternFlowTcpCtlPsh
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlPsh
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlPsh
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlPsh
	HasMetricGroup() bool
	Increment() PatternFlowTcpCtlPshCounter
	SetIncrement(value PatternFlowTcpCtlPshCounter) PatternFlowTcpCtlPsh
	HasIncrement() bool
	Decrement() PatternFlowTcpCtlPshCounter
	SetDecrement(value PatternFlowTcpCtlPshCounter) PatternFlowTcpCtlPsh
	HasDecrement() bool
}

type PatternFlowTcpCtlPshChoiceEnum string

var PatternFlowTcpCtlPshChoice = struct {
	VALUE     PatternFlowTcpCtlPshChoiceEnum
	VALUES    PatternFlowTcpCtlPshChoiceEnum
	INCREMENT PatternFlowTcpCtlPshChoiceEnum
	DECREMENT PatternFlowTcpCtlPshChoiceEnum
}{
	VALUE:     PatternFlowTcpCtlPshChoiceEnum("value"),
	VALUES:    PatternFlowTcpCtlPshChoiceEnum("values"),
	INCREMENT: PatternFlowTcpCtlPshChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpCtlPshChoiceEnum("decrement"),
}

func (obj *patternFlowTcpCtlPsh) Choice() PatternFlowTcpCtlPshChoiceEnum {
	return PatternFlowTcpCtlPshChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpCtlPsh) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpCtlPsh) SetChoice(value PatternFlowTcpCtlPshChoiceEnum) PatternFlowTcpCtlPsh {
	intValue, ok := snappipb.PatternFlowTcpCtlPsh_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpCtlPshChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpCtlPsh_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPsh) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPsh) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpCtlPsh object
//  description is TBD
func (obj *patternFlowTcpCtlPsh) SetValue(value int32) PatternFlowTcpCtlPsh {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpCtlPshChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlPsh) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpCtlPsh object
//  description is TBD
func (obj *patternFlowTcpCtlPsh) SetValues(value []int32) PatternFlowTcpCtlPsh {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpCtlPshChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlPsh) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlPsh) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpCtlPsh object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlPsh) SetMetricGroup(value string) PatternFlowTcpCtlPsh {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpCtlPshCounter
//  description is TBD
func (obj *patternFlowTcpCtlPsh) Increment() PatternFlowTcpCtlPshCounter {
	obj.SetChoice(PatternFlowTcpCtlPshChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpCtlPshCounter().Msg()
	}
	return &patternFlowTcpCtlPshCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpCtlPshCounter
//  description is TBD
func (obj *patternFlowTcpCtlPsh) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpCtlPshCounter value in the PatternFlowTcpCtlPsh object
//  description is TBD
func (obj *patternFlowTcpCtlPsh) SetIncrement(value PatternFlowTcpCtlPshCounter) PatternFlowTcpCtlPsh {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlPshChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpCtlPshCounter
//  description is TBD
func (obj *patternFlowTcpCtlPsh) Decrement() PatternFlowTcpCtlPshCounter {
	obj.SetChoice(PatternFlowTcpCtlPshChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpCtlPshCounter().Msg()
	}
	return &patternFlowTcpCtlPshCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpCtlPshCounter
//  description is TBD
func (obj *patternFlowTcpCtlPsh) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpCtlPshCounter value in the PatternFlowTcpCtlPsh object
//  description is TBD
func (obj *patternFlowTcpCtlPsh) SetDecrement(value PatternFlowTcpCtlPshCounter) PatternFlowTcpCtlPsh {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlPshChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpCtlPsh) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlPsh.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlPsh.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpCtlPsh) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpCtlPshChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpCtlRst struct {
	obj *snappipb.PatternFlowTcpCtlRst
}

func NewPatternFlowTcpCtlRst() PatternFlowTcpCtlRst {
	obj := patternFlowTcpCtlRst{obj: &snappipb.PatternFlowTcpCtlRst{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlRst) Msg() *snappipb.PatternFlowTcpCtlRst {
	return obj.obj
}

func (obj *patternFlowTcpCtlRst) SetMsg(msg *snappipb.PatternFlowTcpCtlRst) PatternFlowTcpCtlRst {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlRst) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlRst) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlRst) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlRst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlRst) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlRst) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlRst) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlRst interface {
	Msg() *snappipb.PatternFlowTcpCtlRst
	SetMsg(*snappipb.PatternFlowTcpCtlRst) PatternFlowTcpCtlRst
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpCtlRstChoiceEnum
	SetChoice(value PatternFlowTcpCtlRstChoiceEnum) PatternFlowTcpCtlRst
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlRst
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlRst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlRst
	HasMetricGroup() bool
	Increment() PatternFlowTcpCtlRstCounter
	SetIncrement(value PatternFlowTcpCtlRstCounter) PatternFlowTcpCtlRst
	HasIncrement() bool
	Decrement() PatternFlowTcpCtlRstCounter
	SetDecrement(value PatternFlowTcpCtlRstCounter) PatternFlowTcpCtlRst
	HasDecrement() bool
}

type PatternFlowTcpCtlRstChoiceEnum string

var PatternFlowTcpCtlRstChoice = struct {
	VALUE     PatternFlowTcpCtlRstChoiceEnum
	VALUES    PatternFlowTcpCtlRstChoiceEnum
	INCREMENT PatternFlowTcpCtlRstChoiceEnum
	DECREMENT PatternFlowTcpCtlRstChoiceEnum
}{
	VALUE:     PatternFlowTcpCtlRstChoiceEnum("value"),
	VALUES:    PatternFlowTcpCtlRstChoiceEnum("values"),
	INCREMENT: PatternFlowTcpCtlRstChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpCtlRstChoiceEnum("decrement"),
}

func (obj *patternFlowTcpCtlRst) Choice() PatternFlowTcpCtlRstChoiceEnum {
	return PatternFlowTcpCtlRstChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpCtlRst) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpCtlRst) SetChoice(value PatternFlowTcpCtlRstChoiceEnum) PatternFlowTcpCtlRst {
	intValue, ok := snappipb.PatternFlowTcpCtlRst_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpCtlRstChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpCtlRst_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRst) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRst) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpCtlRst object
//  description is TBD
func (obj *patternFlowTcpCtlRst) SetValue(value int32) PatternFlowTcpCtlRst {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpCtlRstChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlRst) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpCtlRst object
//  description is TBD
func (obj *patternFlowTcpCtlRst) SetValues(value []int32) PatternFlowTcpCtlRst {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpCtlRstChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlRst) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlRst) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpCtlRst object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlRst) SetMetricGroup(value string) PatternFlowTcpCtlRst {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpCtlRstCounter
//  description is TBD
func (obj *patternFlowTcpCtlRst) Increment() PatternFlowTcpCtlRstCounter {
	obj.SetChoice(PatternFlowTcpCtlRstChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpCtlRstCounter().Msg()
	}
	return &patternFlowTcpCtlRstCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpCtlRstCounter
//  description is TBD
func (obj *patternFlowTcpCtlRst) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpCtlRstCounter value in the PatternFlowTcpCtlRst object
//  description is TBD
func (obj *patternFlowTcpCtlRst) SetIncrement(value PatternFlowTcpCtlRstCounter) PatternFlowTcpCtlRst {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlRstChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpCtlRstCounter
//  description is TBD
func (obj *patternFlowTcpCtlRst) Decrement() PatternFlowTcpCtlRstCounter {
	obj.SetChoice(PatternFlowTcpCtlRstChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpCtlRstCounter().Msg()
	}
	return &patternFlowTcpCtlRstCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpCtlRstCounter
//  description is TBD
func (obj *patternFlowTcpCtlRst) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpCtlRstCounter value in the PatternFlowTcpCtlRst object
//  description is TBD
func (obj *patternFlowTcpCtlRst) SetDecrement(value PatternFlowTcpCtlRstCounter) PatternFlowTcpCtlRst {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlRstChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpCtlRst) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlRst.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlRst.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpCtlRst) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpCtlRstChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpCtlSyn struct {
	obj *snappipb.PatternFlowTcpCtlSyn
}

func NewPatternFlowTcpCtlSyn() PatternFlowTcpCtlSyn {
	obj := patternFlowTcpCtlSyn{obj: &snappipb.PatternFlowTcpCtlSyn{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlSyn) Msg() *snappipb.PatternFlowTcpCtlSyn {
	return obj.obj
}

func (obj *patternFlowTcpCtlSyn) SetMsg(msg *snappipb.PatternFlowTcpCtlSyn) PatternFlowTcpCtlSyn {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlSyn) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlSyn) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlSyn) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlSyn) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlSyn) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlSyn) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlSyn) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlSyn interface {
	Msg() *snappipb.PatternFlowTcpCtlSyn
	SetMsg(*snappipb.PatternFlowTcpCtlSyn) PatternFlowTcpCtlSyn
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpCtlSynChoiceEnum
	SetChoice(value PatternFlowTcpCtlSynChoiceEnum) PatternFlowTcpCtlSyn
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlSyn
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlSyn
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlSyn
	HasMetricGroup() bool
	Increment() PatternFlowTcpCtlSynCounter
	SetIncrement(value PatternFlowTcpCtlSynCounter) PatternFlowTcpCtlSyn
	HasIncrement() bool
	Decrement() PatternFlowTcpCtlSynCounter
	SetDecrement(value PatternFlowTcpCtlSynCounter) PatternFlowTcpCtlSyn
	HasDecrement() bool
}

type PatternFlowTcpCtlSynChoiceEnum string

var PatternFlowTcpCtlSynChoice = struct {
	VALUE     PatternFlowTcpCtlSynChoiceEnum
	VALUES    PatternFlowTcpCtlSynChoiceEnum
	INCREMENT PatternFlowTcpCtlSynChoiceEnum
	DECREMENT PatternFlowTcpCtlSynChoiceEnum
}{
	VALUE:     PatternFlowTcpCtlSynChoiceEnum("value"),
	VALUES:    PatternFlowTcpCtlSynChoiceEnum("values"),
	INCREMENT: PatternFlowTcpCtlSynChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpCtlSynChoiceEnum("decrement"),
}

func (obj *patternFlowTcpCtlSyn) Choice() PatternFlowTcpCtlSynChoiceEnum {
	return PatternFlowTcpCtlSynChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpCtlSyn) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpCtlSyn) SetChoice(value PatternFlowTcpCtlSynChoiceEnum) PatternFlowTcpCtlSyn {
	intValue, ok := snappipb.PatternFlowTcpCtlSyn_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpCtlSynChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpCtlSyn_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSyn) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSyn) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpCtlSyn object
//  description is TBD
func (obj *patternFlowTcpCtlSyn) SetValue(value int32) PatternFlowTcpCtlSyn {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpCtlSynChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlSyn) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpCtlSyn object
//  description is TBD
func (obj *patternFlowTcpCtlSyn) SetValues(value []int32) PatternFlowTcpCtlSyn {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpCtlSynChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlSyn) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlSyn) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpCtlSyn object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlSyn) SetMetricGroup(value string) PatternFlowTcpCtlSyn {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpCtlSynCounter
//  description is TBD
func (obj *patternFlowTcpCtlSyn) Increment() PatternFlowTcpCtlSynCounter {
	obj.SetChoice(PatternFlowTcpCtlSynChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpCtlSynCounter().Msg()
	}
	return &patternFlowTcpCtlSynCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpCtlSynCounter
//  description is TBD
func (obj *patternFlowTcpCtlSyn) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpCtlSynCounter value in the PatternFlowTcpCtlSyn object
//  description is TBD
func (obj *patternFlowTcpCtlSyn) SetIncrement(value PatternFlowTcpCtlSynCounter) PatternFlowTcpCtlSyn {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlSynChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpCtlSynCounter
//  description is TBD
func (obj *patternFlowTcpCtlSyn) Decrement() PatternFlowTcpCtlSynCounter {
	obj.SetChoice(PatternFlowTcpCtlSynChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpCtlSynCounter().Msg()
	}
	return &patternFlowTcpCtlSynCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpCtlSynCounter
//  description is TBD
func (obj *patternFlowTcpCtlSyn) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpCtlSynCounter value in the PatternFlowTcpCtlSyn object
//  description is TBD
func (obj *patternFlowTcpCtlSyn) SetDecrement(value PatternFlowTcpCtlSynCounter) PatternFlowTcpCtlSyn {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlSynChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpCtlSyn) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlSyn.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlSyn.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpCtlSyn) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpCtlSynChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpCtlFin struct {
	obj *snappipb.PatternFlowTcpCtlFin
}

func NewPatternFlowTcpCtlFin() PatternFlowTcpCtlFin {
	obj := patternFlowTcpCtlFin{obj: &snappipb.PatternFlowTcpCtlFin{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlFin) Msg() *snappipb.PatternFlowTcpCtlFin {
	return obj.obj
}

func (obj *patternFlowTcpCtlFin) SetMsg(msg *snappipb.PatternFlowTcpCtlFin) PatternFlowTcpCtlFin {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlFin) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlFin) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlFin) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlFin) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlFin) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlFin) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlFin) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlFin interface {
	Msg() *snappipb.PatternFlowTcpCtlFin
	SetMsg(*snappipb.PatternFlowTcpCtlFin) PatternFlowTcpCtlFin
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpCtlFinChoiceEnum
	SetChoice(value PatternFlowTcpCtlFinChoiceEnum) PatternFlowTcpCtlFin
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlFin
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlFin
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlFin
	HasMetricGroup() bool
	Increment() PatternFlowTcpCtlFinCounter
	SetIncrement(value PatternFlowTcpCtlFinCounter) PatternFlowTcpCtlFin
	HasIncrement() bool
	Decrement() PatternFlowTcpCtlFinCounter
	SetDecrement(value PatternFlowTcpCtlFinCounter) PatternFlowTcpCtlFin
	HasDecrement() bool
}

type PatternFlowTcpCtlFinChoiceEnum string

var PatternFlowTcpCtlFinChoice = struct {
	VALUE     PatternFlowTcpCtlFinChoiceEnum
	VALUES    PatternFlowTcpCtlFinChoiceEnum
	INCREMENT PatternFlowTcpCtlFinChoiceEnum
	DECREMENT PatternFlowTcpCtlFinChoiceEnum
}{
	VALUE:     PatternFlowTcpCtlFinChoiceEnum("value"),
	VALUES:    PatternFlowTcpCtlFinChoiceEnum("values"),
	INCREMENT: PatternFlowTcpCtlFinChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpCtlFinChoiceEnum("decrement"),
}

func (obj *patternFlowTcpCtlFin) Choice() PatternFlowTcpCtlFinChoiceEnum {
	return PatternFlowTcpCtlFinChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpCtlFin) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpCtlFin) SetChoice(value PatternFlowTcpCtlFinChoiceEnum) PatternFlowTcpCtlFin {
	intValue, ok := snappipb.PatternFlowTcpCtlFin_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpCtlFinChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpCtlFin_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFin) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFin) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpCtlFin object
//  description is TBD
func (obj *patternFlowTcpCtlFin) SetValue(value int32) PatternFlowTcpCtlFin {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpCtlFinChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlFin) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpCtlFin object
//  description is TBD
func (obj *patternFlowTcpCtlFin) SetValues(value []int32) PatternFlowTcpCtlFin {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpCtlFinChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlFin) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlFin) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpCtlFin object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlFin) SetMetricGroup(value string) PatternFlowTcpCtlFin {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpCtlFinCounter
//  description is TBD
func (obj *patternFlowTcpCtlFin) Increment() PatternFlowTcpCtlFinCounter {
	obj.SetChoice(PatternFlowTcpCtlFinChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpCtlFinCounter().Msg()
	}
	return &patternFlowTcpCtlFinCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpCtlFinCounter
//  description is TBD
func (obj *patternFlowTcpCtlFin) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpCtlFinCounter value in the PatternFlowTcpCtlFin object
//  description is TBD
func (obj *patternFlowTcpCtlFin) SetIncrement(value PatternFlowTcpCtlFinCounter) PatternFlowTcpCtlFin {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlFinChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpCtlFinCounter
//  description is TBD
func (obj *patternFlowTcpCtlFin) Decrement() PatternFlowTcpCtlFinCounter {
	obj.SetChoice(PatternFlowTcpCtlFinChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpCtlFinCounter().Msg()
	}
	return &patternFlowTcpCtlFinCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpCtlFinCounter
//  description is TBD
func (obj *patternFlowTcpCtlFin) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpCtlFinCounter value in the PatternFlowTcpCtlFin object
//  description is TBD
func (obj *patternFlowTcpCtlFin) SetDecrement(value PatternFlowTcpCtlFinCounter) PatternFlowTcpCtlFin {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpCtlFinChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpCtlFin) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlFin.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlFin.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpCtlFin) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpCtlFinChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowTcpWindow struct {
	obj *snappipb.PatternFlowTcpWindow
}

func NewPatternFlowTcpWindow() PatternFlowTcpWindow {
	obj := patternFlowTcpWindow{obj: &snappipb.PatternFlowTcpWindow{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpWindow) Msg() *snappipb.PatternFlowTcpWindow {
	return obj.obj
}

func (obj *patternFlowTcpWindow) SetMsg(msg *snappipb.PatternFlowTcpWindow) PatternFlowTcpWindow {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpWindow) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpWindow) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpWindow) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpWindow) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpWindow) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpWindow) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpWindow) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpWindow interface {
	Msg() *snappipb.PatternFlowTcpWindow
	SetMsg(*snappipb.PatternFlowTcpWindow) PatternFlowTcpWindow
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowTcpWindowChoiceEnum
	SetChoice(value PatternFlowTcpWindowChoiceEnum) PatternFlowTcpWindow
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowTcpWindow
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowTcpWindow
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpWindow
	HasMetricGroup() bool
	Increment() PatternFlowTcpWindowCounter
	SetIncrement(value PatternFlowTcpWindowCounter) PatternFlowTcpWindow
	HasIncrement() bool
	Decrement() PatternFlowTcpWindowCounter
	SetDecrement(value PatternFlowTcpWindowCounter) PatternFlowTcpWindow
	HasDecrement() bool
}

type PatternFlowTcpWindowChoiceEnum string

var PatternFlowTcpWindowChoice = struct {
	VALUE     PatternFlowTcpWindowChoiceEnum
	VALUES    PatternFlowTcpWindowChoiceEnum
	INCREMENT PatternFlowTcpWindowChoiceEnum
	DECREMENT PatternFlowTcpWindowChoiceEnum
}{
	VALUE:     PatternFlowTcpWindowChoiceEnum("value"),
	VALUES:    PatternFlowTcpWindowChoiceEnum("values"),
	INCREMENT: PatternFlowTcpWindowChoiceEnum("increment"),
	DECREMENT: PatternFlowTcpWindowChoiceEnum("decrement"),
}

func (obj *patternFlowTcpWindow) Choice() PatternFlowTcpWindowChoiceEnum {
	return PatternFlowTcpWindowChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowTcpWindow) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowTcpWindow) SetChoice(value PatternFlowTcpWindowChoiceEnum) PatternFlowTcpWindow {
	intValue, ok := snappipb.PatternFlowTcpWindow_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowTcpWindowChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowTcpWindow_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpWindow) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpWindow) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowTcpWindow object
//  description is TBD
func (obj *patternFlowTcpWindow) SetValue(value int32) PatternFlowTcpWindow {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowTcpWindowChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpWindow) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowTcpWindow object
//  description is TBD
func (obj *patternFlowTcpWindow) SetValues(value []int32) PatternFlowTcpWindow {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowTcpWindowChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpWindow) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpWindow) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowTcpWindow object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpWindow) SetMetricGroup(value string) PatternFlowTcpWindow {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowTcpWindowCounter
//  description is TBD
func (obj *patternFlowTcpWindow) Increment() PatternFlowTcpWindowCounter {
	obj.SetChoice(PatternFlowTcpWindowChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowTcpWindowCounter().Msg()
	}
	return &patternFlowTcpWindowCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowTcpWindowCounter
//  description is TBD
func (obj *patternFlowTcpWindow) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowTcpWindowCounter value in the PatternFlowTcpWindow object
//  description is TBD
func (obj *patternFlowTcpWindow) SetIncrement(value PatternFlowTcpWindowCounter) PatternFlowTcpWindow {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpWindowChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowTcpWindowCounter
//  description is TBD
func (obj *patternFlowTcpWindow) Decrement() PatternFlowTcpWindowCounter {
	obj.SetChoice(PatternFlowTcpWindowChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowTcpWindowCounter().Msg()
	}
	return &patternFlowTcpWindowCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowTcpWindowCounter
//  description is TBD
func (obj *patternFlowTcpWindow) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowTcpWindowCounter value in the PatternFlowTcpWindow object
//  description is TBD
func (obj *patternFlowTcpWindow) SetDecrement(value PatternFlowTcpWindowCounter) PatternFlowTcpWindow {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowTcpWindowChoice.DECREMENT)
	return obj
}

func (obj *patternFlowTcpWindow) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpWindow.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpWindow.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowTcpWindow) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowTcpWindowChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowUdpSrcPort struct {
	obj *snappipb.PatternFlowUdpSrcPort
}

func NewPatternFlowUdpSrcPort() PatternFlowUdpSrcPort {
	obj := patternFlowUdpSrcPort{obj: &snappipb.PatternFlowUdpSrcPort{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowUdpSrcPort) Msg() *snappipb.PatternFlowUdpSrcPort {
	return obj.obj
}

func (obj *patternFlowUdpSrcPort) SetMsg(msg *snappipb.PatternFlowUdpSrcPort) PatternFlowUdpSrcPort {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowUdpSrcPort) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowUdpSrcPort) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpSrcPort) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpSrcPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpSrcPort) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpSrcPort) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowUdpSrcPort) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowUdpSrcPort interface {
	Msg() *snappipb.PatternFlowUdpSrcPort
	SetMsg(*snappipb.PatternFlowUdpSrcPort) PatternFlowUdpSrcPort
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowUdpSrcPortChoiceEnum
	SetChoice(value PatternFlowUdpSrcPortChoiceEnum) PatternFlowUdpSrcPort
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowUdpSrcPort
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowUdpSrcPort
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowUdpSrcPort
	HasMetricGroup() bool
	Increment() PatternFlowUdpSrcPortCounter
	SetIncrement(value PatternFlowUdpSrcPortCounter) PatternFlowUdpSrcPort
	HasIncrement() bool
	Decrement() PatternFlowUdpSrcPortCounter
	SetDecrement(value PatternFlowUdpSrcPortCounter) PatternFlowUdpSrcPort
	HasDecrement() bool
}

type PatternFlowUdpSrcPortChoiceEnum string

var PatternFlowUdpSrcPortChoice = struct {
	VALUE     PatternFlowUdpSrcPortChoiceEnum
	VALUES    PatternFlowUdpSrcPortChoiceEnum
	INCREMENT PatternFlowUdpSrcPortChoiceEnum
	DECREMENT PatternFlowUdpSrcPortChoiceEnum
}{
	VALUE:     PatternFlowUdpSrcPortChoiceEnum("value"),
	VALUES:    PatternFlowUdpSrcPortChoiceEnum("values"),
	INCREMENT: PatternFlowUdpSrcPortChoiceEnum("increment"),
	DECREMENT: PatternFlowUdpSrcPortChoiceEnum("decrement"),
}

func (obj *patternFlowUdpSrcPort) Choice() PatternFlowUdpSrcPortChoiceEnum {
	return PatternFlowUdpSrcPortChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowUdpSrcPort) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowUdpSrcPort) SetChoice(value PatternFlowUdpSrcPortChoiceEnum) PatternFlowUdpSrcPort {
	intValue, ok := snappipb.PatternFlowUdpSrcPort_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowUdpSrcPortChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowUdpSrcPort_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPort) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPort) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowUdpSrcPort object
//  description is TBD
func (obj *patternFlowUdpSrcPort) SetValue(value int32) PatternFlowUdpSrcPort {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowUdpSrcPortChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowUdpSrcPort) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowUdpSrcPort object
//  description is TBD
func (obj *patternFlowUdpSrcPort) SetValues(value []int32) PatternFlowUdpSrcPort {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowUdpSrcPortChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpSrcPort) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpSrcPort) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowUdpSrcPort object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpSrcPort) SetMetricGroup(value string) PatternFlowUdpSrcPort {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowUdpSrcPortCounter
//  description is TBD
func (obj *patternFlowUdpSrcPort) Increment() PatternFlowUdpSrcPortCounter {
	obj.SetChoice(PatternFlowUdpSrcPortChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowUdpSrcPortCounter().Msg()
	}
	return &patternFlowUdpSrcPortCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowUdpSrcPortCounter
//  description is TBD
func (obj *patternFlowUdpSrcPort) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowUdpSrcPortCounter value in the PatternFlowUdpSrcPort object
//  description is TBD
func (obj *patternFlowUdpSrcPort) SetIncrement(value PatternFlowUdpSrcPortCounter) PatternFlowUdpSrcPort {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowUdpSrcPortChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowUdpSrcPortCounter
//  description is TBD
func (obj *patternFlowUdpSrcPort) Decrement() PatternFlowUdpSrcPortCounter {
	obj.SetChoice(PatternFlowUdpSrcPortChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowUdpSrcPortCounter().Msg()
	}
	return &patternFlowUdpSrcPortCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowUdpSrcPortCounter
//  description is TBD
func (obj *patternFlowUdpSrcPort) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowUdpSrcPortCounter value in the PatternFlowUdpSrcPort object
//  description is TBD
func (obj *patternFlowUdpSrcPort) SetDecrement(value PatternFlowUdpSrcPortCounter) PatternFlowUdpSrcPort {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowUdpSrcPortChoice.DECREMENT)
	return obj
}

func (obj *patternFlowUdpSrcPort) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpSrcPort.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpSrcPort.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowUdpSrcPort) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowUdpSrcPortChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowUdpDstPort struct {
	obj *snappipb.PatternFlowUdpDstPort
}

func NewPatternFlowUdpDstPort() PatternFlowUdpDstPort {
	obj := patternFlowUdpDstPort{obj: &snappipb.PatternFlowUdpDstPort{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowUdpDstPort) Msg() *snappipb.PatternFlowUdpDstPort {
	return obj.obj
}

func (obj *patternFlowUdpDstPort) SetMsg(msg *snappipb.PatternFlowUdpDstPort) PatternFlowUdpDstPort {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowUdpDstPort) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowUdpDstPort) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpDstPort) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpDstPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpDstPort) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpDstPort) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowUdpDstPort) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowUdpDstPort interface {
	Msg() *snappipb.PatternFlowUdpDstPort
	SetMsg(*snappipb.PatternFlowUdpDstPort) PatternFlowUdpDstPort
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowUdpDstPortChoiceEnum
	SetChoice(value PatternFlowUdpDstPortChoiceEnum) PatternFlowUdpDstPort
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowUdpDstPort
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowUdpDstPort
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowUdpDstPort
	HasMetricGroup() bool
	Increment() PatternFlowUdpDstPortCounter
	SetIncrement(value PatternFlowUdpDstPortCounter) PatternFlowUdpDstPort
	HasIncrement() bool
	Decrement() PatternFlowUdpDstPortCounter
	SetDecrement(value PatternFlowUdpDstPortCounter) PatternFlowUdpDstPort
	HasDecrement() bool
}

type PatternFlowUdpDstPortChoiceEnum string

var PatternFlowUdpDstPortChoice = struct {
	VALUE     PatternFlowUdpDstPortChoiceEnum
	VALUES    PatternFlowUdpDstPortChoiceEnum
	INCREMENT PatternFlowUdpDstPortChoiceEnum
	DECREMENT PatternFlowUdpDstPortChoiceEnum
}{
	VALUE:     PatternFlowUdpDstPortChoiceEnum("value"),
	VALUES:    PatternFlowUdpDstPortChoiceEnum("values"),
	INCREMENT: PatternFlowUdpDstPortChoiceEnum("increment"),
	DECREMENT: PatternFlowUdpDstPortChoiceEnum("decrement"),
}

func (obj *patternFlowUdpDstPort) Choice() PatternFlowUdpDstPortChoiceEnum {
	return PatternFlowUdpDstPortChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowUdpDstPort) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowUdpDstPort) SetChoice(value PatternFlowUdpDstPortChoiceEnum) PatternFlowUdpDstPort {
	intValue, ok := snappipb.PatternFlowUdpDstPort_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowUdpDstPortChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowUdpDstPort_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPort) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPort) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowUdpDstPort object
//  description is TBD
func (obj *patternFlowUdpDstPort) SetValue(value int32) PatternFlowUdpDstPort {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowUdpDstPortChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowUdpDstPort) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowUdpDstPort object
//  description is TBD
func (obj *patternFlowUdpDstPort) SetValues(value []int32) PatternFlowUdpDstPort {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowUdpDstPortChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpDstPort) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpDstPort) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowUdpDstPort object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpDstPort) SetMetricGroup(value string) PatternFlowUdpDstPort {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowUdpDstPortCounter
//  description is TBD
func (obj *patternFlowUdpDstPort) Increment() PatternFlowUdpDstPortCounter {
	obj.SetChoice(PatternFlowUdpDstPortChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowUdpDstPortCounter().Msg()
	}
	return &patternFlowUdpDstPortCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowUdpDstPortCounter
//  description is TBD
func (obj *patternFlowUdpDstPort) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowUdpDstPortCounter value in the PatternFlowUdpDstPort object
//  description is TBD
func (obj *patternFlowUdpDstPort) SetIncrement(value PatternFlowUdpDstPortCounter) PatternFlowUdpDstPort {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowUdpDstPortChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowUdpDstPortCounter
//  description is TBD
func (obj *patternFlowUdpDstPort) Decrement() PatternFlowUdpDstPortCounter {
	obj.SetChoice(PatternFlowUdpDstPortChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowUdpDstPortCounter().Msg()
	}
	return &patternFlowUdpDstPortCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowUdpDstPortCounter
//  description is TBD
func (obj *patternFlowUdpDstPort) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowUdpDstPortCounter value in the PatternFlowUdpDstPort object
//  description is TBD
func (obj *patternFlowUdpDstPort) SetDecrement(value PatternFlowUdpDstPortCounter) PatternFlowUdpDstPort {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowUdpDstPortChoice.DECREMENT)
	return obj
}

func (obj *patternFlowUdpDstPort) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpDstPort.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpDstPort.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowUdpDstPort) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowUdpDstPortChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowUdpLength struct {
	obj *snappipb.PatternFlowUdpLength
}

func NewPatternFlowUdpLength() PatternFlowUdpLength {
	obj := patternFlowUdpLength{obj: &snappipb.PatternFlowUdpLength{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowUdpLength) Msg() *snappipb.PatternFlowUdpLength {
	return obj.obj
}

func (obj *patternFlowUdpLength) SetMsg(msg *snappipb.PatternFlowUdpLength) PatternFlowUdpLength {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowUdpLength) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowUdpLength) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpLength) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpLength) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpLength) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowUdpLength) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowUdpLength interface {
	Msg() *snappipb.PatternFlowUdpLength
	SetMsg(*snappipb.PatternFlowUdpLength) PatternFlowUdpLength
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowUdpLengthChoiceEnum
	SetChoice(value PatternFlowUdpLengthChoiceEnum) PatternFlowUdpLength
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowUdpLength
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowUdpLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowUdpLength
	HasMetricGroup() bool
	Increment() PatternFlowUdpLengthCounter
	SetIncrement(value PatternFlowUdpLengthCounter) PatternFlowUdpLength
	HasIncrement() bool
	Decrement() PatternFlowUdpLengthCounter
	SetDecrement(value PatternFlowUdpLengthCounter) PatternFlowUdpLength
	HasDecrement() bool
}

type PatternFlowUdpLengthChoiceEnum string

var PatternFlowUdpLengthChoice = struct {
	VALUE     PatternFlowUdpLengthChoiceEnum
	VALUES    PatternFlowUdpLengthChoiceEnum
	INCREMENT PatternFlowUdpLengthChoiceEnum
	DECREMENT PatternFlowUdpLengthChoiceEnum
}{
	VALUE:     PatternFlowUdpLengthChoiceEnum("value"),
	VALUES:    PatternFlowUdpLengthChoiceEnum("values"),
	INCREMENT: PatternFlowUdpLengthChoiceEnum("increment"),
	DECREMENT: PatternFlowUdpLengthChoiceEnum("decrement"),
}

func (obj *patternFlowUdpLength) Choice() PatternFlowUdpLengthChoiceEnum {
	return PatternFlowUdpLengthChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowUdpLength) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowUdpLength) SetChoice(value PatternFlowUdpLengthChoiceEnum) PatternFlowUdpLength {
	intValue, ok := snappipb.PatternFlowUdpLength_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowUdpLengthChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowUdpLength_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowUdpLength) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowUdpLength) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowUdpLength object
//  description is TBD
func (obj *patternFlowUdpLength) SetValue(value int32) PatternFlowUdpLength {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowUdpLengthChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowUdpLength) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowUdpLength object
//  description is TBD
func (obj *patternFlowUdpLength) SetValues(value []int32) PatternFlowUdpLength {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowUdpLengthChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpLength) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpLength) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowUdpLength object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpLength) SetMetricGroup(value string) PatternFlowUdpLength {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowUdpLengthCounter
//  description is TBD
func (obj *patternFlowUdpLength) Increment() PatternFlowUdpLengthCounter {
	obj.SetChoice(PatternFlowUdpLengthChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowUdpLengthCounter().Msg()
	}
	return &patternFlowUdpLengthCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowUdpLengthCounter
//  description is TBD
func (obj *patternFlowUdpLength) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowUdpLengthCounter value in the PatternFlowUdpLength object
//  description is TBD
func (obj *patternFlowUdpLength) SetIncrement(value PatternFlowUdpLengthCounter) PatternFlowUdpLength {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowUdpLengthChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowUdpLengthCounter
//  description is TBD
func (obj *patternFlowUdpLength) Decrement() PatternFlowUdpLengthCounter {
	obj.SetChoice(PatternFlowUdpLengthChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowUdpLengthCounter().Msg()
	}
	return &patternFlowUdpLengthCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowUdpLengthCounter
//  description is TBD
func (obj *patternFlowUdpLength) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowUdpLengthCounter value in the PatternFlowUdpLength object
//  description is TBD
func (obj *patternFlowUdpLength) SetDecrement(value PatternFlowUdpLengthCounter) PatternFlowUdpLength {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowUdpLengthChoice.DECREMENT)
	return obj
}

func (obj *patternFlowUdpLength) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpLength.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpLength.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowUdpLength) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowUdpLengthChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowUdpChecksum struct {
	obj *snappipb.PatternFlowUdpChecksum
}

func NewPatternFlowUdpChecksum() PatternFlowUdpChecksum {
	obj := patternFlowUdpChecksum{obj: &snappipb.PatternFlowUdpChecksum{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowUdpChecksum) Msg() *snappipb.PatternFlowUdpChecksum {
	return obj.obj
}

func (obj *patternFlowUdpChecksum) SetMsg(msg *snappipb.PatternFlowUdpChecksum) PatternFlowUdpChecksum {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowUdpChecksum) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowUdpChecksum) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpChecksum) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpChecksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpChecksum) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpChecksum) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowUdpChecksum) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowUdpChecksum interface {
	Msg() *snappipb.PatternFlowUdpChecksum
	SetMsg(*snappipb.PatternFlowUdpChecksum) PatternFlowUdpChecksum
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowUdpChecksumChoiceEnum
	SetChoice(value PatternFlowUdpChecksumChoiceEnum) PatternFlowUdpChecksum
	Generated() PatternFlowUdpChecksumGeneratedEnum
	SetGenerated(value PatternFlowUdpChecksumGeneratedEnum) PatternFlowUdpChecksum
	HasGenerated() bool
	Custom() int32
	SetCustom(value int32) PatternFlowUdpChecksum
	HasCustom() bool
}

type PatternFlowUdpChecksumChoiceEnum string

var PatternFlowUdpChecksumChoice = struct {
	GENERATED PatternFlowUdpChecksumChoiceEnum
	CUSTOM    PatternFlowUdpChecksumChoiceEnum
}{
	GENERATED: PatternFlowUdpChecksumChoiceEnum("generated"),
	CUSTOM:    PatternFlowUdpChecksumChoiceEnum("custom"),
}

func (obj *patternFlowUdpChecksum) Choice() PatternFlowUdpChecksumChoiceEnum {
	return PatternFlowUdpChecksumChoiceEnum(obj.obj.Choice.Enum().String())
}

func (obj *patternFlowUdpChecksum) SetChoice(value PatternFlowUdpChecksumChoiceEnum) PatternFlowUdpChecksum {
	intValue, ok := snappipb.PatternFlowUdpChecksum_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowUdpChecksumChoiceEnum", string(value)))
		return obj
	}
	obj.obj.Choice = snappipb.PatternFlowUdpChecksum_Choice_Enum(intValue)

	if string(value) != "generated" {
		obj.obj.Generated = nil
	}

	if string(value) != "custom" {
		obj.obj.Custom = nil
	}

	return obj
}

type PatternFlowUdpChecksumGeneratedEnum string

var PatternFlowUdpChecksumGenerated = struct {
	GOOD PatternFlowUdpChecksumGeneratedEnum
	BAD  PatternFlowUdpChecksumGeneratedEnum
}{
	GOOD: PatternFlowUdpChecksumGeneratedEnum("good"),
	BAD:  PatternFlowUdpChecksumGeneratedEnum("bad"),
}

func (obj *patternFlowUdpChecksum) Generated() PatternFlowUdpChecksumGeneratedEnum {
	return PatternFlowUdpChecksumGeneratedEnum(obj.obj.Generated.Enum().String())
}

// Generated returns a string
//  A system generated checksum value
func (obj *patternFlowUdpChecksum) HasGenerated() bool {
	return obj.obj.Generated != nil
}

func (obj *patternFlowUdpChecksum) SetGenerated(value PatternFlowUdpChecksumGeneratedEnum) PatternFlowUdpChecksum {
	intValue, ok := snappipb.PatternFlowUdpChecksum_Generated_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowUdpChecksumGeneratedEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowUdpChecksum_Generated_Enum(intValue)
	obj.obj.Generated = &enumValue

	return obj
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowUdpChecksum) Custom() int32 {

	return *obj.obj.Custom

}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowUdpChecksum) HasCustom() bool {
	return obj.obj.Custom != nil
}

// SetCustom sets the int32 value in the PatternFlowUdpChecksum object
//  A custom checksum value
func (obj *patternFlowUdpChecksum) SetCustom(value int32) PatternFlowUdpChecksum {
	obj.obj.Custom = &value
	obj.SetChoice(PatternFlowUdpChecksumChoice.CUSTOM)
	return obj
}

func (obj *patternFlowUdpChecksum) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Choice required
	if obj.obj.Choice.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("Choice is required field on PatternFlowUdpChecksum and got value %s", obj.obj.Choice.String()))
	}

	if obj.obj.Custom != nil {
		if *obj.obj.Custom < 0 || *obj.obj.Custom > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpChecksum.Custom <= 65535 but Got %d", *obj.obj.Custom))
		}

	}

}

func (obj *patternFlowUdpChecksum) setDefault() {
	if obj.obj.Choice.Number() == 0 {
		obj.SetChoice(PatternFlowUdpChecksumChoice.GENERATED)
		if obj.obj.Generated == nil {
			obj.SetGenerated(PatternFlowUdpChecksumGenerated.GOOD)

		}

	}

}

type patternFlowGreChecksumPresent struct {
	obj *snappipb.PatternFlowGreChecksumPresent
}

func NewPatternFlowGreChecksumPresent() PatternFlowGreChecksumPresent {
	obj := patternFlowGreChecksumPresent{obj: &snappipb.PatternFlowGreChecksumPresent{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGreChecksumPresent) Msg() *snappipb.PatternFlowGreChecksumPresent {
	return obj.obj
}

func (obj *patternFlowGreChecksumPresent) SetMsg(msg *snappipb.PatternFlowGreChecksumPresent) PatternFlowGreChecksumPresent {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGreChecksumPresent) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGreChecksumPresent) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreChecksumPresent) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksumPresent) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreChecksumPresent) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksumPresent) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGreChecksumPresent) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGreChecksumPresent interface {
	Msg() *snappipb.PatternFlowGreChecksumPresent
	SetMsg(*snappipb.PatternFlowGreChecksumPresent) PatternFlowGreChecksumPresent
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGreChecksumPresentChoiceEnum
	SetChoice(value PatternFlowGreChecksumPresentChoiceEnum) PatternFlowGreChecksumPresent
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGreChecksumPresent
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGreChecksumPresent
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGreChecksumPresent
	HasMetricGroup() bool
	Increment() PatternFlowGreChecksumPresentCounter
	SetIncrement(value PatternFlowGreChecksumPresentCounter) PatternFlowGreChecksumPresent
	HasIncrement() bool
	Decrement() PatternFlowGreChecksumPresentCounter
	SetDecrement(value PatternFlowGreChecksumPresentCounter) PatternFlowGreChecksumPresent
	HasDecrement() bool
}

type PatternFlowGreChecksumPresentChoiceEnum string

var PatternFlowGreChecksumPresentChoice = struct {
	VALUE     PatternFlowGreChecksumPresentChoiceEnum
	VALUES    PatternFlowGreChecksumPresentChoiceEnum
	INCREMENT PatternFlowGreChecksumPresentChoiceEnum
	DECREMENT PatternFlowGreChecksumPresentChoiceEnum
}{
	VALUE:     PatternFlowGreChecksumPresentChoiceEnum("value"),
	VALUES:    PatternFlowGreChecksumPresentChoiceEnum("values"),
	INCREMENT: PatternFlowGreChecksumPresentChoiceEnum("increment"),
	DECREMENT: PatternFlowGreChecksumPresentChoiceEnum("decrement"),
}

func (obj *patternFlowGreChecksumPresent) Choice() PatternFlowGreChecksumPresentChoiceEnum {
	return PatternFlowGreChecksumPresentChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGreChecksumPresent) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGreChecksumPresent) SetChoice(value PatternFlowGreChecksumPresentChoiceEnum) PatternFlowGreChecksumPresent {
	intValue, ok := snappipb.PatternFlowGreChecksumPresent_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGreChecksumPresentChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGreChecksumPresent_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresent) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresent) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGreChecksumPresent object
//  description is TBD
func (obj *patternFlowGreChecksumPresent) SetValue(value int32) PatternFlowGreChecksumPresent {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGreChecksumPresentChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGreChecksumPresent) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGreChecksumPresent object
//  description is TBD
func (obj *patternFlowGreChecksumPresent) SetValues(value []int32) PatternFlowGreChecksumPresent {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGreChecksumPresentChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreChecksumPresent) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreChecksumPresent) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGreChecksumPresent object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreChecksumPresent) SetMetricGroup(value string) PatternFlowGreChecksumPresent {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGreChecksumPresentCounter
//  description is TBD
func (obj *patternFlowGreChecksumPresent) Increment() PatternFlowGreChecksumPresentCounter {
	obj.SetChoice(PatternFlowGreChecksumPresentChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGreChecksumPresentCounter().Msg()
	}
	return &patternFlowGreChecksumPresentCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGreChecksumPresentCounter
//  description is TBD
func (obj *patternFlowGreChecksumPresent) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGreChecksumPresentCounter value in the PatternFlowGreChecksumPresent object
//  description is TBD
func (obj *patternFlowGreChecksumPresent) SetIncrement(value PatternFlowGreChecksumPresentCounter) PatternFlowGreChecksumPresent {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGreChecksumPresentChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGreChecksumPresentCounter
//  description is TBD
func (obj *patternFlowGreChecksumPresent) Decrement() PatternFlowGreChecksumPresentCounter {
	obj.SetChoice(PatternFlowGreChecksumPresentChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGreChecksumPresentCounter().Msg()
	}
	return &patternFlowGreChecksumPresentCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGreChecksumPresentCounter
//  description is TBD
func (obj *patternFlowGreChecksumPresent) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGreChecksumPresentCounter value in the PatternFlowGreChecksumPresent object
//  description is TBD
func (obj *patternFlowGreChecksumPresent) SetDecrement(value PatternFlowGreChecksumPresentCounter) PatternFlowGreChecksumPresent {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGreChecksumPresentChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGreChecksumPresent) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreChecksumPresent.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreChecksumPresent.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGreChecksumPresent) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGreChecksumPresentChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGreReserved0 struct {
	obj *snappipb.PatternFlowGreReserved0
}

func NewPatternFlowGreReserved0() PatternFlowGreReserved0 {
	obj := patternFlowGreReserved0{obj: &snappipb.PatternFlowGreReserved0{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGreReserved0) Msg() *snappipb.PatternFlowGreReserved0 {
	return obj.obj
}

func (obj *patternFlowGreReserved0) SetMsg(msg *snappipb.PatternFlowGreReserved0) PatternFlowGreReserved0 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGreReserved0) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGreReserved0) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreReserved0) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved0) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreReserved0) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved0) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGreReserved0) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGreReserved0 interface {
	Msg() *snappipb.PatternFlowGreReserved0
	SetMsg(*snappipb.PatternFlowGreReserved0) PatternFlowGreReserved0
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGreReserved0ChoiceEnum
	SetChoice(value PatternFlowGreReserved0ChoiceEnum) PatternFlowGreReserved0
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGreReserved0
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGreReserved0
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGreReserved0
	HasMetricGroup() bool
	Increment() PatternFlowGreReserved0Counter
	SetIncrement(value PatternFlowGreReserved0Counter) PatternFlowGreReserved0
	HasIncrement() bool
	Decrement() PatternFlowGreReserved0Counter
	SetDecrement(value PatternFlowGreReserved0Counter) PatternFlowGreReserved0
	HasDecrement() bool
}

type PatternFlowGreReserved0ChoiceEnum string

var PatternFlowGreReserved0Choice = struct {
	VALUE     PatternFlowGreReserved0ChoiceEnum
	VALUES    PatternFlowGreReserved0ChoiceEnum
	INCREMENT PatternFlowGreReserved0ChoiceEnum
	DECREMENT PatternFlowGreReserved0ChoiceEnum
}{
	VALUE:     PatternFlowGreReserved0ChoiceEnum("value"),
	VALUES:    PatternFlowGreReserved0ChoiceEnum("values"),
	INCREMENT: PatternFlowGreReserved0ChoiceEnum("increment"),
	DECREMENT: PatternFlowGreReserved0ChoiceEnum("decrement"),
}

func (obj *patternFlowGreReserved0) Choice() PatternFlowGreReserved0ChoiceEnum {
	return PatternFlowGreReserved0ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGreReserved0) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGreReserved0) SetChoice(value PatternFlowGreReserved0ChoiceEnum) PatternFlowGreReserved0 {
	intValue, ok := snappipb.PatternFlowGreReserved0_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGreReserved0ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGreReserved0_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGreReserved0 object
//  description is TBD
func (obj *patternFlowGreReserved0) SetValue(value int32) PatternFlowGreReserved0 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGreReserved0Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGreReserved0) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGreReserved0 object
//  description is TBD
func (obj *patternFlowGreReserved0) SetValues(value []int32) PatternFlowGreReserved0 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGreReserved0Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreReserved0) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreReserved0) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGreReserved0 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreReserved0) SetMetricGroup(value string) PatternFlowGreReserved0 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGreReserved0Counter
//  description is TBD
func (obj *patternFlowGreReserved0) Increment() PatternFlowGreReserved0Counter {
	obj.SetChoice(PatternFlowGreReserved0Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGreReserved0Counter().Msg()
	}
	return &patternFlowGreReserved0Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGreReserved0Counter
//  description is TBD
func (obj *patternFlowGreReserved0) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGreReserved0Counter value in the PatternFlowGreReserved0 object
//  description is TBD
func (obj *patternFlowGreReserved0) SetIncrement(value PatternFlowGreReserved0Counter) PatternFlowGreReserved0 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGreReserved0Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGreReserved0Counter
//  description is TBD
func (obj *patternFlowGreReserved0) Decrement() PatternFlowGreReserved0Counter {
	obj.SetChoice(PatternFlowGreReserved0Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGreReserved0Counter().Msg()
	}
	return &patternFlowGreReserved0Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGreReserved0Counter
//  description is TBD
func (obj *patternFlowGreReserved0) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGreReserved0Counter value in the PatternFlowGreReserved0 object
//  description is TBD
func (obj *patternFlowGreReserved0) SetDecrement(value PatternFlowGreReserved0Counter) PatternFlowGreReserved0 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGreReserved0Choice.DECREMENT)
	return obj
}

func (obj *patternFlowGreReserved0) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 4095 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreReserved0.Value <= 4095 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 4095 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreReserved0.Values <= 4095 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGreReserved0) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGreReserved0Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGreVersion struct {
	obj *snappipb.PatternFlowGreVersion
}

func NewPatternFlowGreVersion() PatternFlowGreVersion {
	obj := patternFlowGreVersion{obj: &snappipb.PatternFlowGreVersion{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGreVersion) Msg() *snappipb.PatternFlowGreVersion {
	return obj.obj
}

func (obj *patternFlowGreVersion) SetMsg(msg *snappipb.PatternFlowGreVersion) PatternFlowGreVersion {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGreVersion) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGreVersion) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreVersion) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreVersion) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreVersion) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreVersion) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGreVersion) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGreVersion interface {
	Msg() *snappipb.PatternFlowGreVersion
	SetMsg(*snappipb.PatternFlowGreVersion) PatternFlowGreVersion
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGreVersionChoiceEnum
	SetChoice(value PatternFlowGreVersionChoiceEnum) PatternFlowGreVersion
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGreVersion
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGreVersion
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGreVersion
	HasMetricGroup() bool
	Increment() PatternFlowGreVersionCounter
	SetIncrement(value PatternFlowGreVersionCounter) PatternFlowGreVersion
	HasIncrement() bool
	Decrement() PatternFlowGreVersionCounter
	SetDecrement(value PatternFlowGreVersionCounter) PatternFlowGreVersion
	HasDecrement() bool
}

type PatternFlowGreVersionChoiceEnum string

var PatternFlowGreVersionChoice = struct {
	VALUE     PatternFlowGreVersionChoiceEnum
	VALUES    PatternFlowGreVersionChoiceEnum
	INCREMENT PatternFlowGreVersionChoiceEnum
	DECREMENT PatternFlowGreVersionChoiceEnum
}{
	VALUE:     PatternFlowGreVersionChoiceEnum("value"),
	VALUES:    PatternFlowGreVersionChoiceEnum("values"),
	INCREMENT: PatternFlowGreVersionChoiceEnum("increment"),
	DECREMENT: PatternFlowGreVersionChoiceEnum("decrement"),
}

func (obj *patternFlowGreVersion) Choice() PatternFlowGreVersionChoiceEnum {
	return PatternFlowGreVersionChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGreVersion) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGreVersion) SetChoice(value PatternFlowGreVersionChoiceEnum) PatternFlowGreVersion {
	intValue, ok := snappipb.PatternFlowGreVersion_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGreVersionChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGreVersion_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreVersion) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreVersion) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGreVersion object
//  description is TBD
func (obj *patternFlowGreVersion) SetValue(value int32) PatternFlowGreVersion {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGreVersionChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGreVersion) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGreVersion object
//  description is TBD
func (obj *patternFlowGreVersion) SetValues(value []int32) PatternFlowGreVersion {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGreVersionChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreVersion) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreVersion) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGreVersion object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreVersion) SetMetricGroup(value string) PatternFlowGreVersion {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGreVersionCounter
//  description is TBD
func (obj *patternFlowGreVersion) Increment() PatternFlowGreVersionCounter {
	obj.SetChoice(PatternFlowGreVersionChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGreVersionCounter().Msg()
	}
	return &patternFlowGreVersionCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGreVersionCounter
//  description is TBD
func (obj *patternFlowGreVersion) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGreVersionCounter value in the PatternFlowGreVersion object
//  description is TBD
func (obj *patternFlowGreVersion) SetIncrement(value PatternFlowGreVersionCounter) PatternFlowGreVersion {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGreVersionChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGreVersionCounter
//  description is TBD
func (obj *patternFlowGreVersion) Decrement() PatternFlowGreVersionCounter {
	obj.SetChoice(PatternFlowGreVersionChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGreVersionCounter().Msg()
	}
	return &patternFlowGreVersionCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGreVersionCounter
//  description is TBD
func (obj *patternFlowGreVersion) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGreVersionCounter value in the PatternFlowGreVersion object
//  description is TBD
func (obj *patternFlowGreVersion) SetDecrement(value PatternFlowGreVersionCounter) PatternFlowGreVersion {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGreVersionChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGreVersion) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreVersion.Value <= 7 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreVersion.Values <= 7 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGreVersion) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGreVersionChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGreProtocol struct {
	obj *snappipb.PatternFlowGreProtocol
}

func NewPatternFlowGreProtocol() PatternFlowGreProtocol {
	obj := patternFlowGreProtocol{obj: &snappipb.PatternFlowGreProtocol{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGreProtocol) Msg() *snappipb.PatternFlowGreProtocol {
	return obj.obj
}

func (obj *patternFlowGreProtocol) SetMsg(msg *snappipb.PatternFlowGreProtocol) PatternFlowGreProtocol {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGreProtocol) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGreProtocol) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreProtocol) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreProtocol) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreProtocol) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreProtocol) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGreProtocol) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGreProtocol interface {
	Msg() *snappipb.PatternFlowGreProtocol
	SetMsg(*snappipb.PatternFlowGreProtocol) PatternFlowGreProtocol
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGreProtocolChoiceEnum
	SetChoice(value PatternFlowGreProtocolChoiceEnum) PatternFlowGreProtocol
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGreProtocol
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGreProtocol
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGreProtocol
	HasMetricGroup() bool
	Increment() PatternFlowGreProtocolCounter
	SetIncrement(value PatternFlowGreProtocolCounter) PatternFlowGreProtocol
	HasIncrement() bool
	Decrement() PatternFlowGreProtocolCounter
	SetDecrement(value PatternFlowGreProtocolCounter) PatternFlowGreProtocol
	HasDecrement() bool
}

type PatternFlowGreProtocolChoiceEnum string

var PatternFlowGreProtocolChoice = struct {
	VALUE     PatternFlowGreProtocolChoiceEnum
	VALUES    PatternFlowGreProtocolChoiceEnum
	INCREMENT PatternFlowGreProtocolChoiceEnum
	DECREMENT PatternFlowGreProtocolChoiceEnum
}{
	VALUE:     PatternFlowGreProtocolChoiceEnum("value"),
	VALUES:    PatternFlowGreProtocolChoiceEnum("values"),
	INCREMENT: PatternFlowGreProtocolChoiceEnum("increment"),
	DECREMENT: PatternFlowGreProtocolChoiceEnum("decrement"),
}

func (obj *patternFlowGreProtocol) Choice() PatternFlowGreProtocolChoiceEnum {
	return PatternFlowGreProtocolChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGreProtocol) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGreProtocol) SetChoice(value PatternFlowGreProtocolChoiceEnum) PatternFlowGreProtocol {
	intValue, ok := snappipb.PatternFlowGreProtocol_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGreProtocolChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGreProtocol_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreProtocol) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 2048
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreProtocol) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGreProtocol object
//  description is TBD
func (obj *patternFlowGreProtocol) SetValue(value int32) PatternFlowGreProtocol {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGreProtocolChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGreProtocol) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGreProtocol object
//  description is TBD
func (obj *patternFlowGreProtocol) SetValues(value []int32) PatternFlowGreProtocol {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGreProtocolChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreProtocol) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreProtocol) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGreProtocol object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreProtocol) SetMetricGroup(value string) PatternFlowGreProtocol {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGreProtocolCounter
//  description is TBD
func (obj *patternFlowGreProtocol) Increment() PatternFlowGreProtocolCounter {
	obj.SetChoice(PatternFlowGreProtocolChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGreProtocolCounter().Msg()
	}
	return &patternFlowGreProtocolCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGreProtocolCounter
//  description is TBD
func (obj *patternFlowGreProtocol) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGreProtocolCounter value in the PatternFlowGreProtocol object
//  description is TBD
func (obj *patternFlowGreProtocol) SetIncrement(value PatternFlowGreProtocolCounter) PatternFlowGreProtocol {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGreProtocolChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGreProtocolCounter
//  description is TBD
func (obj *patternFlowGreProtocol) Decrement() PatternFlowGreProtocolCounter {
	obj.SetChoice(PatternFlowGreProtocolChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGreProtocolCounter().Msg()
	}
	return &patternFlowGreProtocolCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGreProtocolCounter
//  description is TBD
func (obj *patternFlowGreProtocol) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGreProtocolCounter value in the PatternFlowGreProtocol object
//  description is TBD
func (obj *patternFlowGreProtocol) SetDecrement(value PatternFlowGreProtocolCounter) PatternFlowGreProtocol {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGreProtocolChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGreProtocol) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreProtocol.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreProtocol.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGreProtocol) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGreProtocolChoice.VALUE)
		obj.SetValue(2048)
	}

}

type patternFlowGreChecksum struct {
	obj *snappipb.PatternFlowGreChecksum
}

func NewPatternFlowGreChecksum() PatternFlowGreChecksum {
	obj := patternFlowGreChecksum{obj: &snappipb.PatternFlowGreChecksum{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGreChecksum) Msg() *snappipb.PatternFlowGreChecksum {
	return obj.obj
}

func (obj *patternFlowGreChecksum) SetMsg(msg *snappipb.PatternFlowGreChecksum) PatternFlowGreChecksum {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGreChecksum) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGreChecksum) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreChecksum) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreChecksum) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksum) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGreChecksum) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGreChecksum interface {
	Msg() *snappipb.PatternFlowGreChecksum
	SetMsg(*snappipb.PatternFlowGreChecksum) PatternFlowGreChecksum
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGreChecksumChoiceEnum
	SetChoice(value PatternFlowGreChecksumChoiceEnum) PatternFlowGreChecksum
	Generated() PatternFlowGreChecksumGeneratedEnum
	SetGenerated(value PatternFlowGreChecksumGeneratedEnum) PatternFlowGreChecksum
	HasGenerated() bool
	Custom() int32
	SetCustom(value int32) PatternFlowGreChecksum
	HasCustom() bool
}

type PatternFlowGreChecksumChoiceEnum string

var PatternFlowGreChecksumChoice = struct {
	GENERATED PatternFlowGreChecksumChoiceEnum
	CUSTOM    PatternFlowGreChecksumChoiceEnum
}{
	GENERATED: PatternFlowGreChecksumChoiceEnum("generated"),
	CUSTOM:    PatternFlowGreChecksumChoiceEnum("custom"),
}

func (obj *patternFlowGreChecksum) Choice() PatternFlowGreChecksumChoiceEnum {
	return PatternFlowGreChecksumChoiceEnum(obj.obj.Choice.Enum().String())
}

func (obj *patternFlowGreChecksum) SetChoice(value PatternFlowGreChecksumChoiceEnum) PatternFlowGreChecksum {
	intValue, ok := snappipb.PatternFlowGreChecksum_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGreChecksumChoiceEnum", string(value)))
		return obj
	}
	obj.obj.Choice = snappipb.PatternFlowGreChecksum_Choice_Enum(intValue)

	if string(value) != "generated" {
		obj.obj.Generated = nil
	}

	if string(value) != "custom" {
		obj.obj.Custom = nil
	}

	return obj
}

type PatternFlowGreChecksumGeneratedEnum string

var PatternFlowGreChecksumGenerated = struct {
	GOOD PatternFlowGreChecksumGeneratedEnum
	BAD  PatternFlowGreChecksumGeneratedEnum
}{
	GOOD: PatternFlowGreChecksumGeneratedEnum("good"),
	BAD:  PatternFlowGreChecksumGeneratedEnum("bad"),
}

func (obj *patternFlowGreChecksum) Generated() PatternFlowGreChecksumGeneratedEnum {
	return PatternFlowGreChecksumGeneratedEnum(obj.obj.Generated.Enum().String())
}

// Generated returns a string
//  A system generated checksum value
func (obj *patternFlowGreChecksum) HasGenerated() bool {
	return obj.obj.Generated != nil
}

func (obj *patternFlowGreChecksum) SetGenerated(value PatternFlowGreChecksumGeneratedEnum) PatternFlowGreChecksum {
	intValue, ok := snappipb.PatternFlowGreChecksum_Generated_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGreChecksumGeneratedEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGreChecksum_Generated_Enum(intValue)
	obj.obj.Generated = &enumValue

	return obj
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowGreChecksum) Custom() int32 {

	return *obj.obj.Custom

}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowGreChecksum) HasCustom() bool {
	return obj.obj.Custom != nil
}

// SetCustom sets the int32 value in the PatternFlowGreChecksum object
//  A custom checksum value
func (obj *patternFlowGreChecksum) SetCustom(value int32) PatternFlowGreChecksum {
	obj.obj.Custom = &value
	obj.SetChoice(PatternFlowGreChecksumChoice.CUSTOM)
	return obj
}

func (obj *patternFlowGreChecksum) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Choice required
	if obj.obj.Choice.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("Choice is required field on PatternFlowGreChecksum and got value %s", obj.obj.Choice.String()))
	}

	if obj.obj.Custom != nil {
		if *obj.obj.Custom < 0 || *obj.obj.Custom > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreChecksum.Custom <= 65535 but Got %d", *obj.obj.Custom))
		}

	}

}

func (obj *patternFlowGreChecksum) setDefault() {
	if obj.obj.Choice.Number() == 0 {
		obj.SetChoice(PatternFlowGreChecksumChoice.GENERATED)
		if obj.obj.Generated == nil {
			obj.SetGenerated(PatternFlowGreChecksumGenerated.GOOD)

		}

	}

}

type patternFlowGreReserved1 struct {
	obj *snappipb.PatternFlowGreReserved1
}

func NewPatternFlowGreReserved1() PatternFlowGreReserved1 {
	obj := patternFlowGreReserved1{obj: &snappipb.PatternFlowGreReserved1{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGreReserved1) Msg() *snappipb.PatternFlowGreReserved1 {
	return obj.obj
}

func (obj *patternFlowGreReserved1) SetMsg(msg *snappipb.PatternFlowGreReserved1) PatternFlowGreReserved1 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGreReserved1) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGreReserved1) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreReserved1) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreReserved1) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved1) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGreReserved1) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGreReserved1 interface {
	Msg() *snappipb.PatternFlowGreReserved1
	SetMsg(*snappipb.PatternFlowGreReserved1) PatternFlowGreReserved1
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGreReserved1ChoiceEnum
	SetChoice(value PatternFlowGreReserved1ChoiceEnum) PatternFlowGreReserved1
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGreReserved1
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGreReserved1
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGreReserved1
	HasMetricGroup() bool
	Increment() PatternFlowGreReserved1Counter
	SetIncrement(value PatternFlowGreReserved1Counter) PatternFlowGreReserved1
	HasIncrement() bool
	Decrement() PatternFlowGreReserved1Counter
	SetDecrement(value PatternFlowGreReserved1Counter) PatternFlowGreReserved1
	HasDecrement() bool
}

type PatternFlowGreReserved1ChoiceEnum string

var PatternFlowGreReserved1Choice = struct {
	VALUE     PatternFlowGreReserved1ChoiceEnum
	VALUES    PatternFlowGreReserved1ChoiceEnum
	INCREMENT PatternFlowGreReserved1ChoiceEnum
	DECREMENT PatternFlowGreReserved1ChoiceEnum
}{
	VALUE:     PatternFlowGreReserved1ChoiceEnum("value"),
	VALUES:    PatternFlowGreReserved1ChoiceEnum("values"),
	INCREMENT: PatternFlowGreReserved1ChoiceEnum("increment"),
	DECREMENT: PatternFlowGreReserved1ChoiceEnum("decrement"),
}

func (obj *patternFlowGreReserved1) Choice() PatternFlowGreReserved1ChoiceEnum {
	return PatternFlowGreReserved1ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGreReserved1) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGreReserved1) SetChoice(value PatternFlowGreReserved1ChoiceEnum) PatternFlowGreReserved1 {
	intValue, ok := snappipb.PatternFlowGreReserved1_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGreReserved1ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGreReserved1_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGreReserved1 object
//  description is TBD
func (obj *patternFlowGreReserved1) SetValue(value int32) PatternFlowGreReserved1 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGreReserved1Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGreReserved1) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGreReserved1 object
//  description is TBD
func (obj *patternFlowGreReserved1) SetValues(value []int32) PatternFlowGreReserved1 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGreReserved1Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreReserved1) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreReserved1) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGreReserved1 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreReserved1) SetMetricGroup(value string) PatternFlowGreReserved1 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGreReserved1Counter
//  description is TBD
func (obj *patternFlowGreReserved1) Increment() PatternFlowGreReserved1Counter {
	obj.SetChoice(PatternFlowGreReserved1Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGreReserved1Counter().Msg()
	}
	return &patternFlowGreReserved1Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGreReserved1Counter
//  description is TBD
func (obj *patternFlowGreReserved1) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGreReserved1Counter value in the PatternFlowGreReserved1 object
//  description is TBD
func (obj *patternFlowGreReserved1) SetIncrement(value PatternFlowGreReserved1Counter) PatternFlowGreReserved1 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGreReserved1Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGreReserved1Counter
//  description is TBD
func (obj *patternFlowGreReserved1) Decrement() PatternFlowGreReserved1Counter {
	obj.SetChoice(PatternFlowGreReserved1Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGreReserved1Counter().Msg()
	}
	return &patternFlowGreReserved1Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGreReserved1Counter
//  description is TBD
func (obj *patternFlowGreReserved1) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGreReserved1Counter value in the PatternFlowGreReserved1 object
//  description is TBD
func (obj *patternFlowGreReserved1) SetDecrement(value PatternFlowGreReserved1Counter) PatternFlowGreReserved1 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGreReserved1Choice.DECREMENT)
	return obj
}

func (obj *patternFlowGreReserved1) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreReserved1.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreReserved1.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGreReserved1) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGreReserved1Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv1Version struct {
	obj *snappipb.PatternFlowGtpv1Version
}

func NewPatternFlowGtpv1Version() PatternFlowGtpv1Version {
	obj := patternFlowGtpv1Version{obj: &snappipb.PatternFlowGtpv1Version{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1Version) Msg() *snappipb.PatternFlowGtpv1Version {
	return obj.obj
}

func (obj *patternFlowGtpv1Version) SetMsg(msg *snappipb.PatternFlowGtpv1Version) PatternFlowGtpv1Version {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1Version) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1Version) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1Version) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Version) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1Version) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Version) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1Version) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1Version interface {
	Msg() *snappipb.PatternFlowGtpv1Version
	SetMsg(*snappipb.PatternFlowGtpv1Version) PatternFlowGtpv1Version
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1VersionChoiceEnum
	SetChoice(value PatternFlowGtpv1VersionChoiceEnum) PatternFlowGtpv1Version
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv1Version
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1Version
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1Version
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1VersionCounter
	SetIncrement(value PatternFlowGtpv1VersionCounter) PatternFlowGtpv1Version
	HasIncrement() bool
	Decrement() PatternFlowGtpv1VersionCounter
	SetDecrement(value PatternFlowGtpv1VersionCounter) PatternFlowGtpv1Version
	HasDecrement() bool
}

type PatternFlowGtpv1VersionChoiceEnum string

var PatternFlowGtpv1VersionChoice = struct {
	VALUE     PatternFlowGtpv1VersionChoiceEnum
	VALUES    PatternFlowGtpv1VersionChoiceEnum
	INCREMENT PatternFlowGtpv1VersionChoiceEnum
	DECREMENT PatternFlowGtpv1VersionChoiceEnum
}{
	VALUE:     PatternFlowGtpv1VersionChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1VersionChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1VersionChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1VersionChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1Version) Choice() PatternFlowGtpv1VersionChoiceEnum {
	return PatternFlowGtpv1VersionChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1Version) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1Version) SetChoice(value PatternFlowGtpv1VersionChoiceEnum) PatternFlowGtpv1Version {
	intValue, ok := snappipb.PatternFlowGtpv1Version_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1VersionChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1Version_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1Version) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 1
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1Version) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv1Version object
//  description is TBD
func (obj *patternFlowGtpv1Version) SetValue(value int32) PatternFlowGtpv1Version {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1VersionChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1Version) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv1Version object
//  description is TBD
func (obj *patternFlowGtpv1Version) SetValues(value []int32) PatternFlowGtpv1Version {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1VersionChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Version) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Version) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1Version object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Version) SetMetricGroup(value string) PatternFlowGtpv1Version {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1VersionCounter
//  description is TBD
func (obj *patternFlowGtpv1Version) Increment() PatternFlowGtpv1VersionCounter {
	obj.SetChoice(PatternFlowGtpv1VersionChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1VersionCounter().Msg()
	}
	return &patternFlowGtpv1VersionCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1VersionCounter
//  description is TBD
func (obj *patternFlowGtpv1Version) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1VersionCounter value in the PatternFlowGtpv1Version object
//  description is TBD
func (obj *patternFlowGtpv1Version) SetIncrement(value PatternFlowGtpv1VersionCounter) PatternFlowGtpv1Version {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1VersionChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1VersionCounter
//  description is TBD
func (obj *patternFlowGtpv1Version) Decrement() PatternFlowGtpv1VersionCounter {
	obj.SetChoice(PatternFlowGtpv1VersionChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1VersionCounter().Msg()
	}
	return &patternFlowGtpv1VersionCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1VersionCounter
//  description is TBD
func (obj *patternFlowGtpv1Version) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1VersionCounter value in the PatternFlowGtpv1Version object
//  description is TBD
func (obj *patternFlowGtpv1Version) SetDecrement(value PatternFlowGtpv1VersionCounter) PatternFlowGtpv1Version {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1VersionChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1Version) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1Version.Value <= 7 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1Version.Values <= 7 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1Version) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1VersionChoice.VALUE)
		obj.SetValue(1)
	}

}

type patternFlowGtpv1ProtocolType struct {
	obj *snappipb.PatternFlowGtpv1ProtocolType
}

func NewPatternFlowGtpv1ProtocolType() PatternFlowGtpv1ProtocolType {
	obj := patternFlowGtpv1ProtocolType{obj: &snappipb.PatternFlowGtpv1ProtocolType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1ProtocolType) Msg() *snappipb.PatternFlowGtpv1ProtocolType {
	return obj.obj
}

func (obj *patternFlowGtpv1ProtocolType) SetMsg(msg *snappipb.PatternFlowGtpv1ProtocolType) PatternFlowGtpv1ProtocolType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1ProtocolType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1ProtocolType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1ProtocolType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ProtocolType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1ProtocolType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ProtocolType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1ProtocolType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1ProtocolType interface {
	Msg() *snappipb.PatternFlowGtpv1ProtocolType
	SetMsg(*snappipb.PatternFlowGtpv1ProtocolType) PatternFlowGtpv1ProtocolType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1ProtocolTypeChoiceEnum
	SetChoice(value PatternFlowGtpv1ProtocolTypeChoiceEnum) PatternFlowGtpv1ProtocolType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv1ProtocolType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1ProtocolType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1ProtocolType
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1ProtocolTypeCounter
	SetIncrement(value PatternFlowGtpv1ProtocolTypeCounter) PatternFlowGtpv1ProtocolType
	HasIncrement() bool
	Decrement() PatternFlowGtpv1ProtocolTypeCounter
	SetDecrement(value PatternFlowGtpv1ProtocolTypeCounter) PatternFlowGtpv1ProtocolType
	HasDecrement() bool
}

type PatternFlowGtpv1ProtocolTypeChoiceEnum string

var PatternFlowGtpv1ProtocolTypeChoice = struct {
	VALUE     PatternFlowGtpv1ProtocolTypeChoiceEnum
	VALUES    PatternFlowGtpv1ProtocolTypeChoiceEnum
	INCREMENT PatternFlowGtpv1ProtocolTypeChoiceEnum
	DECREMENT PatternFlowGtpv1ProtocolTypeChoiceEnum
}{
	VALUE:     PatternFlowGtpv1ProtocolTypeChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1ProtocolTypeChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1ProtocolTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1ProtocolTypeChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1ProtocolType) Choice() PatternFlowGtpv1ProtocolTypeChoiceEnum {
	return PatternFlowGtpv1ProtocolTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1ProtocolType) SetChoice(value PatternFlowGtpv1ProtocolTypeChoiceEnum) PatternFlowGtpv1ProtocolType {
	intValue, ok := snappipb.PatternFlowGtpv1ProtocolType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1ProtocolTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1ProtocolType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 1
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv1ProtocolType object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) SetValue(value int32) PatternFlowGtpv1ProtocolType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1ProtocolTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv1ProtocolType object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) SetValues(value []int32) PatternFlowGtpv1ProtocolType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1ProtocolTypeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1ProtocolType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1ProtocolType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1ProtocolType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1ProtocolType) SetMetricGroup(value string) PatternFlowGtpv1ProtocolType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1ProtocolTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) Increment() PatternFlowGtpv1ProtocolTypeCounter {
	obj.SetChoice(PatternFlowGtpv1ProtocolTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1ProtocolTypeCounter().Msg()
	}
	return &patternFlowGtpv1ProtocolTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1ProtocolTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1ProtocolTypeCounter value in the PatternFlowGtpv1ProtocolType object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) SetIncrement(value PatternFlowGtpv1ProtocolTypeCounter) PatternFlowGtpv1ProtocolType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1ProtocolTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1ProtocolTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) Decrement() PatternFlowGtpv1ProtocolTypeCounter {
	obj.SetChoice(PatternFlowGtpv1ProtocolTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1ProtocolTypeCounter().Msg()
	}
	return &patternFlowGtpv1ProtocolTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1ProtocolTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1ProtocolTypeCounter value in the PatternFlowGtpv1ProtocolType object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) SetDecrement(value PatternFlowGtpv1ProtocolTypeCounter) PatternFlowGtpv1ProtocolType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1ProtocolTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1ProtocolType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1ProtocolType.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1ProtocolType.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1ProtocolType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1ProtocolTypeChoice.VALUE)
		obj.SetValue(1)
	}

}

type patternFlowGtpv1Reserved struct {
	obj *snappipb.PatternFlowGtpv1Reserved
}

func NewPatternFlowGtpv1Reserved() PatternFlowGtpv1Reserved {
	obj := patternFlowGtpv1Reserved{obj: &snappipb.PatternFlowGtpv1Reserved{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1Reserved) Msg() *snappipb.PatternFlowGtpv1Reserved {
	return obj.obj
}

func (obj *patternFlowGtpv1Reserved) SetMsg(msg *snappipb.PatternFlowGtpv1Reserved) PatternFlowGtpv1Reserved {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1Reserved) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1Reserved) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1Reserved) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Reserved) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1Reserved) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Reserved) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1Reserved) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1Reserved interface {
	Msg() *snappipb.PatternFlowGtpv1Reserved
	SetMsg(*snappipb.PatternFlowGtpv1Reserved) PatternFlowGtpv1Reserved
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1ReservedChoiceEnum
	SetChoice(value PatternFlowGtpv1ReservedChoiceEnum) PatternFlowGtpv1Reserved
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv1Reserved
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1Reserved
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1Reserved
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1ReservedCounter
	SetIncrement(value PatternFlowGtpv1ReservedCounter) PatternFlowGtpv1Reserved
	HasIncrement() bool
	Decrement() PatternFlowGtpv1ReservedCounter
	SetDecrement(value PatternFlowGtpv1ReservedCounter) PatternFlowGtpv1Reserved
	HasDecrement() bool
}

type PatternFlowGtpv1ReservedChoiceEnum string

var PatternFlowGtpv1ReservedChoice = struct {
	VALUE     PatternFlowGtpv1ReservedChoiceEnum
	VALUES    PatternFlowGtpv1ReservedChoiceEnum
	INCREMENT PatternFlowGtpv1ReservedChoiceEnum
	DECREMENT PatternFlowGtpv1ReservedChoiceEnum
}{
	VALUE:     PatternFlowGtpv1ReservedChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1ReservedChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1ReservedChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1ReservedChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1Reserved) Choice() PatternFlowGtpv1ReservedChoiceEnum {
	return PatternFlowGtpv1ReservedChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1Reserved) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1Reserved) SetChoice(value PatternFlowGtpv1ReservedChoiceEnum) PatternFlowGtpv1Reserved {
	intValue, ok := snappipb.PatternFlowGtpv1Reserved_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1ReservedChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1Reserved_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1Reserved) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1Reserved) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv1Reserved object
//  description is TBD
func (obj *patternFlowGtpv1Reserved) SetValue(value int32) PatternFlowGtpv1Reserved {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1ReservedChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1Reserved) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv1Reserved object
//  description is TBD
func (obj *patternFlowGtpv1Reserved) SetValues(value []int32) PatternFlowGtpv1Reserved {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1ReservedChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Reserved) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Reserved) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1Reserved object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Reserved) SetMetricGroup(value string) PatternFlowGtpv1Reserved {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1ReservedCounter
//  description is TBD
func (obj *patternFlowGtpv1Reserved) Increment() PatternFlowGtpv1ReservedCounter {
	obj.SetChoice(PatternFlowGtpv1ReservedChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1ReservedCounter().Msg()
	}
	return &patternFlowGtpv1ReservedCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1ReservedCounter
//  description is TBD
func (obj *patternFlowGtpv1Reserved) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1ReservedCounter value in the PatternFlowGtpv1Reserved object
//  description is TBD
func (obj *patternFlowGtpv1Reserved) SetIncrement(value PatternFlowGtpv1ReservedCounter) PatternFlowGtpv1Reserved {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1ReservedChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1ReservedCounter
//  description is TBD
func (obj *patternFlowGtpv1Reserved) Decrement() PatternFlowGtpv1ReservedCounter {
	obj.SetChoice(PatternFlowGtpv1ReservedChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1ReservedCounter().Msg()
	}
	return &patternFlowGtpv1ReservedCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1ReservedCounter
//  description is TBD
func (obj *patternFlowGtpv1Reserved) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1ReservedCounter value in the PatternFlowGtpv1Reserved object
//  description is TBD
func (obj *patternFlowGtpv1Reserved) SetDecrement(value PatternFlowGtpv1ReservedCounter) PatternFlowGtpv1Reserved {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1ReservedChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1Reserved) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1Reserved.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1Reserved.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1Reserved) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1ReservedChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv1EFlag struct {
	obj *snappipb.PatternFlowGtpv1EFlag
}

func NewPatternFlowGtpv1EFlag() PatternFlowGtpv1EFlag {
	obj := patternFlowGtpv1EFlag{obj: &snappipb.PatternFlowGtpv1EFlag{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1EFlag) Msg() *snappipb.PatternFlowGtpv1EFlag {
	return obj.obj
}

func (obj *patternFlowGtpv1EFlag) SetMsg(msg *snappipb.PatternFlowGtpv1EFlag) PatternFlowGtpv1EFlag {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1EFlag) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1EFlag) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1EFlag) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1EFlag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1EFlag) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1EFlag) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1EFlag) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1EFlag interface {
	Msg() *snappipb.PatternFlowGtpv1EFlag
	SetMsg(*snappipb.PatternFlowGtpv1EFlag) PatternFlowGtpv1EFlag
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1EFlagChoiceEnum
	SetChoice(value PatternFlowGtpv1EFlagChoiceEnum) PatternFlowGtpv1EFlag
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv1EFlag
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1EFlag
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1EFlag
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1EFlagCounter
	SetIncrement(value PatternFlowGtpv1EFlagCounter) PatternFlowGtpv1EFlag
	HasIncrement() bool
	Decrement() PatternFlowGtpv1EFlagCounter
	SetDecrement(value PatternFlowGtpv1EFlagCounter) PatternFlowGtpv1EFlag
	HasDecrement() bool
}

type PatternFlowGtpv1EFlagChoiceEnum string

var PatternFlowGtpv1EFlagChoice = struct {
	VALUE     PatternFlowGtpv1EFlagChoiceEnum
	VALUES    PatternFlowGtpv1EFlagChoiceEnum
	INCREMENT PatternFlowGtpv1EFlagChoiceEnum
	DECREMENT PatternFlowGtpv1EFlagChoiceEnum
}{
	VALUE:     PatternFlowGtpv1EFlagChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1EFlagChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1EFlagChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1EFlagChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1EFlag) Choice() PatternFlowGtpv1EFlagChoiceEnum {
	return PatternFlowGtpv1EFlagChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1EFlag) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1EFlag) SetChoice(value PatternFlowGtpv1EFlagChoiceEnum) PatternFlowGtpv1EFlag {
	intValue, ok := snappipb.PatternFlowGtpv1EFlag_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1EFlagChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1EFlag_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlag) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlag) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv1EFlag object
//  description is TBD
func (obj *patternFlowGtpv1EFlag) SetValue(value int32) PatternFlowGtpv1EFlag {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1EFlagChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1EFlag) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv1EFlag object
//  description is TBD
func (obj *patternFlowGtpv1EFlag) SetValues(value []int32) PatternFlowGtpv1EFlag {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1EFlagChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1EFlag) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1EFlag) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1EFlag object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1EFlag) SetMetricGroup(value string) PatternFlowGtpv1EFlag {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1EFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1EFlag) Increment() PatternFlowGtpv1EFlagCounter {
	obj.SetChoice(PatternFlowGtpv1EFlagChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1EFlagCounter().Msg()
	}
	return &patternFlowGtpv1EFlagCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1EFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1EFlag) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1EFlagCounter value in the PatternFlowGtpv1EFlag object
//  description is TBD
func (obj *patternFlowGtpv1EFlag) SetIncrement(value PatternFlowGtpv1EFlagCounter) PatternFlowGtpv1EFlag {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1EFlagChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1EFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1EFlag) Decrement() PatternFlowGtpv1EFlagCounter {
	obj.SetChoice(PatternFlowGtpv1EFlagChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1EFlagCounter().Msg()
	}
	return &patternFlowGtpv1EFlagCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1EFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1EFlag) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1EFlagCounter value in the PatternFlowGtpv1EFlag object
//  description is TBD
func (obj *patternFlowGtpv1EFlag) SetDecrement(value PatternFlowGtpv1EFlagCounter) PatternFlowGtpv1EFlag {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1EFlagChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1EFlag) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1EFlag.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1EFlag.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1EFlag) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1EFlagChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv1SFlag struct {
	obj *snappipb.PatternFlowGtpv1SFlag
}

func NewPatternFlowGtpv1SFlag() PatternFlowGtpv1SFlag {
	obj := patternFlowGtpv1SFlag{obj: &snappipb.PatternFlowGtpv1SFlag{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1SFlag) Msg() *snappipb.PatternFlowGtpv1SFlag {
	return obj.obj
}

func (obj *patternFlowGtpv1SFlag) SetMsg(msg *snappipb.PatternFlowGtpv1SFlag) PatternFlowGtpv1SFlag {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1SFlag) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1SFlag) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1SFlag) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SFlag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1SFlag) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SFlag) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1SFlag) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1SFlag interface {
	Msg() *snappipb.PatternFlowGtpv1SFlag
	SetMsg(*snappipb.PatternFlowGtpv1SFlag) PatternFlowGtpv1SFlag
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1SFlagChoiceEnum
	SetChoice(value PatternFlowGtpv1SFlagChoiceEnum) PatternFlowGtpv1SFlag
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv1SFlag
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1SFlag
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1SFlag
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1SFlagCounter
	SetIncrement(value PatternFlowGtpv1SFlagCounter) PatternFlowGtpv1SFlag
	HasIncrement() bool
	Decrement() PatternFlowGtpv1SFlagCounter
	SetDecrement(value PatternFlowGtpv1SFlagCounter) PatternFlowGtpv1SFlag
	HasDecrement() bool
}

type PatternFlowGtpv1SFlagChoiceEnum string

var PatternFlowGtpv1SFlagChoice = struct {
	VALUE     PatternFlowGtpv1SFlagChoiceEnum
	VALUES    PatternFlowGtpv1SFlagChoiceEnum
	INCREMENT PatternFlowGtpv1SFlagChoiceEnum
	DECREMENT PatternFlowGtpv1SFlagChoiceEnum
}{
	VALUE:     PatternFlowGtpv1SFlagChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1SFlagChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1SFlagChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1SFlagChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1SFlag) Choice() PatternFlowGtpv1SFlagChoiceEnum {
	return PatternFlowGtpv1SFlagChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1SFlag) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1SFlag) SetChoice(value PatternFlowGtpv1SFlagChoiceEnum) PatternFlowGtpv1SFlag {
	intValue, ok := snappipb.PatternFlowGtpv1SFlag_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1SFlagChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1SFlag_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlag) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlag) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv1SFlag object
//  description is TBD
func (obj *patternFlowGtpv1SFlag) SetValue(value int32) PatternFlowGtpv1SFlag {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1SFlagChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1SFlag) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv1SFlag object
//  description is TBD
func (obj *patternFlowGtpv1SFlag) SetValues(value []int32) PatternFlowGtpv1SFlag {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1SFlagChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1SFlag) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1SFlag) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1SFlag object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1SFlag) SetMetricGroup(value string) PatternFlowGtpv1SFlag {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1SFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1SFlag) Increment() PatternFlowGtpv1SFlagCounter {
	obj.SetChoice(PatternFlowGtpv1SFlagChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1SFlagCounter().Msg()
	}
	return &patternFlowGtpv1SFlagCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1SFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1SFlag) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1SFlagCounter value in the PatternFlowGtpv1SFlag object
//  description is TBD
func (obj *patternFlowGtpv1SFlag) SetIncrement(value PatternFlowGtpv1SFlagCounter) PatternFlowGtpv1SFlag {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1SFlagChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1SFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1SFlag) Decrement() PatternFlowGtpv1SFlagCounter {
	obj.SetChoice(PatternFlowGtpv1SFlagChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1SFlagCounter().Msg()
	}
	return &patternFlowGtpv1SFlagCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1SFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1SFlag) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1SFlagCounter value in the PatternFlowGtpv1SFlag object
//  description is TBD
func (obj *patternFlowGtpv1SFlag) SetDecrement(value PatternFlowGtpv1SFlagCounter) PatternFlowGtpv1SFlag {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1SFlagChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1SFlag) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1SFlag.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1SFlag.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1SFlag) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1SFlagChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv1PnFlag struct {
	obj *snappipb.PatternFlowGtpv1PnFlag
}

func NewPatternFlowGtpv1PnFlag() PatternFlowGtpv1PnFlag {
	obj := patternFlowGtpv1PnFlag{obj: &snappipb.PatternFlowGtpv1PnFlag{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1PnFlag) Msg() *snappipb.PatternFlowGtpv1PnFlag {
	return obj.obj
}

func (obj *patternFlowGtpv1PnFlag) SetMsg(msg *snappipb.PatternFlowGtpv1PnFlag) PatternFlowGtpv1PnFlag {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1PnFlag) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1PnFlag) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1PnFlag) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1PnFlag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1PnFlag) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1PnFlag) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1PnFlag) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1PnFlag interface {
	Msg() *snappipb.PatternFlowGtpv1PnFlag
	SetMsg(*snappipb.PatternFlowGtpv1PnFlag) PatternFlowGtpv1PnFlag
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1PnFlagChoiceEnum
	SetChoice(value PatternFlowGtpv1PnFlagChoiceEnum) PatternFlowGtpv1PnFlag
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv1PnFlag
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1PnFlag
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1PnFlag
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1PnFlagCounter
	SetIncrement(value PatternFlowGtpv1PnFlagCounter) PatternFlowGtpv1PnFlag
	HasIncrement() bool
	Decrement() PatternFlowGtpv1PnFlagCounter
	SetDecrement(value PatternFlowGtpv1PnFlagCounter) PatternFlowGtpv1PnFlag
	HasDecrement() bool
}

type PatternFlowGtpv1PnFlagChoiceEnum string

var PatternFlowGtpv1PnFlagChoice = struct {
	VALUE     PatternFlowGtpv1PnFlagChoiceEnum
	VALUES    PatternFlowGtpv1PnFlagChoiceEnum
	INCREMENT PatternFlowGtpv1PnFlagChoiceEnum
	DECREMENT PatternFlowGtpv1PnFlagChoiceEnum
}{
	VALUE:     PatternFlowGtpv1PnFlagChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1PnFlagChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1PnFlagChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1PnFlagChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1PnFlag) Choice() PatternFlowGtpv1PnFlagChoiceEnum {
	return PatternFlowGtpv1PnFlagChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1PnFlag) SetChoice(value PatternFlowGtpv1PnFlagChoiceEnum) PatternFlowGtpv1PnFlag {
	intValue, ok := snappipb.PatternFlowGtpv1PnFlag_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1PnFlagChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1PnFlag_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv1PnFlag object
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) SetValue(value int32) PatternFlowGtpv1PnFlag {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1PnFlagChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv1PnFlag object
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) SetValues(value []int32) PatternFlowGtpv1PnFlag {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1PnFlagChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1PnFlag) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1PnFlag) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1PnFlag object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1PnFlag) SetMetricGroup(value string) PatternFlowGtpv1PnFlag {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1PnFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) Increment() PatternFlowGtpv1PnFlagCounter {
	obj.SetChoice(PatternFlowGtpv1PnFlagChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1PnFlagCounter().Msg()
	}
	return &patternFlowGtpv1PnFlagCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1PnFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1PnFlagCounter value in the PatternFlowGtpv1PnFlag object
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) SetIncrement(value PatternFlowGtpv1PnFlagCounter) PatternFlowGtpv1PnFlag {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1PnFlagChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1PnFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) Decrement() PatternFlowGtpv1PnFlagCounter {
	obj.SetChoice(PatternFlowGtpv1PnFlagChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1PnFlagCounter().Msg()
	}
	return &patternFlowGtpv1PnFlagCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1PnFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1PnFlagCounter value in the PatternFlowGtpv1PnFlag object
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) SetDecrement(value PatternFlowGtpv1PnFlagCounter) PatternFlowGtpv1PnFlag {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1PnFlagChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1PnFlag) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1PnFlag.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1PnFlag.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1PnFlag) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1PnFlagChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv1MessageType struct {
	obj *snappipb.PatternFlowGtpv1MessageType
}

func NewPatternFlowGtpv1MessageType() PatternFlowGtpv1MessageType {
	obj := patternFlowGtpv1MessageType{obj: &snappipb.PatternFlowGtpv1MessageType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1MessageType) Msg() *snappipb.PatternFlowGtpv1MessageType {
	return obj.obj
}

func (obj *patternFlowGtpv1MessageType) SetMsg(msg *snappipb.PatternFlowGtpv1MessageType) PatternFlowGtpv1MessageType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1MessageType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1MessageType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1MessageType interface {
	Msg() *snappipb.PatternFlowGtpv1MessageType
	SetMsg(*snappipb.PatternFlowGtpv1MessageType) PatternFlowGtpv1MessageType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1MessageTypeChoiceEnum
	SetChoice(value PatternFlowGtpv1MessageTypeChoiceEnum) PatternFlowGtpv1MessageType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv1MessageType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1MessageType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1MessageType
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1MessageTypeCounter
	SetIncrement(value PatternFlowGtpv1MessageTypeCounter) PatternFlowGtpv1MessageType
	HasIncrement() bool
	Decrement() PatternFlowGtpv1MessageTypeCounter
	SetDecrement(value PatternFlowGtpv1MessageTypeCounter) PatternFlowGtpv1MessageType
	HasDecrement() bool
}

type PatternFlowGtpv1MessageTypeChoiceEnum string

var PatternFlowGtpv1MessageTypeChoice = struct {
	VALUE     PatternFlowGtpv1MessageTypeChoiceEnum
	VALUES    PatternFlowGtpv1MessageTypeChoiceEnum
	INCREMENT PatternFlowGtpv1MessageTypeChoiceEnum
	DECREMENT PatternFlowGtpv1MessageTypeChoiceEnum
}{
	VALUE:     PatternFlowGtpv1MessageTypeChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1MessageTypeChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1MessageTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1MessageTypeChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1MessageType) Choice() PatternFlowGtpv1MessageTypeChoiceEnum {
	return PatternFlowGtpv1MessageTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1MessageType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1MessageType) SetChoice(value PatternFlowGtpv1MessageTypeChoiceEnum) PatternFlowGtpv1MessageType {
	intValue, ok := snappipb.PatternFlowGtpv1MessageType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1MessageTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1MessageType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageType) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv1MessageType object
//  description is TBD
func (obj *patternFlowGtpv1MessageType) SetValue(value int32) PatternFlowGtpv1MessageType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1MessageTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1MessageType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv1MessageType object
//  description is TBD
func (obj *patternFlowGtpv1MessageType) SetValues(value []int32) PatternFlowGtpv1MessageType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1MessageTypeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1MessageType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1MessageType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1MessageType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1MessageType) SetMetricGroup(value string) PatternFlowGtpv1MessageType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageType) Increment() PatternFlowGtpv1MessageTypeCounter {
	obj.SetChoice(PatternFlowGtpv1MessageTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1MessageTypeCounter().Msg()
	}
	return &patternFlowGtpv1MessageTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1MessageTypeCounter value in the PatternFlowGtpv1MessageType object
//  description is TBD
func (obj *patternFlowGtpv1MessageType) SetIncrement(value PatternFlowGtpv1MessageTypeCounter) PatternFlowGtpv1MessageType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1MessageTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageType) Decrement() PatternFlowGtpv1MessageTypeCounter {
	obj.SetChoice(PatternFlowGtpv1MessageTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1MessageTypeCounter().Msg()
	}
	return &patternFlowGtpv1MessageTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1MessageTypeCounter value in the PatternFlowGtpv1MessageType object
//  description is TBD
func (obj *patternFlowGtpv1MessageType) SetDecrement(value PatternFlowGtpv1MessageTypeCounter) PatternFlowGtpv1MessageType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1MessageTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1MessageType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1MessageType.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1MessageType.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1MessageType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1MessageTypeChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv1MessageLength struct {
	obj *snappipb.PatternFlowGtpv1MessageLength
}

func NewPatternFlowGtpv1MessageLength() PatternFlowGtpv1MessageLength {
	obj := patternFlowGtpv1MessageLength{obj: &snappipb.PatternFlowGtpv1MessageLength{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1MessageLength) Msg() *snappipb.PatternFlowGtpv1MessageLength {
	return obj.obj
}

func (obj *patternFlowGtpv1MessageLength) SetMsg(msg *snappipb.PatternFlowGtpv1MessageLength) PatternFlowGtpv1MessageLength {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1MessageLength) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1MessageLength) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageLength) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageLength) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageLength) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageLength) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1MessageLength interface {
	Msg() *snappipb.PatternFlowGtpv1MessageLength
	SetMsg(*snappipb.PatternFlowGtpv1MessageLength) PatternFlowGtpv1MessageLength
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1MessageLengthChoiceEnum
	SetChoice(value PatternFlowGtpv1MessageLengthChoiceEnum) PatternFlowGtpv1MessageLength
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv1MessageLength
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1MessageLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1MessageLength
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1MessageLengthCounter
	SetIncrement(value PatternFlowGtpv1MessageLengthCounter) PatternFlowGtpv1MessageLength
	HasIncrement() bool
	Decrement() PatternFlowGtpv1MessageLengthCounter
	SetDecrement(value PatternFlowGtpv1MessageLengthCounter) PatternFlowGtpv1MessageLength
	HasDecrement() bool
}

type PatternFlowGtpv1MessageLengthChoiceEnum string

var PatternFlowGtpv1MessageLengthChoice = struct {
	VALUE     PatternFlowGtpv1MessageLengthChoiceEnum
	VALUES    PatternFlowGtpv1MessageLengthChoiceEnum
	INCREMENT PatternFlowGtpv1MessageLengthChoiceEnum
	DECREMENT PatternFlowGtpv1MessageLengthChoiceEnum
}{
	VALUE:     PatternFlowGtpv1MessageLengthChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1MessageLengthChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1MessageLengthChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1MessageLengthChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1MessageLength) Choice() PatternFlowGtpv1MessageLengthChoiceEnum {
	return PatternFlowGtpv1MessageLengthChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1MessageLength) SetChoice(value PatternFlowGtpv1MessageLengthChoiceEnum) PatternFlowGtpv1MessageLength {
	intValue, ok := snappipb.PatternFlowGtpv1MessageLength_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1MessageLengthChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1MessageLength_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv1MessageLength object
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) SetValue(value int32) PatternFlowGtpv1MessageLength {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1MessageLengthChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv1MessageLength object
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) SetValues(value []int32) PatternFlowGtpv1MessageLength {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1MessageLengthChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1MessageLength) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1MessageLength) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1MessageLength object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1MessageLength) SetMetricGroup(value string) PatternFlowGtpv1MessageLength {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) Increment() PatternFlowGtpv1MessageLengthCounter {
	obj.SetChoice(PatternFlowGtpv1MessageLengthChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1MessageLengthCounter().Msg()
	}
	return &patternFlowGtpv1MessageLengthCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1MessageLengthCounter value in the PatternFlowGtpv1MessageLength object
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) SetIncrement(value PatternFlowGtpv1MessageLengthCounter) PatternFlowGtpv1MessageLength {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1MessageLengthChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) Decrement() PatternFlowGtpv1MessageLengthCounter {
	obj.SetChoice(PatternFlowGtpv1MessageLengthChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1MessageLengthCounter().Msg()
	}
	return &patternFlowGtpv1MessageLengthCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1MessageLengthCounter value in the PatternFlowGtpv1MessageLength object
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) SetDecrement(value PatternFlowGtpv1MessageLengthCounter) PatternFlowGtpv1MessageLength {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1MessageLengthChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1MessageLength) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1MessageLength.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1MessageLength.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1MessageLength) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1MessageLengthChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv1Teid struct {
	obj *snappipb.PatternFlowGtpv1Teid
}

func NewPatternFlowGtpv1Teid() PatternFlowGtpv1Teid {
	obj := patternFlowGtpv1Teid{obj: &snappipb.PatternFlowGtpv1Teid{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1Teid) Msg() *snappipb.PatternFlowGtpv1Teid {
	return obj.obj
}

func (obj *patternFlowGtpv1Teid) SetMsg(msg *snappipb.PatternFlowGtpv1Teid) PatternFlowGtpv1Teid {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1Teid) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1Teid) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1Teid) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Teid) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1Teid) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Teid) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1Teid) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1Teid interface {
	Msg() *snappipb.PatternFlowGtpv1Teid
	SetMsg(*snappipb.PatternFlowGtpv1Teid) PatternFlowGtpv1Teid
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1TeidChoiceEnum
	SetChoice(value PatternFlowGtpv1TeidChoiceEnum) PatternFlowGtpv1Teid
	HasChoice() bool
	Value() int64
	SetValue(value int64) PatternFlowGtpv1Teid
	HasValue() bool
	Values() []int64
	SetValues(value []int64) PatternFlowGtpv1Teid
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1Teid
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1TeidCounter
	SetIncrement(value PatternFlowGtpv1TeidCounter) PatternFlowGtpv1Teid
	HasIncrement() bool
	Decrement() PatternFlowGtpv1TeidCounter
	SetDecrement(value PatternFlowGtpv1TeidCounter) PatternFlowGtpv1Teid
	HasDecrement() bool
}

type PatternFlowGtpv1TeidChoiceEnum string

var PatternFlowGtpv1TeidChoice = struct {
	VALUE     PatternFlowGtpv1TeidChoiceEnum
	VALUES    PatternFlowGtpv1TeidChoiceEnum
	INCREMENT PatternFlowGtpv1TeidChoiceEnum
	DECREMENT PatternFlowGtpv1TeidChoiceEnum
}{
	VALUE:     PatternFlowGtpv1TeidChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1TeidChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1TeidChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1TeidChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1Teid) Choice() PatternFlowGtpv1TeidChoiceEnum {
	return PatternFlowGtpv1TeidChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1Teid) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1Teid) SetChoice(value PatternFlowGtpv1TeidChoiceEnum) PatternFlowGtpv1Teid {
	intValue, ok := snappipb.PatternFlowGtpv1Teid_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1TeidChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1Teid_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int64
//  description is TBD
func (obj *patternFlowGtpv1Teid) Value() int64 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int64
//  description is TBD
func (obj *patternFlowGtpv1Teid) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int64 value in the PatternFlowGtpv1Teid object
//  description is TBD
func (obj *patternFlowGtpv1Teid) SetValue(value int64) PatternFlowGtpv1Teid {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1TeidChoice.VALUE)
	return obj
}

// Values returns a []int64
//  description is TBD
func (obj *patternFlowGtpv1Teid) Values() []int64 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int64, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int64 value in the PatternFlowGtpv1Teid object
//  description is TBD
func (obj *patternFlowGtpv1Teid) SetValues(value []int64) PatternFlowGtpv1Teid {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int64, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1TeidChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Teid) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Teid) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1Teid object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Teid) SetMetricGroup(value string) PatternFlowGtpv1Teid {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1TeidCounter
//  description is TBD
func (obj *patternFlowGtpv1Teid) Increment() PatternFlowGtpv1TeidCounter {
	obj.SetChoice(PatternFlowGtpv1TeidChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1TeidCounter().Msg()
	}
	return &patternFlowGtpv1TeidCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1TeidCounter
//  description is TBD
func (obj *patternFlowGtpv1Teid) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1TeidCounter value in the PatternFlowGtpv1Teid object
//  description is TBD
func (obj *patternFlowGtpv1Teid) SetIncrement(value PatternFlowGtpv1TeidCounter) PatternFlowGtpv1Teid {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1TeidChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1TeidCounter
//  description is TBD
func (obj *patternFlowGtpv1Teid) Decrement() PatternFlowGtpv1TeidCounter {
	obj.SetChoice(PatternFlowGtpv1TeidChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1TeidCounter().Msg()
	}
	return &patternFlowGtpv1TeidCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1TeidCounter
//  description is TBD
func (obj *patternFlowGtpv1Teid) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1TeidCounter value in the PatternFlowGtpv1Teid object
//  description is TBD
func (obj *patternFlowGtpv1Teid) SetDecrement(value PatternFlowGtpv1TeidCounter) PatternFlowGtpv1Teid {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1TeidChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1Teid) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1Teid.Value <= 4294967295 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1Teid.Values <= 4294967295 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1Teid) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1TeidChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv1SquenceNumber struct {
	obj *snappipb.PatternFlowGtpv1SquenceNumber
}

func NewPatternFlowGtpv1SquenceNumber() PatternFlowGtpv1SquenceNumber {
	obj := patternFlowGtpv1SquenceNumber{obj: &snappipb.PatternFlowGtpv1SquenceNumber{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1SquenceNumber) Msg() *snappipb.PatternFlowGtpv1SquenceNumber {
	return obj.obj
}

func (obj *patternFlowGtpv1SquenceNumber) SetMsg(msg *snappipb.PatternFlowGtpv1SquenceNumber) PatternFlowGtpv1SquenceNumber {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1SquenceNumber) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1SquenceNumber) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1SquenceNumber) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SquenceNumber) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1SquenceNumber) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SquenceNumber) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1SquenceNumber) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1SquenceNumber interface {
	Msg() *snappipb.PatternFlowGtpv1SquenceNumber
	SetMsg(*snappipb.PatternFlowGtpv1SquenceNumber) PatternFlowGtpv1SquenceNumber
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1SquenceNumberChoiceEnum
	SetChoice(value PatternFlowGtpv1SquenceNumberChoiceEnum) PatternFlowGtpv1SquenceNumber
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv1SquenceNumber
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1SquenceNumber
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1SquenceNumber
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1SquenceNumberCounter
	SetIncrement(value PatternFlowGtpv1SquenceNumberCounter) PatternFlowGtpv1SquenceNumber
	HasIncrement() bool
	Decrement() PatternFlowGtpv1SquenceNumberCounter
	SetDecrement(value PatternFlowGtpv1SquenceNumberCounter) PatternFlowGtpv1SquenceNumber
	HasDecrement() bool
}

type PatternFlowGtpv1SquenceNumberChoiceEnum string

var PatternFlowGtpv1SquenceNumberChoice = struct {
	VALUE     PatternFlowGtpv1SquenceNumberChoiceEnum
	VALUES    PatternFlowGtpv1SquenceNumberChoiceEnum
	INCREMENT PatternFlowGtpv1SquenceNumberChoiceEnum
	DECREMENT PatternFlowGtpv1SquenceNumberChoiceEnum
}{
	VALUE:     PatternFlowGtpv1SquenceNumberChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1SquenceNumberChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1SquenceNumberChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1SquenceNumberChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1SquenceNumber) Choice() PatternFlowGtpv1SquenceNumberChoiceEnum {
	return PatternFlowGtpv1SquenceNumberChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1SquenceNumber) SetChoice(value PatternFlowGtpv1SquenceNumberChoiceEnum) PatternFlowGtpv1SquenceNumber {
	intValue, ok := snappipb.PatternFlowGtpv1SquenceNumber_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1SquenceNumberChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1SquenceNumber_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv1SquenceNumber object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) SetValue(value int32) PatternFlowGtpv1SquenceNumber {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1SquenceNumberChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv1SquenceNumber object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) SetValues(value []int32) PatternFlowGtpv1SquenceNumber {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1SquenceNumberChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1SquenceNumber) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1SquenceNumber) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1SquenceNumber object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1SquenceNumber) SetMetricGroup(value string) PatternFlowGtpv1SquenceNumber {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1SquenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) Increment() PatternFlowGtpv1SquenceNumberCounter {
	obj.SetChoice(PatternFlowGtpv1SquenceNumberChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1SquenceNumberCounter().Msg()
	}
	return &patternFlowGtpv1SquenceNumberCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1SquenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1SquenceNumberCounter value in the PatternFlowGtpv1SquenceNumber object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) SetIncrement(value PatternFlowGtpv1SquenceNumberCounter) PatternFlowGtpv1SquenceNumber {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1SquenceNumberChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1SquenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) Decrement() PatternFlowGtpv1SquenceNumberCounter {
	obj.SetChoice(PatternFlowGtpv1SquenceNumberChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1SquenceNumberCounter().Msg()
	}
	return &patternFlowGtpv1SquenceNumberCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1SquenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1SquenceNumberCounter value in the PatternFlowGtpv1SquenceNumber object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) SetDecrement(value PatternFlowGtpv1SquenceNumberCounter) PatternFlowGtpv1SquenceNumber {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1SquenceNumberChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1SquenceNumber) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1SquenceNumber.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1SquenceNumber.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1SquenceNumber) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1SquenceNumberChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv1NPduNumber struct {
	obj *snappipb.PatternFlowGtpv1NPduNumber
}

func NewPatternFlowGtpv1NPduNumber() PatternFlowGtpv1NPduNumber {
	obj := patternFlowGtpv1NPduNumber{obj: &snappipb.PatternFlowGtpv1NPduNumber{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1NPduNumber) Msg() *snappipb.PatternFlowGtpv1NPduNumber {
	return obj.obj
}

func (obj *patternFlowGtpv1NPduNumber) SetMsg(msg *snappipb.PatternFlowGtpv1NPduNumber) PatternFlowGtpv1NPduNumber {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1NPduNumber) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1NPduNumber) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1NPduNumber) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NPduNumber) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1NPduNumber) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NPduNumber) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1NPduNumber) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1NPduNumber interface {
	Msg() *snappipb.PatternFlowGtpv1NPduNumber
	SetMsg(*snappipb.PatternFlowGtpv1NPduNumber) PatternFlowGtpv1NPduNumber
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1NPduNumberChoiceEnum
	SetChoice(value PatternFlowGtpv1NPduNumberChoiceEnum) PatternFlowGtpv1NPduNumber
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv1NPduNumber
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1NPduNumber
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1NPduNumber
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1NPduNumberCounter
	SetIncrement(value PatternFlowGtpv1NPduNumberCounter) PatternFlowGtpv1NPduNumber
	HasIncrement() bool
	Decrement() PatternFlowGtpv1NPduNumberCounter
	SetDecrement(value PatternFlowGtpv1NPduNumberCounter) PatternFlowGtpv1NPduNumber
	HasDecrement() bool
}

type PatternFlowGtpv1NPduNumberChoiceEnum string

var PatternFlowGtpv1NPduNumberChoice = struct {
	VALUE     PatternFlowGtpv1NPduNumberChoiceEnum
	VALUES    PatternFlowGtpv1NPduNumberChoiceEnum
	INCREMENT PatternFlowGtpv1NPduNumberChoiceEnum
	DECREMENT PatternFlowGtpv1NPduNumberChoiceEnum
}{
	VALUE:     PatternFlowGtpv1NPduNumberChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1NPduNumberChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1NPduNumberChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1NPduNumberChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1NPduNumber) Choice() PatternFlowGtpv1NPduNumberChoiceEnum {
	return PatternFlowGtpv1NPduNumberChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1NPduNumber) SetChoice(value PatternFlowGtpv1NPduNumberChoiceEnum) PatternFlowGtpv1NPduNumber {
	intValue, ok := snappipb.PatternFlowGtpv1NPduNumber_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1NPduNumberChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1NPduNumber_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv1NPduNumber object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) SetValue(value int32) PatternFlowGtpv1NPduNumber {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1NPduNumberChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv1NPduNumber object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) SetValues(value []int32) PatternFlowGtpv1NPduNumber {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1NPduNumberChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1NPduNumber) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1NPduNumber) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1NPduNumber object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1NPduNumber) SetMetricGroup(value string) PatternFlowGtpv1NPduNumber {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1NPduNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) Increment() PatternFlowGtpv1NPduNumberCounter {
	obj.SetChoice(PatternFlowGtpv1NPduNumberChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1NPduNumberCounter().Msg()
	}
	return &patternFlowGtpv1NPduNumberCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1NPduNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1NPduNumberCounter value in the PatternFlowGtpv1NPduNumber object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) SetIncrement(value PatternFlowGtpv1NPduNumberCounter) PatternFlowGtpv1NPduNumber {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1NPduNumberChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1NPduNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) Decrement() PatternFlowGtpv1NPduNumberCounter {
	obj.SetChoice(PatternFlowGtpv1NPduNumberChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1NPduNumberCounter().Msg()
	}
	return &patternFlowGtpv1NPduNumberCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1NPduNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1NPduNumberCounter value in the PatternFlowGtpv1NPduNumber object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) SetDecrement(value PatternFlowGtpv1NPduNumberCounter) PatternFlowGtpv1NPduNumber {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1NPduNumberChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1NPduNumber) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1NPduNumber.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1NPduNumber.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1NPduNumber) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1NPduNumberChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv1NextExtensionHeaderType struct {
	obj *snappipb.PatternFlowGtpv1NextExtensionHeaderType
}

func NewPatternFlowGtpv1NextExtensionHeaderType() PatternFlowGtpv1NextExtensionHeaderType {
	obj := patternFlowGtpv1NextExtensionHeaderType{obj: &snappipb.PatternFlowGtpv1NextExtensionHeaderType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) Msg() *snappipb.PatternFlowGtpv1NextExtensionHeaderType {
	return obj.obj
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) SetMsg(msg *snappipb.PatternFlowGtpv1NextExtensionHeaderType) PatternFlowGtpv1NextExtensionHeaderType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1NextExtensionHeaderType interface {
	Msg() *snappipb.PatternFlowGtpv1NextExtensionHeaderType
	SetMsg(*snappipb.PatternFlowGtpv1NextExtensionHeaderType) PatternFlowGtpv1NextExtensionHeaderType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum
	SetChoice(value PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum) PatternFlowGtpv1NextExtensionHeaderType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv1NextExtensionHeaderType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1NextExtensionHeaderType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1NextExtensionHeaderType
	HasMetricGroup() bool
	Increment() PatternFlowGtpv1NextExtensionHeaderTypeCounter
	SetIncrement(value PatternFlowGtpv1NextExtensionHeaderTypeCounter) PatternFlowGtpv1NextExtensionHeaderType
	HasIncrement() bool
	Decrement() PatternFlowGtpv1NextExtensionHeaderTypeCounter
	SetDecrement(value PatternFlowGtpv1NextExtensionHeaderTypeCounter) PatternFlowGtpv1NextExtensionHeaderType
	HasDecrement() bool
}

type PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum string

var PatternFlowGtpv1NextExtensionHeaderTypeChoice = struct {
	VALUE     PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum
	VALUES    PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum
	INCREMENT PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum
	DECREMENT PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum
}{
	VALUE:     PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum("value"),
	VALUES:    PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) Choice() PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum {
	return PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) SetChoice(value PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum) PatternFlowGtpv1NextExtensionHeaderType {
	intValue, ok := snappipb.PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv1NextExtensionHeaderTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv1NextExtensionHeaderType object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) SetValue(value int32) PatternFlowGtpv1NextExtensionHeaderType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv1NextExtensionHeaderTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv1NextExtensionHeaderType object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) SetValues(value []int32) PatternFlowGtpv1NextExtensionHeaderType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv1NextExtensionHeaderTypeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1NextExtensionHeaderType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1NextExtensionHeaderType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv1NextExtensionHeaderType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1NextExtensionHeaderType) SetMetricGroup(value string) PatternFlowGtpv1NextExtensionHeaderType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv1NextExtensionHeaderTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) Increment() PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	obj.SetChoice(PatternFlowGtpv1NextExtensionHeaderTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv1NextExtensionHeaderTypeCounter().Msg()
	}
	return &patternFlowGtpv1NextExtensionHeaderTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv1NextExtensionHeaderTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv1NextExtensionHeaderTypeCounter value in the PatternFlowGtpv1NextExtensionHeaderType object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) SetIncrement(value PatternFlowGtpv1NextExtensionHeaderTypeCounter) PatternFlowGtpv1NextExtensionHeaderType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1NextExtensionHeaderTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv1NextExtensionHeaderTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) Decrement() PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	obj.SetChoice(PatternFlowGtpv1NextExtensionHeaderTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv1NextExtensionHeaderTypeCounter().Msg()
	}
	return &patternFlowGtpv1NextExtensionHeaderTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv1NextExtensionHeaderTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv1NextExtensionHeaderTypeCounter value in the PatternFlowGtpv1NextExtensionHeaderType object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) SetDecrement(value PatternFlowGtpv1NextExtensionHeaderTypeCounter) PatternFlowGtpv1NextExtensionHeaderType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv1NextExtensionHeaderTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1NextExtensionHeaderType.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1NextExtensionHeaderType.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv1NextExtensionHeaderTypeChoice.VALUE)
		obj.SetValue(0)
	}

}

type flowGtpExtension struct {
	obj *snappipb.FlowGtpExtension
}

func NewFlowGtpExtension() FlowGtpExtension {
	obj := flowGtpExtension{obj: &snappipb.FlowGtpExtension{}}
	obj.setDefault()
	return &obj
}

func (obj *flowGtpExtension) Msg() *snappipb.FlowGtpExtension {
	return obj.obj
}

func (obj *flowGtpExtension) SetMsg(msg *snappipb.FlowGtpExtension) FlowGtpExtension {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowGtpExtension) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowGtpExtension) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowGtpExtension) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpExtension) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowGtpExtension) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpExtension) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowGtpExtension) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowGtpExtension interface {
	Msg() *snappipb.FlowGtpExtension
	SetMsg(*snappipb.FlowGtpExtension) FlowGtpExtension
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	ExtensionLength() PatternFlowGtpExtensionExtensionLength
	SetExtensionLength(value PatternFlowGtpExtensionExtensionLength) FlowGtpExtension
	HasExtensionLength() bool
	Contents() PatternFlowGtpExtensionContents
	SetContents(value PatternFlowGtpExtensionContents) FlowGtpExtension
	HasContents() bool
	NextExtensionHeader() PatternFlowGtpExtensionNextExtensionHeader
	SetNextExtensionHeader(value PatternFlowGtpExtensionNextExtensionHeader) FlowGtpExtension
	HasNextExtensionHeader() bool
}

// ExtensionLength returns a PatternFlowGtpExtensionExtensionLength
//  description is TBD
func (obj *flowGtpExtension) ExtensionLength() PatternFlowGtpExtensionExtensionLength {
	if obj.obj.ExtensionLength == nil {
		obj.obj.ExtensionLength = NewPatternFlowGtpExtensionExtensionLength().Msg()
	}
	return &patternFlowGtpExtensionExtensionLength{obj: obj.obj.ExtensionLength}
}

// ExtensionLength returns a PatternFlowGtpExtensionExtensionLength
//  description is TBD
func (obj *flowGtpExtension) HasExtensionLength() bool {
	return obj.obj.ExtensionLength != nil
}

// SetExtensionLength sets the PatternFlowGtpExtensionExtensionLength value in the FlowGtpExtension object
//  description is TBD
func (obj *flowGtpExtension) SetExtensionLength(value PatternFlowGtpExtensionExtensionLength) FlowGtpExtension {
	obj.ExtensionLength().SetMsg(value.Msg())

	return obj
}

// Contents returns a PatternFlowGtpExtensionContents
//  description is TBD
func (obj *flowGtpExtension) Contents() PatternFlowGtpExtensionContents {
	if obj.obj.Contents == nil {
		obj.obj.Contents = NewPatternFlowGtpExtensionContents().Msg()
	}
	return &patternFlowGtpExtensionContents{obj: obj.obj.Contents}
}

// Contents returns a PatternFlowGtpExtensionContents
//  description is TBD
func (obj *flowGtpExtension) HasContents() bool {
	return obj.obj.Contents != nil
}

// SetContents sets the PatternFlowGtpExtensionContents value in the FlowGtpExtension object
//  description is TBD
func (obj *flowGtpExtension) SetContents(value PatternFlowGtpExtensionContents) FlowGtpExtension {
	obj.Contents().SetMsg(value.Msg())

	return obj
}

// NextExtensionHeader returns a PatternFlowGtpExtensionNextExtensionHeader
//  description is TBD
func (obj *flowGtpExtension) NextExtensionHeader() PatternFlowGtpExtensionNextExtensionHeader {
	if obj.obj.NextExtensionHeader == nil {
		obj.obj.NextExtensionHeader = NewPatternFlowGtpExtensionNextExtensionHeader().Msg()
	}
	return &patternFlowGtpExtensionNextExtensionHeader{obj: obj.obj.NextExtensionHeader}
}

// NextExtensionHeader returns a PatternFlowGtpExtensionNextExtensionHeader
//  description is TBD
func (obj *flowGtpExtension) HasNextExtensionHeader() bool {
	return obj.obj.NextExtensionHeader != nil
}

// SetNextExtensionHeader sets the PatternFlowGtpExtensionNextExtensionHeader value in the FlowGtpExtension object
//  description is TBD
func (obj *flowGtpExtension) SetNextExtensionHeader(value PatternFlowGtpExtensionNextExtensionHeader) FlowGtpExtension {
	obj.NextExtensionHeader().SetMsg(value.Msg())

	return obj
}

func (obj *flowGtpExtension) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.ExtensionLength != nil {
		obj.ExtensionLength().validateObj(set_default)
	}

	if obj.obj.Contents != nil {
		obj.Contents().validateObj(set_default)
	}

	if obj.obj.NextExtensionHeader != nil {
		obj.NextExtensionHeader().validateObj(set_default)
	}
}

func (obj *flowGtpExtension) setDefault() {

}

type patternFlowGtpv2Version struct {
	obj *snappipb.PatternFlowGtpv2Version
}

func NewPatternFlowGtpv2Version() PatternFlowGtpv2Version {
	obj := patternFlowGtpv2Version{obj: &snappipb.PatternFlowGtpv2Version{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2Version) Msg() *snappipb.PatternFlowGtpv2Version {
	return obj.obj
}

func (obj *patternFlowGtpv2Version) SetMsg(msg *snappipb.PatternFlowGtpv2Version) PatternFlowGtpv2Version {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2Version) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2Version) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Version) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Version) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Version) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Version) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2Version) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2Version interface {
	Msg() *snappipb.PatternFlowGtpv2Version
	SetMsg(*snappipb.PatternFlowGtpv2Version) PatternFlowGtpv2Version
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv2VersionChoiceEnum
	SetChoice(value PatternFlowGtpv2VersionChoiceEnum) PatternFlowGtpv2Version
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv2Version
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2Version
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2Version
	HasMetricGroup() bool
	Increment() PatternFlowGtpv2VersionCounter
	SetIncrement(value PatternFlowGtpv2VersionCounter) PatternFlowGtpv2Version
	HasIncrement() bool
	Decrement() PatternFlowGtpv2VersionCounter
	SetDecrement(value PatternFlowGtpv2VersionCounter) PatternFlowGtpv2Version
	HasDecrement() bool
}

type PatternFlowGtpv2VersionChoiceEnum string

var PatternFlowGtpv2VersionChoice = struct {
	VALUE     PatternFlowGtpv2VersionChoiceEnum
	VALUES    PatternFlowGtpv2VersionChoiceEnum
	INCREMENT PatternFlowGtpv2VersionChoiceEnum
	DECREMENT PatternFlowGtpv2VersionChoiceEnum
}{
	VALUE:     PatternFlowGtpv2VersionChoiceEnum("value"),
	VALUES:    PatternFlowGtpv2VersionChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv2VersionChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv2VersionChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv2Version) Choice() PatternFlowGtpv2VersionChoiceEnum {
	return PatternFlowGtpv2VersionChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv2Version) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv2Version) SetChoice(value PatternFlowGtpv2VersionChoiceEnum) PatternFlowGtpv2Version {
	intValue, ok := snappipb.PatternFlowGtpv2Version_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv2VersionChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv2Version_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Version) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 2
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Version) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv2Version object
//  description is TBD
func (obj *patternFlowGtpv2Version) SetValue(value int32) PatternFlowGtpv2Version {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv2VersionChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2Version) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv2Version object
//  description is TBD
func (obj *patternFlowGtpv2Version) SetValues(value []int32) PatternFlowGtpv2Version {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv2VersionChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Version) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Version) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv2Version object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Version) SetMetricGroup(value string) PatternFlowGtpv2Version {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv2VersionCounter
//  description is TBD
func (obj *patternFlowGtpv2Version) Increment() PatternFlowGtpv2VersionCounter {
	obj.SetChoice(PatternFlowGtpv2VersionChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv2VersionCounter().Msg()
	}
	return &patternFlowGtpv2VersionCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv2VersionCounter
//  description is TBD
func (obj *patternFlowGtpv2Version) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv2VersionCounter value in the PatternFlowGtpv2Version object
//  description is TBD
func (obj *patternFlowGtpv2Version) SetIncrement(value PatternFlowGtpv2VersionCounter) PatternFlowGtpv2Version {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2VersionChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv2VersionCounter
//  description is TBD
func (obj *patternFlowGtpv2Version) Decrement() PatternFlowGtpv2VersionCounter {
	obj.SetChoice(PatternFlowGtpv2VersionChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv2VersionCounter().Msg()
	}
	return &patternFlowGtpv2VersionCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv2VersionCounter
//  description is TBD
func (obj *patternFlowGtpv2Version) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv2VersionCounter value in the PatternFlowGtpv2Version object
//  description is TBD
func (obj *patternFlowGtpv2Version) SetDecrement(value PatternFlowGtpv2VersionCounter) PatternFlowGtpv2Version {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2VersionChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv2Version) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Version.Value <= 7 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Version.Values <= 7 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv2Version) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv2VersionChoice.VALUE)
		obj.SetValue(2)
	}

}

type patternFlowGtpv2PiggybackingFlag struct {
	obj *snappipb.PatternFlowGtpv2PiggybackingFlag
}

func NewPatternFlowGtpv2PiggybackingFlag() PatternFlowGtpv2PiggybackingFlag {
	obj := patternFlowGtpv2PiggybackingFlag{obj: &snappipb.PatternFlowGtpv2PiggybackingFlag{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2PiggybackingFlag) Msg() *snappipb.PatternFlowGtpv2PiggybackingFlag {
	return obj.obj
}

func (obj *patternFlowGtpv2PiggybackingFlag) SetMsg(msg *snappipb.PatternFlowGtpv2PiggybackingFlag) PatternFlowGtpv2PiggybackingFlag {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2PiggybackingFlag) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2PiggybackingFlag) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2PiggybackingFlag) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2PiggybackingFlag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2PiggybackingFlag) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2PiggybackingFlag) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2PiggybackingFlag) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2PiggybackingFlag interface {
	Msg() *snappipb.PatternFlowGtpv2PiggybackingFlag
	SetMsg(*snappipb.PatternFlowGtpv2PiggybackingFlag) PatternFlowGtpv2PiggybackingFlag
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv2PiggybackingFlagChoiceEnum
	SetChoice(value PatternFlowGtpv2PiggybackingFlagChoiceEnum) PatternFlowGtpv2PiggybackingFlag
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv2PiggybackingFlag
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2PiggybackingFlag
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2PiggybackingFlag
	HasMetricGroup() bool
	Increment() PatternFlowGtpv2PiggybackingFlagCounter
	SetIncrement(value PatternFlowGtpv2PiggybackingFlagCounter) PatternFlowGtpv2PiggybackingFlag
	HasIncrement() bool
	Decrement() PatternFlowGtpv2PiggybackingFlagCounter
	SetDecrement(value PatternFlowGtpv2PiggybackingFlagCounter) PatternFlowGtpv2PiggybackingFlag
	HasDecrement() bool
}

type PatternFlowGtpv2PiggybackingFlagChoiceEnum string

var PatternFlowGtpv2PiggybackingFlagChoice = struct {
	VALUE     PatternFlowGtpv2PiggybackingFlagChoiceEnum
	VALUES    PatternFlowGtpv2PiggybackingFlagChoiceEnum
	INCREMENT PatternFlowGtpv2PiggybackingFlagChoiceEnum
	DECREMENT PatternFlowGtpv2PiggybackingFlagChoiceEnum
}{
	VALUE:     PatternFlowGtpv2PiggybackingFlagChoiceEnum("value"),
	VALUES:    PatternFlowGtpv2PiggybackingFlagChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv2PiggybackingFlagChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv2PiggybackingFlagChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv2PiggybackingFlag) Choice() PatternFlowGtpv2PiggybackingFlagChoiceEnum {
	return PatternFlowGtpv2PiggybackingFlagChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv2PiggybackingFlag) SetChoice(value PatternFlowGtpv2PiggybackingFlagChoiceEnum) PatternFlowGtpv2PiggybackingFlag {
	intValue, ok := snappipb.PatternFlowGtpv2PiggybackingFlag_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv2PiggybackingFlagChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv2PiggybackingFlag_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv2PiggybackingFlag object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) SetValue(value int32) PatternFlowGtpv2PiggybackingFlag {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv2PiggybackingFlagChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv2PiggybackingFlag object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) SetValues(value []int32) PatternFlowGtpv2PiggybackingFlag {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv2PiggybackingFlagChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2PiggybackingFlag) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2PiggybackingFlag) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv2PiggybackingFlag object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2PiggybackingFlag) SetMetricGroup(value string) PatternFlowGtpv2PiggybackingFlag {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv2PiggybackingFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) Increment() PatternFlowGtpv2PiggybackingFlagCounter {
	obj.SetChoice(PatternFlowGtpv2PiggybackingFlagChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv2PiggybackingFlagCounter().Msg()
	}
	return &patternFlowGtpv2PiggybackingFlagCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv2PiggybackingFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv2PiggybackingFlagCounter value in the PatternFlowGtpv2PiggybackingFlag object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) SetIncrement(value PatternFlowGtpv2PiggybackingFlagCounter) PatternFlowGtpv2PiggybackingFlag {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2PiggybackingFlagChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv2PiggybackingFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) Decrement() PatternFlowGtpv2PiggybackingFlagCounter {
	obj.SetChoice(PatternFlowGtpv2PiggybackingFlagChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv2PiggybackingFlagCounter().Msg()
	}
	return &patternFlowGtpv2PiggybackingFlagCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv2PiggybackingFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv2PiggybackingFlagCounter value in the PatternFlowGtpv2PiggybackingFlag object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) SetDecrement(value PatternFlowGtpv2PiggybackingFlagCounter) PatternFlowGtpv2PiggybackingFlag {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2PiggybackingFlagChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv2PiggybackingFlag) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2PiggybackingFlag.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2PiggybackingFlag.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv2PiggybackingFlag) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv2PiggybackingFlagChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv2TeidFlag struct {
	obj *snappipb.PatternFlowGtpv2TeidFlag
}

func NewPatternFlowGtpv2TeidFlag() PatternFlowGtpv2TeidFlag {
	obj := patternFlowGtpv2TeidFlag{obj: &snappipb.PatternFlowGtpv2TeidFlag{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2TeidFlag) Msg() *snappipb.PatternFlowGtpv2TeidFlag {
	return obj.obj
}

func (obj *patternFlowGtpv2TeidFlag) SetMsg(msg *snappipb.PatternFlowGtpv2TeidFlag) PatternFlowGtpv2TeidFlag {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2TeidFlag) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2TeidFlag) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2TeidFlag) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidFlag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2TeidFlag) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidFlag) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2TeidFlag) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2TeidFlag interface {
	Msg() *snappipb.PatternFlowGtpv2TeidFlag
	SetMsg(*snappipb.PatternFlowGtpv2TeidFlag) PatternFlowGtpv2TeidFlag
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv2TeidFlagChoiceEnum
	SetChoice(value PatternFlowGtpv2TeidFlagChoiceEnum) PatternFlowGtpv2TeidFlag
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv2TeidFlag
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2TeidFlag
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2TeidFlag
	HasMetricGroup() bool
	Increment() PatternFlowGtpv2TeidFlagCounter
	SetIncrement(value PatternFlowGtpv2TeidFlagCounter) PatternFlowGtpv2TeidFlag
	HasIncrement() bool
	Decrement() PatternFlowGtpv2TeidFlagCounter
	SetDecrement(value PatternFlowGtpv2TeidFlagCounter) PatternFlowGtpv2TeidFlag
	HasDecrement() bool
}

type PatternFlowGtpv2TeidFlagChoiceEnum string

var PatternFlowGtpv2TeidFlagChoice = struct {
	VALUE     PatternFlowGtpv2TeidFlagChoiceEnum
	VALUES    PatternFlowGtpv2TeidFlagChoiceEnum
	INCREMENT PatternFlowGtpv2TeidFlagChoiceEnum
	DECREMENT PatternFlowGtpv2TeidFlagChoiceEnum
}{
	VALUE:     PatternFlowGtpv2TeidFlagChoiceEnum("value"),
	VALUES:    PatternFlowGtpv2TeidFlagChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv2TeidFlagChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv2TeidFlagChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv2TeidFlag) Choice() PatternFlowGtpv2TeidFlagChoiceEnum {
	return PatternFlowGtpv2TeidFlagChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv2TeidFlag) SetChoice(value PatternFlowGtpv2TeidFlagChoiceEnum) PatternFlowGtpv2TeidFlag {
	intValue, ok := snappipb.PatternFlowGtpv2TeidFlag_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv2TeidFlagChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv2TeidFlag_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv2TeidFlag object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) SetValue(value int32) PatternFlowGtpv2TeidFlag {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv2TeidFlagChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv2TeidFlag object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) SetValues(value []int32) PatternFlowGtpv2TeidFlag {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv2TeidFlagChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2TeidFlag) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2TeidFlag) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv2TeidFlag object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2TeidFlag) SetMetricGroup(value string) PatternFlowGtpv2TeidFlag {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv2TeidFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) Increment() PatternFlowGtpv2TeidFlagCounter {
	obj.SetChoice(PatternFlowGtpv2TeidFlagChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv2TeidFlagCounter().Msg()
	}
	return &patternFlowGtpv2TeidFlagCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv2TeidFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv2TeidFlagCounter value in the PatternFlowGtpv2TeidFlag object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) SetIncrement(value PatternFlowGtpv2TeidFlagCounter) PatternFlowGtpv2TeidFlag {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2TeidFlagChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv2TeidFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) Decrement() PatternFlowGtpv2TeidFlagCounter {
	obj.SetChoice(PatternFlowGtpv2TeidFlagChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv2TeidFlagCounter().Msg()
	}
	return &patternFlowGtpv2TeidFlagCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv2TeidFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv2TeidFlagCounter value in the PatternFlowGtpv2TeidFlag object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) SetDecrement(value PatternFlowGtpv2TeidFlagCounter) PatternFlowGtpv2TeidFlag {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2TeidFlagChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv2TeidFlag) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2TeidFlag.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2TeidFlag.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv2TeidFlag) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv2TeidFlagChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv2Spare1 struct {
	obj *snappipb.PatternFlowGtpv2Spare1
}

func NewPatternFlowGtpv2Spare1() PatternFlowGtpv2Spare1 {
	obj := patternFlowGtpv2Spare1{obj: &snappipb.PatternFlowGtpv2Spare1{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2Spare1) Msg() *snappipb.PatternFlowGtpv2Spare1 {
	return obj.obj
}

func (obj *patternFlowGtpv2Spare1) SetMsg(msg *snappipb.PatternFlowGtpv2Spare1) PatternFlowGtpv2Spare1 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2Spare1) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2Spare1) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare1) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare1) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare1) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare1) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2Spare1 interface {
	Msg() *snappipb.PatternFlowGtpv2Spare1
	SetMsg(*snappipb.PatternFlowGtpv2Spare1) PatternFlowGtpv2Spare1
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv2Spare1ChoiceEnum
	SetChoice(value PatternFlowGtpv2Spare1ChoiceEnum) PatternFlowGtpv2Spare1
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv2Spare1
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2Spare1
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2Spare1
	HasMetricGroup() bool
	Increment() PatternFlowGtpv2Spare1Counter
	SetIncrement(value PatternFlowGtpv2Spare1Counter) PatternFlowGtpv2Spare1
	HasIncrement() bool
	Decrement() PatternFlowGtpv2Spare1Counter
	SetDecrement(value PatternFlowGtpv2Spare1Counter) PatternFlowGtpv2Spare1
	HasDecrement() bool
}

type PatternFlowGtpv2Spare1ChoiceEnum string

var PatternFlowGtpv2Spare1Choice = struct {
	VALUE     PatternFlowGtpv2Spare1ChoiceEnum
	VALUES    PatternFlowGtpv2Spare1ChoiceEnum
	INCREMENT PatternFlowGtpv2Spare1ChoiceEnum
	DECREMENT PatternFlowGtpv2Spare1ChoiceEnum
}{
	VALUE:     PatternFlowGtpv2Spare1ChoiceEnum("value"),
	VALUES:    PatternFlowGtpv2Spare1ChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv2Spare1ChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv2Spare1ChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv2Spare1) Choice() PatternFlowGtpv2Spare1ChoiceEnum {
	return PatternFlowGtpv2Spare1ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv2Spare1) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv2Spare1) SetChoice(value PatternFlowGtpv2Spare1ChoiceEnum) PatternFlowGtpv2Spare1 {
	intValue, ok := snappipb.PatternFlowGtpv2Spare1_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv2Spare1ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv2Spare1_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv2Spare1 object
//  description is TBD
func (obj *patternFlowGtpv2Spare1) SetValue(value int32) PatternFlowGtpv2Spare1 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv2Spare1Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv2Spare1 object
//  description is TBD
func (obj *patternFlowGtpv2Spare1) SetValues(value []int32) PatternFlowGtpv2Spare1 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv2Spare1Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Spare1) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Spare1) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv2Spare1 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Spare1) SetMetricGroup(value string) PatternFlowGtpv2Spare1 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv2Spare1Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare1) Increment() PatternFlowGtpv2Spare1Counter {
	obj.SetChoice(PatternFlowGtpv2Spare1Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv2Spare1Counter().Msg()
	}
	return &patternFlowGtpv2Spare1Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv2Spare1Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare1) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv2Spare1Counter value in the PatternFlowGtpv2Spare1 object
//  description is TBD
func (obj *patternFlowGtpv2Spare1) SetIncrement(value PatternFlowGtpv2Spare1Counter) PatternFlowGtpv2Spare1 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2Spare1Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv2Spare1Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare1) Decrement() PatternFlowGtpv2Spare1Counter {
	obj.SetChoice(PatternFlowGtpv2Spare1Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv2Spare1Counter().Msg()
	}
	return &patternFlowGtpv2Spare1Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv2Spare1Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare1) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv2Spare1Counter value in the PatternFlowGtpv2Spare1 object
//  description is TBD
func (obj *patternFlowGtpv2Spare1) SetDecrement(value PatternFlowGtpv2Spare1Counter) PatternFlowGtpv2Spare1 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2Spare1Choice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv2Spare1) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Spare1.Value <= 7 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Spare1.Values <= 7 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv2Spare1) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv2Spare1Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv2MessageType struct {
	obj *snappipb.PatternFlowGtpv2MessageType
}

func NewPatternFlowGtpv2MessageType() PatternFlowGtpv2MessageType {
	obj := patternFlowGtpv2MessageType{obj: &snappipb.PatternFlowGtpv2MessageType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2MessageType) Msg() *snappipb.PatternFlowGtpv2MessageType {
	return obj.obj
}

func (obj *patternFlowGtpv2MessageType) SetMsg(msg *snappipb.PatternFlowGtpv2MessageType) PatternFlowGtpv2MessageType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2MessageType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2MessageType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2MessageType interface {
	Msg() *snappipb.PatternFlowGtpv2MessageType
	SetMsg(*snappipb.PatternFlowGtpv2MessageType) PatternFlowGtpv2MessageType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv2MessageTypeChoiceEnum
	SetChoice(value PatternFlowGtpv2MessageTypeChoiceEnum) PatternFlowGtpv2MessageType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv2MessageType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2MessageType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2MessageType
	HasMetricGroup() bool
	Increment() PatternFlowGtpv2MessageTypeCounter
	SetIncrement(value PatternFlowGtpv2MessageTypeCounter) PatternFlowGtpv2MessageType
	HasIncrement() bool
	Decrement() PatternFlowGtpv2MessageTypeCounter
	SetDecrement(value PatternFlowGtpv2MessageTypeCounter) PatternFlowGtpv2MessageType
	HasDecrement() bool
}

type PatternFlowGtpv2MessageTypeChoiceEnum string

var PatternFlowGtpv2MessageTypeChoice = struct {
	VALUE     PatternFlowGtpv2MessageTypeChoiceEnum
	VALUES    PatternFlowGtpv2MessageTypeChoiceEnum
	INCREMENT PatternFlowGtpv2MessageTypeChoiceEnum
	DECREMENT PatternFlowGtpv2MessageTypeChoiceEnum
}{
	VALUE:     PatternFlowGtpv2MessageTypeChoiceEnum("value"),
	VALUES:    PatternFlowGtpv2MessageTypeChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv2MessageTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv2MessageTypeChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv2MessageType) Choice() PatternFlowGtpv2MessageTypeChoiceEnum {
	return PatternFlowGtpv2MessageTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv2MessageType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv2MessageType) SetChoice(value PatternFlowGtpv2MessageTypeChoiceEnum) PatternFlowGtpv2MessageType {
	intValue, ok := snappipb.PatternFlowGtpv2MessageType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv2MessageTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv2MessageType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageType) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv2MessageType object
//  description is TBD
func (obj *patternFlowGtpv2MessageType) SetValue(value int32) PatternFlowGtpv2MessageType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv2MessageTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2MessageType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv2MessageType object
//  description is TBD
func (obj *patternFlowGtpv2MessageType) SetValues(value []int32) PatternFlowGtpv2MessageType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv2MessageTypeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2MessageType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2MessageType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv2MessageType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2MessageType) SetMetricGroup(value string) PatternFlowGtpv2MessageType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv2MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageType) Increment() PatternFlowGtpv2MessageTypeCounter {
	obj.SetChoice(PatternFlowGtpv2MessageTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv2MessageTypeCounter().Msg()
	}
	return &patternFlowGtpv2MessageTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv2MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv2MessageTypeCounter value in the PatternFlowGtpv2MessageType object
//  description is TBD
func (obj *patternFlowGtpv2MessageType) SetIncrement(value PatternFlowGtpv2MessageTypeCounter) PatternFlowGtpv2MessageType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2MessageTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv2MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageType) Decrement() PatternFlowGtpv2MessageTypeCounter {
	obj.SetChoice(PatternFlowGtpv2MessageTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv2MessageTypeCounter().Msg()
	}
	return &patternFlowGtpv2MessageTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv2MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv2MessageTypeCounter value in the PatternFlowGtpv2MessageType object
//  description is TBD
func (obj *patternFlowGtpv2MessageType) SetDecrement(value PatternFlowGtpv2MessageTypeCounter) PatternFlowGtpv2MessageType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2MessageTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv2MessageType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2MessageType.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2MessageType.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv2MessageType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv2MessageTypeChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv2MessageLength struct {
	obj *snappipb.PatternFlowGtpv2MessageLength
}

func NewPatternFlowGtpv2MessageLength() PatternFlowGtpv2MessageLength {
	obj := patternFlowGtpv2MessageLength{obj: &snappipb.PatternFlowGtpv2MessageLength{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2MessageLength) Msg() *snappipb.PatternFlowGtpv2MessageLength {
	return obj.obj
}

func (obj *patternFlowGtpv2MessageLength) SetMsg(msg *snappipb.PatternFlowGtpv2MessageLength) PatternFlowGtpv2MessageLength {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2MessageLength) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2MessageLength) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageLength) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageLength) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageLength) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageLength) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2MessageLength interface {
	Msg() *snappipb.PatternFlowGtpv2MessageLength
	SetMsg(*snappipb.PatternFlowGtpv2MessageLength) PatternFlowGtpv2MessageLength
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv2MessageLengthChoiceEnum
	SetChoice(value PatternFlowGtpv2MessageLengthChoiceEnum) PatternFlowGtpv2MessageLength
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv2MessageLength
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2MessageLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2MessageLength
	HasMetricGroup() bool
	Increment() PatternFlowGtpv2MessageLengthCounter
	SetIncrement(value PatternFlowGtpv2MessageLengthCounter) PatternFlowGtpv2MessageLength
	HasIncrement() bool
	Decrement() PatternFlowGtpv2MessageLengthCounter
	SetDecrement(value PatternFlowGtpv2MessageLengthCounter) PatternFlowGtpv2MessageLength
	HasDecrement() bool
}

type PatternFlowGtpv2MessageLengthChoiceEnum string

var PatternFlowGtpv2MessageLengthChoice = struct {
	VALUE     PatternFlowGtpv2MessageLengthChoiceEnum
	VALUES    PatternFlowGtpv2MessageLengthChoiceEnum
	INCREMENT PatternFlowGtpv2MessageLengthChoiceEnum
	DECREMENT PatternFlowGtpv2MessageLengthChoiceEnum
}{
	VALUE:     PatternFlowGtpv2MessageLengthChoiceEnum("value"),
	VALUES:    PatternFlowGtpv2MessageLengthChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv2MessageLengthChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv2MessageLengthChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv2MessageLength) Choice() PatternFlowGtpv2MessageLengthChoiceEnum {
	return PatternFlowGtpv2MessageLengthChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv2MessageLength) SetChoice(value PatternFlowGtpv2MessageLengthChoiceEnum) PatternFlowGtpv2MessageLength {
	intValue, ok := snappipb.PatternFlowGtpv2MessageLength_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv2MessageLengthChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv2MessageLength_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv2MessageLength object
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) SetValue(value int32) PatternFlowGtpv2MessageLength {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv2MessageLengthChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv2MessageLength object
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) SetValues(value []int32) PatternFlowGtpv2MessageLength {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv2MessageLengthChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2MessageLength) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2MessageLength) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv2MessageLength object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2MessageLength) SetMetricGroup(value string) PatternFlowGtpv2MessageLength {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv2MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) Increment() PatternFlowGtpv2MessageLengthCounter {
	obj.SetChoice(PatternFlowGtpv2MessageLengthChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv2MessageLengthCounter().Msg()
	}
	return &patternFlowGtpv2MessageLengthCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv2MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv2MessageLengthCounter value in the PatternFlowGtpv2MessageLength object
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) SetIncrement(value PatternFlowGtpv2MessageLengthCounter) PatternFlowGtpv2MessageLength {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2MessageLengthChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv2MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) Decrement() PatternFlowGtpv2MessageLengthCounter {
	obj.SetChoice(PatternFlowGtpv2MessageLengthChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv2MessageLengthCounter().Msg()
	}
	return &patternFlowGtpv2MessageLengthCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv2MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv2MessageLengthCounter value in the PatternFlowGtpv2MessageLength object
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) SetDecrement(value PatternFlowGtpv2MessageLengthCounter) PatternFlowGtpv2MessageLength {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2MessageLengthChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv2MessageLength) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2MessageLength.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2MessageLength.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv2MessageLength) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv2MessageLengthChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv2Teid struct {
	obj *snappipb.PatternFlowGtpv2Teid
}

func NewPatternFlowGtpv2Teid() PatternFlowGtpv2Teid {
	obj := patternFlowGtpv2Teid{obj: &snappipb.PatternFlowGtpv2Teid{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2Teid) Msg() *snappipb.PatternFlowGtpv2Teid {
	return obj.obj
}

func (obj *patternFlowGtpv2Teid) SetMsg(msg *snappipb.PatternFlowGtpv2Teid) PatternFlowGtpv2Teid {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2Teid) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2Teid) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Teid) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Teid) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Teid) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Teid) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2Teid) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2Teid interface {
	Msg() *snappipb.PatternFlowGtpv2Teid
	SetMsg(*snappipb.PatternFlowGtpv2Teid) PatternFlowGtpv2Teid
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv2TeidChoiceEnum
	SetChoice(value PatternFlowGtpv2TeidChoiceEnum) PatternFlowGtpv2Teid
	HasChoice() bool
	Value() int64
	SetValue(value int64) PatternFlowGtpv2Teid
	HasValue() bool
	Values() []int64
	SetValues(value []int64) PatternFlowGtpv2Teid
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2Teid
	HasMetricGroup() bool
	Increment() PatternFlowGtpv2TeidCounter
	SetIncrement(value PatternFlowGtpv2TeidCounter) PatternFlowGtpv2Teid
	HasIncrement() bool
	Decrement() PatternFlowGtpv2TeidCounter
	SetDecrement(value PatternFlowGtpv2TeidCounter) PatternFlowGtpv2Teid
	HasDecrement() bool
}

type PatternFlowGtpv2TeidChoiceEnum string

var PatternFlowGtpv2TeidChoice = struct {
	VALUE     PatternFlowGtpv2TeidChoiceEnum
	VALUES    PatternFlowGtpv2TeidChoiceEnum
	INCREMENT PatternFlowGtpv2TeidChoiceEnum
	DECREMENT PatternFlowGtpv2TeidChoiceEnum
}{
	VALUE:     PatternFlowGtpv2TeidChoiceEnum("value"),
	VALUES:    PatternFlowGtpv2TeidChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv2TeidChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv2TeidChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv2Teid) Choice() PatternFlowGtpv2TeidChoiceEnum {
	return PatternFlowGtpv2TeidChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv2Teid) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv2Teid) SetChoice(value PatternFlowGtpv2TeidChoiceEnum) PatternFlowGtpv2Teid {
	intValue, ok := snappipb.PatternFlowGtpv2Teid_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv2TeidChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv2Teid_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int64
//  description is TBD
func (obj *patternFlowGtpv2Teid) Value() int64 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int64
//  description is TBD
func (obj *patternFlowGtpv2Teid) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int64 value in the PatternFlowGtpv2Teid object
//  description is TBD
func (obj *patternFlowGtpv2Teid) SetValue(value int64) PatternFlowGtpv2Teid {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv2TeidChoice.VALUE)
	return obj
}

// Values returns a []int64
//  description is TBD
func (obj *patternFlowGtpv2Teid) Values() []int64 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int64, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int64 value in the PatternFlowGtpv2Teid object
//  description is TBD
func (obj *patternFlowGtpv2Teid) SetValues(value []int64) PatternFlowGtpv2Teid {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int64, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv2TeidChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Teid) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Teid) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv2Teid object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Teid) SetMetricGroup(value string) PatternFlowGtpv2Teid {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv2TeidCounter
//  description is TBD
func (obj *patternFlowGtpv2Teid) Increment() PatternFlowGtpv2TeidCounter {
	obj.SetChoice(PatternFlowGtpv2TeidChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv2TeidCounter().Msg()
	}
	return &patternFlowGtpv2TeidCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv2TeidCounter
//  description is TBD
func (obj *patternFlowGtpv2Teid) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv2TeidCounter value in the PatternFlowGtpv2Teid object
//  description is TBD
func (obj *patternFlowGtpv2Teid) SetIncrement(value PatternFlowGtpv2TeidCounter) PatternFlowGtpv2Teid {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2TeidChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv2TeidCounter
//  description is TBD
func (obj *patternFlowGtpv2Teid) Decrement() PatternFlowGtpv2TeidCounter {
	obj.SetChoice(PatternFlowGtpv2TeidChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv2TeidCounter().Msg()
	}
	return &patternFlowGtpv2TeidCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv2TeidCounter
//  description is TBD
func (obj *patternFlowGtpv2Teid) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv2TeidCounter value in the PatternFlowGtpv2Teid object
//  description is TBD
func (obj *patternFlowGtpv2Teid) SetDecrement(value PatternFlowGtpv2TeidCounter) PatternFlowGtpv2Teid {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2TeidChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv2Teid) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Teid.Value <= 4294967295 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Teid.Values <= 4294967295 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv2Teid) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv2TeidChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv2SequenceNumber struct {
	obj *snappipb.PatternFlowGtpv2SequenceNumber
}

func NewPatternFlowGtpv2SequenceNumber() PatternFlowGtpv2SequenceNumber {
	obj := patternFlowGtpv2SequenceNumber{obj: &snappipb.PatternFlowGtpv2SequenceNumber{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2SequenceNumber) Msg() *snappipb.PatternFlowGtpv2SequenceNumber {
	return obj.obj
}

func (obj *patternFlowGtpv2SequenceNumber) SetMsg(msg *snappipb.PatternFlowGtpv2SequenceNumber) PatternFlowGtpv2SequenceNumber {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2SequenceNumber) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2SequenceNumber) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2SequenceNumber) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2SequenceNumber) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2SequenceNumber) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2SequenceNumber) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2SequenceNumber) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2SequenceNumber interface {
	Msg() *snappipb.PatternFlowGtpv2SequenceNumber
	SetMsg(*snappipb.PatternFlowGtpv2SequenceNumber) PatternFlowGtpv2SequenceNumber
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv2SequenceNumberChoiceEnum
	SetChoice(value PatternFlowGtpv2SequenceNumberChoiceEnum) PatternFlowGtpv2SequenceNumber
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv2SequenceNumber
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2SequenceNumber
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2SequenceNumber
	HasMetricGroup() bool
	Increment() PatternFlowGtpv2SequenceNumberCounter
	SetIncrement(value PatternFlowGtpv2SequenceNumberCounter) PatternFlowGtpv2SequenceNumber
	HasIncrement() bool
	Decrement() PatternFlowGtpv2SequenceNumberCounter
	SetDecrement(value PatternFlowGtpv2SequenceNumberCounter) PatternFlowGtpv2SequenceNumber
	HasDecrement() bool
}

type PatternFlowGtpv2SequenceNumberChoiceEnum string

var PatternFlowGtpv2SequenceNumberChoice = struct {
	VALUE     PatternFlowGtpv2SequenceNumberChoiceEnum
	VALUES    PatternFlowGtpv2SequenceNumberChoiceEnum
	INCREMENT PatternFlowGtpv2SequenceNumberChoiceEnum
	DECREMENT PatternFlowGtpv2SequenceNumberChoiceEnum
}{
	VALUE:     PatternFlowGtpv2SequenceNumberChoiceEnum("value"),
	VALUES:    PatternFlowGtpv2SequenceNumberChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv2SequenceNumberChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv2SequenceNumberChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv2SequenceNumber) Choice() PatternFlowGtpv2SequenceNumberChoiceEnum {
	return PatternFlowGtpv2SequenceNumberChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv2SequenceNumber) SetChoice(value PatternFlowGtpv2SequenceNumberChoiceEnum) PatternFlowGtpv2SequenceNumber {
	intValue, ok := snappipb.PatternFlowGtpv2SequenceNumber_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv2SequenceNumberChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv2SequenceNumber_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv2SequenceNumber object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) SetValue(value int32) PatternFlowGtpv2SequenceNumber {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv2SequenceNumberChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv2SequenceNumber object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) SetValues(value []int32) PatternFlowGtpv2SequenceNumber {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv2SequenceNumberChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2SequenceNumber) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2SequenceNumber) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv2SequenceNumber object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2SequenceNumber) SetMetricGroup(value string) PatternFlowGtpv2SequenceNumber {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv2SequenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) Increment() PatternFlowGtpv2SequenceNumberCounter {
	obj.SetChoice(PatternFlowGtpv2SequenceNumberChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv2SequenceNumberCounter().Msg()
	}
	return &patternFlowGtpv2SequenceNumberCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv2SequenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv2SequenceNumberCounter value in the PatternFlowGtpv2SequenceNumber object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) SetIncrement(value PatternFlowGtpv2SequenceNumberCounter) PatternFlowGtpv2SequenceNumber {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2SequenceNumberChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv2SequenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) Decrement() PatternFlowGtpv2SequenceNumberCounter {
	obj.SetChoice(PatternFlowGtpv2SequenceNumberChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv2SequenceNumberCounter().Msg()
	}
	return &patternFlowGtpv2SequenceNumberCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv2SequenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv2SequenceNumberCounter value in the PatternFlowGtpv2SequenceNumber object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) SetDecrement(value PatternFlowGtpv2SequenceNumberCounter) PatternFlowGtpv2SequenceNumber {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2SequenceNumberChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv2SequenceNumber) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2SequenceNumber.Value <= 16777215 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2SequenceNumber.Values <= 16777215 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv2SequenceNumber) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv2SequenceNumberChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv2Spare2 struct {
	obj *snappipb.PatternFlowGtpv2Spare2
}

func NewPatternFlowGtpv2Spare2() PatternFlowGtpv2Spare2 {
	obj := patternFlowGtpv2Spare2{obj: &snappipb.PatternFlowGtpv2Spare2{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2Spare2) Msg() *snappipb.PatternFlowGtpv2Spare2 {
	return obj.obj
}

func (obj *patternFlowGtpv2Spare2) SetMsg(msg *snappipb.PatternFlowGtpv2Spare2) PatternFlowGtpv2Spare2 {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2Spare2) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2Spare2) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare2) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare2) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare2) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare2) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare2) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2Spare2 interface {
	Msg() *snappipb.PatternFlowGtpv2Spare2
	SetMsg(*snappipb.PatternFlowGtpv2Spare2) PatternFlowGtpv2Spare2
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpv2Spare2ChoiceEnum
	SetChoice(value PatternFlowGtpv2Spare2ChoiceEnum) PatternFlowGtpv2Spare2
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpv2Spare2
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2Spare2
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2Spare2
	HasMetricGroup() bool
	Increment() PatternFlowGtpv2Spare2Counter
	SetIncrement(value PatternFlowGtpv2Spare2Counter) PatternFlowGtpv2Spare2
	HasIncrement() bool
	Decrement() PatternFlowGtpv2Spare2Counter
	SetDecrement(value PatternFlowGtpv2Spare2Counter) PatternFlowGtpv2Spare2
	HasDecrement() bool
}

type PatternFlowGtpv2Spare2ChoiceEnum string

var PatternFlowGtpv2Spare2Choice = struct {
	VALUE     PatternFlowGtpv2Spare2ChoiceEnum
	VALUES    PatternFlowGtpv2Spare2ChoiceEnum
	INCREMENT PatternFlowGtpv2Spare2ChoiceEnum
	DECREMENT PatternFlowGtpv2Spare2ChoiceEnum
}{
	VALUE:     PatternFlowGtpv2Spare2ChoiceEnum("value"),
	VALUES:    PatternFlowGtpv2Spare2ChoiceEnum("values"),
	INCREMENT: PatternFlowGtpv2Spare2ChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpv2Spare2ChoiceEnum("decrement"),
}

func (obj *patternFlowGtpv2Spare2) Choice() PatternFlowGtpv2Spare2ChoiceEnum {
	return PatternFlowGtpv2Spare2ChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpv2Spare2) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpv2Spare2) SetChoice(value PatternFlowGtpv2Spare2ChoiceEnum) PatternFlowGtpv2Spare2 {
	intValue, ok := snappipb.PatternFlowGtpv2Spare2_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpv2Spare2ChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpv2Spare2_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpv2Spare2 object
//  description is TBD
func (obj *patternFlowGtpv2Spare2) SetValue(value int32) PatternFlowGtpv2Spare2 {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpv2Spare2Choice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpv2Spare2 object
//  description is TBD
func (obj *patternFlowGtpv2Spare2) SetValues(value []int32) PatternFlowGtpv2Spare2 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpv2Spare2Choice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Spare2) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Spare2) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpv2Spare2 object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Spare2) SetMetricGroup(value string) PatternFlowGtpv2Spare2 {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpv2Spare2Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare2) Increment() PatternFlowGtpv2Spare2Counter {
	obj.SetChoice(PatternFlowGtpv2Spare2Choice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpv2Spare2Counter().Msg()
	}
	return &patternFlowGtpv2Spare2Counter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpv2Spare2Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare2) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpv2Spare2Counter value in the PatternFlowGtpv2Spare2 object
//  description is TBD
func (obj *patternFlowGtpv2Spare2) SetIncrement(value PatternFlowGtpv2Spare2Counter) PatternFlowGtpv2Spare2 {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2Spare2Choice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpv2Spare2Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare2) Decrement() PatternFlowGtpv2Spare2Counter {
	obj.SetChoice(PatternFlowGtpv2Spare2Choice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpv2Spare2Counter().Msg()
	}
	return &patternFlowGtpv2Spare2Counter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpv2Spare2Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare2) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpv2Spare2Counter value in the PatternFlowGtpv2Spare2 object
//  description is TBD
func (obj *patternFlowGtpv2Spare2) SetDecrement(value PatternFlowGtpv2Spare2Counter) PatternFlowGtpv2Spare2 {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpv2Spare2Choice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpv2Spare2) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Spare2.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Spare2.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpv2Spare2) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpv2Spare2Choice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowArpHardwareType struct {
	obj *snappipb.PatternFlowArpHardwareType
}

func NewPatternFlowArpHardwareType() PatternFlowArpHardwareType {
	obj := patternFlowArpHardwareType{obj: &snappipb.PatternFlowArpHardwareType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpHardwareType) Msg() *snappipb.PatternFlowArpHardwareType {
	return obj.obj
}

func (obj *patternFlowArpHardwareType) SetMsg(msg *snappipb.PatternFlowArpHardwareType) PatternFlowArpHardwareType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpHardwareType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpHardwareType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpHardwareType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpHardwareType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpHardwareType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpHardwareType interface {
	Msg() *snappipb.PatternFlowArpHardwareType
	SetMsg(*snappipb.PatternFlowArpHardwareType) PatternFlowArpHardwareType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowArpHardwareTypeChoiceEnum
	SetChoice(value PatternFlowArpHardwareTypeChoiceEnum) PatternFlowArpHardwareType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowArpHardwareType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowArpHardwareType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpHardwareType
	HasMetricGroup() bool
	Increment() PatternFlowArpHardwareTypeCounter
	SetIncrement(value PatternFlowArpHardwareTypeCounter) PatternFlowArpHardwareType
	HasIncrement() bool
	Decrement() PatternFlowArpHardwareTypeCounter
	SetDecrement(value PatternFlowArpHardwareTypeCounter) PatternFlowArpHardwareType
	HasDecrement() bool
}

type PatternFlowArpHardwareTypeChoiceEnum string

var PatternFlowArpHardwareTypeChoice = struct {
	VALUE     PatternFlowArpHardwareTypeChoiceEnum
	VALUES    PatternFlowArpHardwareTypeChoiceEnum
	INCREMENT PatternFlowArpHardwareTypeChoiceEnum
	DECREMENT PatternFlowArpHardwareTypeChoiceEnum
}{
	VALUE:     PatternFlowArpHardwareTypeChoiceEnum("value"),
	VALUES:    PatternFlowArpHardwareTypeChoiceEnum("values"),
	INCREMENT: PatternFlowArpHardwareTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowArpHardwareTypeChoiceEnum("decrement"),
}

func (obj *patternFlowArpHardwareType) Choice() PatternFlowArpHardwareTypeChoiceEnum {
	return PatternFlowArpHardwareTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowArpHardwareType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowArpHardwareType) SetChoice(value PatternFlowArpHardwareTypeChoiceEnum) PatternFlowArpHardwareType {
	intValue, ok := snappipb.PatternFlowArpHardwareType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowArpHardwareTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowArpHardwareType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareType) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 1
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowArpHardwareType object
//  description is TBD
func (obj *patternFlowArpHardwareType) SetValue(value int32) PatternFlowArpHardwareType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowArpHardwareTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowArpHardwareType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowArpHardwareType object
//  description is TBD
func (obj *patternFlowArpHardwareType) SetValues(value []int32) PatternFlowArpHardwareType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowArpHardwareTypeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpHardwareType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpHardwareType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowArpHardwareType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpHardwareType) SetMetricGroup(value string) PatternFlowArpHardwareType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowArpHardwareTypeCounter
//  description is TBD
func (obj *patternFlowArpHardwareType) Increment() PatternFlowArpHardwareTypeCounter {
	obj.SetChoice(PatternFlowArpHardwareTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowArpHardwareTypeCounter().Msg()
	}
	return &patternFlowArpHardwareTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowArpHardwareTypeCounter
//  description is TBD
func (obj *patternFlowArpHardwareType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowArpHardwareTypeCounter value in the PatternFlowArpHardwareType object
//  description is TBD
func (obj *patternFlowArpHardwareType) SetIncrement(value PatternFlowArpHardwareTypeCounter) PatternFlowArpHardwareType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpHardwareTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowArpHardwareTypeCounter
//  description is TBD
func (obj *patternFlowArpHardwareType) Decrement() PatternFlowArpHardwareTypeCounter {
	obj.SetChoice(PatternFlowArpHardwareTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowArpHardwareTypeCounter().Msg()
	}
	return &patternFlowArpHardwareTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowArpHardwareTypeCounter
//  description is TBD
func (obj *patternFlowArpHardwareType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowArpHardwareTypeCounter value in the PatternFlowArpHardwareType object
//  description is TBD
func (obj *patternFlowArpHardwareType) SetDecrement(value PatternFlowArpHardwareTypeCounter) PatternFlowArpHardwareType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpHardwareTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowArpHardwareType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpHardwareType.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpHardwareType.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowArpHardwareType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowArpHardwareTypeChoice.VALUE)
		obj.SetValue(1)
	}

}

type patternFlowArpProtocolType struct {
	obj *snappipb.PatternFlowArpProtocolType
}

func NewPatternFlowArpProtocolType() PatternFlowArpProtocolType {
	obj := patternFlowArpProtocolType{obj: &snappipb.PatternFlowArpProtocolType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpProtocolType) Msg() *snappipb.PatternFlowArpProtocolType {
	return obj.obj
}

func (obj *patternFlowArpProtocolType) SetMsg(msg *snappipb.PatternFlowArpProtocolType) PatternFlowArpProtocolType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpProtocolType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpProtocolType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpProtocolType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpProtocolType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpProtocolType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpProtocolType interface {
	Msg() *snappipb.PatternFlowArpProtocolType
	SetMsg(*snappipb.PatternFlowArpProtocolType) PatternFlowArpProtocolType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowArpProtocolTypeChoiceEnum
	SetChoice(value PatternFlowArpProtocolTypeChoiceEnum) PatternFlowArpProtocolType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowArpProtocolType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowArpProtocolType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpProtocolType
	HasMetricGroup() bool
	Increment() PatternFlowArpProtocolTypeCounter
	SetIncrement(value PatternFlowArpProtocolTypeCounter) PatternFlowArpProtocolType
	HasIncrement() bool
	Decrement() PatternFlowArpProtocolTypeCounter
	SetDecrement(value PatternFlowArpProtocolTypeCounter) PatternFlowArpProtocolType
	HasDecrement() bool
}

type PatternFlowArpProtocolTypeChoiceEnum string

var PatternFlowArpProtocolTypeChoice = struct {
	VALUE     PatternFlowArpProtocolTypeChoiceEnum
	VALUES    PatternFlowArpProtocolTypeChoiceEnum
	INCREMENT PatternFlowArpProtocolTypeChoiceEnum
	DECREMENT PatternFlowArpProtocolTypeChoiceEnum
}{
	VALUE:     PatternFlowArpProtocolTypeChoiceEnum("value"),
	VALUES:    PatternFlowArpProtocolTypeChoiceEnum("values"),
	INCREMENT: PatternFlowArpProtocolTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowArpProtocolTypeChoiceEnum("decrement"),
}

func (obj *patternFlowArpProtocolType) Choice() PatternFlowArpProtocolTypeChoiceEnum {
	return PatternFlowArpProtocolTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowArpProtocolType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowArpProtocolType) SetChoice(value PatternFlowArpProtocolTypeChoiceEnum) PatternFlowArpProtocolType {
	intValue, ok := snappipb.PatternFlowArpProtocolType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowArpProtocolTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowArpProtocolType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolType) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 2048
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowArpProtocolType object
//  description is TBD
func (obj *patternFlowArpProtocolType) SetValue(value int32) PatternFlowArpProtocolType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowArpProtocolTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowArpProtocolType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowArpProtocolType object
//  description is TBD
func (obj *patternFlowArpProtocolType) SetValues(value []int32) PatternFlowArpProtocolType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowArpProtocolTypeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpProtocolType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpProtocolType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowArpProtocolType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpProtocolType) SetMetricGroup(value string) PatternFlowArpProtocolType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowArpProtocolTypeCounter
//  description is TBD
func (obj *patternFlowArpProtocolType) Increment() PatternFlowArpProtocolTypeCounter {
	obj.SetChoice(PatternFlowArpProtocolTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowArpProtocolTypeCounter().Msg()
	}
	return &patternFlowArpProtocolTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowArpProtocolTypeCounter
//  description is TBD
func (obj *patternFlowArpProtocolType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowArpProtocolTypeCounter value in the PatternFlowArpProtocolType object
//  description is TBD
func (obj *patternFlowArpProtocolType) SetIncrement(value PatternFlowArpProtocolTypeCounter) PatternFlowArpProtocolType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpProtocolTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowArpProtocolTypeCounter
//  description is TBD
func (obj *patternFlowArpProtocolType) Decrement() PatternFlowArpProtocolTypeCounter {
	obj.SetChoice(PatternFlowArpProtocolTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowArpProtocolTypeCounter().Msg()
	}
	return &patternFlowArpProtocolTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowArpProtocolTypeCounter
//  description is TBD
func (obj *patternFlowArpProtocolType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowArpProtocolTypeCounter value in the PatternFlowArpProtocolType object
//  description is TBD
func (obj *patternFlowArpProtocolType) SetDecrement(value PatternFlowArpProtocolTypeCounter) PatternFlowArpProtocolType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpProtocolTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowArpProtocolType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpProtocolType.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpProtocolType.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowArpProtocolType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowArpProtocolTypeChoice.VALUE)
		obj.SetValue(2048)
	}

}

type patternFlowArpHardwareLength struct {
	obj *snappipb.PatternFlowArpHardwareLength
}

func NewPatternFlowArpHardwareLength() PatternFlowArpHardwareLength {
	obj := patternFlowArpHardwareLength{obj: &snappipb.PatternFlowArpHardwareLength{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpHardwareLength) Msg() *snappipb.PatternFlowArpHardwareLength {
	return obj.obj
}

func (obj *patternFlowArpHardwareLength) SetMsg(msg *snappipb.PatternFlowArpHardwareLength) PatternFlowArpHardwareLength {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpHardwareLength) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpHardwareLength) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpHardwareLength) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpHardwareLength) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareLength) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpHardwareLength) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpHardwareLength interface {
	Msg() *snappipb.PatternFlowArpHardwareLength
	SetMsg(*snappipb.PatternFlowArpHardwareLength) PatternFlowArpHardwareLength
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowArpHardwareLengthChoiceEnum
	SetChoice(value PatternFlowArpHardwareLengthChoiceEnum) PatternFlowArpHardwareLength
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowArpHardwareLength
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowArpHardwareLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpHardwareLength
	HasMetricGroup() bool
	Increment() PatternFlowArpHardwareLengthCounter
	SetIncrement(value PatternFlowArpHardwareLengthCounter) PatternFlowArpHardwareLength
	HasIncrement() bool
	Decrement() PatternFlowArpHardwareLengthCounter
	SetDecrement(value PatternFlowArpHardwareLengthCounter) PatternFlowArpHardwareLength
	HasDecrement() bool
}

type PatternFlowArpHardwareLengthChoiceEnum string

var PatternFlowArpHardwareLengthChoice = struct {
	VALUE     PatternFlowArpHardwareLengthChoiceEnum
	VALUES    PatternFlowArpHardwareLengthChoiceEnum
	INCREMENT PatternFlowArpHardwareLengthChoiceEnum
	DECREMENT PatternFlowArpHardwareLengthChoiceEnum
}{
	VALUE:     PatternFlowArpHardwareLengthChoiceEnum("value"),
	VALUES:    PatternFlowArpHardwareLengthChoiceEnum("values"),
	INCREMENT: PatternFlowArpHardwareLengthChoiceEnum("increment"),
	DECREMENT: PatternFlowArpHardwareLengthChoiceEnum("decrement"),
}

func (obj *patternFlowArpHardwareLength) Choice() PatternFlowArpHardwareLengthChoiceEnum {
	return PatternFlowArpHardwareLengthChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowArpHardwareLength) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowArpHardwareLength) SetChoice(value PatternFlowArpHardwareLengthChoiceEnum) PatternFlowArpHardwareLength {
	intValue, ok := snappipb.PatternFlowArpHardwareLength_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowArpHardwareLengthChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowArpHardwareLength_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLength) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 6
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLength) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowArpHardwareLength object
//  description is TBD
func (obj *patternFlowArpHardwareLength) SetValue(value int32) PatternFlowArpHardwareLength {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowArpHardwareLengthChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowArpHardwareLength) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowArpHardwareLength object
//  description is TBD
func (obj *patternFlowArpHardwareLength) SetValues(value []int32) PatternFlowArpHardwareLength {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowArpHardwareLengthChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpHardwareLength) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpHardwareLength) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowArpHardwareLength object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpHardwareLength) SetMetricGroup(value string) PatternFlowArpHardwareLength {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowArpHardwareLengthCounter
//  description is TBD
func (obj *patternFlowArpHardwareLength) Increment() PatternFlowArpHardwareLengthCounter {
	obj.SetChoice(PatternFlowArpHardwareLengthChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowArpHardwareLengthCounter().Msg()
	}
	return &patternFlowArpHardwareLengthCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowArpHardwareLengthCounter
//  description is TBD
func (obj *patternFlowArpHardwareLength) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowArpHardwareLengthCounter value in the PatternFlowArpHardwareLength object
//  description is TBD
func (obj *patternFlowArpHardwareLength) SetIncrement(value PatternFlowArpHardwareLengthCounter) PatternFlowArpHardwareLength {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpHardwareLengthChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowArpHardwareLengthCounter
//  description is TBD
func (obj *patternFlowArpHardwareLength) Decrement() PatternFlowArpHardwareLengthCounter {
	obj.SetChoice(PatternFlowArpHardwareLengthChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowArpHardwareLengthCounter().Msg()
	}
	return &patternFlowArpHardwareLengthCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowArpHardwareLengthCounter
//  description is TBD
func (obj *patternFlowArpHardwareLength) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowArpHardwareLengthCounter value in the PatternFlowArpHardwareLength object
//  description is TBD
func (obj *patternFlowArpHardwareLength) SetDecrement(value PatternFlowArpHardwareLengthCounter) PatternFlowArpHardwareLength {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpHardwareLengthChoice.DECREMENT)
	return obj
}

func (obj *patternFlowArpHardwareLength) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpHardwareLength.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpHardwareLength.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowArpHardwareLength) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowArpHardwareLengthChoice.VALUE)
		obj.SetValue(6)
	}

}

type patternFlowArpProtocolLength struct {
	obj *snappipb.PatternFlowArpProtocolLength
}

func NewPatternFlowArpProtocolLength() PatternFlowArpProtocolLength {
	obj := patternFlowArpProtocolLength{obj: &snappipb.PatternFlowArpProtocolLength{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpProtocolLength) Msg() *snappipb.PatternFlowArpProtocolLength {
	return obj.obj
}

func (obj *patternFlowArpProtocolLength) SetMsg(msg *snappipb.PatternFlowArpProtocolLength) PatternFlowArpProtocolLength {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpProtocolLength) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpProtocolLength) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpProtocolLength) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpProtocolLength) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolLength) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpProtocolLength) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpProtocolLength interface {
	Msg() *snappipb.PatternFlowArpProtocolLength
	SetMsg(*snappipb.PatternFlowArpProtocolLength) PatternFlowArpProtocolLength
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowArpProtocolLengthChoiceEnum
	SetChoice(value PatternFlowArpProtocolLengthChoiceEnum) PatternFlowArpProtocolLength
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowArpProtocolLength
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowArpProtocolLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpProtocolLength
	HasMetricGroup() bool
	Increment() PatternFlowArpProtocolLengthCounter
	SetIncrement(value PatternFlowArpProtocolLengthCounter) PatternFlowArpProtocolLength
	HasIncrement() bool
	Decrement() PatternFlowArpProtocolLengthCounter
	SetDecrement(value PatternFlowArpProtocolLengthCounter) PatternFlowArpProtocolLength
	HasDecrement() bool
}

type PatternFlowArpProtocolLengthChoiceEnum string

var PatternFlowArpProtocolLengthChoice = struct {
	VALUE     PatternFlowArpProtocolLengthChoiceEnum
	VALUES    PatternFlowArpProtocolLengthChoiceEnum
	INCREMENT PatternFlowArpProtocolLengthChoiceEnum
	DECREMENT PatternFlowArpProtocolLengthChoiceEnum
}{
	VALUE:     PatternFlowArpProtocolLengthChoiceEnum("value"),
	VALUES:    PatternFlowArpProtocolLengthChoiceEnum("values"),
	INCREMENT: PatternFlowArpProtocolLengthChoiceEnum("increment"),
	DECREMENT: PatternFlowArpProtocolLengthChoiceEnum("decrement"),
}

func (obj *patternFlowArpProtocolLength) Choice() PatternFlowArpProtocolLengthChoiceEnum {
	return PatternFlowArpProtocolLengthChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowArpProtocolLength) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowArpProtocolLength) SetChoice(value PatternFlowArpProtocolLengthChoiceEnum) PatternFlowArpProtocolLength {
	intValue, ok := snappipb.PatternFlowArpProtocolLength_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowArpProtocolLengthChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowArpProtocolLength_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLength) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 4
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLength) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowArpProtocolLength object
//  description is TBD
func (obj *patternFlowArpProtocolLength) SetValue(value int32) PatternFlowArpProtocolLength {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowArpProtocolLengthChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowArpProtocolLength) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowArpProtocolLength object
//  description is TBD
func (obj *patternFlowArpProtocolLength) SetValues(value []int32) PatternFlowArpProtocolLength {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowArpProtocolLengthChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpProtocolLength) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpProtocolLength) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowArpProtocolLength object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpProtocolLength) SetMetricGroup(value string) PatternFlowArpProtocolLength {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowArpProtocolLengthCounter
//  description is TBD
func (obj *patternFlowArpProtocolLength) Increment() PatternFlowArpProtocolLengthCounter {
	obj.SetChoice(PatternFlowArpProtocolLengthChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowArpProtocolLengthCounter().Msg()
	}
	return &patternFlowArpProtocolLengthCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowArpProtocolLengthCounter
//  description is TBD
func (obj *patternFlowArpProtocolLength) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowArpProtocolLengthCounter value in the PatternFlowArpProtocolLength object
//  description is TBD
func (obj *patternFlowArpProtocolLength) SetIncrement(value PatternFlowArpProtocolLengthCounter) PatternFlowArpProtocolLength {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpProtocolLengthChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowArpProtocolLengthCounter
//  description is TBD
func (obj *patternFlowArpProtocolLength) Decrement() PatternFlowArpProtocolLengthCounter {
	obj.SetChoice(PatternFlowArpProtocolLengthChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowArpProtocolLengthCounter().Msg()
	}
	return &patternFlowArpProtocolLengthCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowArpProtocolLengthCounter
//  description is TBD
func (obj *patternFlowArpProtocolLength) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowArpProtocolLengthCounter value in the PatternFlowArpProtocolLength object
//  description is TBD
func (obj *patternFlowArpProtocolLength) SetDecrement(value PatternFlowArpProtocolLengthCounter) PatternFlowArpProtocolLength {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpProtocolLengthChoice.DECREMENT)
	return obj
}

func (obj *patternFlowArpProtocolLength) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpProtocolLength.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpProtocolLength.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowArpProtocolLength) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowArpProtocolLengthChoice.VALUE)
		obj.SetValue(4)
	}

}

type patternFlowArpOperation struct {
	obj *snappipb.PatternFlowArpOperation
}

func NewPatternFlowArpOperation() PatternFlowArpOperation {
	obj := patternFlowArpOperation{obj: &snappipb.PatternFlowArpOperation{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpOperation) Msg() *snappipb.PatternFlowArpOperation {
	return obj.obj
}

func (obj *patternFlowArpOperation) SetMsg(msg *snappipb.PatternFlowArpOperation) PatternFlowArpOperation {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpOperation) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpOperation) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpOperation) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpOperation) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpOperation) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpOperation) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpOperation) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpOperation interface {
	Msg() *snappipb.PatternFlowArpOperation
	SetMsg(*snappipb.PatternFlowArpOperation) PatternFlowArpOperation
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowArpOperationChoiceEnum
	SetChoice(value PatternFlowArpOperationChoiceEnum) PatternFlowArpOperation
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowArpOperation
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowArpOperation
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpOperation
	HasMetricGroup() bool
	Increment() PatternFlowArpOperationCounter
	SetIncrement(value PatternFlowArpOperationCounter) PatternFlowArpOperation
	HasIncrement() bool
	Decrement() PatternFlowArpOperationCounter
	SetDecrement(value PatternFlowArpOperationCounter) PatternFlowArpOperation
	HasDecrement() bool
}

type PatternFlowArpOperationChoiceEnum string

var PatternFlowArpOperationChoice = struct {
	VALUE     PatternFlowArpOperationChoiceEnum
	VALUES    PatternFlowArpOperationChoiceEnum
	INCREMENT PatternFlowArpOperationChoiceEnum
	DECREMENT PatternFlowArpOperationChoiceEnum
}{
	VALUE:     PatternFlowArpOperationChoiceEnum("value"),
	VALUES:    PatternFlowArpOperationChoiceEnum("values"),
	INCREMENT: PatternFlowArpOperationChoiceEnum("increment"),
	DECREMENT: PatternFlowArpOperationChoiceEnum("decrement"),
}

func (obj *patternFlowArpOperation) Choice() PatternFlowArpOperationChoiceEnum {
	return PatternFlowArpOperationChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowArpOperation) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowArpOperation) SetChoice(value PatternFlowArpOperationChoiceEnum) PatternFlowArpOperation {
	intValue, ok := snappipb.PatternFlowArpOperation_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowArpOperationChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowArpOperation_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpOperation) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 1
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpOperation) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowArpOperation object
//  description is TBD
func (obj *patternFlowArpOperation) SetValue(value int32) PatternFlowArpOperation {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowArpOperationChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowArpOperation) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowArpOperation object
//  description is TBD
func (obj *patternFlowArpOperation) SetValues(value []int32) PatternFlowArpOperation {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowArpOperationChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpOperation) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpOperation) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowArpOperation object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpOperation) SetMetricGroup(value string) PatternFlowArpOperation {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowArpOperationCounter
//  description is TBD
func (obj *patternFlowArpOperation) Increment() PatternFlowArpOperationCounter {
	obj.SetChoice(PatternFlowArpOperationChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowArpOperationCounter().Msg()
	}
	return &patternFlowArpOperationCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowArpOperationCounter
//  description is TBD
func (obj *patternFlowArpOperation) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowArpOperationCounter value in the PatternFlowArpOperation object
//  description is TBD
func (obj *patternFlowArpOperation) SetIncrement(value PatternFlowArpOperationCounter) PatternFlowArpOperation {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpOperationChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowArpOperationCounter
//  description is TBD
func (obj *patternFlowArpOperation) Decrement() PatternFlowArpOperationCounter {
	obj.SetChoice(PatternFlowArpOperationChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowArpOperationCounter().Msg()
	}
	return &patternFlowArpOperationCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowArpOperationCounter
//  description is TBD
func (obj *patternFlowArpOperation) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowArpOperationCounter value in the PatternFlowArpOperation object
//  description is TBD
func (obj *patternFlowArpOperation) SetDecrement(value PatternFlowArpOperationCounter) PatternFlowArpOperation {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpOperationChoice.DECREMENT)
	return obj
}

func (obj *patternFlowArpOperation) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpOperation.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpOperation.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowArpOperation) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowArpOperationChoice.VALUE)
		obj.SetValue(1)
	}

}

type patternFlowArpSenderHardwareAddr struct {
	obj *snappipb.PatternFlowArpSenderHardwareAddr
}

func NewPatternFlowArpSenderHardwareAddr() PatternFlowArpSenderHardwareAddr {
	obj := patternFlowArpSenderHardwareAddr{obj: &snappipb.PatternFlowArpSenderHardwareAddr{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpSenderHardwareAddr) Msg() *snappipb.PatternFlowArpSenderHardwareAddr {
	return obj.obj
}

func (obj *patternFlowArpSenderHardwareAddr) SetMsg(msg *snappipb.PatternFlowArpSenderHardwareAddr) PatternFlowArpSenderHardwareAddr {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpSenderHardwareAddr) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpSenderHardwareAddr) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpSenderHardwareAddr) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderHardwareAddr) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpSenderHardwareAddr) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderHardwareAddr) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpSenderHardwareAddr) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpSenderHardwareAddr interface {
	Msg() *snappipb.PatternFlowArpSenderHardwareAddr
	SetMsg(*snappipb.PatternFlowArpSenderHardwareAddr) PatternFlowArpSenderHardwareAddr
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowArpSenderHardwareAddrChoiceEnum
	SetChoice(value PatternFlowArpSenderHardwareAddrChoiceEnum) PatternFlowArpSenderHardwareAddr
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowArpSenderHardwareAddr
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowArpSenderHardwareAddr
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpSenderHardwareAddr
	HasMetricGroup() bool
	Increment() PatternFlowArpSenderHardwareAddrCounter
	SetIncrement(value PatternFlowArpSenderHardwareAddrCounter) PatternFlowArpSenderHardwareAddr
	HasIncrement() bool
	Decrement() PatternFlowArpSenderHardwareAddrCounter
	SetDecrement(value PatternFlowArpSenderHardwareAddrCounter) PatternFlowArpSenderHardwareAddr
	HasDecrement() bool
}

type PatternFlowArpSenderHardwareAddrChoiceEnum string

var PatternFlowArpSenderHardwareAddrChoice = struct {
	VALUE     PatternFlowArpSenderHardwareAddrChoiceEnum
	VALUES    PatternFlowArpSenderHardwareAddrChoiceEnum
	INCREMENT PatternFlowArpSenderHardwareAddrChoiceEnum
	DECREMENT PatternFlowArpSenderHardwareAddrChoiceEnum
}{
	VALUE:     PatternFlowArpSenderHardwareAddrChoiceEnum("value"),
	VALUES:    PatternFlowArpSenderHardwareAddrChoiceEnum("values"),
	INCREMENT: PatternFlowArpSenderHardwareAddrChoiceEnum("increment"),
	DECREMENT: PatternFlowArpSenderHardwareAddrChoiceEnum("decrement"),
}

func (obj *patternFlowArpSenderHardwareAddr) Choice() PatternFlowArpSenderHardwareAddrChoiceEnum {
	return PatternFlowArpSenderHardwareAddrChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowArpSenderHardwareAddr) SetChoice(value PatternFlowArpSenderHardwareAddrChoiceEnum) PatternFlowArpSenderHardwareAddr {
	intValue, ok := snappipb.PatternFlowArpSenderHardwareAddr_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowArpSenderHardwareAddrChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowArpSenderHardwareAddr_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "00:00:00:00:00:00"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowArpSenderHardwareAddr object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) SetValue(value string) PatternFlowArpSenderHardwareAddr {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowArpSenderHardwareAddrChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowArpSenderHardwareAddr object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) SetValues(value []string) PatternFlowArpSenderHardwareAddr {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowArpSenderHardwareAddrChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpSenderHardwareAddr) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpSenderHardwareAddr) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowArpSenderHardwareAddr object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpSenderHardwareAddr) SetMetricGroup(value string) PatternFlowArpSenderHardwareAddr {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowArpSenderHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) Increment() PatternFlowArpSenderHardwareAddrCounter {
	obj.SetChoice(PatternFlowArpSenderHardwareAddrChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowArpSenderHardwareAddrCounter().Msg()
	}
	return &patternFlowArpSenderHardwareAddrCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowArpSenderHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowArpSenderHardwareAddrCounter value in the PatternFlowArpSenderHardwareAddr object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) SetIncrement(value PatternFlowArpSenderHardwareAddrCounter) PatternFlowArpSenderHardwareAddr {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpSenderHardwareAddrChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowArpSenderHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) Decrement() PatternFlowArpSenderHardwareAddrCounter {
	obj.SetChoice(PatternFlowArpSenderHardwareAddrChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowArpSenderHardwareAddrCounter().Msg()
	}
	return &patternFlowArpSenderHardwareAddrCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowArpSenderHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowArpSenderHardwareAddrCounter value in the PatternFlowArpSenderHardwareAddr object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) SetDecrement(value PatternFlowArpSenderHardwareAddrCounter) PatternFlowArpSenderHardwareAddr {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpSenderHardwareAddrChoice.DECREMENT)
	return obj
}

func (obj *patternFlowArpSenderHardwareAddr) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateMac(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowArpSenderHardwareAddr"))
		}
	}

	if obj.obj.Values != nil {
		err := validateMacSlice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowArpSenderHardwareAddr"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowArpSenderHardwareAddr) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowArpSenderHardwareAddrChoice.VALUE)
		obj.SetValue("00:00:00:00:00:00")
	}

}

type patternFlowArpSenderProtocolAddr struct {
	obj *snappipb.PatternFlowArpSenderProtocolAddr
}

func NewPatternFlowArpSenderProtocolAddr() PatternFlowArpSenderProtocolAddr {
	obj := patternFlowArpSenderProtocolAddr{obj: &snappipb.PatternFlowArpSenderProtocolAddr{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpSenderProtocolAddr) Msg() *snappipb.PatternFlowArpSenderProtocolAddr {
	return obj.obj
}

func (obj *patternFlowArpSenderProtocolAddr) SetMsg(msg *snappipb.PatternFlowArpSenderProtocolAddr) PatternFlowArpSenderProtocolAddr {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpSenderProtocolAddr) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpSenderProtocolAddr) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpSenderProtocolAddr) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderProtocolAddr) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpSenderProtocolAddr) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderProtocolAddr) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpSenderProtocolAddr) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpSenderProtocolAddr interface {
	Msg() *snappipb.PatternFlowArpSenderProtocolAddr
	SetMsg(*snappipb.PatternFlowArpSenderProtocolAddr) PatternFlowArpSenderProtocolAddr
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowArpSenderProtocolAddrChoiceEnum
	SetChoice(value PatternFlowArpSenderProtocolAddrChoiceEnum) PatternFlowArpSenderProtocolAddr
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowArpSenderProtocolAddr
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowArpSenderProtocolAddr
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpSenderProtocolAddr
	HasMetricGroup() bool
	Increment() PatternFlowArpSenderProtocolAddrCounter
	SetIncrement(value PatternFlowArpSenderProtocolAddrCounter) PatternFlowArpSenderProtocolAddr
	HasIncrement() bool
	Decrement() PatternFlowArpSenderProtocolAddrCounter
	SetDecrement(value PatternFlowArpSenderProtocolAddrCounter) PatternFlowArpSenderProtocolAddr
	HasDecrement() bool
}

type PatternFlowArpSenderProtocolAddrChoiceEnum string

var PatternFlowArpSenderProtocolAddrChoice = struct {
	VALUE     PatternFlowArpSenderProtocolAddrChoiceEnum
	VALUES    PatternFlowArpSenderProtocolAddrChoiceEnum
	INCREMENT PatternFlowArpSenderProtocolAddrChoiceEnum
	DECREMENT PatternFlowArpSenderProtocolAddrChoiceEnum
}{
	VALUE:     PatternFlowArpSenderProtocolAddrChoiceEnum("value"),
	VALUES:    PatternFlowArpSenderProtocolAddrChoiceEnum("values"),
	INCREMENT: PatternFlowArpSenderProtocolAddrChoiceEnum("increment"),
	DECREMENT: PatternFlowArpSenderProtocolAddrChoiceEnum("decrement"),
}

func (obj *patternFlowArpSenderProtocolAddr) Choice() PatternFlowArpSenderProtocolAddrChoiceEnum {
	return PatternFlowArpSenderProtocolAddrChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowArpSenderProtocolAddr) SetChoice(value PatternFlowArpSenderProtocolAddrChoiceEnum) PatternFlowArpSenderProtocolAddr {
	intValue, ok := snappipb.PatternFlowArpSenderProtocolAddr_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowArpSenderProtocolAddrChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowArpSenderProtocolAddr_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "0.0.0.0"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowArpSenderProtocolAddr object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) SetValue(value string) PatternFlowArpSenderProtocolAddr {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowArpSenderProtocolAddrChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowArpSenderProtocolAddr object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) SetValues(value []string) PatternFlowArpSenderProtocolAddr {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowArpSenderProtocolAddrChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpSenderProtocolAddr) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpSenderProtocolAddr) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowArpSenderProtocolAddr object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpSenderProtocolAddr) SetMetricGroup(value string) PatternFlowArpSenderProtocolAddr {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowArpSenderProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) Increment() PatternFlowArpSenderProtocolAddrCounter {
	obj.SetChoice(PatternFlowArpSenderProtocolAddrChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowArpSenderProtocolAddrCounter().Msg()
	}
	return &patternFlowArpSenderProtocolAddrCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowArpSenderProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowArpSenderProtocolAddrCounter value in the PatternFlowArpSenderProtocolAddr object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) SetIncrement(value PatternFlowArpSenderProtocolAddrCounter) PatternFlowArpSenderProtocolAddr {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpSenderProtocolAddrChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowArpSenderProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) Decrement() PatternFlowArpSenderProtocolAddrCounter {
	obj.SetChoice(PatternFlowArpSenderProtocolAddrChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowArpSenderProtocolAddrCounter().Msg()
	}
	return &patternFlowArpSenderProtocolAddrCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowArpSenderProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowArpSenderProtocolAddrCounter value in the PatternFlowArpSenderProtocolAddr object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) SetDecrement(value PatternFlowArpSenderProtocolAddrCounter) PatternFlowArpSenderProtocolAddr {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpSenderProtocolAddrChoice.DECREMENT)
	return obj
}

func (obj *patternFlowArpSenderProtocolAddr) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateIpv4(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowArpSenderProtocolAddr"))
		}
	}

	if obj.obj.Values != nil {
		err := validateIpv4Slice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowArpSenderProtocolAddr"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowArpSenderProtocolAddr) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowArpSenderProtocolAddrChoice.VALUE)
		obj.SetValue("0.0.0.0")
	}

}

type patternFlowArpTargetHardwareAddr struct {
	obj *snappipb.PatternFlowArpTargetHardwareAddr
}

func NewPatternFlowArpTargetHardwareAddr() PatternFlowArpTargetHardwareAddr {
	obj := patternFlowArpTargetHardwareAddr{obj: &snappipb.PatternFlowArpTargetHardwareAddr{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpTargetHardwareAddr) Msg() *snappipb.PatternFlowArpTargetHardwareAddr {
	return obj.obj
}

func (obj *patternFlowArpTargetHardwareAddr) SetMsg(msg *snappipb.PatternFlowArpTargetHardwareAddr) PatternFlowArpTargetHardwareAddr {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpTargetHardwareAddr) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpTargetHardwareAddr) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpTargetHardwareAddr) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetHardwareAddr) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpTargetHardwareAddr) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetHardwareAddr) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpTargetHardwareAddr) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpTargetHardwareAddr interface {
	Msg() *snappipb.PatternFlowArpTargetHardwareAddr
	SetMsg(*snappipb.PatternFlowArpTargetHardwareAddr) PatternFlowArpTargetHardwareAddr
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowArpTargetHardwareAddrChoiceEnum
	SetChoice(value PatternFlowArpTargetHardwareAddrChoiceEnum) PatternFlowArpTargetHardwareAddr
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowArpTargetHardwareAddr
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowArpTargetHardwareAddr
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpTargetHardwareAddr
	HasMetricGroup() bool
	Increment() PatternFlowArpTargetHardwareAddrCounter
	SetIncrement(value PatternFlowArpTargetHardwareAddrCounter) PatternFlowArpTargetHardwareAddr
	HasIncrement() bool
	Decrement() PatternFlowArpTargetHardwareAddrCounter
	SetDecrement(value PatternFlowArpTargetHardwareAddrCounter) PatternFlowArpTargetHardwareAddr
	HasDecrement() bool
}

type PatternFlowArpTargetHardwareAddrChoiceEnum string

var PatternFlowArpTargetHardwareAddrChoice = struct {
	VALUE     PatternFlowArpTargetHardwareAddrChoiceEnum
	VALUES    PatternFlowArpTargetHardwareAddrChoiceEnum
	INCREMENT PatternFlowArpTargetHardwareAddrChoiceEnum
	DECREMENT PatternFlowArpTargetHardwareAddrChoiceEnum
}{
	VALUE:     PatternFlowArpTargetHardwareAddrChoiceEnum("value"),
	VALUES:    PatternFlowArpTargetHardwareAddrChoiceEnum("values"),
	INCREMENT: PatternFlowArpTargetHardwareAddrChoiceEnum("increment"),
	DECREMENT: PatternFlowArpTargetHardwareAddrChoiceEnum("decrement"),
}

func (obj *patternFlowArpTargetHardwareAddr) Choice() PatternFlowArpTargetHardwareAddrChoiceEnum {
	return PatternFlowArpTargetHardwareAddrChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowArpTargetHardwareAddr) SetChoice(value PatternFlowArpTargetHardwareAddrChoiceEnum) PatternFlowArpTargetHardwareAddr {
	intValue, ok := snappipb.PatternFlowArpTargetHardwareAddr_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowArpTargetHardwareAddrChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowArpTargetHardwareAddr_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "00:00:00:00:00:00"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowArpTargetHardwareAddr object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) SetValue(value string) PatternFlowArpTargetHardwareAddr {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowArpTargetHardwareAddrChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowArpTargetHardwareAddr object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) SetValues(value []string) PatternFlowArpTargetHardwareAddr {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowArpTargetHardwareAddrChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpTargetHardwareAddr) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpTargetHardwareAddr) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowArpTargetHardwareAddr object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpTargetHardwareAddr) SetMetricGroup(value string) PatternFlowArpTargetHardwareAddr {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowArpTargetHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) Increment() PatternFlowArpTargetHardwareAddrCounter {
	obj.SetChoice(PatternFlowArpTargetHardwareAddrChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowArpTargetHardwareAddrCounter().Msg()
	}
	return &patternFlowArpTargetHardwareAddrCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowArpTargetHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowArpTargetHardwareAddrCounter value in the PatternFlowArpTargetHardwareAddr object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) SetIncrement(value PatternFlowArpTargetHardwareAddrCounter) PatternFlowArpTargetHardwareAddr {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpTargetHardwareAddrChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowArpTargetHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) Decrement() PatternFlowArpTargetHardwareAddrCounter {
	obj.SetChoice(PatternFlowArpTargetHardwareAddrChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowArpTargetHardwareAddrCounter().Msg()
	}
	return &patternFlowArpTargetHardwareAddrCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowArpTargetHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowArpTargetHardwareAddrCounter value in the PatternFlowArpTargetHardwareAddr object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) SetDecrement(value PatternFlowArpTargetHardwareAddrCounter) PatternFlowArpTargetHardwareAddr {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpTargetHardwareAddrChoice.DECREMENT)
	return obj
}

func (obj *patternFlowArpTargetHardwareAddr) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateMac(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowArpTargetHardwareAddr"))
		}
	}

	if obj.obj.Values != nil {
		err := validateMacSlice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowArpTargetHardwareAddr"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowArpTargetHardwareAddr) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowArpTargetHardwareAddrChoice.VALUE)
		obj.SetValue("00:00:00:00:00:00")
	}

}

type patternFlowArpTargetProtocolAddr struct {
	obj *snappipb.PatternFlowArpTargetProtocolAddr
}

func NewPatternFlowArpTargetProtocolAddr() PatternFlowArpTargetProtocolAddr {
	obj := patternFlowArpTargetProtocolAddr{obj: &snappipb.PatternFlowArpTargetProtocolAddr{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpTargetProtocolAddr) Msg() *snappipb.PatternFlowArpTargetProtocolAddr {
	return obj.obj
}

func (obj *patternFlowArpTargetProtocolAddr) SetMsg(msg *snappipb.PatternFlowArpTargetProtocolAddr) PatternFlowArpTargetProtocolAddr {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpTargetProtocolAddr) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpTargetProtocolAddr) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpTargetProtocolAddr) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetProtocolAddr) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpTargetProtocolAddr) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetProtocolAddr) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpTargetProtocolAddr) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpTargetProtocolAddr interface {
	Msg() *snappipb.PatternFlowArpTargetProtocolAddr
	SetMsg(*snappipb.PatternFlowArpTargetProtocolAddr) PatternFlowArpTargetProtocolAddr
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowArpTargetProtocolAddrChoiceEnum
	SetChoice(value PatternFlowArpTargetProtocolAddrChoiceEnum) PatternFlowArpTargetProtocolAddr
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowArpTargetProtocolAddr
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowArpTargetProtocolAddr
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpTargetProtocolAddr
	HasMetricGroup() bool
	Increment() PatternFlowArpTargetProtocolAddrCounter
	SetIncrement(value PatternFlowArpTargetProtocolAddrCounter) PatternFlowArpTargetProtocolAddr
	HasIncrement() bool
	Decrement() PatternFlowArpTargetProtocolAddrCounter
	SetDecrement(value PatternFlowArpTargetProtocolAddrCounter) PatternFlowArpTargetProtocolAddr
	HasDecrement() bool
}

type PatternFlowArpTargetProtocolAddrChoiceEnum string

var PatternFlowArpTargetProtocolAddrChoice = struct {
	VALUE     PatternFlowArpTargetProtocolAddrChoiceEnum
	VALUES    PatternFlowArpTargetProtocolAddrChoiceEnum
	INCREMENT PatternFlowArpTargetProtocolAddrChoiceEnum
	DECREMENT PatternFlowArpTargetProtocolAddrChoiceEnum
}{
	VALUE:     PatternFlowArpTargetProtocolAddrChoiceEnum("value"),
	VALUES:    PatternFlowArpTargetProtocolAddrChoiceEnum("values"),
	INCREMENT: PatternFlowArpTargetProtocolAddrChoiceEnum("increment"),
	DECREMENT: PatternFlowArpTargetProtocolAddrChoiceEnum("decrement"),
}

func (obj *patternFlowArpTargetProtocolAddr) Choice() PatternFlowArpTargetProtocolAddrChoiceEnum {
	return PatternFlowArpTargetProtocolAddrChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowArpTargetProtocolAddr) SetChoice(value PatternFlowArpTargetProtocolAddrChoiceEnum) PatternFlowArpTargetProtocolAddr {
	intValue, ok := snappipb.PatternFlowArpTargetProtocolAddr_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowArpTargetProtocolAddrChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowArpTargetProtocolAddr_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "0.0.0.0"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowArpTargetProtocolAddr object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) SetValue(value string) PatternFlowArpTargetProtocolAddr {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowArpTargetProtocolAddrChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowArpTargetProtocolAddr object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) SetValues(value []string) PatternFlowArpTargetProtocolAddr {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowArpTargetProtocolAddrChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpTargetProtocolAddr) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpTargetProtocolAddr) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowArpTargetProtocolAddr object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpTargetProtocolAddr) SetMetricGroup(value string) PatternFlowArpTargetProtocolAddr {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowArpTargetProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) Increment() PatternFlowArpTargetProtocolAddrCounter {
	obj.SetChoice(PatternFlowArpTargetProtocolAddrChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowArpTargetProtocolAddrCounter().Msg()
	}
	return &patternFlowArpTargetProtocolAddrCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowArpTargetProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowArpTargetProtocolAddrCounter value in the PatternFlowArpTargetProtocolAddr object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) SetIncrement(value PatternFlowArpTargetProtocolAddrCounter) PatternFlowArpTargetProtocolAddr {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpTargetProtocolAddrChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowArpTargetProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) Decrement() PatternFlowArpTargetProtocolAddrCounter {
	obj.SetChoice(PatternFlowArpTargetProtocolAddrChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowArpTargetProtocolAddrCounter().Msg()
	}
	return &patternFlowArpTargetProtocolAddrCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowArpTargetProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowArpTargetProtocolAddrCounter value in the PatternFlowArpTargetProtocolAddr object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) SetDecrement(value PatternFlowArpTargetProtocolAddrCounter) PatternFlowArpTargetProtocolAddr {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowArpTargetProtocolAddrChoice.DECREMENT)
	return obj
}

func (obj *patternFlowArpTargetProtocolAddr) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateIpv4(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowArpTargetProtocolAddr"))
		}
	}

	if obj.obj.Values != nil {
		err := validateIpv4Slice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowArpTargetProtocolAddr"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowArpTargetProtocolAddr) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowArpTargetProtocolAddrChoice.VALUE)
		obj.SetValue("0.0.0.0")
	}

}

type flowIcmpEcho struct {
	obj *snappipb.FlowIcmpEcho
}

func NewFlowIcmpEcho() FlowIcmpEcho {
	obj := flowIcmpEcho{obj: &snappipb.FlowIcmpEcho{}}
	obj.setDefault()
	return &obj
}

func (obj *flowIcmpEcho) Msg() *snappipb.FlowIcmpEcho {
	return obj.obj
}

func (obj *flowIcmpEcho) SetMsg(msg *snappipb.FlowIcmpEcho) FlowIcmpEcho {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowIcmpEcho) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowIcmpEcho) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIcmpEcho) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpEcho) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIcmpEcho) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpEcho) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowIcmpEcho) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowIcmpEcho interface {
	Msg() *snappipb.FlowIcmpEcho
	SetMsg(*snappipb.FlowIcmpEcho) FlowIcmpEcho
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Type() PatternFlowIcmpEchoType
	SetType(value PatternFlowIcmpEchoType) FlowIcmpEcho
	HasType() bool
	Code() PatternFlowIcmpEchoCode
	SetCode(value PatternFlowIcmpEchoCode) FlowIcmpEcho
	HasCode() bool
	Checksum() PatternFlowIcmpEchoChecksum
	SetChecksum(value PatternFlowIcmpEchoChecksum) FlowIcmpEcho
	HasChecksum() bool
	Identifier() PatternFlowIcmpEchoIdentifier
	SetIdentifier(value PatternFlowIcmpEchoIdentifier) FlowIcmpEcho
	HasIdentifier() bool
	SequenceNumber() PatternFlowIcmpEchoSequenceNumber
	SetSequenceNumber(value PatternFlowIcmpEchoSequenceNumber) FlowIcmpEcho
	HasSequenceNumber() bool
}

// Type returns a PatternFlowIcmpEchoType
//  description is TBD
func (obj *flowIcmpEcho) Type() PatternFlowIcmpEchoType {
	if obj.obj.Type == nil {
		obj.obj.Type = NewPatternFlowIcmpEchoType().Msg()
	}
	return &patternFlowIcmpEchoType{obj: obj.obj.Type}
}

// Type returns a PatternFlowIcmpEchoType
//  description is TBD
func (obj *flowIcmpEcho) HasType() bool {
	return obj.obj.Type != nil
}

// SetType sets the PatternFlowIcmpEchoType value in the FlowIcmpEcho object
//  description is TBD
func (obj *flowIcmpEcho) SetType(value PatternFlowIcmpEchoType) FlowIcmpEcho {
	obj.Type().SetMsg(value.Msg())

	return obj
}

// Code returns a PatternFlowIcmpEchoCode
//  description is TBD
func (obj *flowIcmpEcho) Code() PatternFlowIcmpEchoCode {
	if obj.obj.Code == nil {
		obj.obj.Code = NewPatternFlowIcmpEchoCode().Msg()
	}
	return &patternFlowIcmpEchoCode{obj: obj.obj.Code}
}

// Code returns a PatternFlowIcmpEchoCode
//  description is TBD
func (obj *flowIcmpEcho) HasCode() bool {
	return obj.obj.Code != nil
}

// SetCode sets the PatternFlowIcmpEchoCode value in the FlowIcmpEcho object
//  description is TBD
func (obj *flowIcmpEcho) SetCode(value PatternFlowIcmpEchoCode) FlowIcmpEcho {
	obj.Code().SetMsg(value.Msg())

	return obj
}

// Checksum returns a PatternFlowIcmpEchoChecksum
//  description is TBD
func (obj *flowIcmpEcho) Checksum() PatternFlowIcmpEchoChecksum {
	if obj.obj.Checksum == nil {
		obj.obj.Checksum = NewPatternFlowIcmpEchoChecksum().Msg()
	}
	return &patternFlowIcmpEchoChecksum{obj: obj.obj.Checksum}
}

// Checksum returns a PatternFlowIcmpEchoChecksum
//  description is TBD
func (obj *flowIcmpEcho) HasChecksum() bool {
	return obj.obj.Checksum != nil
}

// SetChecksum sets the PatternFlowIcmpEchoChecksum value in the FlowIcmpEcho object
//  description is TBD
func (obj *flowIcmpEcho) SetChecksum(value PatternFlowIcmpEchoChecksum) FlowIcmpEcho {
	obj.Checksum().SetMsg(value.Msg())

	return obj
}

// Identifier returns a PatternFlowIcmpEchoIdentifier
//  description is TBD
func (obj *flowIcmpEcho) Identifier() PatternFlowIcmpEchoIdentifier {
	if obj.obj.Identifier == nil {
		obj.obj.Identifier = NewPatternFlowIcmpEchoIdentifier().Msg()
	}
	return &patternFlowIcmpEchoIdentifier{obj: obj.obj.Identifier}
}

// Identifier returns a PatternFlowIcmpEchoIdentifier
//  description is TBD
func (obj *flowIcmpEcho) HasIdentifier() bool {
	return obj.obj.Identifier != nil
}

// SetIdentifier sets the PatternFlowIcmpEchoIdentifier value in the FlowIcmpEcho object
//  description is TBD
func (obj *flowIcmpEcho) SetIdentifier(value PatternFlowIcmpEchoIdentifier) FlowIcmpEcho {
	obj.Identifier().SetMsg(value.Msg())

	return obj
}

// SequenceNumber returns a PatternFlowIcmpEchoSequenceNumber
//  description is TBD
func (obj *flowIcmpEcho) SequenceNumber() PatternFlowIcmpEchoSequenceNumber {
	if obj.obj.SequenceNumber == nil {
		obj.obj.SequenceNumber = NewPatternFlowIcmpEchoSequenceNumber().Msg()
	}
	return &patternFlowIcmpEchoSequenceNumber{obj: obj.obj.SequenceNumber}
}

// SequenceNumber returns a PatternFlowIcmpEchoSequenceNumber
//  description is TBD
func (obj *flowIcmpEcho) HasSequenceNumber() bool {
	return obj.obj.SequenceNumber != nil
}

// SetSequenceNumber sets the PatternFlowIcmpEchoSequenceNumber value in the FlowIcmpEcho object
//  description is TBD
func (obj *flowIcmpEcho) SetSequenceNumber(value PatternFlowIcmpEchoSequenceNumber) FlowIcmpEcho {
	obj.SequenceNumber().SetMsg(value.Msg())

	return obj
}

func (obj *flowIcmpEcho) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Type != nil {
		obj.Type().validateObj(set_default)
	}

	if obj.obj.Code != nil {
		obj.Code().validateObj(set_default)
	}

	if obj.obj.Checksum != nil {
		obj.Checksum().validateObj(set_default)
	}

	if obj.obj.Identifier != nil {
		obj.Identifier().validateObj(set_default)
	}

	if obj.obj.SequenceNumber != nil {
		obj.SequenceNumber().validateObj(set_default)
	}
}

func (obj *flowIcmpEcho) setDefault() {

}

type flowIcmpv6Echo struct {
	obj *snappipb.FlowIcmpv6Echo
}

func NewFlowIcmpv6Echo() FlowIcmpv6Echo {
	obj := flowIcmpv6Echo{obj: &snappipb.FlowIcmpv6Echo{}}
	obj.setDefault()
	return &obj
}

func (obj *flowIcmpv6Echo) Msg() *snappipb.FlowIcmpv6Echo {
	return obj.obj
}

func (obj *flowIcmpv6Echo) SetMsg(msg *snappipb.FlowIcmpv6Echo) FlowIcmpv6Echo {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowIcmpv6Echo) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowIcmpv6Echo) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIcmpv6Echo) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpv6Echo) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIcmpv6Echo) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpv6Echo) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowIcmpv6Echo) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowIcmpv6Echo interface {
	Msg() *snappipb.FlowIcmpv6Echo
	SetMsg(*snappipb.FlowIcmpv6Echo) FlowIcmpv6Echo
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Type() PatternFlowIcmpv6EchoType
	SetType(value PatternFlowIcmpv6EchoType) FlowIcmpv6Echo
	HasType() bool
	Code() PatternFlowIcmpv6EchoCode
	SetCode(value PatternFlowIcmpv6EchoCode) FlowIcmpv6Echo
	HasCode() bool
	Identifier() PatternFlowIcmpv6EchoIdentifier
	SetIdentifier(value PatternFlowIcmpv6EchoIdentifier) FlowIcmpv6Echo
	HasIdentifier() bool
	SequenceNumber() PatternFlowIcmpv6EchoSequenceNumber
	SetSequenceNumber(value PatternFlowIcmpv6EchoSequenceNumber) FlowIcmpv6Echo
	HasSequenceNumber() bool
	Checksum() PatternFlowIcmpv6EchoChecksum
	SetChecksum(value PatternFlowIcmpv6EchoChecksum) FlowIcmpv6Echo
	HasChecksum() bool
}

// Type returns a PatternFlowIcmpv6EchoType
//  description is TBD
func (obj *flowIcmpv6Echo) Type() PatternFlowIcmpv6EchoType {
	if obj.obj.Type == nil {
		obj.obj.Type = NewPatternFlowIcmpv6EchoType().Msg()
	}
	return &patternFlowIcmpv6EchoType{obj: obj.obj.Type}
}

// Type returns a PatternFlowIcmpv6EchoType
//  description is TBD
func (obj *flowIcmpv6Echo) HasType() bool {
	return obj.obj.Type != nil
}

// SetType sets the PatternFlowIcmpv6EchoType value in the FlowIcmpv6Echo object
//  description is TBD
func (obj *flowIcmpv6Echo) SetType(value PatternFlowIcmpv6EchoType) FlowIcmpv6Echo {
	obj.Type().SetMsg(value.Msg())

	return obj
}

// Code returns a PatternFlowIcmpv6EchoCode
//  description is TBD
func (obj *flowIcmpv6Echo) Code() PatternFlowIcmpv6EchoCode {
	if obj.obj.Code == nil {
		obj.obj.Code = NewPatternFlowIcmpv6EchoCode().Msg()
	}
	return &patternFlowIcmpv6EchoCode{obj: obj.obj.Code}
}

// Code returns a PatternFlowIcmpv6EchoCode
//  description is TBD
func (obj *flowIcmpv6Echo) HasCode() bool {
	return obj.obj.Code != nil
}

// SetCode sets the PatternFlowIcmpv6EchoCode value in the FlowIcmpv6Echo object
//  description is TBD
func (obj *flowIcmpv6Echo) SetCode(value PatternFlowIcmpv6EchoCode) FlowIcmpv6Echo {
	obj.Code().SetMsg(value.Msg())

	return obj
}

// Identifier returns a PatternFlowIcmpv6EchoIdentifier
//  description is TBD
func (obj *flowIcmpv6Echo) Identifier() PatternFlowIcmpv6EchoIdentifier {
	if obj.obj.Identifier == nil {
		obj.obj.Identifier = NewPatternFlowIcmpv6EchoIdentifier().Msg()
	}
	return &patternFlowIcmpv6EchoIdentifier{obj: obj.obj.Identifier}
}

// Identifier returns a PatternFlowIcmpv6EchoIdentifier
//  description is TBD
func (obj *flowIcmpv6Echo) HasIdentifier() bool {
	return obj.obj.Identifier != nil
}

// SetIdentifier sets the PatternFlowIcmpv6EchoIdentifier value in the FlowIcmpv6Echo object
//  description is TBD
func (obj *flowIcmpv6Echo) SetIdentifier(value PatternFlowIcmpv6EchoIdentifier) FlowIcmpv6Echo {
	obj.Identifier().SetMsg(value.Msg())

	return obj
}

// SequenceNumber returns a PatternFlowIcmpv6EchoSequenceNumber
//  description is TBD
func (obj *flowIcmpv6Echo) SequenceNumber() PatternFlowIcmpv6EchoSequenceNumber {
	if obj.obj.SequenceNumber == nil {
		obj.obj.SequenceNumber = NewPatternFlowIcmpv6EchoSequenceNumber().Msg()
	}
	return &patternFlowIcmpv6EchoSequenceNumber{obj: obj.obj.SequenceNumber}
}

// SequenceNumber returns a PatternFlowIcmpv6EchoSequenceNumber
//  description is TBD
func (obj *flowIcmpv6Echo) HasSequenceNumber() bool {
	return obj.obj.SequenceNumber != nil
}

// SetSequenceNumber sets the PatternFlowIcmpv6EchoSequenceNumber value in the FlowIcmpv6Echo object
//  description is TBD
func (obj *flowIcmpv6Echo) SetSequenceNumber(value PatternFlowIcmpv6EchoSequenceNumber) FlowIcmpv6Echo {
	obj.SequenceNumber().SetMsg(value.Msg())

	return obj
}

// Checksum returns a PatternFlowIcmpv6EchoChecksum
//  description is TBD
func (obj *flowIcmpv6Echo) Checksum() PatternFlowIcmpv6EchoChecksum {
	if obj.obj.Checksum == nil {
		obj.obj.Checksum = NewPatternFlowIcmpv6EchoChecksum().Msg()
	}
	return &patternFlowIcmpv6EchoChecksum{obj: obj.obj.Checksum}
}

// Checksum returns a PatternFlowIcmpv6EchoChecksum
//  description is TBD
func (obj *flowIcmpv6Echo) HasChecksum() bool {
	return obj.obj.Checksum != nil
}

// SetChecksum sets the PatternFlowIcmpv6EchoChecksum value in the FlowIcmpv6Echo object
//  description is TBD
func (obj *flowIcmpv6Echo) SetChecksum(value PatternFlowIcmpv6EchoChecksum) FlowIcmpv6Echo {
	obj.Checksum().SetMsg(value.Msg())

	return obj
}

func (obj *flowIcmpv6Echo) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Type != nil {
		obj.Type().validateObj(set_default)
	}

	if obj.obj.Code != nil {
		obj.Code().validateObj(set_default)
	}

	if obj.obj.Identifier != nil {
		obj.Identifier().validateObj(set_default)
	}

	if obj.obj.SequenceNumber != nil {
		obj.SequenceNumber().validateObj(set_default)
	}

	if obj.obj.Checksum != nil {
		obj.Checksum().validateObj(set_default)
	}
}

func (obj *flowIcmpv6Echo) setDefault() {

}

type patternFlowPppAddress struct {
	obj *snappipb.PatternFlowPppAddress
}

func NewPatternFlowPppAddress() PatternFlowPppAddress {
	obj := patternFlowPppAddress{obj: &snappipb.PatternFlowPppAddress{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPppAddress) Msg() *snappipb.PatternFlowPppAddress {
	return obj.obj
}

func (obj *patternFlowPppAddress) SetMsg(msg *snappipb.PatternFlowPppAddress) PatternFlowPppAddress {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPppAddress) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPppAddress) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppAddress) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppAddress) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppAddress) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppAddress) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPppAddress) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPppAddress interface {
	Msg() *snappipb.PatternFlowPppAddress
	SetMsg(*snappipb.PatternFlowPppAddress) PatternFlowPppAddress
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPppAddressChoiceEnum
	SetChoice(value PatternFlowPppAddressChoiceEnum) PatternFlowPppAddress
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPppAddress
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPppAddress
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPppAddress
	HasMetricGroup() bool
	Increment() PatternFlowPppAddressCounter
	SetIncrement(value PatternFlowPppAddressCounter) PatternFlowPppAddress
	HasIncrement() bool
	Decrement() PatternFlowPppAddressCounter
	SetDecrement(value PatternFlowPppAddressCounter) PatternFlowPppAddress
	HasDecrement() bool
}

type PatternFlowPppAddressChoiceEnum string

var PatternFlowPppAddressChoice = struct {
	VALUE     PatternFlowPppAddressChoiceEnum
	VALUES    PatternFlowPppAddressChoiceEnum
	INCREMENT PatternFlowPppAddressChoiceEnum
	DECREMENT PatternFlowPppAddressChoiceEnum
}{
	VALUE:     PatternFlowPppAddressChoiceEnum("value"),
	VALUES:    PatternFlowPppAddressChoiceEnum("values"),
	INCREMENT: PatternFlowPppAddressChoiceEnum("increment"),
	DECREMENT: PatternFlowPppAddressChoiceEnum("decrement"),
}

func (obj *patternFlowPppAddress) Choice() PatternFlowPppAddressChoiceEnum {
	return PatternFlowPppAddressChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPppAddress) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPppAddress) SetChoice(value PatternFlowPppAddressChoiceEnum) PatternFlowPppAddress {
	intValue, ok := snappipb.PatternFlowPppAddress_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPppAddressChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPppAddress_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPppAddress) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 255
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPppAddress) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPppAddress object
//  description is TBD
func (obj *patternFlowPppAddress) SetValue(value int32) PatternFlowPppAddress {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPppAddressChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPppAddress) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPppAddress object
//  description is TBD
func (obj *patternFlowPppAddress) SetValues(value []int32) PatternFlowPppAddress {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPppAddressChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppAddress) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppAddress) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPppAddress object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppAddress) SetMetricGroup(value string) PatternFlowPppAddress {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPppAddressCounter
//  description is TBD
func (obj *patternFlowPppAddress) Increment() PatternFlowPppAddressCounter {
	obj.SetChoice(PatternFlowPppAddressChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPppAddressCounter().Msg()
	}
	return &patternFlowPppAddressCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPppAddressCounter
//  description is TBD
func (obj *patternFlowPppAddress) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPppAddressCounter value in the PatternFlowPppAddress object
//  description is TBD
func (obj *patternFlowPppAddress) SetIncrement(value PatternFlowPppAddressCounter) PatternFlowPppAddress {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPppAddressChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPppAddressCounter
//  description is TBD
func (obj *patternFlowPppAddress) Decrement() PatternFlowPppAddressCounter {
	obj.SetChoice(PatternFlowPppAddressChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPppAddressCounter().Msg()
	}
	return &patternFlowPppAddressCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPppAddressCounter
//  description is TBD
func (obj *patternFlowPppAddress) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPppAddressCounter value in the PatternFlowPppAddress object
//  description is TBD
func (obj *patternFlowPppAddress) SetDecrement(value PatternFlowPppAddressCounter) PatternFlowPppAddress {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPppAddressChoice.DECREMENT)
	return obj
}

func (obj *patternFlowPppAddress) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppAddress.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppAddress.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPppAddress) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPppAddressChoice.VALUE)
		obj.SetValue(255)
	}

}

type patternFlowPppControl struct {
	obj *snappipb.PatternFlowPppControl
}

func NewPatternFlowPppControl() PatternFlowPppControl {
	obj := patternFlowPppControl{obj: &snappipb.PatternFlowPppControl{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPppControl) Msg() *snappipb.PatternFlowPppControl {
	return obj.obj
}

func (obj *patternFlowPppControl) SetMsg(msg *snappipb.PatternFlowPppControl) PatternFlowPppControl {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPppControl) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPppControl) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppControl) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppControl) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppControl) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppControl) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPppControl) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPppControl interface {
	Msg() *snappipb.PatternFlowPppControl
	SetMsg(*snappipb.PatternFlowPppControl) PatternFlowPppControl
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPppControlChoiceEnum
	SetChoice(value PatternFlowPppControlChoiceEnum) PatternFlowPppControl
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPppControl
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPppControl
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPppControl
	HasMetricGroup() bool
	Increment() PatternFlowPppControlCounter
	SetIncrement(value PatternFlowPppControlCounter) PatternFlowPppControl
	HasIncrement() bool
	Decrement() PatternFlowPppControlCounter
	SetDecrement(value PatternFlowPppControlCounter) PatternFlowPppControl
	HasDecrement() bool
}

type PatternFlowPppControlChoiceEnum string

var PatternFlowPppControlChoice = struct {
	VALUE     PatternFlowPppControlChoiceEnum
	VALUES    PatternFlowPppControlChoiceEnum
	INCREMENT PatternFlowPppControlChoiceEnum
	DECREMENT PatternFlowPppControlChoiceEnum
}{
	VALUE:     PatternFlowPppControlChoiceEnum("value"),
	VALUES:    PatternFlowPppControlChoiceEnum("values"),
	INCREMENT: PatternFlowPppControlChoiceEnum("increment"),
	DECREMENT: PatternFlowPppControlChoiceEnum("decrement"),
}

func (obj *patternFlowPppControl) Choice() PatternFlowPppControlChoiceEnum {
	return PatternFlowPppControlChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPppControl) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPppControl) SetChoice(value PatternFlowPppControlChoiceEnum) PatternFlowPppControl {
	intValue, ok := snappipb.PatternFlowPppControl_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPppControlChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPppControl_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPppControl) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 3
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPppControl) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPppControl object
//  description is TBD
func (obj *patternFlowPppControl) SetValue(value int32) PatternFlowPppControl {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPppControlChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPppControl) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPppControl object
//  description is TBD
func (obj *patternFlowPppControl) SetValues(value []int32) PatternFlowPppControl {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPppControlChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppControl) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppControl) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPppControl object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppControl) SetMetricGroup(value string) PatternFlowPppControl {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPppControlCounter
//  description is TBD
func (obj *patternFlowPppControl) Increment() PatternFlowPppControlCounter {
	obj.SetChoice(PatternFlowPppControlChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPppControlCounter().Msg()
	}
	return &patternFlowPppControlCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPppControlCounter
//  description is TBD
func (obj *patternFlowPppControl) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPppControlCounter value in the PatternFlowPppControl object
//  description is TBD
func (obj *patternFlowPppControl) SetIncrement(value PatternFlowPppControlCounter) PatternFlowPppControl {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPppControlChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPppControlCounter
//  description is TBD
func (obj *patternFlowPppControl) Decrement() PatternFlowPppControlCounter {
	obj.SetChoice(PatternFlowPppControlChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPppControlCounter().Msg()
	}
	return &patternFlowPppControlCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPppControlCounter
//  description is TBD
func (obj *patternFlowPppControl) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPppControlCounter value in the PatternFlowPppControl object
//  description is TBD
func (obj *patternFlowPppControl) SetDecrement(value PatternFlowPppControlCounter) PatternFlowPppControl {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPppControlChoice.DECREMENT)
	return obj
}

func (obj *patternFlowPppControl) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppControl.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppControl.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPppControl) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPppControlChoice.VALUE)
		obj.SetValue(3)
	}

}

type patternFlowPppProtocolType struct {
	obj *snappipb.PatternFlowPppProtocolType
}

func NewPatternFlowPppProtocolType() PatternFlowPppProtocolType {
	obj := patternFlowPppProtocolType{obj: &snappipb.PatternFlowPppProtocolType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPppProtocolType) Msg() *snappipb.PatternFlowPppProtocolType {
	return obj.obj
}

func (obj *patternFlowPppProtocolType) SetMsg(msg *snappipb.PatternFlowPppProtocolType) PatternFlowPppProtocolType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPppProtocolType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPppProtocolType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppProtocolType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppProtocolType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppProtocolType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppProtocolType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPppProtocolType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPppProtocolType interface {
	Msg() *snappipb.PatternFlowPppProtocolType
	SetMsg(*snappipb.PatternFlowPppProtocolType) PatternFlowPppProtocolType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowPppProtocolTypeChoiceEnum
	SetChoice(value PatternFlowPppProtocolTypeChoiceEnum) PatternFlowPppProtocolType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowPppProtocolType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowPppProtocolType
	Auto() PatternFlowPppProtocolTypeAutoEnum
	SetAuto(value PatternFlowPppProtocolTypeAutoEnum) PatternFlowPppProtocolType
	HasAuto() bool
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPppProtocolType
	HasMetricGroup() bool
	Increment() PatternFlowPppProtocolTypeCounter
	SetIncrement(value PatternFlowPppProtocolTypeCounter) PatternFlowPppProtocolType
	HasIncrement() bool
	Decrement() PatternFlowPppProtocolTypeCounter
	SetDecrement(value PatternFlowPppProtocolTypeCounter) PatternFlowPppProtocolType
	HasDecrement() bool
}

type PatternFlowPppProtocolTypeChoiceEnum string

var PatternFlowPppProtocolTypeChoice = struct {
	VALUE     PatternFlowPppProtocolTypeChoiceEnum
	VALUES    PatternFlowPppProtocolTypeChoiceEnum
	AUTO      PatternFlowPppProtocolTypeChoiceEnum
	INCREMENT PatternFlowPppProtocolTypeChoiceEnum
	DECREMENT PatternFlowPppProtocolTypeChoiceEnum
}{
	VALUE:     PatternFlowPppProtocolTypeChoiceEnum("value"),
	VALUES:    PatternFlowPppProtocolTypeChoiceEnum("values"),
	AUTO:      PatternFlowPppProtocolTypeChoiceEnum("auto"),
	INCREMENT: PatternFlowPppProtocolTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowPppProtocolTypeChoiceEnum("decrement"),
}

func (obj *patternFlowPppProtocolType) Choice() PatternFlowPppProtocolTypeChoiceEnum {
	return PatternFlowPppProtocolTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowPppProtocolType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowPppProtocolType) SetChoice(value PatternFlowPppProtocolTypeChoiceEnum) PatternFlowPppProtocolType {
	intValue, ok := snappipb.PatternFlowPppProtocolType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPppProtocolTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPppProtocolType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "auto" {
		obj.obj.Auto = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolType) Value() int32 {

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowPppProtocolType object
//  description is TBD
func (obj *patternFlowPppProtocolType) SetValue(value int32) PatternFlowPppProtocolType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowPppProtocolTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPppProtocolType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowPppProtocolType object
//  description is TBD
func (obj *patternFlowPppProtocolType) SetValues(value []int32) PatternFlowPppProtocolType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowPppProtocolTypeChoice.VALUES)
	return obj
}

type PatternFlowPppProtocolTypeAutoEnum string

var PatternFlowPppProtocolTypeAuto = struct {
	AUTO PatternFlowPppProtocolTypeAutoEnum
}{
	AUTO: PatternFlowPppProtocolTypeAutoEnum("auto"),
}

func (obj *patternFlowPppProtocolType) Auto() PatternFlowPppProtocolTypeAutoEnum {
	return PatternFlowPppProtocolTypeAutoEnum(obj.obj.Auto.Enum().String())
}

// Auto returns a string
//  description is TBD
func (obj *patternFlowPppProtocolType) HasAuto() bool {
	return obj.obj.Auto != nil
}

func (obj *patternFlowPppProtocolType) SetAuto(value PatternFlowPppProtocolTypeAutoEnum) PatternFlowPppProtocolType {
	intValue, ok := snappipb.PatternFlowPppProtocolType_Auto_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowPppProtocolTypeAutoEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowPppProtocolType_Auto_Enum(intValue)
	obj.obj.Auto = &enumValue

	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppProtocolType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppProtocolType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowPppProtocolType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppProtocolType) SetMetricGroup(value string) PatternFlowPppProtocolType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowPppProtocolTypeCounter
//  description is TBD
func (obj *patternFlowPppProtocolType) Increment() PatternFlowPppProtocolTypeCounter {
	obj.SetChoice(PatternFlowPppProtocolTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowPppProtocolTypeCounter().Msg()
	}
	return &patternFlowPppProtocolTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowPppProtocolTypeCounter
//  description is TBD
func (obj *patternFlowPppProtocolType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowPppProtocolTypeCounter value in the PatternFlowPppProtocolType object
//  description is TBD
func (obj *patternFlowPppProtocolType) SetIncrement(value PatternFlowPppProtocolTypeCounter) PatternFlowPppProtocolType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPppProtocolTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowPppProtocolTypeCounter
//  description is TBD
func (obj *patternFlowPppProtocolType) Decrement() PatternFlowPppProtocolTypeCounter {
	obj.SetChoice(PatternFlowPppProtocolTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowPppProtocolTypeCounter().Msg()
	}
	return &patternFlowPppProtocolTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowPppProtocolTypeCounter
//  description is TBD
func (obj *patternFlowPppProtocolType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowPppProtocolTypeCounter value in the PatternFlowPppProtocolType object
//  description is TBD
func (obj *patternFlowPppProtocolType) SetDecrement(value PatternFlowPppProtocolTypeCounter) PatternFlowPppProtocolType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowPppProtocolTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowPppProtocolType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppProtocolType.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppProtocolType.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowPppProtocolType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowPppProtocolTypeChoice.AUTO)
		if obj.obj.Auto == nil {
			obj.SetAuto(PatternFlowPppProtocolTypeAuto.AUTO)

		}

	}

}

type patternFlowIgmpv1Version struct {
	obj *snappipb.PatternFlowIgmpv1Version
}

func NewPatternFlowIgmpv1Version() PatternFlowIgmpv1Version {
	obj := patternFlowIgmpv1Version{obj: &snappipb.PatternFlowIgmpv1Version{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIgmpv1Version) Msg() *snappipb.PatternFlowIgmpv1Version {
	return obj.obj
}

func (obj *patternFlowIgmpv1Version) SetMsg(msg *snappipb.PatternFlowIgmpv1Version) PatternFlowIgmpv1Version {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIgmpv1Version) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIgmpv1Version) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1Version) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Version) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1Version) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Version) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIgmpv1Version) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIgmpv1Version interface {
	Msg() *snappipb.PatternFlowIgmpv1Version
	SetMsg(*snappipb.PatternFlowIgmpv1Version) PatternFlowIgmpv1Version
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIgmpv1VersionChoiceEnum
	SetChoice(value PatternFlowIgmpv1VersionChoiceEnum) PatternFlowIgmpv1Version
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIgmpv1Version
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIgmpv1Version
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIgmpv1Version
	HasMetricGroup() bool
	Increment() PatternFlowIgmpv1VersionCounter
	SetIncrement(value PatternFlowIgmpv1VersionCounter) PatternFlowIgmpv1Version
	HasIncrement() bool
	Decrement() PatternFlowIgmpv1VersionCounter
	SetDecrement(value PatternFlowIgmpv1VersionCounter) PatternFlowIgmpv1Version
	HasDecrement() bool
}

type PatternFlowIgmpv1VersionChoiceEnum string

var PatternFlowIgmpv1VersionChoice = struct {
	VALUE     PatternFlowIgmpv1VersionChoiceEnum
	VALUES    PatternFlowIgmpv1VersionChoiceEnum
	INCREMENT PatternFlowIgmpv1VersionChoiceEnum
	DECREMENT PatternFlowIgmpv1VersionChoiceEnum
}{
	VALUE:     PatternFlowIgmpv1VersionChoiceEnum("value"),
	VALUES:    PatternFlowIgmpv1VersionChoiceEnum("values"),
	INCREMENT: PatternFlowIgmpv1VersionChoiceEnum("increment"),
	DECREMENT: PatternFlowIgmpv1VersionChoiceEnum("decrement"),
}

func (obj *patternFlowIgmpv1Version) Choice() PatternFlowIgmpv1VersionChoiceEnum {
	return PatternFlowIgmpv1VersionChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIgmpv1Version) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIgmpv1Version) SetChoice(value PatternFlowIgmpv1VersionChoiceEnum) PatternFlowIgmpv1Version {
	intValue, ok := snappipb.PatternFlowIgmpv1Version_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIgmpv1VersionChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIgmpv1Version_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1Version) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 1
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1Version) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIgmpv1Version object
//  description is TBD
func (obj *patternFlowIgmpv1Version) SetValue(value int32) PatternFlowIgmpv1Version {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIgmpv1VersionChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIgmpv1Version) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIgmpv1Version object
//  description is TBD
func (obj *patternFlowIgmpv1Version) SetValues(value []int32) PatternFlowIgmpv1Version {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIgmpv1VersionChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Version) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Version) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIgmpv1Version object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Version) SetMetricGroup(value string) PatternFlowIgmpv1Version {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIgmpv1VersionCounter
//  description is TBD
func (obj *patternFlowIgmpv1Version) Increment() PatternFlowIgmpv1VersionCounter {
	obj.SetChoice(PatternFlowIgmpv1VersionChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIgmpv1VersionCounter().Msg()
	}
	return &patternFlowIgmpv1VersionCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIgmpv1VersionCounter
//  description is TBD
func (obj *patternFlowIgmpv1Version) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIgmpv1VersionCounter value in the PatternFlowIgmpv1Version object
//  description is TBD
func (obj *patternFlowIgmpv1Version) SetIncrement(value PatternFlowIgmpv1VersionCounter) PatternFlowIgmpv1Version {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIgmpv1VersionChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIgmpv1VersionCounter
//  description is TBD
func (obj *patternFlowIgmpv1Version) Decrement() PatternFlowIgmpv1VersionCounter {
	obj.SetChoice(PatternFlowIgmpv1VersionChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIgmpv1VersionCounter().Msg()
	}
	return &patternFlowIgmpv1VersionCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIgmpv1VersionCounter
//  description is TBD
func (obj *patternFlowIgmpv1Version) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIgmpv1VersionCounter value in the PatternFlowIgmpv1Version object
//  description is TBD
func (obj *patternFlowIgmpv1Version) SetDecrement(value PatternFlowIgmpv1VersionCounter) PatternFlowIgmpv1Version {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIgmpv1VersionChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIgmpv1Version) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1Version.Value <= 15 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1Version.Values <= 15 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIgmpv1Version) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIgmpv1VersionChoice.VALUE)
		obj.SetValue(1)
	}

}

type patternFlowIgmpv1Type struct {
	obj *snappipb.PatternFlowIgmpv1Type
}

func NewPatternFlowIgmpv1Type() PatternFlowIgmpv1Type {
	obj := patternFlowIgmpv1Type{obj: &snappipb.PatternFlowIgmpv1Type{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIgmpv1Type) Msg() *snappipb.PatternFlowIgmpv1Type {
	return obj.obj
}

func (obj *patternFlowIgmpv1Type) SetMsg(msg *snappipb.PatternFlowIgmpv1Type) PatternFlowIgmpv1Type {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIgmpv1Type) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIgmpv1Type) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1Type) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Type) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1Type) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Type) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIgmpv1Type) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIgmpv1Type interface {
	Msg() *snappipb.PatternFlowIgmpv1Type
	SetMsg(*snappipb.PatternFlowIgmpv1Type) PatternFlowIgmpv1Type
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIgmpv1TypeChoiceEnum
	SetChoice(value PatternFlowIgmpv1TypeChoiceEnum) PatternFlowIgmpv1Type
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIgmpv1Type
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIgmpv1Type
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIgmpv1Type
	HasMetricGroup() bool
	Increment() PatternFlowIgmpv1TypeCounter
	SetIncrement(value PatternFlowIgmpv1TypeCounter) PatternFlowIgmpv1Type
	HasIncrement() bool
	Decrement() PatternFlowIgmpv1TypeCounter
	SetDecrement(value PatternFlowIgmpv1TypeCounter) PatternFlowIgmpv1Type
	HasDecrement() bool
}

type PatternFlowIgmpv1TypeChoiceEnum string

var PatternFlowIgmpv1TypeChoice = struct {
	VALUE     PatternFlowIgmpv1TypeChoiceEnum
	VALUES    PatternFlowIgmpv1TypeChoiceEnum
	INCREMENT PatternFlowIgmpv1TypeChoiceEnum
	DECREMENT PatternFlowIgmpv1TypeChoiceEnum
}{
	VALUE:     PatternFlowIgmpv1TypeChoiceEnum("value"),
	VALUES:    PatternFlowIgmpv1TypeChoiceEnum("values"),
	INCREMENT: PatternFlowIgmpv1TypeChoiceEnum("increment"),
	DECREMENT: PatternFlowIgmpv1TypeChoiceEnum("decrement"),
}

func (obj *patternFlowIgmpv1Type) Choice() PatternFlowIgmpv1TypeChoiceEnum {
	return PatternFlowIgmpv1TypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIgmpv1Type) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIgmpv1Type) SetChoice(value PatternFlowIgmpv1TypeChoiceEnum) PatternFlowIgmpv1Type {
	intValue, ok := snappipb.PatternFlowIgmpv1Type_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIgmpv1TypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIgmpv1Type_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1Type) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 17
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1Type) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIgmpv1Type object
//  description is TBD
func (obj *patternFlowIgmpv1Type) SetValue(value int32) PatternFlowIgmpv1Type {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIgmpv1TypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIgmpv1Type) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIgmpv1Type object
//  description is TBD
func (obj *patternFlowIgmpv1Type) SetValues(value []int32) PatternFlowIgmpv1Type {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIgmpv1TypeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Type) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Type) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIgmpv1Type object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Type) SetMetricGroup(value string) PatternFlowIgmpv1Type {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIgmpv1TypeCounter
//  description is TBD
func (obj *patternFlowIgmpv1Type) Increment() PatternFlowIgmpv1TypeCounter {
	obj.SetChoice(PatternFlowIgmpv1TypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIgmpv1TypeCounter().Msg()
	}
	return &patternFlowIgmpv1TypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIgmpv1TypeCounter
//  description is TBD
func (obj *patternFlowIgmpv1Type) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIgmpv1TypeCounter value in the PatternFlowIgmpv1Type object
//  description is TBD
func (obj *patternFlowIgmpv1Type) SetIncrement(value PatternFlowIgmpv1TypeCounter) PatternFlowIgmpv1Type {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIgmpv1TypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIgmpv1TypeCounter
//  description is TBD
func (obj *patternFlowIgmpv1Type) Decrement() PatternFlowIgmpv1TypeCounter {
	obj.SetChoice(PatternFlowIgmpv1TypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIgmpv1TypeCounter().Msg()
	}
	return &patternFlowIgmpv1TypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIgmpv1TypeCounter
//  description is TBD
func (obj *patternFlowIgmpv1Type) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIgmpv1TypeCounter value in the PatternFlowIgmpv1Type object
//  description is TBD
func (obj *patternFlowIgmpv1Type) SetDecrement(value PatternFlowIgmpv1TypeCounter) PatternFlowIgmpv1Type {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIgmpv1TypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIgmpv1Type) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1Type.Value <= 15 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1Type.Values <= 15 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIgmpv1Type) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIgmpv1TypeChoice.VALUE)
		obj.SetValue(17)
	}

}

type patternFlowIgmpv1Unused struct {
	obj *snappipb.PatternFlowIgmpv1Unused
}

func NewPatternFlowIgmpv1Unused() PatternFlowIgmpv1Unused {
	obj := patternFlowIgmpv1Unused{obj: &snappipb.PatternFlowIgmpv1Unused{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIgmpv1Unused) Msg() *snappipb.PatternFlowIgmpv1Unused {
	return obj.obj
}

func (obj *patternFlowIgmpv1Unused) SetMsg(msg *snappipb.PatternFlowIgmpv1Unused) PatternFlowIgmpv1Unused {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIgmpv1Unused) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIgmpv1Unused) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1Unused) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Unused) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1Unused) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Unused) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIgmpv1Unused) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIgmpv1Unused interface {
	Msg() *snappipb.PatternFlowIgmpv1Unused
	SetMsg(*snappipb.PatternFlowIgmpv1Unused) PatternFlowIgmpv1Unused
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIgmpv1UnusedChoiceEnum
	SetChoice(value PatternFlowIgmpv1UnusedChoiceEnum) PatternFlowIgmpv1Unused
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIgmpv1Unused
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIgmpv1Unused
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIgmpv1Unused
	HasMetricGroup() bool
	Increment() PatternFlowIgmpv1UnusedCounter
	SetIncrement(value PatternFlowIgmpv1UnusedCounter) PatternFlowIgmpv1Unused
	HasIncrement() bool
	Decrement() PatternFlowIgmpv1UnusedCounter
	SetDecrement(value PatternFlowIgmpv1UnusedCounter) PatternFlowIgmpv1Unused
	HasDecrement() bool
}

type PatternFlowIgmpv1UnusedChoiceEnum string

var PatternFlowIgmpv1UnusedChoice = struct {
	VALUE     PatternFlowIgmpv1UnusedChoiceEnum
	VALUES    PatternFlowIgmpv1UnusedChoiceEnum
	INCREMENT PatternFlowIgmpv1UnusedChoiceEnum
	DECREMENT PatternFlowIgmpv1UnusedChoiceEnum
}{
	VALUE:     PatternFlowIgmpv1UnusedChoiceEnum("value"),
	VALUES:    PatternFlowIgmpv1UnusedChoiceEnum("values"),
	INCREMENT: PatternFlowIgmpv1UnusedChoiceEnum("increment"),
	DECREMENT: PatternFlowIgmpv1UnusedChoiceEnum("decrement"),
}

func (obj *patternFlowIgmpv1Unused) Choice() PatternFlowIgmpv1UnusedChoiceEnum {
	return PatternFlowIgmpv1UnusedChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIgmpv1Unused) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIgmpv1Unused) SetChoice(value PatternFlowIgmpv1UnusedChoiceEnum) PatternFlowIgmpv1Unused {
	intValue, ok := snappipb.PatternFlowIgmpv1Unused_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIgmpv1UnusedChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIgmpv1Unused_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1Unused) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1Unused) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIgmpv1Unused object
//  description is TBD
func (obj *patternFlowIgmpv1Unused) SetValue(value int32) PatternFlowIgmpv1Unused {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIgmpv1UnusedChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIgmpv1Unused) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIgmpv1Unused object
//  description is TBD
func (obj *patternFlowIgmpv1Unused) SetValues(value []int32) PatternFlowIgmpv1Unused {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIgmpv1UnusedChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Unused) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Unused) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIgmpv1Unused object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Unused) SetMetricGroup(value string) PatternFlowIgmpv1Unused {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIgmpv1UnusedCounter
//  description is TBD
func (obj *patternFlowIgmpv1Unused) Increment() PatternFlowIgmpv1UnusedCounter {
	obj.SetChoice(PatternFlowIgmpv1UnusedChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIgmpv1UnusedCounter().Msg()
	}
	return &patternFlowIgmpv1UnusedCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIgmpv1UnusedCounter
//  description is TBD
func (obj *patternFlowIgmpv1Unused) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIgmpv1UnusedCounter value in the PatternFlowIgmpv1Unused object
//  description is TBD
func (obj *patternFlowIgmpv1Unused) SetIncrement(value PatternFlowIgmpv1UnusedCounter) PatternFlowIgmpv1Unused {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIgmpv1UnusedChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIgmpv1UnusedCounter
//  description is TBD
func (obj *patternFlowIgmpv1Unused) Decrement() PatternFlowIgmpv1UnusedCounter {
	obj.SetChoice(PatternFlowIgmpv1UnusedChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIgmpv1UnusedCounter().Msg()
	}
	return &patternFlowIgmpv1UnusedCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIgmpv1UnusedCounter
//  description is TBD
func (obj *patternFlowIgmpv1Unused) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIgmpv1UnusedCounter value in the PatternFlowIgmpv1Unused object
//  description is TBD
func (obj *patternFlowIgmpv1Unused) SetDecrement(value PatternFlowIgmpv1UnusedCounter) PatternFlowIgmpv1Unused {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIgmpv1UnusedChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIgmpv1Unused) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1Unused.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1Unused.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIgmpv1Unused) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIgmpv1UnusedChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIgmpv1Checksum struct {
	obj *snappipb.PatternFlowIgmpv1Checksum
}

func NewPatternFlowIgmpv1Checksum() PatternFlowIgmpv1Checksum {
	obj := patternFlowIgmpv1Checksum{obj: &snappipb.PatternFlowIgmpv1Checksum{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIgmpv1Checksum) Msg() *snappipb.PatternFlowIgmpv1Checksum {
	return obj.obj
}

func (obj *patternFlowIgmpv1Checksum) SetMsg(msg *snappipb.PatternFlowIgmpv1Checksum) PatternFlowIgmpv1Checksum {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIgmpv1Checksum) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIgmpv1Checksum) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1Checksum) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Checksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1Checksum) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Checksum) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIgmpv1Checksum) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIgmpv1Checksum interface {
	Msg() *snappipb.PatternFlowIgmpv1Checksum
	SetMsg(*snappipb.PatternFlowIgmpv1Checksum) PatternFlowIgmpv1Checksum
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIgmpv1ChecksumChoiceEnum
	SetChoice(value PatternFlowIgmpv1ChecksumChoiceEnum) PatternFlowIgmpv1Checksum
	Generated() PatternFlowIgmpv1ChecksumGeneratedEnum
	SetGenerated(value PatternFlowIgmpv1ChecksumGeneratedEnum) PatternFlowIgmpv1Checksum
	HasGenerated() bool
	Custom() int32
	SetCustom(value int32) PatternFlowIgmpv1Checksum
	HasCustom() bool
}

type PatternFlowIgmpv1ChecksumChoiceEnum string

var PatternFlowIgmpv1ChecksumChoice = struct {
	GENERATED PatternFlowIgmpv1ChecksumChoiceEnum
	CUSTOM    PatternFlowIgmpv1ChecksumChoiceEnum
}{
	GENERATED: PatternFlowIgmpv1ChecksumChoiceEnum("generated"),
	CUSTOM:    PatternFlowIgmpv1ChecksumChoiceEnum("custom"),
}

func (obj *patternFlowIgmpv1Checksum) Choice() PatternFlowIgmpv1ChecksumChoiceEnum {
	return PatternFlowIgmpv1ChecksumChoiceEnum(obj.obj.Choice.Enum().String())
}

func (obj *patternFlowIgmpv1Checksum) SetChoice(value PatternFlowIgmpv1ChecksumChoiceEnum) PatternFlowIgmpv1Checksum {
	intValue, ok := snappipb.PatternFlowIgmpv1Checksum_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIgmpv1ChecksumChoiceEnum", string(value)))
		return obj
	}
	obj.obj.Choice = snappipb.PatternFlowIgmpv1Checksum_Choice_Enum(intValue)

	if string(value) != "generated" {
		obj.obj.Generated = nil
	}

	if string(value) != "custom" {
		obj.obj.Custom = nil
	}

	return obj
}

type PatternFlowIgmpv1ChecksumGeneratedEnum string

var PatternFlowIgmpv1ChecksumGenerated = struct {
	GOOD PatternFlowIgmpv1ChecksumGeneratedEnum
	BAD  PatternFlowIgmpv1ChecksumGeneratedEnum
}{
	GOOD: PatternFlowIgmpv1ChecksumGeneratedEnum("good"),
	BAD:  PatternFlowIgmpv1ChecksumGeneratedEnum("bad"),
}

func (obj *patternFlowIgmpv1Checksum) Generated() PatternFlowIgmpv1ChecksumGeneratedEnum {
	return PatternFlowIgmpv1ChecksumGeneratedEnum(obj.obj.Generated.Enum().String())
}

// Generated returns a string
//  A system generated checksum value
func (obj *patternFlowIgmpv1Checksum) HasGenerated() bool {
	return obj.obj.Generated != nil
}

func (obj *patternFlowIgmpv1Checksum) SetGenerated(value PatternFlowIgmpv1ChecksumGeneratedEnum) PatternFlowIgmpv1Checksum {
	intValue, ok := snappipb.PatternFlowIgmpv1Checksum_Generated_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIgmpv1ChecksumGeneratedEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIgmpv1Checksum_Generated_Enum(intValue)
	obj.obj.Generated = &enumValue

	return obj
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIgmpv1Checksum) Custom() int32 {

	return *obj.obj.Custom

}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIgmpv1Checksum) HasCustom() bool {
	return obj.obj.Custom != nil
}

// SetCustom sets the int32 value in the PatternFlowIgmpv1Checksum object
//  A custom checksum value
func (obj *patternFlowIgmpv1Checksum) SetCustom(value int32) PatternFlowIgmpv1Checksum {
	obj.obj.Custom = &value
	obj.SetChoice(PatternFlowIgmpv1ChecksumChoice.CUSTOM)
	return obj
}

func (obj *patternFlowIgmpv1Checksum) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Choice required
	if obj.obj.Choice.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("Choice is required field on PatternFlowIgmpv1Checksum and got value %s", obj.obj.Choice.String()))
	}

	if obj.obj.Custom != nil {
		if *obj.obj.Custom < 0 || *obj.obj.Custom > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1Checksum.Custom <= 65535 but Got %d", *obj.obj.Custom))
		}

	}

}

func (obj *patternFlowIgmpv1Checksum) setDefault() {
	if obj.obj.Choice.Number() == 0 {
		obj.SetChoice(PatternFlowIgmpv1ChecksumChoice.GENERATED)
		if obj.obj.Generated == nil {
			obj.SetGenerated(PatternFlowIgmpv1ChecksumGenerated.GOOD)

		}

	}

}

type patternFlowIgmpv1GroupAddress struct {
	obj *snappipb.PatternFlowIgmpv1GroupAddress
}

func NewPatternFlowIgmpv1GroupAddress() PatternFlowIgmpv1GroupAddress {
	obj := patternFlowIgmpv1GroupAddress{obj: &snappipb.PatternFlowIgmpv1GroupAddress{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIgmpv1GroupAddress) Msg() *snappipb.PatternFlowIgmpv1GroupAddress {
	return obj.obj
}

func (obj *patternFlowIgmpv1GroupAddress) SetMsg(msg *snappipb.PatternFlowIgmpv1GroupAddress) PatternFlowIgmpv1GroupAddress {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIgmpv1GroupAddress) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIgmpv1GroupAddress) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1GroupAddress) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1GroupAddress) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1GroupAddress) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1GroupAddress) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIgmpv1GroupAddress) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIgmpv1GroupAddress interface {
	Msg() *snappipb.PatternFlowIgmpv1GroupAddress
	SetMsg(*snappipb.PatternFlowIgmpv1GroupAddress) PatternFlowIgmpv1GroupAddress
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIgmpv1GroupAddressChoiceEnum
	SetChoice(value PatternFlowIgmpv1GroupAddressChoiceEnum) PatternFlowIgmpv1GroupAddress
	HasChoice() bool
	Value() string
	SetValue(value string) PatternFlowIgmpv1GroupAddress
	HasValue() bool
	Values() []string
	SetValues(value []string) PatternFlowIgmpv1GroupAddress
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIgmpv1GroupAddress
	HasMetricGroup() bool
	Increment() PatternFlowIgmpv1GroupAddressCounter
	SetIncrement(value PatternFlowIgmpv1GroupAddressCounter) PatternFlowIgmpv1GroupAddress
	HasIncrement() bool
	Decrement() PatternFlowIgmpv1GroupAddressCounter
	SetDecrement(value PatternFlowIgmpv1GroupAddressCounter) PatternFlowIgmpv1GroupAddress
	HasDecrement() bool
}

type PatternFlowIgmpv1GroupAddressChoiceEnum string

var PatternFlowIgmpv1GroupAddressChoice = struct {
	VALUE     PatternFlowIgmpv1GroupAddressChoiceEnum
	VALUES    PatternFlowIgmpv1GroupAddressChoiceEnum
	INCREMENT PatternFlowIgmpv1GroupAddressChoiceEnum
	DECREMENT PatternFlowIgmpv1GroupAddressChoiceEnum
}{
	VALUE:     PatternFlowIgmpv1GroupAddressChoiceEnum("value"),
	VALUES:    PatternFlowIgmpv1GroupAddressChoiceEnum("values"),
	INCREMENT: PatternFlowIgmpv1GroupAddressChoiceEnum("increment"),
	DECREMENT: PatternFlowIgmpv1GroupAddressChoiceEnum("decrement"),
}

func (obj *patternFlowIgmpv1GroupAddress) Choice() PatternFlowIgmpv1GroupAddressChoiceEnum {
	return PatternFlowIgmpv1GroupAddressChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIgmpv1GroupAddress) SetChoice(value PatternFlowIgmpv1GroupAddressChoiceEnum) PatternFlowIgmpv1GroupAddress {
	intValue, ok := snappipb.PatternFlowIgmpv1GroupAddress_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIgmpv1GroupAddressChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIgmpv1GroupAddress_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) Value() string {

	if obj.obj.Value == nil {
		*obj.obj.Value = "0.0.0.0"
	}

	return *obj.obj.Value

}

// Value returns a string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the PatternFlowIgmpv1GroupAddress object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) SetValue(value string) PatternFlowIgmpv1GroupAddress {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIgmpv1GroupAddressChoice.VALUE)
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) Values() []string {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []string value in the PatternFlowIgmpv1GroupAddress object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) SetValues(value []string) PatternFlowIgmpv1GroupAddress {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]string, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIgmpv1GroupAddressChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1GroupAddress) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1GroupAddress) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIgmpv1GroupAddress object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1GroupAddress) SetMetricGroup(value string) PatternFlowIgmpv1GroupAddress {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIgmpv1GroupAddressCounter
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) Increment() PatternFlowIgmpv1GroupAddressCounter {
	obj.SetChoice(PatternFlowIgmpv1GroupAddressChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIgmpv1GroupAddressCounter().Msg()
	}
	return &patternFlowIgmpv1GroupAddressCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIgmpv1GroupAddressCounter
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIgmpv1GroupAddressCounter value in the PatternFlowIgmpv1GroupAddress object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) SetIncrement(value PatternFlowIgmpv1GroupAddressCounter) PatternFlowIgmpv1GroupAddress {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIgmpv1GroupAddressChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIgmpv1GroupAddressCounter
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) Decrement() PatternFlowIgmpv1GroupAddressCounter {
	obj.SetChoice(PatternFlowIgmpv1GroupAddressChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIgmpv1GroupAddressCounter().Msg()
	}
	return &patternFlowIgmpv1GroupAddressCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIgmpv1GroupAddressCounter
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIgmpv1GroupAddressCounter value in the PatternFlowIgmpv1GroupAddress object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) SetDecrement(value PatternFlowIgmpv1GroupAddressCounter) PatternFlowIgmpv1GroupAddress {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIgmpv1GroupAddressChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIgmpv1GroupAddress) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateIpv4(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value PatternFlowIgmpv1GroupAddress"))
		}
	}

	if obj.obj.Values != nil {
		err := validateIpv4Slice(obj.Values())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Values PatternFlowIgmpv1GroupAddress"))
		}
	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIgmpv1GroupAddress) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIgmpv1GroupAddressChoice.VALUE)
		obj.SetValue("0.0.0.0")
	}

}

type flowDelay struct {
	obj *snappipb.FlowDelay
}

func NewFlowDelay() FlowDelay {
	obj := flowDelay{obj: &snappipb.FlowDelay{}}
	obj.setDefault()
	return &obj
}

func (obj *flowDelay) Msg() *snappipb.FlowDelay {
	return obj.obj
}

func (obj *flowDelay) SetMsg(msg *snappipb.FlowDelay) FlowDelay {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowDelay) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowDelay) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowDelay) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDelay) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowDelay) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDelay) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowDelay) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowDelay interface {
	Msg() *snappipb.FlowDelay
	SetMsg(*snappipb.FlowDelay) FlowDelay
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() FlowDelayChoiceEnum
	SetChoice(value FlowDelayChoiceEnum) FlowDelay
	HasChoice() bool
	Bytes() float32
	SetBytes(value float32) FlowDelay
	HasBytes() bool
	Nanoseconds() float32
	SetNanoseconds(value float32) FlowDelay
	HasNanoseconds() bool
	Microseconds() float32
	SetMicroseconds(value float32) FlowDelay
	HasMicroseconds() bool
}

type FlowDelayChoiceEnum string

var FlowDelayChoice = struct {
	BYTES        FlowDelayChoiceEnum
	NANOSECONDS  FlowDelayChoiceEnum
	MICROSECONDS FlowDelayChoiceEnum
}{
	BYTES:        FlowDelayChoiceEnum("bytes"),
	NANOSECONDS:  FlowDelayChoiceEnum("nanoseconds"),
	MICROSECONDS: FlowDelayChoiceEnum("microseconds"),
}

func (obj *flowDelay) Choice() FlowDelayChoiceEnum {
	return FlowDelayChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *flowDelay) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *flowDelay) SetChoice(value FlowDelayChoiceEnum) FlowDelay {
	intValue, ok := snappipb.FlowDelay_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowDelayChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowDelay_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "bytes" {
		obj.obj.Bytes = nil
	}

	if string(value) != "nanoseconds" {
		obj.obj.Nanoseconds = nil
	}

	if string(value) != "microseconds" {
		obj.obj.Microseconds = nil
	}

	return obj
}

// Bytes returns a float32
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) Bytes() float32 {

	if obj.obj.Bytes == nil {
		*obj.obj.Bytes = 0
	}

	return *obj.obj.Bytes

}

// Bytes returns a float32
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) HasBytes() bool {
	return obj.obj.Bytes != nil
}

// SetBytes sets the float32 value in the FlowDelay object
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) SetBytes(value float32) FlowDelay {
	obj.obj.Bytes = &value
	obj.SetChoice(FlowDelayChoice.BYTES)
	return obj
}

// Nanoseconds returns a float32
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) Nanoseconds() float32 {

	if obj.obj.Nanoseconds == nil {
		*obj.obj.Nanoseconds = 0
	}

	return *obj.obj.Nanoseconds

}

// Nanoseconds returns a float32
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) HasNanoseconds() bool {
	return obj.obj.Nanoseconds != nil
}

// SetNanoseconds sets the float32 value in the FlowDelay object
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) SetNanoseconds(value float32) FlowDelay {
	obj.obj.Nanoseconds = &value
	obj.SetChoice(FlowDelayChoice.NANOSECONDS)
	return obj
}

// Microseconds returns a float32
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) Microseconds() float32 {

	if obj.obj.Microseconds == nil {
		*obj.obj.Microseconds = 0
	}

	return *obj.obj.Microseconds

}

// Microseconds returns a float32
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) HasMicroseconds() bool {
	return obj.obj.Microseconds != nil
}

// SetMicroseconds sets the float32 value in the FlowDelay object
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) SetMicroseconds(value float32) FlowDelay {
	obj.obj.Microseconds = &value
	obj.SetChoice(FlowDelayChoice.MICROSECONDS)
	return obj
}

func (obj *flowDelay) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *flowDelay) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(FlowDelayChoice.BYTES)
		obj.SetBytes(0)
	}

}

type flowDurationInterBurstGap struct {
	obj *snappipb.FlowDurationInterBurstGap
}

func NewFlowDurationInterBurstGap() FlowDurationInterBurstGap {
	obj := flowDurationInterBurstGap{obj: &snappipb.FlowDurationInterBurstGap{}}
	obj.setDefault()
	return &obj
}

func (obj *flowDurationInterBurstGap) Msg() *snappipb.FlowDurationInterBurstGap {
	return obj.obj
}

func (obj *flowDurationInterBurstGap) SetMsg(msg *snappipb.FlowDurationInterBurstGap) FlowDurationInterBurstGap {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowDurationInterBurstGap) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowDurationInterBurstGap) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowDurationInterBurstGap) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDurationInterBurstGap) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowDurationInterBurstGap) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDurationInterBurstGap) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowDurationInterBurstGap) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowDurationInterBurstGap interface {
	Msg() *snappipb.FlowDurationInterBurstGap
	SetMsg(*snappipb.FlowDurationInterBurstGap) FlowDurationInterBurstGap
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() FlowDurationInterBurstGapChoiceEnum
	SetChoice(value FlowDurationInterBurstGapChoiceEnum) FlowDurationInterBurstGap
	HasChoice() bool
	Bytes() float64
	SetBytes(value float64) FlowDurationInterBurstGap
	HasBytes() bool
	Nanoseconds() float64
	SetNanoseconds(value float64) FlowDurationInterBurstGap
	HasNanoseconds() bool
	Microseconds() float64
	SetMicroseconds(value float64) FlowDurationInterBurstGap
	HasMicroseconds() bool
}

type FlowDurationInterBurstGapChoiceEnum string

var FlowDurationInterBurstGapChoice = struct {
	BYTES        FlowDurationInterBurstGapChoiceEnum
	NANOSECONDS  FlowDurationInterBurstGapChoiceEnum
	MICROSECONDS FlowDurationInterBurstGapChoiceEnum
}{
	BYTES:        FlowDurationInterBurstGapChoiceEnum("bytes"),
	NANOSECONDS:  FlowDurationInterBurstGapChoiceEnum("nanoseconds"),
	MICROSECONDS: FlowDurationInterBurstGapChoiceEnum("microseconds"),
}

func (obj *flowDurationInterBurstGap) Choice() FlowDurationInterBurstGapChoiceEnum {
	return FlowDurationInterBurstGapChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  The type of inter burst gap units.
func (obj *flowDurationInterBurstGap) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *flowDurationInterBurstGap) SetChoice(value FlowDurationInterBurstGapChoiceEnum) FlowDurationInterBurstGap {
	intValue, ok := snappipb.FlowDurationInterBurstGap_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on FlowDurationInterBurstGapChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.FlowDurationInterBurstGap_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "bytes" {
		obj.obj.Bytes = nil
	}

	if string(value) != "nanoseconds" {
		obj.obj.Nanoseconds = nil
	}

	if string(value) != "microseconds" {
		obj.obj.Microseconds = nil
	}

	return obj
}

// Bytes returns a float64
//  The amount of time between bursts expressed in bytes.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) Bytes() float64 {

	if obj.obj.Bytes == nil {
		*obj.obj.Bytes = 12
	}

	return *obj.obj.Bytes

}

// Bytes returns a float64
//  The amount of time between bursts expressed in bytes.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) HasBytes() bool {
	return obj.obj.Bytes != nil
}

// SetBytes sets the float64 value in the FlowDurationInterBurstGap object
//  The amount of time between bursts expressed in bytes.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) SetBytes(value float64) FlowDurationInterBurstGap {
	obj.obj.Bytes = &value
	obj.SetChoice(FlowDurationInterBurstGapChoice.BYTES)
	return obj
}

// Nanoseconds returns a float64
//  The amount of time between bursts expressed in nanoseconds.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) Nanoseconds() float64 {

	if obj.obj.Nanoseconds == nil {
		*obj.obj.Nanoseconds = 96
	}

	return *obj.obj.Nanoseconds

}

// Nanoseconds returns a float64
//  The amount of time between bursts expressed in nanoseconds.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) HasNanoseconds() bool {
	return obj.obj.Nanoseconds != nil
}

// SetNanoseconds sets the float64 value in the FlowDurationInterBurstGap object
//  The amount of time between bursts expressed in nanoseconds.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) SetNanoseconds(value float64) FlowDurationInterBurstGap {
	obj.obj.Nanoseconds = &value
	obj.SetChoice(FlowDurationInterBurstGapChoice.NANOSECONDS)
	return obj
}

// Microseconds returns a float64
//  The amount of time between bursts expressed in microseconds.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) Microseconds() float64 {

	if obj.obj.Microseconds == nil {
		*obj.obj.Microseconds = 0.096
	}

	return *obj.obj.Microseconds

}

// Microseconds returns a float64
//  The amount of time between bursts expressed in microseconds.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) HasMicroseconds() bool {
	return obj.obj.Microseconds != nil
}

// SetMicroseconds sets the float64 value in the FlowDurationInterBurstGap object
//  The amount of time between bursts expressed in microseconds.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) SetMicroseconds(value float64) FlowDurationInterBurstGap {
	obj.obj.Microseconds = &value
	obj.SetChoice(FlowDurationInterBurstGapChoice.MICROSECONDS)
	return obj
}

func (obj *flowDurationInterBurstGap) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *flowDurationInterBurstGap) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(FlowDurationInterBurstGapChoice.BYTES)
		obj.SetBytes(12)
	}

}

type linkStatepriorityBandwidths struct {
	obj *snappipb.LinkStatepriorityBandwidths
}

func NewLinkStatepriorityBandwidths() LinkStatepriorityBandwidths {
	obj := linkStatepriorityBandwidths{obj: &snappipb.LinkStatepriorityBandwidths{}}
	obj.setDefault()
	return &obj
}

func (obj *linkStatepriorityBandwidths) Msg() *snappipb.LinkStatepriorityBandwidths {
	return obj.obj
}

func (obj *linkStatepriorityBandwidths) SetMsg(msg *snappipb.LinkStatepriorityBandwidths) LinkStatepriorityBandwidths {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *linkStatepriorityBandwidths) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *linkStatepriorityBandwidths) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *linkStatepriorityBandwidths) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *linkStatepriorityBandwidths) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *linkStatepriorityBandwidths) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *linkStatepriorityBandwidths) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *linkStatepriorityBandwidths) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type LinkStatepriorityBandwidths interface {
	Msg() *snappipb.LinkStatepriorityBandwidths
	SetMsg(*snappipb.LinkStatepriorityBandwidths) LinkStatepriorityBandwidths
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Pb0() int64
	SetPb0(value int64) LinkStatepriorityBandwidths
	HasPb0() bool
	Pb1() int64
	SetPb1(value int64) LinkStatepriorityBandwidths
	HasPb1() bool
	Pb2() int64
	SetPb2(value int64) LinkStatepriorityBandwidths
	HasPb2() bool
	Pb3() int64
	SetPb3(value int64) LinkStatepriorityBandwidths
	HasPb3() bool
	Pb4() int64
	SetPb4(value int64) LinkStatepriorityBandwidths
	HasPb4() bool
	Pb5() int64
	SetPb5(value int64) LinkStatepriorityBandwidths
	HasPb5() bool
	Pb6() int64
	SetPb6(value int64) LinkStatepriorityBandwidths
	HasPb6() bool
	Pb7() int64
	SetPb7(value int64) LinkStatepriorityBandwidths
	HasPb7() bool
}

// Pb0 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 0.
func (obj *linkStatepriorityBandwidths) Pb0() int64 {

	if obj.obj.Pb0 == nil {
		*obj.obj.Pb0 = 125000000
	}

	return *obj.obj.Pb0

}

// Pb0 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 0.
func (obj *linkStatepriorityBandwidths) HasPb0() bool {
	return obj.obj.Pb0 != nil
}

// SetPb0 sets the int64 value in the LinkStatepriorityBandwidths object
//  Specifies the amount of bandwidth that can be reserved for the Priority 0.
func (obj *linkStatepriorityBandwidths) SetPb0(value int64) LinkStatepriorityBandwidths {
	obj.obj.Pb0 = &value

	return obj
}

// Pb1 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 1.
func (obj *linkStatepriorityBandwidths) Pb1() int64 {

	if obj.obj.Pb1 == nil {
		*obj.obj.Pb1 = 125000000
	}

	return *obj.obj.Pb1

}

// Pb1 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 1.
func (obj *linkStatepriorityBandwidths) HasPb1() bool {
	return obj.obj.Pb1 != nil
}

// SetPb1 sets the int64 value in the LinkStatepriorityBandwidths object
//  Specifies the amount of bandwidth that can be reserved for the Priority 1.
func (obj *linkStatepriorityBandwidths) SetPb1(value int64) LinkStatepriorityBandwidths {
	obj.obj.Pb1 = &value

	return obj
}

// Pb2 returns a int64
//  Specify the amount of bandwidth that can be reserved for the Priority 2.
func (obj *linkStatepriorityBandwidths) Pb2() int64 {

	if obj.obj.Pb2 == nil {
		*obj.obj.Pb2 = 125000000
	}

	return *obj.obj.Pb2

}

// Pb2 returns a int64
//  Specify the amount of bandwidth that can be reserved for the Priority 2.
func (obj *linkStatepriorityBandwidths) HasPb2() bool {
	return obj.obj.Pb2 != nil
}

// SetPb2 sets the int64 value in the LinkStatepriorityBandwidths object
//  Specify the amount of bandwidth that can be reserved for the Priority 2.
func (obj *linkStatepriorityBandwidths) SetPb2(value int64) LinkStatepriorityBandwidths {
	obj.obj.Pb2 = &value

	return obj
}

// Pb3 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 3.
func (obj *linkStatepriorityBandwidths) Pb3() int64 {

	if obj.obj.Pb3 == nil {
		*obj.obj.Pb3 = 125000000
	}

	return *obj.obj.Pb3

}

// Pb3 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 3.
func (obj *linkStatepriorityBandwidths) HasPb3() bool {
	return obj.obj.Pb3 != nil
}

// SetPb3 sets the int64 value in the LinkStatepriorityBandwidths object
//  Specifies the amount of bandwidth that can be reserved for the Priority 3.
func (obj *linkStatepriorityBandwidths) SetPb3(value int64) LinkStatepriorityBandwidths {
	obj.obj.Pb3 = &value

	return obj
}

// Pb4 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 4.
func (obj *linkStatepriorityBandwidths) Pb4() int64 {

	if obj.obj.Pb4 == nil {
		*obj.obj.Pb4 = 125000000
	}

	return *obj.obj.Pb4

}

// Pb4 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 4.
func (obj *linkStatepriorityBandwidths) HasPb4() bool {
	return obj.obj.Pb4 != nil
}

// SetPb4 sets the int64 value in the LinkStatepriorityBandwidths object
//  Specifies the amount of bandwidth that can be reserved for the Priority 4.
func (obj *linkStatepriorityBandwidths) SetPb4(value int64) LinkStatepriorityBandwidths {
	obj.obj.Pb4 = &value

	return obj
}

// Pb5 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 5.
func (obj *linkStatepriorityBandwidths) Pb5() int64 {

	if obj.obj.Pb5 == nil {
		*obj.obj.Pb5 = 125000000
	}

	return *obj.obj.Pb5

}

// Pb5 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 5.
func (obj *linkStatepriorityBandwidths) HasPb5() bool {
	return obj.obj.Pb5 != nil
}

// SetPb5 sets the int64 value in the LinkStatepriorityBandwidths object
//  Specifies the amount of bandwidth that can be reserved for the Priority 5.
func (obj *linkStatepriorityBandwidths) SetPb5(value int64) LinkStatepriorityBandwidths {
	obj.obj.Pb5 = &value

	return obj
}

// Pb6 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 6.
func (obj *linkStatepriorityBandwidths) Pb6() int64 {

	if obj.obj.Pb6 == nil {
		*obj.obj.Pb6 = 125000000
	}

	return *obj.obj.Pb6

}

// Pb6 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 6.
func (obj *linkStatepriorityBandwidths) HasPb6() bool {
	return obj.obj.Pb6 != nil
}

// SetPb6 sets the int64 value in the LinkStatepriorityBandwidths object
//  Specifies the amount of bandwidth that can be reserved for the Priority 6.
func (obj *linkStatepriorityBandwidths) SetPb6(value int64) LinkStatepriorityBandwidths {
	obj.obj.Pb6 = &value

	return obj
}

// Pb7 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 7.
func (obj *linkStatepriorityBandwidths) Pb7() int64 {

	if obj.obj.Pb7 == nil {
		*obj.obj.Pb7 = 125000000
	}

	return *obj.obj.Pb7

}

// Pb7 returns a int64
//  Specifies the amount of bandwidth that can be reserved for the Priority 7.
func (obj *linkStatepriorityBandwidths) HasPb7() bool {
	return obj.obj.Pb7 != nil
}

// SetPb7 sets the int64 value in the LinkStatepriorityBandwidths object
//  Specifies the amount of bandwidth that can be reserved for the Priority 7.
func (obj *linkStatepriorityBandwidths) SetPb7(value int64) LinkStatepriorityBandwidths {
	obj.obj.Pb7 = &value

	return obj
}

func (obj *linkStatepriorityBandwidths) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Pb0 != nil {
		if *obj.obj.Pb0 < 0 || *obj.obj.Pb0 > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= LinkStatepriorityBandwidths.Pb0 <= 4294967295 but Got %d", *obj.obj.Pb0))
		}

	}

	if obj.obj.Pb1 != nil {
		if *obj.obj.Pb1 < 0 || *obj.obj.Pb1 > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= LinkStatepriorityBandwidths.Pb1 <= 4294967295 but Got %d", *obj.obj.Pb1))
		}

	}

	if obj.obj.Pb2 != nil {
		if *obj.obj.Pb2 < 0 || *obj.obj.Pb2 > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= LinkStatepriorityBandwidths.Pb2 <= 4294967295 but Got %d", *obj.obj.Pb2))
		}

	}

	if obj.obj.Pb3 != nil {
		if *obj.obj.Pb3 < 0 || *obj.obj.Pb3 > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= LinkStatepriorityBandwidths.Pb3 <= 4294967295 but Got %d", *obj.obj.Pb3))
		}

	}

	if obj.obj.Pb4 != nil {
		if *obj.obj.Pb4 < 0 || *obj.obj.Pb4 > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= LinkStatepriorityBandwidths.Pb4 <= 4294967295 but Got %d", *obj.obj.Pb4))
		}

	}

	if obj.obj.Pb5 != nil {
		if *obj.obj.Pb5 < 0 || *obj.obj.Pb5 > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= LinkStatepriorityBandwidths.Pb5 <= 4294967295 but Got %d", *obj.obj.Pb5))
		}

	}

	if obj.obj.Pb6 != nil {
		if *obj.obj.Pb6 < 0 || *obj.obj.Pb6 > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= LinkStatepriorityBandwidths.Pb6 <= 4294967295 but Got %d", *obj.obj.Pb6))
		}

	}

	if obj.obj.Pb7 != nil {
		if *obj.obj.Pb7 < 0 || *obj.obj.Pb7 > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= LinkStatepriorityBandwidths.Pb7 <= 4294967295 but Got %d", *obj.obj.Pb7))
		}

	}

}

func (obj *linkStatepriorityBandwidths) setDefault() {
	if obj.obj.Pb0 == nil {
		obj.SetPb0(125000000)
	}
	if obj.obj.Pb1 == nil {
		obj.SetPb1(125000000)
	}
	if obj.obj.Pb2 == nil {
		obj.SetPb2(125000000)
	}
	if obj.obj.Pb3 == nil {
		obj.SetPb3(125000000)
	}
	if obj.obj.Pb4 == nil {
		obj.SetPb4(125000000)
	}
	if obj.obj.Pb5 == nil {
		obj.SetPb5(125000000)
	}
	if obj.obj.Pb6 == nil {
		obj.SetPb6(125000000)
	}
	if obj.obj.Pb7 == nil {
		obj.SetPb7(125000000)
	}

}

type bgpAdvanced struct {
	obj *snappipb.BgpAdvanced
}

func NewBgpAdvanced() BgpAdvanced {
	obj := bgpAdvanced{obj: &snappipb.BgpAdvanced{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpAdvanced) Msg() *snappipb.BgpAdvanced {
	return obj.obj
}

func (obj *bgpAdvanced) SetMsg(msg *snappipb.BgpAdvanced) BgpAdvanced {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpAdvanced) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpAdvanced) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpAdvanced) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpAdvanced) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpAdvanced) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpAdvanced) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpAdvanced) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpAdvanced interface {
	Msg() *snappipb.BgpAdvanced
	SetMsg(*snappipb.BgpAdvanced) BgpAdvanced
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	HoldTimeInterval() int32
	SetHoldTimeInterval(value int32) BgpAdvanced
	HasHoldTimeInterval() bool
	KeepAliveInterval() int32
	SetKeepAliveInterval(value int32) BgpAdvanced
	HasKeepAliveInterval() bool
	UpdateInterval() int32
	SetUpdateInterval(value int32) BgpAdvanced
	HasUpdateInterval() bool
	TimeToLive() int32
	SetTimeToLive(value int32) BgpAdvanced
	HasTimeToLive() bool
	Md5Key() string
	SetMd5Key(value string) BgpAdvanced
	HasMd5Key() bool
}

// HoldTimeInterval returns a int32
//  Number of seconds the sender proposes for the value of the Hold Timer.
func (obj *bgpAdvanced) HoldTimeInterval() int32 {

	if obj.obj.HoldTimeInterval == nil {
		*obj.obj.HoldTimeInterval = 90
	}

	return *obj.obj.HoldTimeInterval

}

// HoldTimeInterval returns a int32
//  Number of seconds the sender proposes for the value of the Hold Timer.
func (obj *bgpAdvanced) HasHoldTimeInterval() bool {
	return obj.obj.HoldTimeInterval != nil
}

// SetHoldTimeInterval sets the int32 value in the BgpAdvanced object
//  Number of seconds the sender proposes for the value of the Hold Timer.
func (obj *bgpAdvanced) SetHoldTimeInterval(value int32) BgpAdvanced {
	obj.obj.HoldTimeInterval = &value

	return obj
}

// KeepAliveInterval returns a int32
//  Number of seconds between transmissions of Keepalive messages by this peer.
func (obj *bgpAdvanced) KeepAliveInterval() int32 {

	if obj.obj.KeepAliveInterval == nil {
		*obj.obj.KeepAliveInterval = 30
	}

	return *obj.obj.KeepAliveInterval

}

// KeepAliveInterval returns a int32
//  Number of seconds between transmissions of Keepalive messages by this peer.
func (obj *bgpAdvanced) HasKeepAliveInterval() bool {
	return obj.obj.KeepAliveInterval != nil
}

// SetKeepAliveInterval sets the int32 value in the BgpAdvanced object
//  Number of seconds between transmissions of Keepalive messages by this peer.
func (obj *bgpAdvanced) SetKeepAliveInterval(value int32) BgpAdvanced {
	obj.obj.KeepAliveInterval = &value

	return obj
}

// UpdateInterval returns a int32
//  The time interval at which Update messages are sent to the DUT, expressed as the number of milliseconds between Update messages. The update interval 0 implies to send all the updates as fast as possible.
func (obj *bgpAdvanced) UpdateInterval() int32 {

	if obj.obj.UpdateInterval == nil {
		*obj.obj.UpdateInterval = 0
	}

	return *obj.obj.UpdateInterval

}

// UpdateInterval returns a int32
//  The time interval at which Update messages are sent to the DUT, expressed as the number of milliseconds between Update messages. The update interval 0 implies to send all the updates as fast as possible.
func (obj *bgpAdvanced) HasUpdateInterval() bool {
	return obj.obj.UpdateInterval != nil
}

// SetUpdateInterval sets the int32 value in the BgpAdvanced object
//  The time interval at which Update messages are sent to the DUT, expressed as the number of milliseconds between Update messages. The update interval 0 implies to send all the updates as fast as possible.
func (obj *bgpAdvanced) SetUpdateInterval(value int32) BgpAdvanced {
	obj.obj.UpdateInterval = &value

	return obj
}

// TimeToLive returns a int32
//  The limited number of iterations that a unit of data can experience before the data is discarded. This is placed in the TTL field in the IP header of the  transmitted packets.
func (obj *bgpAdvanced) TimeToLive() int32 {

	if obj.obj.TimeToLive == nil {
		*obj.obj.TimeToLive = 64
	}

	return *obj.obj.TimeToLive

}

// TimeToLive returns a int32
//  The limited number of iterations that a unit of data can experience before the data is discarded. This is placed in the TTL field in the IP header of the  transmitted packets.
func (obj *bgpAdvanced) HasTimeToLive() bool {
	return obj.obj.TimeToLive != nil
}

// SetTimeToLive sets the int32 value in the BgpAdvanced object
//  The limited number of iterations that a unit of data can experience before the data is discarded. This is placed in the TTL field in the IP header of the  transmitted packets.
func (obj *bgpAdvanced) SetTimeToLive(value int32) BgpAdvanced {
	obj.obj.TimeToLive = &value

	return obj
}

// Md5Key returns a string
//  The value to be used as a secret MD5 key for authentication. If not configured, MD5 authentication will not be enabled.
func (obj *bgpAdvanced) Md5Key() string {

	return *obj.obj.Md5Key

}

// Md5Key returns a string
//  The value to be used as a secret MD5 key for authentication. If not configured, MD5 authentication will not be enabled.
func (obj *bgpAdvanced) HasMd5Key() bool {
	return obj.obj.Md5Key != nil
}

// SetMd5Key sets the string value in the BgpAdvanced object
//  The value to be used as a secret MD5 key for authentication. If not configured, MD5 authentication will not be enabled.
func (obj *bgpAdvanced) SetMd5Key(value string) BgpAdvanced {
	obj.obj.Md5Key = &value

	return obj
}

func (obj *bgpAdvanced) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpAdvanced) setDefault() {
	if obj.obj.HoldTimeInterval == nil {
		obj.SetHoldTimeInterval(90)
	}
	if obj.obj.KeepAliveInterval == nil {
		obj.SetKeepAliveInterval(30)
	}
	if obj.obj.UpdateInterval == nil {
		obj.SetUpdateInterval(0)
	}
	if obj.obj.TimeToLive == nil {
		obj.SetTimeToLive(64)
	}

}

type bgpCapability struct {
	obj *snappipb.BgpCapability
}

func NewBgpCapability() BgpCapability {
	obj := bgpCapability{obj: &snappipb.BgpCapability{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpCapability) Msg() *snappipb.BgpCapability {
	return obj.obj
}

func (obj *bgpCapability) SetMsg(msg *snappipb.BgpCapability) BgpCapability {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpCapability) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpCapability) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpCapability) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpCapability) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpCapability) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpCapability) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpCapability) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpCapability interface {
	Msg() *snappipb.BgpCapability
	SetMsg(*snappipb.BgpCapability) BgpCapability
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Ipv4Unicast() bool
	SetIpv4Unicast(value bool) BgpCapability
	HasIpv4Unicast() bool
	Ipv4Multicast() bool
	SetIpv4Multicast(value bool) BgpCapability
	HasIpv4Multicast() bool
	Ipv6Unicast() bool
	SetIpv6Unicast(value bool) BgpCapability
	HasIpv6Unicast() bool
	Ipv6Multicast() bool
	SetIpv6Multicast(value bool) BgpCapability
	HasIpv6Multicast() bool
	Vpls() bool
	SetVpls(value bool) BgpCapability
	HasVpls() bool
	RouteRefresh() bool
	SetRouteRefresh(value bool) BgpCapability
	HasRouteRefresh() bool
	RouteConstraint() bool
	SetRouteConstraint(value bool) BgpCapability
	HasRouteConstraint() bool
	LinkStateNonVpn() bool
	SetLinkStateNonVpn(value bool) BgpCapability
	HasLinkStateNonVpn() bool
	LinkStateVpn() bool
	SetLinkStateVpn(value bool) BgpCapability
	HasLinkStateVpn() bool
	Evpn() bool
	SetEvpn(value bool) BgpCapability
	HasEvpn() bool
	ExtendedNextHopEncoding() bool
	SetExtendedNextHopEncoding(value bool) BgpCapability
	HasExtendedNextHopEncoding() bool
	Ipv4MulticastVpn() bool
	SetIpv4MulticastVpn(value bool) BgpCapability
	HasIpv4MulticastVpn() bool
	Ipv4MplsVpn() bool
	SetIpv4MplsVpn(value bool) BgpCapability
	HasIpv4MplsVpn() bool
	Ipv4Mdt() bool
	SetIpv4Mdt(value bool) BgpCapability
	HasIpv4Mdt() bool
	Ipv4MulticastMplsVpn() bool
	SetIpv4MulticastMplsVpn(value bool) BgpCapability
	HasIpv4MulticastMplsVpn() bool
	Ipv4UnicastFlowSpec() bool
	SetIpv4UnicastFlowSpec(value bool) BgpCapability
	HasIpv4UnicastFlowSpec() bool
	Ipv4SrTePolicy() bool
	SetIpv4SrTePolicy(value bool) BgpCapability
	HasIpv4SrTePolicy() bool
	Ipv4UnicastAddPath() bool
	SetIpv4UnicastAddPath(value bool) BgpCapability
	HasIpv4UnicastAddPath() bool
	Ipv6MulticastVpn() bool
	SetIpv6MulticastVpn(value bool) BgpCapability
	HasIpv6MulticastVpn() bool
	Ipv6MplsVpn() bool
	SetIpv6MplsVpn(value bool) BgpCapability
	HasIpv6MplsVpn() bool
	Ipv6Mdt() bool
	SetIpv6Mdt(value bool) BgpCapability
	HasIpv6Mdt() bool
	Ipv6MulticastMplsVpn() bool
	SetIpv6MulticastMplsVpn(value bool) BgpCapability
	HasIpv6MulticastMplsVpn() bool
	Ipv6UnicastFlowSpec() bool
	SetIpv6UnicastFlowSpec(value bool) BgpCapability
	HasIpv6UnicastFlowSpec() bool
	Ipv6SrTePolicy() bool
	SetIpv6SrTePolicy(value bool) BgpCapability
	HasIpv6SrTePolicy() bool
	Ipv6UnicastAddPath() bool
	SetIpv6UnicastAddPath(value bool) BgpCapability
	HasIpv6UnicastAddPath() bool
}

// Ipv4Unicast returns a bool
//  Support for the IPv4 Unicast address family.
func (obj *bgpCapability) Ipv4Unicast() bool {

	if obj.obj.Ipv4Unicast == nil {
		*obj.obj.Ipv4Unicast = true
	}

	return *obj.obj.Ipv4Unicast

}

// Ipv4Unicast returns a bool
//  Support for the IPv4 Unicast address family.
func (obj *bgpCapability) HasIpv4Unicast() bool {
	return obj.obj.Ipv4Unicast != nil
}

// SetIpv4Unicast sets the bool value in the BgpCapability object
//  Support for the IPv4 Unicast address family.
func (obj *bgpCapability) SetIpv4Unicast(value bool) BgpCapability {
	obj.obj.Ipv4Unicast = &value

	return obj
}

// Ipv4Multicast returns a bool
//  Support for the IPv4 Multicast address family.
func (obj *bgpCapability) Ipv4Multicast() bool {

	if obj.obj.Ipv4Multicast == nil {
		*obj.obj.Ipv4Multicast = false
	}

	return *obj.obj.Ipv4Multicast

}

// Ipv4Multicast returns a bool
//  Support for the IPv4 Multicast address family.
func (obj *bgpCapability) HasIpv4Multicast() bool {
	return obj.obj.Ipv4Multicast != nil
}

// SetIpv4Multicast sets the bool value in the BgpCapability object
//  Support for the IPv4 Multicast address family.
func (obj *bgpCapability) SetIpv4Multicast(value bool) BgpCapability {
	obj.obj.Ipv4Multicast = &value

	return obj
}

// Ipv6Unicast returns a bool
//  Support for the IPv4 Unicast address family.
func (obj *bgpCapability) Ipv6Unicast() bool {

	if obj.obj.Ipv6Unicast == nil {
		*obj.obj.Ipv6Unicast = true
	}

	return *obj.obj.Ipv6Unicast

}

// Ipv6Unicast returns a bool
//  Support for the IPv4 Unicast address family.
func (obj *bgpCapability) HasIpv6Unicast() bool {
	return obj.obj.Ipv6Unicast != nil
}

// SetIpv6Unicast sets the bool value in the BgpCapability object
//  Support for the IPv4 Unicast address family.
func (obj *bgpCapability) SetIpv6Unicast(value bool) BgpCapability {
	obj.obj.Ipv6Unicast = &value

	return obj
}

// Ipv6Multicast returns a bool
//  Support for the IPv6 Multicast address family.
func (obj *bgpCapability) Ipv6Multicast() bool {

	if obj.obj.Ipv6Multicast == nil {
		*obj.obj.Ipv6Multicast = false
	}

	return *obj.obj.Ipv6Multicast

}

// Ipv6Multicast returns a bool
//  Support for the IPv6 Multicast address family.
func (obj *bgpCapability) HasIpv6Multicast() bool {
	return obj.obj.Ipv6Multicast != nil
}

// SetIpv6Multicast sets the bool value in the BgpCapability object
//  Support for the IPv6 Multicast address family.
func (obj *bgpCapability) SetIpv6Multicast(value bool) BgpCapability {
	obj.obj.Ipv6Multicast = &value

	return obj
}

// Vpls returns a bool
//  Support for VPLS as below.
//  RFC4761 - Virtual Private LAN Service (VPLS) using BGP for Auto-Discovery
//  and Signaling.
//  RFC6624 - Layer 2 Virtual Private Networks using BGP for Auto-Discovery
//  and Signaling.
func (obj *bgpCapability) Vpls() bool {

	if obj.obj.Vpls == nil {
		*obj.obj.Vpls = false
	}

	return *obj.obj.Vpls

}

// Vpls returns a bool
//  Support for VPLS as below.
//  RFC4761 - Virtual Private LAN Service (VPLS) using BGP for Auto-Discovery
//  and Signaling.
//  RFC6624 - Layer 2 Virtual Private Networks using BGP for Auto-Discovery
//  and Signaling.
func (obj *bgpCapability) HasVpls() bool {
	return obj.obj.Vpls != nil
}

// SetVpls sets the bool value in the BgpCapability object
//  Support for VPLS as below.
//  RFC4761 - Virtual Private LAN Service (VPLS) using BGP for Auto-Discovery
//  and Signaling.
//  RFC6624 - Layer 2 Virtual Private Networks using BGP for Auto-Discovery
//  and Signaling.
func (obj *bgpCapability) SetVpls(value bool) BgpCapability {
	obj.obj.Vpls = &value

	return obj
}

// RouteRefresh returns a bool
//  Support for the route refresh capabilities. Route Refresh allows the dynamic exchange of route refresh requests  and routing information between BGP peers and the subsequent re-advertisement  of the outbound or inbound routing table.
func (obj *bgpCapability) RouteRefresh() bool {

	if obj.obj.RouteRefresh == nil {
		*obj.obj.RouteRefresh = true
	}

	return *obj.obj.RouteRefresh

}

// RouteRefresh returns a bool
//  Support for the route refresh capabilities. Route Refresh allows the dynamic exchange of route refresh requests  and routing information between BGP peers and the subsequent re-advertisement  of the outbound or inbound routing table.
func (obj *bgpCapability) HasRouteRefresh() bool {
	return obj.obj.RouteRefresh != nil
}

// SetRouteRefresh sets the bool value in the BgpCapability object
//  Support for the route refresh capabilities. Route Refresh allows the dynamic exchange of route refresh requests  and routing information between BGP peers and the subsequent re-advertisement  of the outbound or inbound routing table.
func (obj *bgpCapability) SetRouteRefresh(value bool) BgpCapability {
	obj.obj.RouteRefresh = &value

	return obj
}

// RouteConstraint returns a bool
//  Supports for the route constraint capabilities. Route Constraint allows the advertisement of Route Target Membership  information. The BGP peers exchange Route Target Reachability Information,  which is used to build a route distribution graph.  This limits the propagation of VPN Network Layer Reachability Information (NLRI) between different autonomous systems  or distinct clusters of the same autonomous system. This is supported for Layer 3 Virtual Private Network scenario.
func (obj *bgpCapability) RouteConstraint() bool {

	if obj.obj.RouteConstraint == nil {
		*obj.obj.RouteConstraint = false
	}

	return *obj.obj.RouteConstraint

}

// RouteConstraint returns a bool
//  Supports for the route constraint capabilities. Route Constraint allows the advertisement of Route Target Membership  information. The BGP peers exchange Route Target Reachability Information,  which is used to build a route distribution graph.  This limits the propagation of VPN Network Layer Reachability Information (NLRI) between different autonomous systems  or distinct clusters of the same autonomous system. This is supported for Layer 3 Virtual Private Network scenario.
func (obj *bgpCapability) HasRouteConstraint() bool {
	return obj.obj.RouteConstraint != nil
}

// SetRouteConstraint sets the bool value in the BgpCapability object
//  Supports for the route constraint capabilities. Route Constraint allows the advertisement of Route Target Membership  information. The BGP peers exchange Route Target Reachability Information,  which is used to build a route distribution graph.  This limits the propagation of VPN Network Layer Reachability Information (NLRI) between different autonomous systems  or distinct clusters of the same autonomous system. This is supported for Layer 3 Virtual Private Network scenario.
func (obj *bgpCapability) SetRouteConstraint(value bool) BgpCapability {
	obj.obj.RouteConstraint = &value

	return obj
}

// LinkStateNonVpn returns a bool
//  Support for BGP Link State for ISIS and OSPF.
func (obj *bgpCapability) LinkStateNonVpn() bool {

	if obj.obj.LinkStateNonVpn == nil {
		*obj.obj.LinkStateNonVpn = false
	}

	return *obj.obj.LinkStateNonVpn

}

// LinkStateNonVpn returns a bool
//  Support for BGP Link State for ISIS and OSPF.
func (obj *bgpCapability) HasLinkStateNonVpn() bool {
	return obj.obj.LinkStateNonVpn != nil
}

// SetLinkStateNonVpn sets the bool value in the BgpCapability object
//  Support for BGP Link State for ISIS and OSPF.
func (obj *bgpCapability) SetLinkStateNonVpn(value bool) BgpCapability {
	obj.obj.LinkStateNonVpn = &value

	return obj
}

// LinkStateVpn returns a bool
//  Capability advertisement of BGP Link State for VPNs.
func (obj *bgpCapability) LinkStateVpn() bool {

	if obj.obj.LinkStateVpn == nil {
		*obj.obj.LinkStateVpn = false
	}

	return *obj.obj.LinkStateVpn

}

// LinkStateVpn returns a bool
//  Capability advertisement of BGP Link State for VPNs.
func (obj *bgpCapability) HasLinkStateVpn() bool {
	return obj.obj.LinkStateVpn != nil
}

// SetLinkStateVpn sets the bool value in the BgpCapability object
//  Capability advertisement of BGP Link State for VPNs.
func (obj *bgpCapability) SetLinkStateVpn(value bool) BgpCapability {
	obj.obj.LinkStateVpn = &value

	return obj
}

// Evpn returns a bool
//  Support for the EVPN address family.
func (obj *bgpCapability) Evpn() bool {

	if obj.obj.Evpn == nil {
		*obj.obj.Evpn = false
	}

	return *obj.obj.Evpn

}

// Evpn returns a bool
//  Support for the EVPN address family.
func (obj *bgpCapability) HasEvpn() bool {
	return obj.obj.Evpn != nil
}

// SetEvpn sets the bool value in the BgpCapability object
//  Support for the EVPN address family.
func (obj *bgpCapability) SetEvpn(value bool) BgpCapability {
	obj.obj.Evpn = &value

	return obj
}

// ExtendedNextHopEncoding returns a bool
//  Support for extended Next Hop Encoding for Nexthop field in  IPv4 routes advertisement.  This allows IPv4 routes being advertised by IPv6 peers to  include an IPv6 Nexthop.
func (obj *bgpCapability) ExtendedNextHopEncoding() bool {

	if obj.obj.ExtendedNextHopEncoding == nil {
		*obj.obj.ExtendedNextHopEncoding = false
	}

	return *obj.obj.ExtendedNextHopEncoding

}

// ExtendedNextHopEncoding returns a bool
//  Support for extended Next Hop Encoding for Nexthop field in  IPv4 routes advertisement.  This allows IPv4 routes being advertised by IPv6 peers to  include an IPv6 Nexthop.
func (obj *bgpCapability) HasExtendedNextHopEncoding() bool {
	return obj.obj.ExtendedNextHopEncoding != nil
}

// SetExtendedNextHopEncoding sets the bool value in the BgpCapability object
//  Support for extended Next Hop Encoding for Nexthop field in  IPv4 routes advertisement.  This allows IPv4 routes being advertised by IPv6 peers to  include an IPv6 Nexthop.
func (obj *bgpCapability) SetExtendedNextHopEncoding(value bool) BgpCapability {
	obj.obj.ExtendedNextHopEncoding = &value

	return obj
}

// Ipv4MulticastVpn returns a bool
//  Support for the IPv4 Multicast VPN address family.
func (obj *bgpCapability) Ipv4MulticastVpn() bool {

	if obj.obj.Ipv4MulticastVpn == nil {
		*obj.obj.Ipv4MulticastVpn = false
	}

	return *obj.obj.Ipv4MulticastVpn

}

// Ipv4MulticastVpn returns a bool
//  Support for the IPv4 Multicast VPN address family.
func (obj *bgpCapability) HasIpv4MulticastVpn() bool {
	return obj.obj.Ipv4MulticastVpn != nil
}

// SetIpv4MulticastVpn sets the bool value in the BgpCapability object
//  Support for the IPv4 Multicast VPN address family.
func (obj *bgpCapability) SetIpv4MulticastVpn(value bool) BgpCapability {
	obj.obj.Ipv4MulticastVpn = &value

	return obj
}

// Ipv4MplsVpn returns a bool
//  Support for the IPv4 MPLS L3VPN address family.
func (obj *bgpCapability) Ipv4MplsVpn() bool {

	if obj.obj.Ipv4MplsVpn == nil {
		*obj.obj.Ipv4MplsVpn = false
	}

	return *obj.obj.Ipv4MplsVpn

}

// Ipv4MplsVpn returns a bool
//  Support for the IPv4 MPLS L3VPN address family.
func (obj *bgpCapability) HasIpv4MplsVpn() bool {
	return obj.obj.Ipv4MplsVpn != nil
}

// SetIpv4MplsVpn sets the bool value in the BgpCapability object
//  Support for the IPv4 MPLS L3VPN address family.
func (obj *bgpCapability) SetIpv4MplsVpn(value bool) BgpCapability {
	obj.obj.Ipv4MplsVpn = &value

	return obj
}

// Ipv4Mdt returns a bool
//  Supports for IPv4 MDT address family messages.
func (obj *bgpCapability) Ipv4Mdt() bool {

	if obj.obj.Ipv4Mdt == nil {
		*obj.obj.Ipv4Mdt = false
	}

	return *obj.obj.Ipv4Mdt

}

// Ipv4Mdt returns a bool
//  Supports for IPv4 MDT address family messages.
func (obj *bgpCapability) HasIpv4Mdt() bool {
	return obj.obj.Ipv4Mdt != nil
}

// SetIpv4Mdt sets the bool value in the BgpCapability object
//  Supports for IPv4 MDT address family messages.
func (obj *bgpCapability) SetIpv4Mdt(value bool) BgpCapability {
	obj.obj.Ipv4Mdt = &value

	return obj
}

// Ipv4MulticastMplsVpn returns a bool
//  Support for the IPv4 Multicast VPN address family.
func (obj *bgpCapability) Ipv4MulticastMplsVpn() bool {

	if obj.obj.Ipv4MulticastMplsVpn == nil {
		*obj.obj.Ipv4MulticastMplsVpn = false
	}

	return *obj.obj.Ipv4MulticastMplsVpn

}

// Ipv4MulticastMplsVpn returns a bool
//  Support for the IPv4 Multicast VPN address family.
func (obj *bgpCapability) HasIpv4MulticastMplsVpn() bool {
	return obj.obj.Ipv4MulticastMplsVpn != nil
}

// SetIpv4MulticastMplsVpn sets the bool value in the BgpCapability object
//  Support for the IPv4 Multicast VPN address family.
func (obj *bgpCapability) SetIpv4MulticastMplsVpn(value bool) BgpCapability {
	obj.obj.Ipv4MulticastMplsVpn = &value

	return obj
}

// Ipv4UnicastFlowSpec returns a bool
//  Support for propagation of IPv4 unicast flow specification rules.
func (obj *bgpCapability) Ipv4UnicastFlowSpec() bool {

	if obj.obj.Ipv4UnicastFlowSpec == nil {
		*obj.obj.Ipv4UnicastFlowSpec = false
	}

	return *obj.obj.Ipv4UnicastFlowSpec

}

// Ipv4UnicastFlowSpec returns a bool
//  Support for propagation of IPv4 unicast flow specification rules.
func (obj *bgpCapability) HasIpv4UnicastFlowSpec() bool {
	return obj.obj.Ipv4UnicastFlowSpec != nil
}

// SetIpv4UnicastFlowSpec sets the bool value in the BgpCapability object
//  Support for propagation of IPv4 unicast flow specification rules.
func (obj *bgpCapability) SetIpv4UnicastFlowSpec(value bool) BgpCapability {
	obj.obj.Ipv4UnicastFlowSpec = &value

	return obj
}

// Ipv4SrTePolicy returns a bool
//  Support for IPv4 SRTE policy.
func (obj *bgpCapability) Ipv4SrTePolicy() bool {

	if obj.obj.Ipv4SrTePolicy == nil {
		*obj.obj.Ipv4SrTePolicy = false
	}

	return *obj.obj.Ipv4SrTePolicy

}

// Ipv4SrTePolicy returns a bool
//  Support for IPv4 SRTE policy.
func (obj *bgpCapability) HasIpv4SrTePolicy() bool {
	return obj.obj.Ipv4SrTePolicy != nil
}

// SetIpv4SrTePolicy sets the bool value in the BgpCapability object
//  Support for IPv4 SRTE policy.
func (obj *bgpCapability) SetIpv4SrTePolicy(value bool) BgpCapability {
	obj.obj.Ipv4SrTePolicy = &value

	return obj
}

// Ipv4UnicastAddPath returns a bool
//  Support for IPv4 Unicast Add Path Capability.
func (obj *bgpCapability) Ipv4UnicastAddPath() bool {

	if obj.obj.Ipv4UnicastAddPath == nil {
		*obj.obj.Ipv4UnicastAddPath = false
	}

	return *obj.obj.Ipv4UnicastAddPath

}

// Ipv4UnicastAddPath returns a bool
//  Support for IPv4 Unicast Add Path Capability.
func (obj *bgpCapability) HasIpv4UnicastAddPath() bool {
	return obj.obj.Ipv4UnicastAddPath != nil
}

// SetIpv4UnicastAddPath sets the bool value in the BgpCapability object
//  Support for IPv4 Unicast Add Path Capability.
func (obj *bgpCapability) SetIpv4UnicastAddPath(value bool) BgpCapability {
	obj.obj.Ipv4UnicastAddPath = &value

	return obj
}

// Ipv6MulticastVpn returns a bool
//  Support for the IPv6 Multicast VPN address family.
func (obj *bgpCapability) Ipv6MulticastVpn() bool {

	if obj.obj.Ipv6MulticastVpn == nil {
		*obj.obj.Ipv6MulticastVpn = false
	}

	return *obj.obj.Ipv6MulticastVpn

}

// Ipv6MulticastVpn returns a bool
//  Support for the IPv6 Multicast VPN address family.
func (obj *bgpCapability) HasIpv6MulticastVpn() bool {
	return obj.obj.Ipv6MulticastVpn != nil
}

// SetIpv6MulticastVpn sets the bool value in the BgpCapability object
//  Support for the IPv6 Multicast VPN address family.
func (obj *bgpCapability) SetIpv6MulticastVpn(value bool) BgpCapability {
	obj.obj.Ipv6MulticastVpn = &value

	return obj
}

// Ipv6MplsVpn returns a bool
//  Support for the IPv6 MPLS L3VPN address family.
func (obj *bgpCapability) Ipv6MplsVpn() bool {

	if obj.obj.Ipv6MplsVpn == nil {
		*obj.obj.Ipv6MplsVpn = false
	}

	return *obj.obj.Ipv6MplsVpn

}

// Ipv6MplsVpn returns a bool
//  Support for the IPv6 MPLS L3VPN address family.
func (obj *bgpCapability) HasIpv6MplsVpn() bool {
	return obj.obj.Ipv6MplsVpn != nil
}

// SetIpv6MplsVpn sets the bool value in the BgpCapability object
//  Support for the IPv6 MPLS L3VPN address family.
func (obj *bgpCapability) SetIpv6MplsVpn(value bool) BgpCapability {
	obj.obj.Ipv6MplsVpn = &value

	return obj
}

// Ipv6Mdt returns a bool
//  Support for IPv6 MDT address family messages.
func (obj *bgpCapability) Ipv6Mdt() bool {

	if obj.obj.Ipv6Mdt == nil {
		*obj.obj.Ipv6Mdt = false
	}

	return *obj.obj.Ipv6Mdt

}

// Ipv6Mdt returns a bool
//  Support for IPv6 MDT address family messages.
func (obj *bgpCapability) HasIpv6Mdt() bool {
	return obj.obj.Ipv6Mdt != nil
}

// SetIpv6Mdt sets the bool value in the BgpCapability object
//  Support for IPv6 MDT address family messages.
func (obj *bgpCapability) SetIpv6Mdt(value bool) BgpCapability {
	obj.obj.Ipv6Mdt = &value

	return obj
}

// Ipv6MulticastMplsVpn returns a bool
//  Support for the IPv6 Multicast VPN address family.
func (obj *bgpCapability) Ipv6MulticastMplsVpn() bool {

	if obj.obj.Ipv6MulticastMplsVpn == nil {
		*obj.obj.Ipv6MulticastMplsVpn = false
	}

	return *obj.obj.Ipv6MulticastMplsVpn

}

// Ipv6MulticastMplsVpn returns a bool
//  Support for the IPv6 Multicast VPN address family.
func (obj *bgpCapability) HasIpv6MulticastMplsVpn() bool {
	return obj.obj.Ipv6MulticastMplsVpn != nil
}

// SetIpv6MulticastMplsVpn sets the bool value in the BgpCapability object
//  Support for the IPv6 Multicast VPN address family.
func (obj *bgpCapability) SetIpv6MulticastMplsVpn(value bool) BgpCapability {
	obj.obj.Ipv6MulticastMplsVpn = &value

	return obj
}

// Ipv6UnicastFlowSpec returns a bool
//  Support for propagation of IPv6 unicast flow specification rules.
func (obj *bgpCapability) Ipv6UnicastFlowSpec() bool {

	if obj.obj.Ipv6UnicastFlowSpec == nil {
		*obj.obj.Ipv6UnicastFlowSpec = false
	}

	return *obj.obj.Ipv6UnicastFlowSpec

}

// Ipv6UnicastFlowSpec returns a bool
//  Support for propagation of IPv6 unicast flow specification rules.
func (obj *bgpCapability) HasIpv6UnicastFlowSpec() bool {
	return obj.obj.Ipv6UnicastFlowSpec != nil
}

// SetIpv6UnicastFlowSpec sets the bool value in the BgpCapability object
//  Support for propagation of IPv6 unicast flow specification rules.
func (obj *bgpCapability) SetIpv6UnicastFlowSpec(value bool) BgpCapability {
	obj.obj.Ipv6UnicastFlowSpec = &value

	return obj
}

// Ipv6SrTePolicy returns a bool
//  Support for IPv6 SRTE policy.
func (obj *bgpCapability) Ipv6SrTePolicy() bool {

	if obj.obj.Ipv6SrTePolicy == nil {
		*obj.obj.Ipv6SrTePolicy = false
	}

	return *obj.obj.Ipv6SrTePolicy

}

// Ipv6SrTePolicy returns a bool
//  Support for IPv6 SRTE policy.
func (obj *bgpCapability) HasIpv6SrTePolicy() bool {
	return obj.obj.Ipv6SrTePolicy != nil
}

// SetIpv6SrTePolicy sets the bool value in the BgpCapability object
//  Support for IPv6 SRTE policy.
func (obj *bgpCapability) SetIpv6SrTePolicy(value bool) BgpCapability {
	obj.obj.Ipv6SrTePolicy = &value

	return obj
}

// Ipv6UnicastAddPath returns a bool
//  Support for IPv6 Unicast Add Path Capability.
func (obj *bgpCapability) Ipv6UnicastAddPath() bool {

	if obj.obj.Ipv6UnicastAddPath == nil {
		*obj.obj.Ipv6UnicastAddPath = false
	}

	return *obj.obj.Ipv6UnicastAddPath

}

// Ipv6UnicastAddPath returns a bool
//  Support for IPv6 Unicast Add Path Capability.
func (obj *bgpCapability) HasIpv6UnicastAddPath() bool {
	return obj.obj.Ipv6UnicastAddPath != nil
}

// SetIpv6UnicastAddPath sets the bool value in the BgpCapability object
//  Support for IPv6 Unicast Add Path Capability.
func (obj *bgpCapability) SetIpv6UnicastAddPath(value bool) BgpCapability {
	obj.obj.Ipv6UnicastAddPath = &value

	return obj
}

func (obj *bgpCapability) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpCapability) setDefault() {
	if obj.obj.Ipv4Unicast == nil {
		obj.SetIpv4Unicast(true)
	}
	if obj.obj.Ipv4Multicast == nil {
		obj.SetIpv4Multicast(false)
	}
	if obj.obj.Ipv6Unicast == nil {
		obj.SetIpv6Unicast(true)
	}
	if obj.obj.Ipv6Multicast == nil {
		obj.SetIpv6Multicast(false)
	}
	if obj.obj.Vpls == nil {
		obj.SetVpls(false)
	}
	if obj.obj.RouteRefresh == nil {
		obj.SetRouteRefresh(true)
	}
	if obj.obj.RouteConstraint == nil {
		obj.SetRouteConstraint(false)
	}
	if obj.obj.LinkStateNonVpn == nil {
		obj.SetLinkStateNonVpn(false)
	}
	if obj.obj.LinkStateVpn == nil {
		obj.SetLinkStateVpn(false)
	}
	if obj.obj.Evpn == nil {
		obj.SetEvpn(false)
	}
	if obj.obj.ExtendedNextHopEncoding == nil {
		obj.SetExtendedNextHopEncoding(false)
	}
	if obj.obj.Ipv4MulticastVpn == nil {
		obj.SetIpv4MulticastVpn(false)
	}
	if obj.obj.Ipv4MplsVpn == nil {
		obj.SetIpv4MplsVpn(false)
	}
	if obj.obj.Ipv4Mdt == nil {
		obj.SetIpv4Mdt(false)
	}
	if obj.obj.Ipv4MulticastMplsVpn == nil {
		obj.SetIpv4MulticastMplsVpn(false)
	}
	if obj.obj.Ipv4UnicastFlowSpec == nil {
		obj.SetIpv4UnicastFlowSpec(false)
	}
	if obj.obj.Ipv4SrTePolicy == nil {
		obj.SetIpv4SrTePolicy(false)
	}
	if obj.obj.Ipv4UnicastAddPath == nil {
		obj.SetIpv4UnicastAddPath(false)
	}
	if obj.obj.Ipv6MulticastVpn == nil {
		obj.SetIpv6MulticastVpn(false)
	}
	if obj.obj.Ipv6MplsVpn == nil {
		obj.SetIpv6MplsVpn(false)
	}
	if obj.obj.Ipv6Mdt == nil {
		obj.SetIpv6Mdt(false)
	}
	if obj.obj.Ipv6MulticastMplsVpn == nil {
		obj.SetIpv6MulticastMplsVpn(false)
	}
	if obj.obj.Ipv6UnicastFlowSpec == nil {
		obj.SetIpv6UnicastFlowSpec(false)
	}
	if obj.obj.Ipv6SrTePolicy == nil {
		obj.SetIpv6SrTePolicy(false)
	}
	if obj.obj.Ipv6UnicastAddPath == nil {
		obj.SetIpv6UnicastAddPath(false)
	}

}

type bgpV4RouteRange struct {
	obj *snappipb.BgpV4RouteRange
}

func NewBgpV4RouteRange() BgpV4RouteRange {
	obj := bgpV4RouteRange{obj: &snappipb.BgpV4RouteRange{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpV4RouteRange) Msg() *snappipb.BgpV4RouteRange {
	return obj.obj
}

func (obj *bgpV4RouteRange) SetMsg(msg *snappipb.BgpV4RouteRange) BgpV4RouteRange {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpV4RouteRange) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpV4RouteRange) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV4RouteRange) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV4RouteRange) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV4RouteRange) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV4RouteRange) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpV4RouteRange) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpV4RouteRange interface {
	Msg() *snappipb.BgpV4RouteRange
	SetMsg(*snappipb.BgpV4RouteRange) BgpV4RouteRange
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Addresses() BgpV4RouteRangeV4RouteAddressIter
	NextHopMode() BgpV4RouteRangeNextHopModeEnum
	SetNextHopMode(value BgpV4RouteRangeNextHopModeEnum) BgpV4RouteRange
	HasNextHopMode() bool
	NextHopAddressType() BgpV4RouteRangeNextHopAddressTypeEnum
	SetNextHopAddressType(value BgpV4RouteRangeNextHopAddressTypeEnum) BgpV4RouteRange
	HasNextHopAddressType() bool
	NextHopIpv4Address() string
	SetNextHopIpv4Address(value string) BgpV4RouteRange
	HasNextHopIpv4Address() bool
	NextHopIpv6Address() string
	SetNextHopIpv6Address(value string) BgpV4RouteRange
	HasNextHopIpv6Address() bool
	Advanced() BgpRouteAdvanced
	SetAdvanced(value BgpRouteAdvanced) BgpV4RouteRange
	HasAdvanced() bool
	Communities() BgpV4RouteRangeBgpCommunityIter
	AsPath() BgpAsPath
	SetAsPath(value BgpAsPath) BgpV4RouteRange
	HasAsPath() bool
	AddPath() BgpAddPath
	SetAddPath(value BgpAddPath) BgpV4RouteRange
	HasAddPath() bool
	Name() string
	SetName(value string) BgpV4RouteRange
}

// Addresses returns a []V4RouteAddress
//  A list of group of IPv4 route addresses.
func (obj *bgpV4RouteRange) Addresses() BgpV4RouteRangeV4RouteAddressIter {
	if obj.obj.Addresses == nil {
		obj.obj.Addresses = []*snappipb.V4RouteAddress{}
	}
	return &bgpV4RouteRangeV4RouteAddressIter{obj: obj}
}

type bgpV4RouteRangeV4RouteAddressIter struct {
	obj *bgpV4RouteRange
}

type BgpV4RouteRangeV4RouteAddressIter interface {
	Add() V4RouteAddress
	Items() []V4RouteAddress
}

func (obj *bgpV4RouteRangeV4RouteAddressIter) Add() V4RouteAddress {
	newObj := &snappipb.V4RouteAddress{}
	obj.obj.obj.Addresses = append(obj.obj.obj.Addresses, newObj)
	newLibObj := &v4RouteAddress{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV4RouteRangeV4RouteAddressIter) Items() []V4RouteAddress {
	slice := []V4RouteAddress{}
	for _, item := range obj.obj.obj.Addresses {
		slice = append(slice, &v4RouteAddress{obj: item})
	}
	return slice
}

type BgpV4RouteRangeNextHopModeEnum string

var BgpV4RouteRangeNextHopMode = struct {
	LOCAL_IP BgpV4RouteRangeNextHopModeEnum
	MANUAL   BgpV4RouteRangeNextHopModeEnum
}{
	LOCAL_IP: BgpV4RouteRangeNextHopModeEnum("local_ip"),
	MANUAL:   BgpV4RouteRangeNextHopModeEnum("manual"),
}

func (obj *bgpV4RouteRange) NextHopMode() BgpV4RouteRangeNextHopModeEnum {
	return BgpV4RouteRangeNextHopModeEnum(obj.obj.NextHopMode.Enum().String())
}

// NextHopMode returns a string
//  Specify the NextHop in MP REACH NLRI. The mode for setting the IP address  of the NextHop in the MP REACH NLRI can be one of the following:
//  Local IP: Automatically fills the Nexthop with the Local IP of the BGP peer.
//  If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
//  Manual: Override the Nexthop with any arbitrary IPv4/IPv6 address.
func (obj *bgpV4RouteRange) HasNextHopMode() bool {
	return obj.obj.NextHopMode != nil
}

func (obj *bgpV4RouteRange) SetNextHopMode(value BgpV4RouteRangeNextHopModeEnum) BgpV4RouteRange {
	intValue, ok := snappipb.BgpV4RouteRange_NextHopMode_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpV4RouteRangeNextHopModeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpV4RouteRange_NextHopMode_Enum(intValue)
	obj.obj.NextHopMode = &enumValue

	return obj
}

type BgpV4RouteRangeNextHopAddressTypeEnum string

var BgpV4RouteRangeNextHopAddressType = struct {
	IPV4 BgpV4RouteRangeNextHopAddressTypeEnum
	IPV6 BgpV4RouteRangeNextHopAddressTypeEnum
}{
	IPV4: BgpV4RouteRangeNextHopAddressTypeEnum("ipv4"),
	IPV6: BgpV4RouteRangeNextHopAddressTypeEnum("ipv6"),
}

func (obj *bgpV4RouteRange) NextHopAddressType() BgpV4RouteRangeNextHopAddressTypeEnum {
	return BgpV4RouteRangeNextHopAddressTypeEnum(obj.obj.NextHopAddressType.Enum().String())
}

// NextHopAddressType returns a string
//  If the Nexthop Mode is Manual, it sets the type of the NextHop IP address.
func (obj *bgpV4RouteRange) HasNextHopAddressType() bool {
	return obj.obj.NextHopAddressType != nil
}

func (obj *bgpV4RouteRange) SetNextHopAddressType(value BgpV4RouteRangeNextHopAddressTypeEnum) BgpV4RouteRange {
	intValue, ok := snappipb.BgpV4RouteRange_NextHopAddressType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpV4RouteRangeNextHopAddressTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpV4RouteRange_NextHopAddressType_Enum(intValue)
	obj.obj.NextHopAddressType = &enumValue

	return obj
}

// NextHopIpv4Address returns a string
//  The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
func (obj *bgpV4RouteRange) NextHopIpv4Address() string {

	if obj.obj.NextHopIpv4Address == nil {
		*obj.obj.NextHopIpv4Address = "0.0.0.0"
	}

	return *obj.obj.NextHopIpv4Address

}

// NextHopIpv4Address returns a string
//  The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
func (obj *bgpV4RouteRange) HasNextHopIpv4Address() bool {
	return obj.obj.NextHopIpv4Address != nil
}

// SetNextHopIpv4Address sets the string value in the BgpV4RouteRange object
//  The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
func (obj *bgpV4RouteRange) SetNextHopIpv4Address(value string) BgpV4RouteRange {
	obj.obj.NextHopIpv4Address = &value

	return obj
}

// NextHopIpv6Address returns a string
//  The IPv6 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv6.
func (obj *bgpV4RouteRange) NextHopIpv6Address() string {

	if obj.obj.NextHopIpv6Address == nil {
		*obj.obj.NextHopIpv6Address = "::0"
	}

	return *obj.obj.NextHopIpv6Address

}

// NextHopIpv6Address returns a string
//  The IPv6 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv6.
func (obj *bgpV4RouteRange) HasNextHopIpv6Address() bool {
	return obj.obj.NextHopIpv6Address != nil
}

// SetNextHopIpv6Address sets the string value in the BgpV4RouteRange object
//  The IPv6 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv6.
func (obj *bgpV4RouteRange) SetNextHopIpv6Address(value string) BgpV4RouteRange {
	obj.obj.NextHopIpv6Address = &value

	return obj
}

// Advanced returns a BgpRouteAdvanced
//  description is TBD
func (obj *bgpV4RouteRange) Advanced() BgpRouteAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = NewBgpRouteAdvanced().Msg()
	}
	return &bgpRouteAdvanced{obj: obj.obj.Advanced}
}

// Advanced returns a BgpRouteAdvanced
//  description is TBD
func (obj *bgpV4RouteRange) HasAdvanced() bool {
	return obj.obj.Advanced != nil
}

// SetAdvanced sets the BgpRouteAdvanced value in the BgpV4RouteRange object
//  description is TBD
func (obj *bgpV4RouteRange) SetAdvanced(value BgpRouteAdvanced) BgpV4RouteRange {
	obj.Advanced().SetMsg(value.Msg())

	return obj
}

// Communities returns a []BgpCommunity
//  Optional community settings.
func (obj *bgpV4RouteRange) Communities() BgpV4RouteRangeBgpCommunityIter {
	if obj.obj.Communities == nil {
		obj.obj.Communities = []*snappipb.BgpCommunity{}
	}
	return &bgpV4RouteRangeBgpCommunityIter{obj: obj}
}

type bgpV4RouteRangeBgpCommunityIter struct {
	obj *bgpV4RouteRange
}

type BgpV4RouteRangeBgpCommunityIter interface {
	Add() BgpCommunity
	Items() []BgpCommunity
}

func (obj *bgpV4RouteRangeBgpCommunityIter) Add() BgpCommunity {
	newObj := &snappipb.BgpCommunity{}
	obj.obj.obj.Communities = append(obj.obj.obj.Communities, newObj)
	newLibObj := &bgpCommunity{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV4RouteRangeBgpCommunityIter) Items() []BgpCommunity {
	slice := []BgpCommunity{}
	for _, item := range obj.obj.obj.Communities {
		slice = append(slice, &bgpCommunity{obj: item})
	}
	return slice
}

// AsPath returns a BgpAsPath
//  description is TBD
func (obj *bgpV4RouteRange) AsPath() BgpAsPath {
	if obj.obj.AsPath == nil {
		obj.obj.AsPath = NewBgpAsPath().Msg()
	}
	return &bgpAsPath{obj: obj.obj.AsPath}
}

// AsPath returns a BgpAsPath
//  description is TBD
func (obj *bgpV4RouteRange) HasAsPath() bool {
	return obj.obj.AsPath != nil
}

// SetAsPath sets the BgpAsPath value in the BgpV4RouteRange object
//  description is TBD
func (obj *bgpV4RouteRange) SetAsPath(value BgpAsPath) BgpV4RouteRange {
	obj.AsPath().SetMsg(value.Msg())

	return obj
}

// AddPath returns a BgpAddPath
//  description is TBD
func (obj *bgpV4RouteRange) AddPath() BgpAddPath {
	if obj.obj.AddPath == nil {
		obj.obj.AddPath = NewBgpAddPath().Msg()
	}
	return &bgpAddPath{obj: obj.obj.AddPath}
}

// AddPath returns a BgpAddPath
//  description is TBD
func (obj *bgpV4RouteRange) HasAddPath() bool {
	return obj.obj.AddPath != nil
}

// SetAddPath sets the BgpAddPath value in the BgpV4RouteRange object
//  description is TBD
func (obj *bgpV4RouteRange) SetAddPath(value BgpAddPath) BgpV4RouteRange {
	obj.AddPath().SetMsg(value.Msg())

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpV4RouteRange) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the BgpV4RouteRange object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpV4RouteRange) SetName(value string) BgpV4RouteRange {
	obj.obj.Name = value

	return obj
}

func (obj *bgpV4RouteRange) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.Addresses != nil {
		for _, item := range obj.Addresses().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.NextHopIpv4Address != nil {
		err := validateIpv4(obj.NextHopIpv4Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on NextHopIpv4Address BgpV4RouteRange"))
		}
	}

	if obj.obj.NextHopIpv6Address != nil {
		err := validateIpv6(obj.NextHopIpv6Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on NextHopIpv6Address BgpV4RouteRange"))
		}
	}

	if obj.obj.Advanced != nil {
		obj.Advanced().validateObj(set_default)
	}
	if obj.obj.Communities != nil {
		for _, item := range obj.Communities().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.AsPath != nil {
		obj.AsPath().validateObj(set_default)
	}

	if obj.obj.AddPath != nil {
		obj.AddPath().validateObj(set_default)
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface BgpV4RouteRange")
	}
}

func (obj *bgpV4RouteRange) setDefault() {
	if obj.obj.NextHopMode == nil {
		obj.SetNextHopMode(BgpV4RouteRangeNextHopMode.LOCAL_IP)

	}
	if obj.obj.NextHopAddressType == nil {
		obj.SetNextHopAddressType(BgpV4RouteRangeNextHopAddressType.IPV4)

	}
	if obj.obj.NextHopIpv4Address == nil {
		obj.SetNextHopIpv4Address("0.0.0.0")
	}
	if obj.obj.NextHopIpv6Address == nil {
		obj.SetNextHopIpv6Address("::0")
	}

}

type bgpV6RouteRange struct {
	obj *snappipb.BgpV6RouteRange
}

func NewBgpV6RouteRange() BgpV6RouteRange {
	obj := bgpV6RouteRange{obj: &snappipb.BgpV6RouteRange{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpV6RouteRange) Msg() *snappipb.BgpV6RouteRange {
	return obj.obj
}

func (obj *bgpV6RouteRange) SetMsg(msg *snappipb.BgpV6RouteRange) BgpV6RouteRange {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpV6RouteRange) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpV6RouteRange) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV6RouteRange) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV6RouteRange) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV6RouteRange) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV6RouteRange) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpV6RouteRange) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpV6RouteRange interface {
	Msg() *snappipb.BgpV6RouteRange
	SetMsg(*snappipb.BgpV6RouteRange) BgpV6RouteRange
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Addresses() BgpV6RouteRangeV6RouteAddressIter
	NextHopMode() BgpV6RouteRangeNextHopModeEnum
	SetNextHopMode(value BgpV6RouteRangeNextHopModeEnum) BgpV6RouteRange
	HasNextHopMode() bool
	NextHopAddressType() BgpV6RouteRangeNextHopAddressTypeEnum
	SetNextHopAddressType(value BgpV6RouteRangeNextHopAddressTypeEnum) BgpV6RouteRange
	HasNextHopAddressType() bool
	NextHopIpv4Address() string
	SetNextHopIpv4Address(value string) BgpV6RouteRange
	HasNextHopIpv4Address() bool
	NextHopIpv6Address() string
	SetNextHopIpv6Address(value string) BgpV6RouteRange
	HasNextHopIpv6Address() bool
	Advanced() BgpRouteAdvanced
	SetAdvanced(value BgpRouteAdvanced) BgpV6RouteRange
	HasAdvanced() bool
	Communities() BgpV6RouteRangeBgpCommunityIter
	AsPath() BgpAsPath
	SetAsPath(value BgpAsPath) BgpV6RouteRange
	HasAsPath() bool
	AddPath() BgpAddPath
	SetAddPath(value BgpAddPath) BgpV6RouteRange
	HasAddPath() bool
	Name() string
	SetName(value string) BgpV6RouteRange
}

// Addresses returns a []V6RouteAddress
//  A list of group of IPv6 route addresses.
func (obj *bgpV6RouteRange) Addresses() BgpV6RouteRangeV6RouteAddressIter {
	if obj.obj.Addresses == nil {
		obj.obj.Addresses = []*snappipb.V6RouteAddress{}
	}
	return &bgpV6RouteRangeV6RouteAddressIter{obj: obj}
}

type bgpV6RouteRangeV6RouteAddressIter struct {
	obj *bgpV6RouteRange
}

type BgpV6RouteRangeV6RouteAddressIter interface {
	Add() V6RouteAddress
	Items() []V6RouteAddress
}

func (obj *bgpV6RouteRangeV6RouteAddressIter) Add() V6RouteAddress {
	newObj := &snappipb.V6RouteAddress{}
	obj.obj.obj.Addresses = append(obj.obj.obj.Addresses, newObj)
	newLibObj := &v6RouteAddress{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV6RouteRangeV6RouteAddressIter) Items() []V6RouteAddress {
	slice := []V6RouteAddress{}
	for _, item := range obj.obj.obj.Addresses {
		slice = append(slice, &v6RouteAddress{obj: item})
	}
	return slice
}

type BgpV6RouteRangeNextHopModeEnum string

var BgpV6RouteRangeNextHopMode = struct {
	LOCAL_IP BgpV6RouteRangeNextHopModeEnum
	MANUAL   BgpV6RouteRangeNextHopModeEnum
}{
	LOCAL_IP: BgpV6RouteRangeNextHopModeEnum("local_ip"),
	MANUAL:   BgpV6RouteRangeNextHopModeEnum("manual"),
}

func (obj *bgpV6RouteRange) NextHopMode() BgpV6RouteRangeNextHopModeEnum {
	return BgpV6RouteRangeNextHopModeEnum(obj.obj.NextHopMode.Enum().String())
}

// NextHopMode returns a string
//  Specify the NextHop in MP REACH NLRI. The mode for setting the IP address  of the NextHop in the MP REACH NLRI can be one of the following:
//  Local IP: Automatically fills the Nexthop with the Local IP of the BGP peer.
//  If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
//  Manual: Override the Nexthop with any arbitrary IPv4/IPv6 address.
func (obj *bgpV6RouteRange) HasNextHopMode() bool {
	return obj.obj.NextHopMode != nil
}

func (obj *bgpV6RouteRange) SetNextHopMode(value BgpV6RouteRangeNextHopModeEnum) BgpV6RouteRange {
	intValue, ok := snappipb.BgpV6RouteRange_NextHopMode_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpV6RouteRangeNextHopModeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpV6RouteRange_NextHopMode_Enum(intValue)
	obj.obj.NextHopMode = &enumValue

	return obj
}

type BgpV6RouteRangeNextHopAddressTypeEnum string

var BgpV6RouteRangeNextHopAddressType = struct {
	IPV4 BgpV6RouteRangeNextHopAddressTypeEnum
	IPV6 BgpV6RouteRangeNextHopAddressTypeEnum
}{
	IPV4: BgpV6RouteRangeNextHopAddressTypeEnum("ipv4"),
	IPV6: BgpV6RouteRangeNextHopAddressTypeEnum("ipv6"),
}

func (obj *bgpV6RouteRange) NextHopAddressType() BgpV6RouteRangeNextHopAddressTypeEnum {
	return BgpV6RouteRangeNextHopAddressTypeEnum(obj.obj.NextHopAddressType.Enum().String())
}

// NextHopAddressType returns a string
//  If the Nexthop Mode is Manual, it sets the type of the NextHop IP address.
func (obj *bgpV6RouteRange) HasNextHopAddressType() bool {
	return obj.obj.NextHopAddressType != nil
}

func (obj *bgpV6RouteRange) SetNextHopAddressType(value BgpV6RouteRangeNextHopAddressTypeEnum) BgpV6RouteRange {
	intValue, ok := snappipb.BgpV6RouteRange_NextHopAddressType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpV6RouteRangeNextHopAddressTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpV6RouteRange_NextHopAddressType_Enum(intValue)
	obj.obj.NextHopAddressType = &enumValue

	return obj
}

// NextHopIpv4Address returns a string
//  The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
func (obj *bgpV6RouteRange) NextHopIpv4Address() string {

	if obj.obj.NextHopIpv4Address == nil {
		*obj.obj.NextHopIpv4Address = "0.0.0.0"
	}

	return *obj.obj.NextHopIpv4Address

}

// NextHopIpv4Address returns a string
//  The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
func (obj *bgpV6RouteRange) HasNextHopIpv4Address() bool {
	return obj.obj.NextHopIpv4Address != nil
}

// SetNextHopIpv4Address sets the string value in the BgpV6RouteRange object
//  The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
func (obj *bgpV6RouteRange) SetNextHopIpv4Address(value string) BgpV6RouteRange {
	obj.obj.NextHopIpv4Address = &value

	return obj
}

// NextHopIpv6Address returns a string
//  The IPv6 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv6.
func (obj *bgpV6RouteRange) NextHopIpv6Address() string {

	if obj.obj.NextHopIpv6Address == nil {
		*obj.obj.NextHopIpv6Address = "::0"
	}

	return *obj.obj.NextHopIpv6Address

}

// NextHopIpv6Address returns a string
//  The IPv6 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv6.
func (obj *bgpV6RouteRange) HasNextHopIpv6Address() bool {
	return obj.obj.NextHopIpv6Address != nil
}

// SetNextHopIpv6Address sets the string value in the BgpV6RouteRange object
//  The IPv6 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv6.
func (obj *bgpV6RouteRange) SetNextHopIpv6Address(value string) BgpV6RouteRange {
	obj.obj.NextHopIpv6Address = &value

	return obj
}

// Advanced returns a BgpRouteAdvanced
//  description is TBD
func (obj *bgpV6RouteRange) Advanced() BgpRouteAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = NewBgpRouteAdvanced().Msg()
	}
	return &bgpRouteAdvanced{obj: obj.obj.Advanced}
}

// Advanced returns a BgpRouteAdvanced
//  description is TBD
func (obj *bgpV6RouteRange) HasAdvanced() bool {
	return obj.obj.Advanced != nil
}

// SetAdvanced sets the BgpRouteAdvanced value in the BgpV6RouteRange object
//  description is TBD
func (obj *bgpV6RouteRange) SetAdvanced(value BgpRouteAdvanced) BgpV6RouteRange {
	obj.Advanced().SetMsg(value.Msg())

	return obj
}

// Communities returns a []BgpCommunity
//  Optional community settings.
func (obj *bgpV6RouteRange) Communities() BgpV6RouteRangeBgpCommunityIter {
	if obj.obj.Communities == nil {
		obj.obj.Communities = []*snappipb.BgpCommunity{}
	}
	return &bgpV6RouteRangeBgpCommunityIter{obj: obj}
}

type bgpV6RouteRangeBgpCommunityIter struct {
	obj *bgpV6RouteRange
}

type BgpV6RouteRangeBgpCommunityIter interface {
	Add() BgpCommunity
	Items() []BgpCommunity
}

func (obj *bgpV6RouteRangeBgpCommunityIter) Add() BgpCommunity {
	newObj := &snappipb.BgpCommunity{}
	obj.obj.obj.Communities = append(obj.obj.obj.Communities, newObj)
	newLibObj := &bgpCommunity{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpV6RouteRangeBgpCommunityIter) Items() []BgpCommunity {
	slice := []BgpCommunity{}
	for _, item := range obj.obj.obj.Communities {
		slice = append(slice, &bgpCommunity{obj: item})
	}
	return slice
}

// AsPath returns a BgpAsPath
//  description is TBD
func (obj *bgpV6RouteRange) AsPath() BgpAsPath {
	if obj.obj.AsPath == nil {
		obj.obj.AsPath = NewBgpAsPath().Msg()
	}
	return &bgpAsPath{obj: obj.obj.AsPath}
}

// AsPath returns a BgpAsPath
//  description is TBD
func (obj *bgpV6RouteRange) HasAsPath() bool {
	return obj.obj.AsPath != nil
}

// SetAsPath sets the BgpAsPath value in the BgpV6RouteRange object
//  description is TBD
func (obj *bgpV6RouteRange) SetAsPath(value BgpAsPath) BgpV6RouteRange {
	obj.AsPath().SetMsg(value.Msg())

	return obj
}

// AddPath returns a BgpAddPath
//  description is TBD
func (obj *bgpV6RouteRange) AddPath() BgpAddPath {
	if obj.obj.AddPath == nil {
		obj.obj.AddPath = NewBgpAddPath().Msg()
	}
	return &bgpAddPath{obj: obj.obj.AddPath}
}

// AddPath returns a BgpAddPath
//  description is TBD
func (obj *bgpV6RouteRange) HasAddPath() bool {
	return obj.obj.AddPath != nil
}

// SetAddPath sets the BgpAddPath value in the BgpV6RouteRange object
//  description is TBD
func (obj *bgpV6RouteRange) SetAddPath(value BgpAddPath) BgpV6RouteRange {
	obj.AddPath().SetMsg(value.Msg())

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpV6RouteRange) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the BgpV6RouteRange object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpV6RouteRange) SetName(value string) BgpV6RouteRange {
	obj.obj.Name = value

	return obj
}

func (obj *bgpV6RouteRange) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.Addresses != nil {
		for _, item := range obj.Addresses().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.NextHopIpv4Address != nil {
		err := validateIpv4(obj.NextHopIpv4Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on NextHopIpv4Address BgpV6RouteRange"))
		}
	}

	if obj.obj.NextHopIpv6Address != nil {
		err := validateIpv6(obj.NextHopIpv6Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on NextHopIpv6Address BgpV6RouteRange"))
		}
	}

	if obj.obj.Advanced != nil {
		obj.Advanced().validateObj(set_default)
	}
	if obj.obj.Communities != nil {
		for _, item := range obj.Communities().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.AsPath != nil {
		obj.AsPath().validateObj(set_default)
	}

	if obj.obj.AddPath != nil {
		obj.AddPath().validateObj(set_default)
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface BgpV6RouteRange")
	}
}

func (obj *bgpV6RouteRange) setDefault() {
	if obj.obj.NextHopMode == nil {
		obj.SetNextHopMode(BgpV6RouteRangeNextHopMode.LOCAL_IP)

	}
	if obj.obj.NextHopAddressType == nil {
		obj.SetNextHopAddressType(BgpV6RouteRangeNextHopAddressType.IPV6)

	}
	if obj.obj.NextHopIpv4Address == nil {
		obj.SetNextHopIpv4Address("0.0.0.0")
	}
	if obj.obj.NextHopIpv6Address == nil {
		obj.SetNextHopIpv6Address("::0")
	}

}

type bgpSrteV4Policy struct {
	obj *snappipb.BgpSrteV4Policy
}

func NewBgpSrteV4Policy() BgpSrteV4Policy {
	obj := bgpSrteV4Policy{obj: &snappipb.BgpSrteV4Policy{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteV4Policy) Msg() *snappipb.BgpSrteV4Policy {
	return obj.obj
}

func (obj *bgpSrteV4Policy) SetMsg(msg *snappipb.BgpSrteV4Policy) BgpSrteV4Policy {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteV4Policy) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteV4Policy) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteV4Policy) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteV4Policy) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteV4Policy) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteV4Policy) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteV4Policy) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteV4Policy interface {
	Msg() *snappipb.BgpSrteV4Policy
	SetMsg(*snappipb.BgpSrteV4Policy) BgpSrteV4Policy
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Distinguisher() int64
	SetDistinguisher(value int64) BgpSrteV4Policy
	HasDistinguisher() bool
	Color() int64
	SetColor(value int64) BgpSrteV4Policy
	HasColor() bool
	Ipv4Endpoint() string
	SetIpv4Endpoint(value string) BgpSrteV4Policy
	NextHopMode() BgpSrteV4PolicyNextHopModeEnum
	SetNextHopMode(value BgpSrteV4PolicyNextHopModeEnum) BgpSrteV4Policy
	HasNextHopMode() bool
	NextHopAddressType() BgpSrteV4PolicyNextHopAddressTypeEnum
	SetNextHopAddressType(value BgpSrteV4PolicyNextHopAddressTypeEnum) BgpSrteV4Policy
	HasNextHopAddressType() bool
	NextHopIpv4Address() string
	SetNextHopIpv4Address(value string) BgpSrteV4Policy
	HasNextHopIpv4Address() bool
	NextHopIpv6Address() string
	SetNextHopIpv6Address(value string) BgpSrteV4Policy
	HasNextHopIpv6Address() bool
	Advanced() BgpRouteAdvanced
	SetAdvanced(value BgpRouteAdvanced) BgpSrteV4Policy
	HasAdvanced() bool
	AddPath() BgpAddPath
	SetAddPath(value BgpAddPath) BgpSrteV4Policy
	HasAddPath() bool
	AsPath() BgpAsPath
	SetAsPath(value BgpAsPath) BgpSrteV4Policy
	HasAsPath() bool
	Communities() BgpSrteV4PolicyBgpCommunityIter
	ExtCommunities() BgpSrteV4PolicyBgpExtCommunityIter
	TunnelTlvs() BgpSrteV4PolicyBgpSrteV4TunnelTlvIter
	Name() string
	SetName(value string) BgpSrteV4Policy
	Active() bool
	SetActive(value bool) BgpSrteV4Policy
	HasActive() bool
}

// Distinguisher returns a int64
//  4-octet value uniquely identifying the policy in the context of (color, endpoint) tuple. It is used by the SR Policy originator to make unique (from an NLRI perspective)  both for multiple candidate  paths of the same SR Policy as well as candidate paths  of different SR Policies (i.e. with different segment list) with the same Color  and Endpoint but meant for different head-ends.
func (obj *bgpSrteV4Policy) Distinguisher() int64 {

	if obj.obj.Distinguisher == nil {
		*obj.obj.Distinguisher = 1
	}

	return *obj.obj.Distinguisher

}

// Distinguisher returns a int64
//  4-octet value uniquely identifying the policy in the context of (color, endpoint) tuple. It is used by the SR Policy originator to make unique (from an NLRI perspective)  both for multiple candidate  paths of the same SR Policy as well as candidate paths  of different SR Policies (i.e. with different segment list) with the same Color  and Endpoint but meant for different head-ends.
func (obj *bgpSrteV4Policy) HasDistinguisher() bool {
	return obj.obj.Distinguisher != nil
}

// SetDistinguisher sets the int64 value in the BgpSrteV4Policy object
//  4-octet value uniquely identifying the policy in the context of (color, endpoint) tuple. It is used by the SR Policy originator to make unique (from an NLRI perspective)  both for multiple candidate  paths of the same SR Policy as well as candidate paths  of different SR Policies (i.e. with different segment list) with the same Color  and Endpoint but meant for different head-ends.
func (obj *bgpSrteV4Policy) SetDistinguisher(value int64) BgpSrteV4Policy {
	obj.obj.Distinguisher = &value

	return obj
}

// Color returns a int64
//  Policy color is used to match the color of the destination prefixes to steer traffic into the SR Policy.
func (obj *bgpSrteV4Policy) Color() int64 {

	if obj.obj.Color == nil {
		*obj.obj.Color = 100
	}

	return *obj.obj.Color

}

// Color returns a int64
//  Policy color is used to match the color of the destination prefixes to steer traffic into the SR Policy.
func (obj *bgpSrteV4Policy) HasColor() bool {
	return obj.obj.Color != nil
}

// SetColor sets the int64 value in the BgpSrteV4Policy object
//  Policy color is used to match the color of the destination prefixes to steer traffic into the SR Policy.
func (obj *bgpSrteV4Policy) SetColor(value int64) BgpSrteV4Policy {
	obj.obj.Color = &value

	return obj
}

// Ipv4Endpoint returns a string
//  Specifies a single node or a set of nodes (e.g. an anycast address). It is selected on the basis of the SR Policy type (AFI).
func (obj *bgpSrteV4Policy) Ipv4Endpoint() string {

	return obj.obj.Ipv4Endpoint
}

// SetIpv4Endpoint sets the string value in the BgpSrteV4Policy object
//  Specifies a single node or a set of nodes (e.g. an anycast address). It is selected on the basis of the SR Policy type (AFI).
func (obj *bgpSrteV4Policy) SetIpv4Endpoint(value string) BgpSrteV4Policy {
	obj.obj.Ipv4Endpoint = value

	return obj
}

type BgpSrteV4PolicyNextHopModeEnum string

var BgpSrteV4PolicyNextHopMode = struct {
	LOCAL_IP BgpSrteV4PolicyNextHopModeEnum
	MANUAL   BgpSrteV4PolicyNextHopModeEnum
}{
	LOCAL_IP: BgpSrteV4PolicyNextHopModeEnum("local_ip"),
	MANUAL:   BgpSrteV4PolicyNextHopModeEnum("manual"),
}

func (obj *bgpSrteV4Policy) NextHopMode() BgpSrteV4PolicyNextHopModeEnum {
	return BgpSrteV4PolicyNextHopModeEnum(obj.obj.NextHopMode.Enum().String())
}

// NextHopMode returns a string
//  Mode for choosing the NextHop in MP REACH NLRI. Available modes are : Local IP: Automatically fills the Nexthop with the Local IP of the BGP peer. For IPv6 BGP peer the Nexthop Encoding capability should be enabled. Manual: Override the Nexthop with any arbitrary IPv4/IPv6 address.
func (obj *bgpSrteV4Policy) HasNextHopMode() bool {
	return obj.obj.NextHopMode != nil
}

func (obj *bgpSrteV4Policy) SetNextHopMode(value BgpSrteV4PolicyNextHopModeEnum) BgpSrteV4Policy {
	intValue, ok := snappipb.BgpSrteV4Policy_NextHopMode_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpSrteV4PolicyNextHopModeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpSrteV4Policy_NextHopMode_Enum(intValue)
	obj.obj.NextHopMode = &enumValue

	return obj
}

type BgpSrteV4PolicyNextHopAddressTypeEnum string

var BgpSrteV4PolicyNextHopAddressType = struct {
	IPV4 BgpSrteV4PolicyNextHopAddressTypeEnum
	IPV6 BgpSrteV4PolicyNextHopAddressTypeEnum
}{
	IPV4: BgpSrteV4PolicyNextHopAddressTypeEnum("ipv4"),
	IPV6: BgpSrteV4PolicyNextHopAddressTypeEnum("ipv6"),
}

func (obj *bgpSrteV4Policy) NextHopAddressType() BgpSrteV4PolicyNextHopAddressTypeEnum {
	return BgpSrteV4PolicyNextHopAddressTypeEnum(obj.obj.NextHopAddressType.Enum().String())
}

// NextHopAddressType returns a string
//  Type of next hop IP address to be used when 'next_hop_mode' is set to 'manual'.
func (obj *bgpSrteV4Policy) HasNextHopAddressType() bool {
	return obj.obj.NextHopAddressType != nil
}

func (obj *bgpSrteV4Policy) SetNextHopAddressType(value BgpSrteV4PolicyNextHopAddressTypeEnum) BgpSrteV4Policy {
	intValue, ok := snappipb.BgpSrteV4Policy_NextHopAddressType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpSrteV4PolicyNextHopAddressTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpSrteV4Policy_NextHopAddressType_Enum(intValue)
	obj.obj.NextHopAddressType = &enumValue

	return obj
}

// NextHopIpv4Address returns a string
//  The IPv4 address of the next hop if the Nexthop type 'next_hop_mode' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability extended_next_hop_encoding should be enabled.
func (obj *bgpSrteV4Policy) NextHopIpv4Address() string {

	return *obj.obj.NextHopIpv4Address

}

// NextHopIpv4Address returns a string
//  The IPv4 address of the next hop if the Nexthop type 'next_hop_mode' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability extended_next_hop_encoding should be enabled.
func (obj *bgpSrteV4Policy) HasNextHopIpv4Address() bool {
	return obj.obj.NextHopIpv4Address != nil
}

// SetNextHopIpv4Address sets the string value in the BgpSrteV4Policy object
//  The IPv4 address of the next hop if the Nexthop type 'next_hop_mode' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability extended_next_hop_encoding should be enabled.
func (obj *bgpSrteV4Policy) SetNextHopIpv4Address(value string) BgpSrteV4Policy {
	obj.obj.NextHopIpv4Address = &value

	return obj
}

// NextHopIpv6Address returns a string
//  The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv6.
func (obj *bgpSrteV4Policy) NextHopIpv6Address() string {

	return *obj.obj.NextHopIpv6Address

}

// NextHopIpv6Address returns a string
//  The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv6.
func (obj *bgpSrteV4Policy) HasNextHopIpv6Address() bool {
	return obj.obj.NextHopIpv6Address != nil
}

// SetNextHopIpv6Address sets the string value in the BgpSrteV4Policy object
//  The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv6.
func (obj *bgpSrteV4Policy) SetNextHopIpv6Address(value string) BgpSrteV4Policy {
	obj.obj.NextHopIpv6Address = &value

	return obj
}

// Advanced returns a BgpRouteAdvanced
//  description is TBD
func (obj *bgpSrteV4Policy) Advanced() BgpRouteAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = NewBgpRouteAdvanced().Msg()
	}
	return &bgpRouteAdvanced{obj: obj.obj.Advanced}
}

// Advanced returns a BgpRouteAdvanced
//  description is TBD
func (obj *bgpSrteV4Policy) HasAdvanced() bool {
	return obj.obj.Advanced != nil
}

// SetAdvanced sets the BgpRouteAdvanced value in the BgpSrteV4Policy object
//  description is TBD
func (obj *bgpSrteV4Policy) SetAdvanced(value BgpRouteAdvanced) BgpSrteV4Policy {
	obj.Advanced().SetMsg(value.Msg())

	return obj
}

// AddPath returns a BgpAddPath
//  description is TBD
func (obj *bgpSrteV4Policy) AddPath() BgpAddPath {
	if obj.obj.AddPath == nil {
		obj.obj.AddPath = NewBgpAddPath().Msg()
	}
	return &bgpAddPath{obj: obj.obj.AddPath}
}

// AddPath returns a BgpAddPath
//  description is TBD
func (obj *bgpSrteV4Policy) HasAddPath() bool {
	return obj.obj.AddPath != nil
}

// SetAddPath sets the BgpAddPath value in the BgpSrteV4Policy object
//  description is TBD
func (obj *bgpSrteV4Policy) SetAddPath(value BgpAddPath) BgpSrteV4Policy {
	obj.AddPath().SetMsg(value.Msg())

	return obj
}

// AsPath returns a BgpAsPath
//  description is TBD
func (obj *bgpSrteV4Policy) AsPath() BgpAsPath {
	if obj.obj.AsPath == nil {
		obj.obj.AsPath = NewBgpAsPath().Msg()
	}
	return &bgpAsPath{obj: obj.obj.AsPath}
}

// AsPath returns a BgpAsPath
//  description is TBD
func (obj *bgpSrteV4Policy) HasAsPath() bool {
	return obj.obj.AsPath != nil
}

// SetAsPath sets the BgpAsPath value in the BgpSrteV4Policy object
//  description is TBD
func (obj *bgpSrteV4Policy) SetAsPath(value BgpAsPath) BgpSrteV4Policy {
	obj.AsPath().SetMsg(value.Msg())

	return obj
}

// Communities returns a []BgpCommunity
//  Optional Community settings.
func (obj *bgpSrteV4Policy) Communities() BgpSrteV4PolicyBgpCommunityIter {
	if obj.obj.Communities == nil {
		obj.obj.Communities = []*snappipb.BgpCommunity{}
	}
	return &bgpSrteV4PolicyBgpCommunityIter{obj: obj}
}

type bgpSrteV4PolicyBgpCommunityIter struct {
	obj *bgpSrteV4Policy
}

type BgpSrteV4PolicyBgpCommunityIter interface {
	Add() BgpCommunity
	Items() []BgpCommunity
}

func (obj *bgpSrteV4PolicyBgpCommunityIter) Add() BgpCommunity {
	newObj := &snappipb.BgpCommunity{}
	obj.obj.obj.Communities = append(obj.obj.obj.Communities, newObj)
	newLibObj := &bgpCommunity{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpSrteV4PolicyBgpCommunityIter) Items() []BgpCommunity {
	slice := []BgpCommunity{}
	for _, item := range obj.obj.obj.Communities {
		slice = append(slice, &bgpCommunity{obj: item})
	}
	return slice
}

// ExtCommunities returns a []BgpExtCommunity
//  Optional Extended Community settings.
func (obj *bgpSrteV4Policy) ExtCommunities() BgpSrteV4PolicyBgpExtCommunityIter {
	if obj.obj.ExtCommunities == nil {
		obj.obj.ExtCommunities = []*snappipb.BgpExtCommunity{}
	}
	return &bgpSrteV4PolicyBgpExtCommunityIter{obj: obj}
}

type bgpSrteV4PolicyBgpExtCommunityIter struct {
	obj *bgpSrteV4Policy
}

type BgpSrteV4PolicyBgpExtCommunityIter interface {
	Add() BgpExtCommunity
	Items() []BgpExtCommunity
}

func (obj *bgpSrteV4PolicyBgpExtCommunityIter) Add() BgpExtCommunity {
	newObj := &snappipb.BgpExtCommunity{}
	obj.obj.obj.ExtCommunities = append(obj.obj.obj.ExtCommunities, newObj)
	newLibObj := &bgpExtCommunity{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpSrteV4PolicyBgpExtCommunityIter) Items() []BgpExtCommunity {
	slice := []BgpExtCommunity{}
	for _, item := range obj.obj.obj.ExtCommunities {
		slice = append(slice, &bgpExtCommunity{obj: item})
	}
	return slice
}

// TunnelTlvs returns a []BgpSrteV4TunnelTlv
//  List Tunnel Encapsulation Attributes.
func (obj *bgpSrteV4Policy) TunnelTlvs() BgpSrteV4PolicyBgpSrteV4TunnelTlvIter {
	if obj.obj.TunnelTlvs == nil {
		obj.obj.TunnelTlvs = []*snappipb.BgpSrteV4TunnelTlv{}
	}
	return &bgpSrteV4PolicyBgpSrteV4TunnelTlvIter{obj: obj}
}

type bgpSrteV4PolicyBgpSrteV4TunnelTlvIter struct {
	obj *bgpSrteV4Policy
}

type BgpSrteV4PolicyBgpSrteV4TunnelTlvIter interface {
	Add() BgpSrteV4TunnelTlv
	Items() []BgpSrteV4TunnelTlv
}

func (obj *bgpSrteV4PolicyBgpSrteV4TunnelTlvIter) Add() BgpSrteV4TunnelTlv {
	newObj := &snappipb.BgpSrteV4TunnelTlv{}
	obj.obj.obj.TunnelTlvs = append(obj.obj.obj.TunnelTlvs, newObj)
	newLibObj := &bgpSrteV4TunnelTlv{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpSrteV4PolicyBgpSrteV4TunnelTlvIter) Items() []BgpSrteV4TunnelTlv {
	slice := []BgpSrteV4TunnelTlv{}
	for _, item := range obj.obj.obj.TunnelTlvs {
		slice = append(slice, &bgpSrteV4TunnelTlv{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteV4Policy) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the BgpSrteV4Policy object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteV4Policy) SetName(value string) BgpSrteV4Policy {
	obj.obj.Name = value

	return obj
}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV4Policy) Active() bool {

	if obj.obj.Active == nil {
		*obj.obj.Active = true
	}

	return *obj.obj.Active

}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV4Policy) HasActive() bool {
	return obj.obj.Active != nil
}

// SetActive sets the bool value in the BgpSrteV4Policy object
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV4Policy) SetActive(value bool) BgpSrteV4Policy {
	obj.obj.Active = &value

	return obj
}

func (obj *bgpSrteV4Policy) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Distinguisher != nil {
		if *obj.obj.Distinguisher < 0 || *obj.obj.Distinguisher > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteV4Policy.Distinguisher <= 4294967295 but Got %d", *obj.obj.Distinguisher))
		}

	}

	if obj.obj.Color != nil {
		if *obj.obj.Color < 0 || *obj.obj.Color > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteV4Policy.Color <= 4294967295 but Got %d", *obj.obj.Color))
		}

	}

	// Ipv4Endpoint required
	if obj.obj.Ipv4Endpoint == "" {
		validation = append(validation, "Ipv4Endpoint is required field on interface BgpSrteV4Policy")
	} else {
		err := validateIpv4(obj.Ipv4Endpoint())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Ipv4Endpoint BgpSrteV4Policy"))
		}
	}

	if obj.obj.NextHopIpv4Address != nil {
		err := validateIpv4(obj.NextHopIpv4Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on NextHopIpv4Address BgpSrteV4Policy"))
		}
	}

	if obj.obj.NextHopIpv6Address != nil {
		err := validateIpv6(obj.NextHopIpv6Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on NextHopIpv6Address BgpSrteV4Policy"))
		}
	}

	if obj.obj.Advanced != nil {
		obj.Advanced().validateObj(set_default)
	}

	if obj.obj.AddPath != nil {
		obj.AddPath().validateObj(set_default)
	}

	if obj.obj.AsPath != nil {
		obj.AsPath().validateObj(set_default)
	}
	if obj.obj.Communities != nil {
		for _, item := range obj.Communities().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.ExtCommunities != nil {
		for _, item := range obj.ExtCommunities().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.TunnelTlvs != nil {
		for _, item := range obj.TunnelTlvs().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface BgpSrteV4Policy")
	}
}

func (obj *bgpSrteV4Policy) setDefault() {
	if obj.obj.Distinguisher == nil {
		obj.SetDistinguisher(1)
	}
	if obj.obj.Color == nil {
		obj.SetColor(100)
	}
	if obj.obj.NextHopMode == nil {
		obj.SetNextHopMode(BgpSrteV4PolicyNextHopMode.LOCAL_IP)

	}
	if obj.obj.NextHopAddressType == nil {
		obj.SetNextHopAddressType(BgpSrteV4PolicyNextHopAddressType.IPV4)

	}
	if obj.obj.Active == nil {
		obj.SetActive(true)
	}

}

type bgpSrteV6Policy struct {
	obj *snappipb.BgpSrteV6Policy
}

func NewBgpSrteV6Policy() BgpSrteV6Policy {
	obj := bgpSrteV6Policy{obj: &snappipb.BgpSrteV6Policy{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteV6Policy) Msg() *snappipb.BgpSrteV6Policy {
	return obj.obj
}

func (obj *bgpSrteV6Policy) SetMsg(msg *snappipb.BgpSrteV6Policy) BgpSrteV6Policy {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteV6Policy) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteV6Policy) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteV6Policy) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteV6Policy) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteV6Policy) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteV6Policy) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteV6Policy) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteV6Policy interface {
	Msg() *snappipb.BgpSrteV6Policy
	SetMsg(*snappipb.BgpSrteV6Policy) BgpSrteV6Policy
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Distinguisher() int64
	SetDistinguisher(value int64) BgpSrteV6Policy
	HasDistinguisher() bool
	Color() int64
	SetColor(value int64) BgpSrteV6Policy
	HasColor() bool
	Ipv6Endpoint() string
	SetIpv6Endpoint(value string) BgpSrteV6Policy
	NextHopMode() BgpSrteV6PolicyNextHopModeEnum
	SetNextHopMode(value BgpSrteV6PolicyNextHopModeEnum) BgpSrteV6Policy
	HasNextHopMode() bool
	NextHopAddressType() BgpSrteV6PolicyNextHopAddressTypeEnum
	SetNextHopAddressType(value BgpSrteV6PolicyNextHopAddressTypeEnum) BgpSrteV6Policy
	HasNextHopAddressType() bool
	NextHopIpv4Address() string
	SetNextHopIpv4Address(value string) BgpSrteV6Policy
	HasNextHopIpv4Address() bool
	NextHopIpv6Address() string
	SetNextHopIpv6Address(value string) BgpSrteV6Policy
	HasNextHopIpv6Address() bool
	Advanced() BgpRouteAdvanced
	SetAdvanced(value BgpRouteAdvanced) BgpSrteV6Policy
	HasAdvanced() bool
	AddPath() BgpAddPath
	SetAddPath(value BgpAddPath) BgpSrteV6Policy
	HasAddPath() bool
	AsPath() BgpAsPath
	SetAsPath(value BgpAsPath) BgpSrteV6Policy
	HasAsPath() bool
	Communities() BgpSrteV6PolicyBgpCommunityIter
	Extcommunities() BgpSrteV6PolicyBgpExtCommunityIter
	TunnelTlvs() BgpSrteV6PolicyBgpSrteV6TunnelTlvIter
	Name() string
	SetName(value string) BgpSrteV6Policy
	Active() bool
	SetActive(value bool) BgpSrteV6Policy
	HasActive() bool
}

// Distinguisher returns a int64
//  Identifies the policy in the context of (color and endpoint) tuple.  It is used by the SR Policy originator to make unique multiple  occurrences of the same SR Policy.
func (obj *bgpSrteV6Policy) Distinguisher() int64 {

	if obj.obj.Distinguisher == nil {
		*obj.obj.Distinguisher = 1
	}

	return *obj.obj.Distinguisher

}

// Distinguisher returns a int64
//  Identifies the policy in the context of (color and endpoint) tuple.  It is used by the SR Policy originator to make unique multiple  occurrences of the same SR Policy.
func (obj *bgpSrteV6Policy) HasDistinguisher() bool {
	return obj.obj.Distinguisher != nil
}

// SetDistinguisher sets the int64 value in the BgpSrteV6Policy object
//  Identifies the policy in the context of (color and endpoint) tuple.  It is used by the SR Policy originator to make unique multiple  occurrences of the same SR Policy.
func (obj *bgpSrteV6Policy) SetDistinguisher(value int64) BgpSrteV6Policy {
	obj.obj.Distinguisher = &value

	return obj
}

// Color returns a int64
//  Identifies the policy. It is used to match the color of the  destination prefixes to steer traffic into the SR Policy.
func (obj *bgpSrteV6Policy) Color() int64 {

	if obj.obj.Color == nil {
		*obj.obj.Color = 100
	}

	return *obj.obj.Color

}

// Color returns a int64
//  Identifies the policy. It is used to match the color of the  destination prefixes to steer traffic into the SR Policy.
func (obj *bgpSrteV6Policy) HasColor() bool {
	return obj.obj.Color != nil
}

// SetColor sets the int64 value in the BgpSrteV6Policy object
//  Identifies the policy. It is used to match the color of the  destination prefixes to steer traffic into the SR Policy.
func (obj *bgpSrteV6Policy) SetColor(value int64) BgpSrteV6Policy {
	obj.obj.Color = &value

	return obj
}

// Ipv6Endpoint returns a string
//  Specifies a single node or a set of nodes (e.g., an anycast address). It is selected on the basis of the SR Policy type (AFI).
func (obj *bgpSrteV6Policy) Ipv6Endpoint() string {

	return obj.obj.Ipv6Endpoint
}

// SetIpv6Endpoint sets the string value in the BgpSrteV6Policy object
//  Specifies a single node or a set of nodes (e.g., an anycast address). It is selected on the basis of the SR Policy type (AFI).
func (obj *bgpSrteV6Policy) SetIpv6Endpoint(value string) BgpSrteV6Policy {
	obj.obj.Ipv6Endpoint = value

	return obj
}

type BgpSrteV6PolicyNextHopModeEnum string

var BgpSrteV6PolicyNextHopMode = struct {
	LOCAL_IP BgpSrteV6PolicyNextHopModeEnum
	MANUAL   BgpSrteV6PolicyNextHopModeEnum
}{
	LOCAL_IP: BgpSrteV6PolicyNextHopModeEnum("local_ip"),
	MANUAL:   BgpSrteV6PolicyNextHopModeEnum("manual"),
}

func (obj *bgpSrteV6Policy) NextHopMode() BgpSrteV6PolicyNextHopModeEnum {
	return BgpSrteV6PolicyNextHopModeEnum(obj.obj.NextHopMode.Enum().String())
}

// NextHopMode returns a string
//  Mode for choosing the NextHop in MP REACH NLRI. Available modes are : Local IP: Automatically fills the Nexthop with the Local IP of the BGP peer. For IPv6 BGP peer the Nexthop Encoding capability should be enabled. Manual: Override the Nexthop with any arbitrary IPv4/IPv6 address.
func (obj *bgpSrteV6Policy) HasNextHopMode() bool {
	return obj.obj.NextHopMode != nil
}

func (obj *bgpSrteV6Policy) SetNextHopMode(value BgpSrteV6PolicyNextHopModeEnum) BgpSrteV6Policy {
	intValue, ok := snappipb.BgpSrteV6Policy_NextHopMode_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpSrteV6PolicyNextHopModeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpSrteV6Policy_NextHopMode_Enum(intValue)
	obj.obj.NextHopMode = &enumValue

	return obj
}

type BgpSrteV6PolicyNextHopAddressTypeEnum string

var BgpSrteV6PolicyNextHopAddressType = struct {
	IPV4 BgpSrteV6PolicyNextHopAddressTypeEnum
	IPV6 BgpSrteV6PolicyNextHopAddressTypeEnum
}{
	IPV4: BgpSrteV6PolicyNextHopAddressTypeEnum("ipv4"),
	IPV6: BgpSrteV6PolicyNextHopAddressTypeEnum("ipv6"),
}

func (obj *bgpSrteV6Policy) NextHopAddressType() BgpSrteV6PolicyNextHopAddressTypeEnum {
	return BgpSrteV6PolicyNextHopAddressTypeEnum(obj.obj.NextHopAddressType.Enum().String())
}

// NextHopAddressType returns a string
//  Type of next hop IP address to be used when 'next_hop_mode' is set to 'manual'.
func (obj *bgpSrteV6Policy) HasNextHopAddressType() bool {
	return obj.obj.NextHopAddressType != nil
}

func (obj *bgpSrteV6Policy) SetNextHopAddressType(value BgpSrteV6PolicyNextHopAddressTypeEnum) BgpSrteV6Policy {
	intValue, ok := snappipb.BgpSrteV6Policy_NextHopAddressType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpSrteV6PolicyNextHopAddressTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpSrteV6Policy_NextHopAddressType_Enum(intValue)
	obj.obj.NextHopAddressType = &enumValue

	return obj
}

// NextHopIpv4Address returns a string
//  The IPv4 address of the Nexthop if the 'next_hop_mode' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability extended_next_hop_encoding should be enabled.
func (obj *bgpSrteV6Policy) NextHopIpv4Address() string {

	if obj.obj.NextHopIpv4Address == nil {
		*obj.obj.NextHopIpv4Address = "0.0.0.0"
	}

	return *obj.obj.NextHopIpv4Address

}

// NextHopIpv4Address returns a string
//  The IPv4 address of the Nexthop if the 'next_hop_mode' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability extended_next_hop_encoding should be enabled.
func (obj *bgpSrteV6Policy) HasNextHopIpv4Address() bool {
	return obj.obj.NextHopIpv4Address != nil
}

// SetNextHopIpv4Address sets the string value in the BgpSrteV6Policy object
//  The IPv4 address of the Nexthop if the 'next_hop_mode' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability extended_next_hop_encoding should be enabled.
func (obj *bgpSrteV6Policy) SetNextHopIpv4Address(value string) BgpSrteV6Policy {
	obj.obj.NextHopIpv4Address = &value

	return obj
}

// NextHopIpv6Address returns a string
//  The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv6.
func (obj *bgpSrteV6Policy) NextHopIpv6Address() string {

	if obj.obj.NextHopIpv6Address == nil {
		*obj.obj.NextHopIpv6Address = "::0"
	}

	return *obj.obj.NextHopIpv6Address

}

// NextHopIpv6Address returns a string
//  The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv6.
func (obj *bgpSrteV6Policy) HasNextHopIpv6Address() bool {
	return obj.obj.NextHopIpv6Address != nil
}

// SetNextHopIpv6Address sets the string value in the BgpSrteV6Policy object
//  The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv6.
func (obj *bgpSrteV6Policy) SetNextHopIpv6Address(value string) BgpSrteV6Policy {
	obj.obj.NextHopIpv6Address = &value

	return obj
}

// Advanced returns a BgpRouteAdvanced
//  description is TBD
func (obj *bgpSrteV6Policy) Advanced() BgpRouteAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = NewBgpRouteAdvanced().Msg()
	}
	return &bgpRouteAdvanced{obj: obj.obj.Advanced}
}

// Advanced returns a BgpRouteAdvanced
//  description is TBD
func (obj *bgpSrteV6Policy) HasAdvanced() bool {
	return obj.obj.Advanced != nil
}

// SetAdvanced sets the BgpRouteAdvanced value in the BgpSrteV6Policy object
//  description is TBD
func (obj *bgpSrteV6Policy) SetAdvanced(value BgpRouteAdvanced) BgpSrteV6Policy {
	obj.Advanced().SetMsg(value.Msg())

	return obj
}

// AddPath returns a BgpAddPath
//  description is TBD
func (obj *bgpSrteV6Policy) AddPath() BgpAddPath {
	if obj.obj.AddPath == nil {
		obj.obj.AddPath = NewBgpAddPath().Msg()
	}
	return &bgpAddPath{obj: obj.obj.AddPath}
}

// AddPath returns a BgpAddPath
//  description is TBD
func (obj *bgpSrteV6Policy) HasAddPath() bool {
	return obj.obj.AddPath != nil
}

// SetAddPath sets the BgpAddPath value in the BgpSrteV6Policy object
//  description is TBD
func (obj *bgpSrteV6Policy) SetAddPath(value BgpAddPath) BgpSrteV6Policy {
	obj.AddPath().SetMsg(value.Msg())

	return obj
}

// AsPath returns a BgpAsPath
//  description is TBD
func (obj *bgpSrteV6Policy) AsPath() BgpAsPath {
	if obj.obj.AsPath == nil {
		obj.obj.AsPath = NewBgpAsPath().Msg()
	}
	return &bgpAsPath{obj: obj.obj.AsPath}
}

// AsPath returns a BgpAsPath
//  description is TBD
func (obj *bgpSrteV6Policy) HasAsPath() bool {
	return obj.obj.AsPath != nil
}

// SetAsPath sets the BgpAsPath value in the BgpSrteV6Policy object
//  description is TBD
func (obj *bgpSrteV6Policy) SetAsPath(value BgpAsPath) BgpSrteV6Policy {
	obj.AsPath().SetMsg(value.Msg())

	return obj
}

// Communities returns a []BgpCommunity
//  Optional community settings.
func (obj *bgpSrteV6Policy) Communities() BgpSrteV6PolicyBgpCommunityIter {
	if obj.obj.Communities == nil {
		obj.obj.Communities = []*snappipb.BgpCommunity{}
	}
	return &bgpSrteV6PolicyBgpCommunityIter{obj: obj}
}

type bgpSrteV6PolicyBgpCommunityIter struct {
	obj *bgpSrteV6Policy
}

type BgpSrteV6PolicyBgpCommunityIter interface {
	Add() BgpCommunity
	Items() []BgpCommunity
}

func (obj *bgpSrteV6PolicyBgpCommunityIter) Add() BgpCommunity {
	newObj := &snappipb.BgpCommunity{}
	obj.obj.obj.Communities = append(obj.obj.obj.Communities, newObj)
	newLibObj := &bgpCommunity{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpSrteV6PolicyBgpCommunityIter) Items() []BgpCommunity {
	slice := []BgpCommunity{}
	for _, item := range obj.obj.obj.Communities {
		slice = append(slice, &bgpCommunity{obj: item})
	}
	return slice
}

// Extcommunities returns a []BgpExtCommunity
//  Optional Extended Community settings.
func (obj *bgpSrteV6Policy) Extcommunities() BgpSrteV6PolicyBgpExtCommunityIter {
	if obj.obj.Extcommunities == nil {
		obj.obj.Extcommunities = []*snappipb.BgpExtCommunity{}
	}
	return &bgpSrteV6PolicyBgpExtCommunityIter{obj: obj}
}

type bgpSrteV6PolicyBgpExtCommunityIter struct {
	obj *bgpSrteV6Policy
}

type BgpSrteV6PolicyBgpExtCommunityIter interface {
	Add() BgpExtCommunity
	Items() []BgpExtCommunity
}

func (obj *bgpSrteV6PolicyBgpExtCommunityIter) Add() BgpExtCommunity {
	newObj := &snappipb.BgpExtCommunity{}
	obj.obj.obj.Extcommunities = append(obj.obj.obj.Extcommunities, newObj)
	newLibObj := &bgpExtCommunity{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpSrteV6PolicyBgpExtCommunityIter) Items() []BgpExtCommunity {
	slice := []BgpExtCommunity{}
	for _, item := range obj.obj.obj.Extcommunities {
		slice = append(slice, &bgpExtCommunity{obj: item})
	}
	return slice
}

// TunnelTlvs returns a []BgpSrteV6TunnelTlv
//  List of optional tunnel TLV settings.
func (obj *bgpSrteV6Policy) TunnelTlvs() BgpSrteV6PolicyBgpSrteV6TunnelTlvIter {
	if obj.obj.TunnelTlvs == nil {
		obj.obj.TunnelTlvs = []*snappipb.BgpSrteV6TunnelTlv{}
	}
	return &bgpSrteV6PolicyBgpSrteV6TunnelTlvIter{obj: obj}
}

type bgpSrteV6PolicyBgpSrteV6TunnelTlvIter struct {
	obj *bgpSrteV6Policy
}

type BgpSrteV6PolicyBgpSrteV6TunnelTlvIter interface {
	Add() BgpSrteV6TunnelTlv
	Items() []BgpSrteV6TunnelTlv
}

func (obj *bgpSrteV6PolicyBgpSrteV6TunnelTlvIter) Add() BgpSrteV6TunnelTlv {
	newObj := &snappipb.BgpSrteV6TunnelTlv{}
	obj.obj.obj.TunnelTlvs = append(obj.obj.obj.TunnelTlvs, newObj)
	newLibObj := &bgpSrteV6TunnelTlv{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpSrteV6PolicyBgpSrteV6TunnelTlvIter) Items() []BgpSrteV6TunnelTlv {
	slice := []BgpSrteV6TunnelTlv{}
	for _, item := range obj.obj.obj.TunnelTlvs {
		slice = append(slice, &bgpSrteV6TunnelTlv{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteV6Policy) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the BgpSrteV6Policy object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteV6Policy) SetName(value string) BgpSrteV6Policy {
	obj.obj.Name = value

	return obj
}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV6Policy) Active() bool {

	if obj.obj.Active == nil {
		*obj.obj.Active = true
	}

	return *obj.obj.Active

}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV6Policy) HasActive() bool {
	return obj.obj.Active != nil
}

// SetActive sets the bool value in the BgpSrteV6Policy object
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV6Policy) SetActive(value bool) BgpSrteV6Policy {
	obj.obj.Active = &value

	return obj
}

func (obj *bgpSrteV6Policy) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Distinguisher != nil {
		if *obj.obj.Distinguisher < 0 || *obj.obj.Distinguisher > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteV6Policy.Distinguisher <= 4294967295 but Got %d", *obj.obj.Distinguisher))
		}

	}

	if obj.obj.Color != nil {
		if *obj.obj.Color < 0 || *obj.obj.Color > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteV6Policy.Color <= 4294967295 but Got %d", *obj.obj.Color))
		}

	}

	// Ipv6Endpoint required
	if obj.obj.Ipv6Endpoint == "" {
		validation = append(validation, "Ipv6Endpoint is required field on interface BgpSrteV6Policy")
	} else {
		err := validateIpv6(obj.Ipv6Endpoint())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Ipv6Endpoint BgpSrteV6Policy"))
		}
	}

	if obj.obj.NextHopIpv4Address != nil {
		err := validateIpv4(obj.NextHopIpv4Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on NextHopIpv4Address BgpSrteV6Policy"))
		}
	}

	if obj.obj.NextHopIpv6Address != nil {
		err := validateIpv6(obj.NextHopIpv6Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on NextHopIpv6Address BgpSrteV6Policy"))
		}
	}

	if obj.obj.Advanced != nil {
		obj.Advanced().validateObj(set_default)
	}

	if obj.obj.AddPath != nil {
		obj.AddPath().validateObj(set_default)
	}

	if obj.obj.AsPath != nil {
		obj.AsPath().validateObj(set_default)
	}
	if obj.obj.Communities != nil {
		for _, item := range obj.Communities().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.Extcommunities != nil {
		for _, item := range obj.Extcommunities().Items() {
			item.validateObj(set_default)
		}
	}

	if obj.obj.TunnelTlvs != nil {
		for _, item := range obj.TunnelTlvs().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface BgpSrteV6Policy")
	}
}

func (obj *bgpSrteV6Policy) setDefault() {
	if obj.obj.Distinguisher == nil {
		obj.SetDistinguisher(1)
	}
	if obj.obj.Color == nil {
		obj.SetColor(100)
	}
	if obj.obj.NextHopMode == nil {
		obj.SetNextHopMode(BgpSrteV6PolicyNextHopMode.LOCAL_IP)

	}
	if obj.obj.NextHopAddressType == nil {
		obj.SetNextHopAddressType(BgpSrteV6PolicyNextHopAddressType.IPV6)

	}
	if obj.obj.NextHopIpv4Address == nil {
		obj.SetNextHopIpv4Address("0.0.0.0")
	}
	if obj.obj.NextHopIpv6Address == nil {
		obj.SetNextHopIpv6Address("::0")
	}
	if obj.obj.Active == nil {
		obj.SetActive(true)
	}

}

type bgpV6SegmentRouting struct {
	obj *snappipb.BgpV6SegmentRouting
}

func NewBgpV6SegmentRouting() BgpV6SegmentRouting {
	obj := bgpV6SegmentRouting{obj: &snappipb.BgpV6SegmentRouting{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpV6SegmentRouting) Msg() *snappipb.BgpV6SegmentRouting {
	return obj.obj
}

func (obj *bgpV6SegmentRouting) SetMsg(msg *snappipb.BgpV6SegmentRouting) BgpV6SegmentRouting {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpV6SegmentRouting) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpV6SegmentRouting) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV6SegmentRouting) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV6SegmentRouting) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpV6SegmentRouting) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpV6SegmentRouting) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpV6SegmentRouting) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpV6SegmentRouting interface {
	Msg() *snappipb.BgpV6SegmentRouting
	SetMsg(*snappipb.BgpV6SegmentRouting) BgpV6SegmentRouting
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	IngressSupportsVpn() bool
	SetIngressSupportsVpn(value bool) BgpV6SegmentRouting
	HasIngressSupportsVpn() bool
	ReducedEncapsulation() bool
	SetReducedEncapsulation(value bool) BgpV6SegmentRouting
	HasReducedEncapsulation() bool
	CopyTimeToLive() bool
	SetCopyTimeToLive(value bool) BgpV6SegmentRouting
	HasCopyTimeToLive() bool
	TimeToLive() int32
	SetTimeToLive(value int32) BgpV6SegmentRouting
	HasTimeToLive() bool
	MaxSidsPerSrh() int32
	SetMaxSidsPerSrh(value int32) BgpV6SegmentRouting
	HasMaxSidsPerSrh() bool
	AutoGenerateSegmentLeftValue() bool
	SetAutoGenerateSegmentLeftValue(value bool) BgpV6SegmentRouting
	HasAutoGenerateSegmentLeftValue() bool
	SegmentLeftValue() int32
	SetSegmentLeftValue(value int32) BgpV6SegmentRouting
	HasSegmentLeftValue() bool
	AdvertiseSrTePolicy() bool
	SetAdvertiseSrTePolicy(value bool) BgpV6SegmentRouting
	HasAdvertiseSrTePolicy() bool
}

// IngressSupportsVpn returns a bool
//  TBD
func (obj *bgpV6SegmentRouting) IngressSupportsVpn() bool {

	if obj.obj.IngressSupportsVpn == nil {
		*obj.obj.IngressSupportsVpn = false
	}

	return *obj.obj.IngressSupportsVpn

}

// IngressSupportsVpn returns a bool
//  TBD
func (obj *bgpV6SegmentRouting) HasIngressSupportsVpn() bool {
	return obj.obj.IngressSupportsVpn != nil
}

// SetIngressSupportsVpn sets the bool value in the BgpV6SegmentRouting object
//  TBD
func (obj *bgpV6SegmentRouting) SetIngressSupportsVpn(value bool) BgpV6SegmentRouting {
	obj.obj.IngressSupportsVpn = &value

	return obj
}

// ReducedEncapsulation returns a bool
//  TBD
func (obj *bgpV6SegmentRouting) ReducedEncapsulation() bool {

	if obj.obj.ReducedEncapsulation == nil {
		*obj.obj.ReducedEncapsulation = false
	}

	return *obj.obj.ReducedEncapsulation

}

// ReducedEncapsulation returns a bool
//  TBD
func (obj *bgpV6SegmentRouting) HasReducedEncapsulation() bool {
	return obj.obj.ReducedEncapsulation != nil
}

// SetReducedEncapsulation sets the bool value in the BgpV6SegmentRouting object
//  TBD
func (obj *bgpV6SegmentRouting) SetReducedEncapsulation(value bool) BgpV6SegmentRouting {
	obj.obj.ReducedEncapsulation = &value

	return obj
}

// CopyTimeToLive returns a bool
//  TBD
func (obj *bgpV6SegmentRouting) CopyTimeToLive() bool {

	if obj.obj.CopyTimeToLive == nil {
		*obj.obj.CopyTimeToLive = false
	}

	return *obj.obj.CopyTimeToLive

}

// CopyTimeToLive returns a bool
//  TBD
func (obj *bgpV6SegmentRouting) HasCopyTimeToLive() bool {
	return obj.obj.CopyTimeToLive != nil
}

// SetCopyTimeToLive sets the bool value in the BgpV6SegmentRouting object
//  TBD
func (obj *bgpV6SegmentRouting) SetCopyTimeToLive(value bool) BgpV6SegmentRouting {
	obj.obj.CopyTimeToLive = &value

	return obj
}

// TimeToLive returns a int32
//  TBD
func (obj *bgpV6SegmentRouting) TimeToLive() int32 {

	if obj.obj.TimeToLive == nil {
		*obj.obj.TimeToLive = 0
	}

	return *obj.obj.TimeToLive

}

// TimeToLive returns a int32
//  TBD
func (obj *bgpV6SegmentRouting) HasTimeToLive() bool {
	return obj.obj.TimeToLive != nil
}

// SetTimeToLive sets the int32 value in the BgpV6SegmentRouting object
//  TBD
func (obj *bgpV6SegmentRouting) SetTimeToLive(value int32) BgpV6SegmentRouting {
	obj.obj.TimeToLive = &value

	return obj
}

// MaxSidsPerSrh returns a int32
//  TBD
func (obj *bgpV6SegmentRouting) MaxSidsPerSrh() int32 {

	if obj.obj.MaxSidsPerSrh == nil {
		*obj.obj.MaxSidsPerSrh = 0
	}

	return *obj.obj.MaxSidsPerSrh

}

// MaxSidsPerSrh returns a int32
//  TBD
func (obj *bgpV6SegmentRouting) HasMaxSidsPerSrh() bool {
	return obj.obj.MaxSidsPerSrh != nil
}

// SetMaxSidsPerSrh sets the int32 value in the BgpV6SegmentRouting object
//  TBD
func (obj *bgpV6SegmentRouting) SetMaxSidsPerSrh(value int32) BgpV6SegmentRouting {
	obj.obj.MaxSidsPerSrh = &value

	return obj
}

// AutoGenerateSegmentLeftValue returns a bool
//  TBD
func (obj *bgpV6SegmentRouting) AutoGenerateSegmentLeftValue() bool {

	if obj.obj.AutoGenerateSegmentLeftValue == nil {
		*obj.obj.AutoGenerateSegmentLeftValue = false
	}

	return *obj.obj.AutoGenerateSegmentLeftValue

}

// AutoGenerateSegmentLeftValue returns a bool
//  TBD
func (obj *bgpV6SegmentRouting) HasAutoGenerateSegmentLeftValue() bool {
	return obj.obj.AutoGenerateSegmentLeftValue != nil
}

// SetAutoGenerateSegmentLeftValue sets the bool value in the BgpV6SegmentRouting object
//  TBD
func (obj *bgpV6SegmentRouting) SetAutoGenerateSegmentLeftValue(value bool) BgpV6SegmentRouting {
	obj.obj.AutoGenerateSegmentLeftValue = &value

	return obj
}

// SegmentLeftValue returns a int32
//  TBD
func (obj *bgpV6SegmentRouting) SegmentLeftValue() int32 {

	if obj.obj.SegmentLeftValue == nil {
		*obj.obj.SegmentLeftValue = 0
	}

	return *obj.obj.SegmentLeftValue

}

// SegmentLeftValue returns a int32
//  TBD
func (obj *bgpV6SegmentRouting) HasSegmentLeftValue() bool {
	return obj.obj.SegmentLeftValue != nil
}

// SetSegmentLeftValue sets the int32 value in the BgpV6SegmentRouting object
//  TBD
func (obj *bgpV6SegmentRouting) SetSegmentLeftValue(value int32) BgpV6SegmentRouting {
	obj.obj.SegmentLeftValue = &value

	return obj
}

// AdvertiseSrTePolicy returns a bool
//  TBD
func (obj *bgpV6SegmentRouting) AdvertiseSrTePolicy() bool {

	if obj.obj.AdvertiseSrTePolicy == nil {
		*obj.obj.AdvertiseSrTePolicy = false
	}

	return *obj.obj.AdvertiseSrTePolicy

}

// AdvertiseSrTePolicy returns a bool
//  TBD
func (obj *bgpV6SegmentRouting) HasAdvertiseSrTePolicy() bool {
	return obj.obj.AdvertiseSrTePolicy != nil
}

// SetAdvertiseSrTePolicy sets the bool value in the BgpV6SegmentRouting object
//  TBD
func (obj *bgpV6SegmentRouting) SetAdvertiseSrTePolicy(value bool) BgpV6SegmentRouting {
	obj.obj.AdvertiseSrTePolicy = &value

	return obj
}

func (obj *bgpV6SegmentRouting) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpV6SegmentRouting) setDefault() {
	if obj.obj.IngressSupportsVpn == nil {
		obj.SetIngressSupportsVpn(false)
	}
	if obj.obj.ReducedEncapsulation == nil {
		obj.SetReducedEncapsulation(false)
	}
	if obj.obj.CopyTimeToLive == nil {
		obj.SetCopyTimeToLive(false)
	}
	if obj.obj.TimeToLive == nil {
		obj.SetTimeToLive(0)
	}
	if obj.obj.MaxSidsPerSrh == nil {
		obj.SetMaxSidsPerSrh(0)
	}
	if obj.obj.AutoGenerateSegmentLeftValue == nil {
		obj.SetAutoGenerateSegmentLeftValue(false)
	}
	if obj.obj.SegmentLeftValue == nil {
		obj.SetSegmentLeftValue(0)
	}
	if obj.obj.AdvertiseSrTePolicy == nil {
		obj.SetAdvertiseSrTePolicy(false)
	}

}

type patternFlowEthernetDstCounter struct {
	obj *snappipb.PatternFlowEthernetDstCounter
}

func NewPatternFlowEthernetDstCounter() PatternFlowEthernetDstCounter {
	obj := patternFlowEthernetDstCounter{obj: &snappipb.PatternFlowEthernetDstCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetDstCounter) Msg() *snappipb.PatternFlowEthernetDstCounter {
	return obj.obj
}

func (obj *patternFlowEthernetDstCounter) SetMsg(msg *snappipb.PatternFlowEthernetDstCounter) PatternFlowEthernetDstCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetDstCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetDstCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetDstCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetDstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetDstCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetDstCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetDstCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetDstCounter interface {
	Msg() *snappipb.PatternFlowEthernetDstCounter
	SetMsg(*snappipb.PatternFlowEthernetDstCounter) PatternFlowEthernetDstCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowEthernetDstCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowEthernetDstCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowEthernetDstCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetDstCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "00:00:00:00:00:00"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetDstCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowEthernetDstCounter object
//  description is TBD
func (obj *patternFlowEthernetDstCounter) SetStart(value string) PatternFlowEthernetDstCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetDstCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "00:00:00:00:00:01"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetDstCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowEthernetDstCounter object
//  description is TBD
func (obj *patternFlowEthernetDstCounter) SetStep(value string) PatternFlowEthernetDstCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetDstCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetDstCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowEthernetDstCounter object
//  description is TBD
func (obj *patternFlowEthernetDstCounter) SetCount(value int32) PatternFlowEthernetDstCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowEthernetDstCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateMac(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowEthernetDstCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateMac(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowEthernetDstCounter"))
		}
	}

}

func (obj *patternFlowEthernetDstCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("00:00:00:00:00:00")
	}
	if obj.obj.Step == nil {
		obj.SetStep("00:00:00:00:00:01")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowEthernetSrcCounter struct {
	obj *snappipb.PatternFlowEthernetSrcCounter
}

func NewPatternFlowEthernetSrcCounter() PatternFlowEthernetSrcCounter {
	obj := patternFlowEthernetSrcCounter{obj: &snappipb.PatternFlowEthernetSrcCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetSrcCounter) Msg() *snappipb.PatternFlowEthernetSrcCounter {
	return obj.obj
}

func (obj *patternFlowEthernetSrcCounter) SetMsg(msg *snappipb.PatternFlowEthernetSrcCounter) PatternFlowEthernetSrcCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetSrcCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetSrcCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetSrcCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetSrcCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetSrcCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetSrcCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetSrcCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetSrcCounter interface {
	Msg() *snappipb.PatternFlowEthernetSrcCounter
	SetMsg(*snappipb.PatternFlowEthernetSrcCounter) PatternFlowEthernetSrcCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowEthernetSrcCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowEthernetSrcCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowEthernetSrcCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "00:00:00:00:00:00"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowEthernetSrcCounter object
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) SetStart(value string) PatternFlowEthernetSrcCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "00:00:00:00:00:01"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowEthernetSrcCounter object
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) SetStep(value string) PatternFlowEthernetSrcCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowEthernetSrcCounter object
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) SetCount(value int32) PatternFlowEthernetSrcCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowEthernetSrcCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateMac(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowEthernetSrcCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateMac(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowEthernetSrcCounter"))
		}
	}

}

func (obj *patternFlowEthernetSrcCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("00:00:00:00:00:00")
	}
	if obj.obj.Step == nil {
		obj.SetStep("00:00:00:00:00:01")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowEthernetEtherTypeCounter struct {
	obj *snappipb.PatternFlowEthernetEtherTypeCounter
}

func NewPatternFlowEthernetEtherTypeCounter() PatternFlowEthernetEtherTypeCounter {
	obj := patternFlowEthernetEtherTypeCounter{obj: &snappipb.PatternFlowEthernetEtherTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetEtherTypeCounter) Msg() *snappipb.PatternFlowEthernetEtherTypeCounter {
	return obj.obj
}

func (obj *patternFlowEthernetEtherTypeCounter) SetMsg(msg *snappipb.PatternFlowEthernetEtherTypeCounter) PatternFlowEthernetEtherTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetEtherTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetEtherTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetEtherTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetEtherTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetEtherTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetEtherTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetEtherTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetEtherTypeCounter interface {
	Msg() *snappipb.PatternFlowEthernetEtherTypeCounter
	SetMsg(*snappipb.PatternFlowEthernetEtherTypeCounter) PatternFlowEthernetEtherTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowEthernetEtherTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowEthernetEtherTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowEthernetEtherTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 65535
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowEthernetEtherTypeCounter object
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) SetStart(value int32) PatternFlowEthernetEtherTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowEthernetEtherTypeCounter object
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) SetStep(value int32) PatternFlowEthernetEtherTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowEthernetEtherTypeCounter object
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) SetCount(value int32) PatternFlowEthernetEtherTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowEthernetEtherTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetEtherTypeCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetEtherTypeCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowEthernetEtherTypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(65535)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowEthernetPfcQueueCounter struct {
	obj *snappipb.PatternFlowEthernetPfcQueueCounter
}

func NewPatternFlowEthernetPfcQueueCounter() PatternFlowEthernetPfcQueueCounter {
	obj := patternFlowEthernetPfcQueueCounter{obj: &snappipb.PatternFlowEthernetPfcQueueCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPfcQueueCounter) Msg() *snappipb.PatternFlowEthernetPfcQueueCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPfcQueueCounter) SetMsg(msg *snappipb.PatternFlowEthernetPfcQueueCounter) PatternFlowEthernetPfcQueueCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPfcQueueCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPfcQueueCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPfcQueueCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPfcQueueCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPfcQueueCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPfcQueueCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPfcQueueCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPfcQueueCounter interface {
	Msg() *snappipb.PatternFlowEthernetPfcQueueCounter
	SetMsg(*snappipb.PatternFlowEthernetPfcQueueCounter) PatternFlowEthernetPfcQueueCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowEthernetPfcQueueCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowEthernetPfcQueueCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowEthernetPfcQueueCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowEthernetPfcQueueCounter object
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) SetStart(value int32) PatternFlowEthernetPfcQueueCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowEthernetPfcQueueCounter object
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) SetStep(value int32) PatternFlowEthernetPfcQueueCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowEthernetPfcQueueCounter object
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) SetCount(value int32) PatternFlowEthernetPfcQueueCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowEthernetPfcQueueCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPfcQueueCounter.Start <= 7 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPfcQueueCounter.Step <= 7 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowEthernetPfcQueueCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowVlanPriorityCounter struct {
	obj *snappipb.PatternFlowVlanPriorityCounter
}

func NewPatternFlowVlanPriorityCounter() PatternFlowVlanPriorityCounter {
	obj := patternFlowVlanPriorityCounter{obj: &snappipb.PatternFlowVlanPriorityCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVlanPriorityCounter) Msg() *snappipb.PatternFlowVlanPriorityCounter {
	return obj.obj
}

func (obj *patternFlowVlanPriorityCounter) SetMsg(msg *snappipb.PatternFlowVlanPriorityCounter) PatternFlowVlanPriorityCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVlanPriorityCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVlanPriorityCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanPriorityCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanPriorityCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanPriorityCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanPriorityCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVlanPriorityCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVlanPriorityCounter interface {
	Msg() *snappipb.PatternFlowVlanPriorityCounter
	SetMsg(*snappipb.PatternFlowVlanPriorityCounter) PatternFlowVlanPriorityCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowVlanPriorityCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowVlanPriorityCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowVlanPriorityCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowVlanPriorityCounter object
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) SetStart(value int32) PatternFlowVlanPriorityCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowVlanPriorityCounter object
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) SetStep(value int32) PatternFlowVlanPriorityCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowVlanPriorityCounter object
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) SetCount(value int32) PatternFlowVlanPriorityCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowVlanPriorityCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanPriorityCounter.Start <= 7 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanPriorityCounter.Step <= 7 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowVlanPriorityCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowVlanCfiCounter struct {
	obj *snappipb.PatternFlowVlanCfiCounter
}

func NewPatternFlowVlanCfiCounter() PatternFlowVlanCfiCounter {
	obj := patternFlowVlanCfiCounter{obj: &snappipb.PatternFlowVlanCfiCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVlanCfiCounter) Msg() *snappipb.PatternFlowVlanCfiCounter {
	return obj.obj
}

func (obj *patternFlowVlanCfiCounter) SetMsg(msg *snappipb.PatternFlowVlanCfiCounter) PatternFlowVlanCfiCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVlanCfiCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVlanCfiCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanCfiCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanCfiCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanCfiCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanCfiCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVlanCfiCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVlanCfiCounter interface {
	Msg() *snappipb.PatternFlowVlanCfiCounter
	SetMsg(*snappipb.PatternFlowVlanCfiCounter) PatternFlowVlanCfiCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowVlanCfiCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowVlanCfiCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowVlanCfiCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanCfiCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanCfiCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowVlanCfiCounter object
//  description is TBD
func (obj *patternFlowVlanCfiCounter) SetStart(value int32) PatternFlowVlanCfiCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanCfiCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanCfiCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowVlanCfiCounter object
//  description is TBD
func (obj *patternFlowVlanCfiCounter) SetStep(value int32) PatternFlowVlanCfiCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanCfiCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanCfiCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowVlanCfiCounter object
//  description is TBD
func (obj *patternFlowVlanCfiCounter) SetCount(value int32) PatternFlowVlanCfiCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowVlanCfiCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanCfiCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanCfiCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowVlanCfiCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowVlanIdCounter struct {
	obj *snappipb.PatternFlowVlanIdCounter
}

func NewPatternFlowVlanIdCounter() PatternFlowVlanIdCounter {
	obj := patternFlowVlanIdCounter{obj: &snappipb.PatternFlowVlanIdCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVlanIdCounter) Msg() *snappipb.PatternFlowVlanIdCounter {
	return obj.obj
}

func (obj *patternFlowVlanIdCounter) SetMsg(msg *snappipb.PatternFlowVlanIdCounter) PatternFlowVlanIdCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVlanIdCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVlanIdCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanIdCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanIdCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanIdCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanIdCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVlanIdCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVlanIdCounter interface {
	Msg() *snappipb.PatternFlowVlanIdCounter
	SetMsg(*snappipb.PatternFlowVlanIdCounter) PatternFlowVlanIdCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowVlanIdCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowVlanIdCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowVlanIdCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanIdCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanIdCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowVlanIdCounter object
//  description is TBD
func (obj *patternFlowVlanIdCounter) SetStart(value int32) PatternFlowVlanIdCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanIdCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanIdCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowVlanIdCounter object
//  description is TBD
func (obj *patternFlowVlanIdCounter) SetStep(value int32) PatternFlowVlanIdCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanIdCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanIdCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowVlanIdCounter object
//  description is TBD
func (obj *patternFlowVlanIdCounter) SetCount(value int32) PatternFlowVlanIdCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowVlanIdCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 4095 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanIdCounter.Start <= 4095 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 4095 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanIdCounter.Step <= 4095 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowVlanIdCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowVlanTpidCounter struct {
	obj *snappipb.PatternFlowVlanTpidCounter
}

func NewPatternFlowVlanTpidCounter() PatternFlowVlanTpidCounter {
	obj := patternFlowVlanTpidCounter{obj: &snappipb.PatternFlowVlanTpidCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVlanTpidCounter) Msg() *snappipb.PatternFlowVlanTpidCounter {
	return obj.obj
}

func (obj *patternFlowVlanTpidCounter) SetMsg(msg *snappipb.PatternFlowVlanTpidCounter) PatternFlowVlanTpidCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVlanTpidCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVlanTpidCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanTpidCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanTpidCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVlanTpidCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanTpidCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVlanTpidCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVlanTpidCounter interface {
	Msg() *snappipb.PatternFlowVlanTpidCounter
	SetMsg(*snappipb.PatternFlowVlanTpidCounter) PatternFlowVlanTpidCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowVlanTpidCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowVlanTpidCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowVlanTpidCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanTpidCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 33024
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanTpidCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowVlanTpidCounter object
//  description is TBD
func (obj *patternFlowVlanTpidCounter) SetStart(value int32) PatternFlowVlanTpidCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanTpidCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanTpidCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowVlanTpidCounter object
//  description is TBD
func (obj *patternFlowVlanTpidCounter) SetStep(value int32) PatternFlowVlanTpidCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanTpidCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanTpidCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowVlanTpidCounter object
//  description is TBD
func (obj *patternFlowVlanTpidCounter) SetCount(value int32) PatternFlowVlanTpidCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowVlanTpidCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanTpidCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVlanTpidCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowVlanTpidCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(33024)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowVxlanFlagsCounter struct {
	obj *snappipb.PatternFlowVxlanFlagsCounter
}

func NewPatternFlowVxlanFlagsCounter() PatternFlowVxlanFlagsCounter {
	obj := patternFlowVxlanFlagsCounter{obj: &snappipb.PatternFlowVxlanFlagsCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVxlanFlagsCounter) Msg() *snappipb.PatternFlowVxlanFlagsCounter {
	return obj.obj
}

func (obj *patternFlowVxlanFlagsCounter) SetMsg(msg *snappipb.PatternFlowVxlanFlagsCounter) PatternFlowVxlanFlagsCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVxlanFlagsCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVxlanFlagsCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanFlagsCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanFlagsCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanFlagsCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanFlagsCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVxlanFlagsCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVxlanFlagsCounter interface {
	Msg() *snappipb.PatternFlowVxlanFlagsCounter
	SetMsg(*snappipb.PatternFlowVxlanFlagsCounter) PatternFlowVxlanFlagsCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowVxlanFlagsCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowVxlanFlagsCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowVxlanFlagsCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 8
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowVxlanFlagsCounter object
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) SetStart(value int32) PatternFlowVxlanFlagsCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowVxlanFlagsCounter object
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) SetStep(value int32) PatternFlowVxlanFlagsCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowVxlanFlagsCounter object
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) SetCount(value int32) PatternFlowVxlanFlagsCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowVxlanFlagsCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanFlagsCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanFlagsCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowVxlanFlagsCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(8)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowVxlanReserved0Counter struct {
	obj *snappipb.PatternFlowVxlanReserved0Counter
}

func NewPatternFlowVxlanReserved0Counter() PatternFlowVxlanReserved0Counter {
	obj := patternFlowVxlanReserved0Counter{obj: &snappipb.PatternFlowVxlanReserved0Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVxlanReserved0Counter) Msg() *snappipb.PatternFlowVxlanReserved0Counter {
	return obj.obj
}

func (obj *patternFlowVxlanReserved0Counter) SetMsg(msg *snappipb.PatternFlowVxlanReserved0Counter) PatternFlowVxlanReserved0Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVxlanReserved0Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVxlanReserved0Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanReserved0Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved0Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanReserved0Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved0Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVxlanReserved0Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVxlanReserved0Counter interface {
	Msg() *snappipb.PatternFlowVxlanReserved0Counter
	SetMsg(*snappipb.PatternFlowVxlanReserved0Counter) PatternFlowVxlanReserved0Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowVxlanReserved0Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowVxlanReserved0Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowVxlanReserved0Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowVxlanReserved0Counter object
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) SetStart(value int32) PatternFlowVxlanReserved0Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowVxlanReserved0Counter object
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) SetStep(value int32) PatternFlowVxlanReserved0Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowVxlanReserved0Counter object
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) SetCount(value int32) PatternFlowVxlanReserved0Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowVxlanReserved0Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanReserved0Counter.Start <= 16777215 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanReserved0Counter.Step <= 16777215 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowVxlanReserved0Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowVxlanVniCounter struct {
	obj *snappipb.PatternFlowVxlanVniCounter
}

func NewPatternFlowVxlanVniCounter() PatternFlowVxlanVniCounter {
	obj := patternFlowVxlanVniCounter{obj: &snappipb.PatternFlowVxlanVniCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVxlanVniCounter) Msg() *snappipb.PatternFlowVxlanVniCounter {
	return obj.obj
}

func (obj *patternFlowVxlanVniCounter) SetMsg(msg *snappipb.PatternFlowVxlanVniCounter) PatternFlowVxlanVniCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVxlanVniCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVxlanVniCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanVniCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanVniCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanVniCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanVniCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVxlanVniCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVxlanVniCounter interface {
	Msg() *snappipb.PatternFlowVxlanVniCounter
	SetMsg(*snappipb.PatternFlowVxlanVniCounter) PatternFlowVxlanVniCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowVxlanVniCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowVxlanVniCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowVxlanVniCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanVniCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanVniCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowVxlanVniCounter object
//  description is TBD
func (obj *patternFlowVxlanVniCounter) SetStart(value int32) PatternFlowVxlanVniCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanVniCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanVniCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowVxlanVniCounter object
//  description is TBD
func (obj *patternFlowVxlanVniCounter) SetStep(value int32) PatternFlowVxlanVniCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanVniCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanVniCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowVxlanVniCounter object
//  description is TBD
func (obj *patternFlowVxlanVniCounter) SetCount(value int32) PatternFlowVxlanVniCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowVxlanVniCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanVniCounter.Start <= 16777215 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanVniCounter.Step <= 16777215 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowVxlanVniCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowVxlanReserved1Counter struct {
	obj *snappipb.PatternFlowVxlanReserved1Counter
}

func NewPatternFlowVxlanReserved1Counter() PatternFlowVxlanReserved1Counter {
	obj := patternFlowVxlanReserved1Counter{obj: &snappipb.PatternFlowVxlanReserved1Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowVxlanReserved1Counter) Msg() *snappipb.PatternFlowVxlanReserved1Counter {
	return obj.obj
}

func (obj *patternFlowVxlanReserved1Counter) SetMsg(msg *snappipb.PatternFlowVxlanReserved1Counter) PatternFlowVxlanReserved1Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowVxlanReserved1Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowVxlanReserved1Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanReserved1Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved1Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowVxlanReserved1Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved1Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowVxlanReserved1Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowVxlanReserved1Counter interface {
	Msg() *snappipb.PatternFlowVxlanReserved1Counter
	SetMsg(*snappipb.PatternFlowVxlanReserved1Counter) PatternFlowVxlanReserved1Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowVxlanReserved1Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowVxlanReserved1Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowVxlanReserved1Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowVxlanReserved1Counter object
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) SetStart(value int32) PatternFlowVxlanReserved1Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowVxlanReserved1Counter object
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) SetStep(value int32) PatternFlowVxlanReserved1Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowVxlanReserved1Counter object
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) SetCount(value int32) PatternFlowVxlanReserved1Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowVxlanReserved1Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanReserved1Counter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowVxlanReserved1Counter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowVxlanReserved1Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4VersionCounter struct {
	obj *snappipb.PatternFlowIpv4VersionCounter
}

func NewPatternFlowIpv4VersionCounter() PatternFlowIpv4VersionCounter {
	obj := patternFlowIpv4VersionCounter{obj: &snappipb.PatternFlowIpv4VersionCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4VersionCounter) Msg() *snappipb.PatternFlowIpv4VersionCounter {
	return obj.obj
}

func (obj *patternFlowIpv4VersionCounter) SetMsg(msg *snappipb.PatternFlowIpv4VersionCounter) PatternFlowIpv4VersionCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4VersionCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4VersionCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4VersionCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4VersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4VersionCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4VersionCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4VersionCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4VersionCounter interface {
	Msg() *snappipb.PatternFlowIpv4VersionCounter
	SetMsg(*snappipb.PatternFlowIpv4VersionCounter) PatternFlowIpv4VersionCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4VersionCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4VersionCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4VersionCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 4
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4VersionCounter object
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) SetStart(value int32) PatternFlowIpv4VersionCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4VersionCounter object
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) SetStep(value int32) PatternFlowIpv4VersionCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4VersionCounter object
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) SetCount(value int32) PatternFlowIpv4VersionCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4VersionCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4VersionCounter.Start <= 15 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4VersionCounter.Step <= 15 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4VersionCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(4)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4HeaderLengthCounter struct {
	obj *snappipb.PatternFlowIpv4HeaderLengthCounter
}

func NewPatternFlowIpv4HeaderLengthCounter() PatternFlowIpv4HeaderLengthCounter {
	obj := patternFlowIpv4HeaderLengthCounter{obj: &snappipb.PatternFlowIpv4HeaderLengthCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4HeaderLengthCounter) Msg() *snappipb.PatternFlowIpv4HeaderLengthCounter {
	return obj.obj
}

func (obj *patternFlowIpv4HeaderLengthCounter) SetMsg(msg *snappipb.PatternFlowIpv4HeaderLengthCounter) PatternFlowIpv4HeaderLengthCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4HeaderLengthCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4HeaderLengthCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4HeaderLengthCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4HeaderLengthCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderLengthCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4HeaderLengthCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4HeaderLengthCounter interface {
	Msg() *snappipb.PatternFlowIpv4HeaderLengthCounter
	SetMsg(*snappipb.PatternFlowIpv4HeaderLengthCounter) PatternFlowIpv4HeaderLengthCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4HeaderLengthCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4HeaderLengthCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4HeaderLengthCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 5
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4HeaderLengthCounter object
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) SetStart(value int32) PatternFlowIpv4HeaderLengthCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4HeaderLengthCounter object
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) SetStep(value int32) PatternFlowIpv4HeaderLengthCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4HeaderLengthCounter object
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) SetCount(value int32) PatternFlowIpv4HeaderLengthCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4HeaderLengthCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4HeaderLengthCounter.Start <= 15 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4HeaderLengthCounter.Step <= 15 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4HeaderLengthCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(5)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4PriorityRaw struct {
	obj *snappipb.PatternFlowIpv4PriorityRaw
}

func NewPatternFlowIpv4PriorityRaw() PatternFlowIpv4PriorityRaw {
	obj := patternFlowIpv4PriorityRaw{obj: &snappipb.PatternFlowIpv4PriorityRaw{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4PriorityRaw) Msg() *snappipb.PatternFlowIpv4PriorityRaw {
	return obj.obj
}

func (obj *patternFlowIpv4PriorityRaw) SetMsg(msg *snappipb.PatternFlowIpv4PriorityRaw) PatternFlowIpv4PriorityRaw {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4PriorityRaw) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4PriorityRaw) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4PriorityRaw) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4PriorityRaw) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4PriorityRaw) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4PriorityRaw) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4PriorityRaw) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4PriorityRaw interface {
	Msg() *snappipb.PatternFlowIpv4PriorityRaw
	SetMsg(*snappipb.PatternFlowIpv4PriorityRaw) PatternFlowIpv4PriorityRaw
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4PriorityRawChoiceEnum
	SetChoice(value PatternFlowIpv4PriorityRawChoiceEnum) PatternFlowIpv4PriorityRaw
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4PriorityRaw
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4PriorityRaw
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4PriorityRaw
	HasMetricGroup() bool
	Increment() PatternFlowIpv4PriorityRawCounter
	SetIncrement(value PatternFlowIpv4PriorityRawCounter) PatternFlowIpv4PriorityRaw
	HasIncrement() bool
	Decrement() PatternFlowIpv4PriorityRawCounter
	SetDecrement(value PatternFlowIpv4PriorityRawCounter) PatternFlowIpv4PriorityRaw
	HasDecrement() bool
}

type PatternFlowIpv4PriorityRawChoiceEnum string

var PatternFlowIpv4PriorityRawChoice = struct {
	VALUE     PatternFlowIpv4PriorityRawChoiceEnum
	VALUES    PatternFlowIpv4PriorityRawChoiceEnum
	INCREMENT PatternFlowIpv4PriorityRawChoiceEnum
	DECREMENT PatternFlowIpv4PriorityRawChoiceEnum
}{
	VALUE:     PatternFlowIpv4PriorityRawChoiceEnum("value"),
	VALUES:    PatternFlowIpv4PriorityRawChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4PriorityRawChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4PriorityRawChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4PriorityRaw) Choice() PatternFlowIpv4PriorityRawChoiceEnum {
	return PatternFlowIpv4PriorityRawChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4PriorityRaw) SetChoice(value PatternFlowIpv4PriorityRawChoiceEnum) PatternFlowIpv4PriorityRaw {
	intValue, ok := snappipb.PatternFlowIpv4PriorityRaw_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4PriorityRawChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4PriorityRaw_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4PriorityRaw object
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) SetValue(value int32) PatternFlowIpv4PriorityRaw {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4PriorityRawChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4PriorityRaw object
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) SetValues(value []int32) PatternFlowIpv4PriorityRaw {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4PriorityRawChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4PriorityRaw) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4PriorityRaw) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4PriorityRaw object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4PriorityRaw) SetMetricGroup(value string) PatternFlowIpv4PriorityRaw {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4PriorityRawCounter
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) Increment() PatternFlowIpv4PriorityRawCounter {
	obj.SetChoice(PatternFlowIpv4PriorityRawChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4PriorityRawCounter().Msg()
	}
	return &patternFlowIpv4PriorityRawCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4PriorityRawCounter
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4PriorityRawCounter value in the PatternFlowIpv4PriorityRaw object
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) SetIncrement(value PatternFlowIpv4PriorityRawCounter) PatternFlowIpv4PriorityRaw {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4PriorityRawChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4PriorityRawCounter
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) Decrement() PatternFlowIpv4PriorityRawCounter {
	obj.SetChoice(PatternFlowIpv4PriorityRawChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4PriorityRawCounter().Msg()
	}
	return &patternFlowIpv4PriorityRawCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4PriorityRawCounter
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4PriorityRawCounter value in the PatternFlowIpv4PriorityRaw object
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) SetDecrement(value PatternFlowIpv4PriorityRawCounter) PatternFlowIpv4PriorityRaw {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4PriorityRawChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4PriorityRaw) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4PriorityRaw.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4PriorityRaw.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4PriorityRaw) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4PriorityRawChoice.VALUE)
		obj.SetValue(0)
	}

}

type flowIpv4Tos struct {
	obj *snappipb.FlowIpv4Tos
}

func NewFlowIpv4Tos() FlowIpv4Tos {
	obj := flowIpv4Tos{obj: &snappipb.FlowIpv4Tos{}}
	obj.setDefault()
	return &obj
}

func (obj *flowIpv4Tos) Msg() *snappipb.FlowIpv4Tos {
	return obj.obj
}

func (obj *flowIpv4Tos) SetMsg(msg *snappipb.FlowIpv4Tos) FlowIpv4Tos {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowIpv4Tos) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowIpv4Tos) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIpv4Tos) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Tos) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIpv4Tos) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Tos) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowIpv4Tos) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowIpv4Tos interface {
	Msg() *snappipb.FlowIpv4Tos
	SetMsg(*snappipb.FlowIpv4Tos) FlowIpv4Tos
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Precedence() PatternFlowIpv4TosPrecedence
	SetPrecedence(value PatternFlowIpv4TosPrecedence) FlowIpv4Tos
	HasPrecedence() bool
	Delay() PatternFlowIpv4TosDelay
	SetDelay(value PatternFlowIpv4TosDelay) FlowIpv4Tos
	HasDelay() bool
	Throughput() PatternFlowIpv4TosThroughput
	SetThroughput(value PatternFlowIpv4TosThroughput) FlowIpv4Tos
	HasThroughput() bool
	Reliability() PatternFlowIpv4TosReliability
	SetReliability(value PatternFlowIpv4TosReliability) FlowIpv4Tos
	HasReliability() bool
	Monetary() PatternFlowIpv4TosMonetary
	SetMonetary(value PatternFlowIpv4TosMonetary) FlowIpv4Tos
	HasMonetary() bool
	Unused() PatternFlowIpv4TosUnused
	SetUnused(value PatternFlowIpv4TosUnused) FlowIpv4Tos
	HasUnused() bool
}

// Precedence returns a PatternFlowIpv4TosPrecedence
//  description is TBD
func (obj *flowIpv4Tos) Precedence() PatternFlowIpv4TosPrecedence {
	if obj.obj.Precedence == nil {
		obj.obj.Precedence = NewPatternFlowIpv4TosPrecedence().Msg()
	}
	return &patternFlowIpv4TosPrecedence{obj: obj.obj.Precedence}
}

// Precedence returns a PatternFlowIpv4TosPrecedence
//  description is TBD
func (obj *flowIpv4Tos) HasPrecedence() bool {
	return obj.obj.Precedence != nil
}

// SetPrecedence sets the PatternFlowIpv4TosPrecedence value in the FlowIpv4Tos object
//  description is TBD
func (obj *flowIpv4Tos) SetPrecedence(value PatternFlowIpv4TosPrecedence) FlowIpv4Tos {
	obj.Precedence().SetMsg(value.Msg())

	return obj
}

// Delay returns a PatternFlowIpv4TosDelay
//  description is TBD
func (obj *flowIpv4Tos) Delay() PatternFlowIpv4TosDelay {
	if obj.obj.Delay == nil {
		obj.obj.Delay = NewPatternFlowIpv4TosDelay().Msg()
	}
	return &patternFlowIpv4TosDelay{obj: obj.obj.Delay}
}

// Delay returns a PatternFlowIpv4TosDelay
//  description is TBD
func (obj *flowIpv4Tos) HasDelay() bool {
	return obj.obj.Delay != nil
}

// SetDelay sets the PatternFlowIpv4TosDelay value in the FlowIpv4Tos object
//  description is TBD
func (obj *flowIpv4Tos) SetDelay(value PatternFlowIpv4TosDelay) FlowIpv4Tos {
	obj.Delay().SetMsg(value.Msg())

	return obj
}

// Throughput returns a PatternFlowIpv4TosThroughput
//  description is TBD
func (obj *flowIpv4Tos) Throughput() PatternFlowIpv4TosThroughput {
	if obj.obj.Throughput == nil {
		obj.obj.Throughput = NewPatternFlowIpv4TosThroughput().Msg()
	}
	return &patternFlowIpv4TosThroughput{obj: obj.obj.Throughput}
}

// Throughput returns a PatternFlowIpv4TosThroughput
//  description is TBD
func (obj *flowIpv4Tos) HasThroughput() bool {
	return obj.obj.Throughput != nil
}

// SetThroughput sets the PatternFlowIpv4TosThroughput value in the FlowIpv4Tos object
//  description is TBD
func (obj *flowIpv4Tos) SetThroughput(value PatternFlowIpv4TosThroughput) FlowIpv4Tos {
	obj.Throughput().SetMsg(value.Msg())

	return obj
}

// Reliability returns a PatternFlowIpv4TosReliability
//  description is TBD
func (obj *flowIpv4Tos) Reliability() PatternFlowIpv4TosReliability {
	if obj.obj.Reliability == nil {
		obj.obj.Reliability = NewPatternFlowIpv4TosReliability().Msg()
	}
	return &patternFlowIpv4TosReliability{obj: obj.obj.Reliability}
}

// Reliability returns a PatternFlowIpv4TosReliability
//  description is TBD
func (obj *flowIpv4Tos) HasReliability() bool {
	return obj.obj.Reliability != nil
}

// SetReliability sets the PatternFlowIpv4TosReliability value in the FlowIpv4Tos object
//  description is TBD
func (obj *flowIpv4Tos) SetReliability(value PatternFlowIpv4TosReliability) FlowIpv4Tos {
	obj.Reliability().SetMsg(value.Msg())

	return obj
}

// Monetary returns a PatternFlowIpv4TosMonetary
//  description is TBD
func (obj *flowIpv4Tos) Monetary() PatternFlowIpv4TosMonetary {
	if obj.obj.Monetary == nil {
		obj.obj.Monetary = NewPatternFlowIpv4TosMonetary().Msg()
	}
	return &patternFlowIpv4TosMonetary{obj: obj.obj.Monetary}
}

// Monetary returns a PatternFlowIpv4TosMonetary
//  description is TBD
func (obj *flowIpv4Tos) HasMonetary() bool {
	return obj.obj.Monetary != nil
}

// SetMonetary sets the PatternFlowIpv4TosMonetary value in the FlowIpv4Tos object
//  description is TBD
func (obj *flowIpv4Tos) SetMonetary(value PatternFlowIpv4TosMonetary) FlowIpv4Tos {
	obj.Monetary().SetMsg(value.Msg())

	return obj
}

// Unused returns a PatternFlowIpv4TosUnused
//  description is TBD
func (obj *flowIpv4Tos) Unused() PatternFlowIpv4TosUnused {
	if obj.obj.Unused == nil {
		obj.obj.Unused = NewPatternFlowIpv4TosUnused().Msg()
	}
	return &patternFlowIpv4TosUnused{obj: obj.obj.Unused}
}

// Unused returns a PatternFlowIpv4TosUnused
//  description is TBD
func (obj *flowIpv4Tos) HasUnused() bool {
	return obj.obj.Unused != nil
}

// SetUnused sets the PatternFlowIpv4TosUnused value in the FlowIpv4Tos object
//  description is TBD
func (obj *flowIpv4Tos) SetUnused(value PatternFlowIpv4TosUnused) FlowIpv4Tos {
	obj.Unused().SetMsg(value.Msg())

	return obj
}

func (obj *flowIpv4Tos) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Precedence != nil {
		obj.Precedence().validateObj(set_default)
	}

	if obj.obj.Delay != nil {
		obj.Delay().validateObj(set_default)
	}

	if obj.obj.Throughput != nil {
		obj.Throughput().validateObj(set_default)
	}

	if obj.obj.Reliability != nil {
		obj.Reliability().validateObj(set_default)
	}

	if obj.obj.Monetary != nil {
		obj.Monetary().validateObj(set_default)
	}

	if obj.obj.Unused != nil {
		obj.Unused().validateObj(set_default)
	}
}

func (obj *flowIpv4Tos) setDefault() {

}

type flowIpv4Dscp struct {
	obj *snappipb.FlowIpv4Dscp
}

func NewFlowIpv4Dscp() FlowIpv4Dscp {
	obj := flowIpv4Dscp{obj: &snappipb.FlowIpv4Dscp{}}
	obj.setDefault()
	return &obj
}

func (obj *flowIpv4Dscp) Msg() *snappipb.FlowIpv4Dscp {
	return obj.obj
}

func (obj *flowIpv4Dscp) SetMsg(msg *snappipb.FlowIpv4Dscp) FlowIpv4Dscp {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *flowIpv4Dscp) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *flowIpv4Dscp) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIpv4Dscp) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Dscp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *flowIpv4Dscp) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Dscp) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *flowIpv4Dscp) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type FlowIpv4Dscp interface {
	Msg() *snappipb.FlowIpv4Dscp
	SetMsg(*snappipb.FlowIpv4Dscp) FlowIpv4Dscp
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Phb() PatternFlowIpv4DscpPhb
	SetPhb(value PatternFlowIpv4DscpPhb) FlowIpv4Dscp
	HasPhb() bool
	Ecn() PatternFlowIpv4DscpEcn
	SetEcn(value PatternFlowIpv4DscpEcn) FlowIpv4Dscp
	HasEcn() bool
}

// Phb returns a PatternFlowIpv4DscpPhb
//  description is TBD
func (obj *flowIpv4Dscp) Phb() PatternFlowIpv4DscpPhb {
	if obj.obj.Phb == nil {
		obj.obj.Phb = NewPatternFlowIpv4DscpPhb().Msg()
	}
	return &patternFlowIpv4DscpPhb{obj: obj.obj.Phb}
}

// Phb returns a PatternFlowIpv4DscpPhb
//  description is TBD
func (obj *flowIpv4Dscp) HasPhb() bool {
	return obj.obj.Phb != nil
}

// SetPhb sets the PatternFlowIpv4DscpPhb value in the FlowIpv4Dscp object
//  description is TBD
func (obj *flowIpv4Dscp) SetPhb(value PatternFlowIpv4DscpPhb) FlowIpv4Dscp {
	obj.Phb().SetMsg(value.Msg())

	return obj
}

// Ecn returns a PatternFlowIpv4DscpEcn
//  description is TBD
func (obj *flowIpv4Dscp) Ecn() PatternFlowIpv4DscpEcn {
	if obj.obj.Ecn == nil {
		obj.obj.Ecn = NewPatternFlowIpv4DscpEcn().Msg()
	}
	return &patternFlowIpv4DscpEcn{obj: obj.obj.Ecn}
}

// Ecn returns a PatternFlowIpv4DscpEcn
//  description is TBD
func (obj *flowIpv4Dscp) HasEcn() bool {
	return obj.obj.Ecn != nil
}

// SetEcn sets the PatternFlowIpv4DscpEcn value in the FlowIpv4Dscp object
//  description is TBD
func (obj *flowIpv4Dscp) SetEcn(value PatternFlowIpv4DscpEcn) FlowIpv4Dscp {
	obj.Ecn().SetMsg(value.Msg())

	return obj
}

func (obj *flowIpv4Dscp) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Phb != nil {
		obj.Phb().validateObj(set_default)
	}

	if obj.obj.Ecn != nil {
		obj.Ecn().validateObj(set_default)
	}
}

func (obj *flowIpv4Dscp) setDefault() {

}

type patternFlowIpv4TotalLengthCounter struct {
	obj *snappipb.PatternFlowIpv4TotalLengthCounter
}

func NewPatternFlowIpv4TotalLengthCounter() PatternFlowIpv4TotalLengthCounter {
	obj := patternFlowIpv4TotalLengthCounter{obj: &snappipb.PatternFlowIpv4TotalLengthCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TotalLengthCounter) Msg() *snappipb.PatternFlowIpv4TotalLengthCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TotalLengthCounter) SetMsg(msg *snappipb.PatternFlowIpv4TotalLengthCounter) PatternFlowIpv4TotalLengthCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TotalLengthCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TotalLengthCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TotalLengthCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TotalLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TotalLengthCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TotalLengthCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TotalLengthCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TotalLengthCounter interface {
	Msg() *snappipb.PatternFlowIpv4TotalLengthCounter
	SetMsg(*snappipb.PatternFlowIpv4TotalLengthCounter) PatternFlowIpv4TotalLengthCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4TotalLengthCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4TotalLengthCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4TotalLengthCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 46
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4TotalLengthCounter object
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) SetStart(value int32) PatternFlowIpv4TotalLengthCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4TotalLengthCounter object
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) SetStep(value int32) PatternFlowIpv4TotalLengthCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4TotalLengthCounter object
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) SetCount(value int32) PatternFlowIpv4TotalLengthCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4TotalLengthCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TotalLengthCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TotalLengthCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4TotalLengthCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(46)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4IdentificationCounter struct {
	obj *snappipb.PatternFlowIpv4IdentificationCounter
}

func NewPatternFlowIpv4IdentificationCounter() PatternFlowIpv4IdentificationCounter {
	obj := patternFlowIpv4IdentificationCounter{obj: &snappipb.PatternFlowIpv4IdentificationCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4IdentificationCounter) Msg() *snappipb.PatternFlowIpv4IdentificationCounter {
	return obj.obj
}

func (obj *patternFlowIpv4IdentificationCounter) SetMsg(msg *snappipb.PatternFlowIpv4IdentificationCounter) PatternFlowIpv4IdentificationCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4IdentificationCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4IdentificationCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4IdentificationCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4IdentificationCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4IdentificationCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4IdentificationCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4IdentificationCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4IdentificationCounter interface {
	Msg() *snappipb.PatternFlowIpv4IdentificationCounter
	SetMsg(*snappipb.PatternFlowIpv4IdentificationCounter) PatternFlowIpv4IdentificationCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4IdentificationCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4IdentificationCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4IdentificationCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4IdentificationCounter object
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) SetStart(value int32) PatternFlowIpv4IdentificationCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4IdentificationCounter object
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) SetStep(value int32) PatternFlowIpv4IdentificationCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4IdentificationCounter object
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) SetCount(value int32) PatternFlowIpv4IdentificationCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4IdentificationCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4IdentificationCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4IdentificationCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4IdentificationCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4ReservedCounter struct {
	obj *snappipb.PatternFlowIpv4ReservedCounter
}

func NewPatternFlowIpv4ReservedCounter() PatternFlowIpv4ReservedCounter {
	obj := patternFlowIpv4ReservedCounter{obj: &snappipb.PatternFlowIpv4ReservedCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4ReservedCounter) Msg() *snappipb.PatternFlowIpv4ReservedCounter {
	return obj.obj
}

func (obj *patternFlowIpv4ReservedCounter) SetMsg(msg *snappipb.PatternFlowIpv4ReservedCounter) PatternFlowIpv4ReservedCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4ReservedCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4ReservedCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4ReservedCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4ReservedCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4ReservedCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4ReservedCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4ReservedCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4ReservedCounter interface {
	Msg() *snappipb.PatternFlowIpv4ReservedCounter
	SetMsg(*snappipb.PatternFlowIpv4ReservedCounter) PatternFlowIpv4ReservedCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4ReservedCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4ReservedCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4ReservedCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4ReservedCounter object
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) SetStart(value int32) PatternFlowIpv4ReservedCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4ReservedCounter object
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) SetStep(value int32) PatternFlowIpv4ReservedCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4ReservedCounter object
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) SetCount(value int32) PatternFlowIpv4ReservedCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4ReservedCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4ReservedCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4ReservedCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4ReservedCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4DontFragmentCounter struct {
	obj *snappipb.PatternFlowIpv4DontFragmentCounter
}

func NewPatternFlowIpv4DontFragmentCounter() PatternFlowIpv4DontFragmentCounter {
	obj := patternFlowIpv4DontFragmentCounter{obj: &snappipb.PatternFlowIpv4DontFragmentCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4DontFragmentCounter) Msg() *snappipb.PatternFlowIpv4DontFragmentCounter {
	return obj.obj
}

func (obj *patternFlowIpv4DontFragmentCounter) SetMsg(msg *snappipb.PatternFlowIpv4DontFragmentCounter) PatternFlowIpv4DontFragmentCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4DontFragmentCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4DontFragmentCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DontFragmentCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DontFragmentCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DontFragmentCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DontFragmentCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4DontFragmentCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4DontFragmentCounter interface {
	Msg() *snappipb.PatternFlowIpv4DontFragmentCounter
	SetMsg(*snappipb.PatternFlowIpv4DontFragmentCounter) PatternFlowIpv4DontFragmentCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4DontFragmentCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4DontFragmentCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4DontFragmentCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4DontFragmentCounter object
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) SetStart(value int32) PatternFlowIpv4DontFragmentCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4DontFragmentCounter object
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) SetStep(value int32) PatternFlowIpv4DontFragmentCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4DontFragmentCounter object
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) SetCount(value int32) PatternFlowIpv4DontFragmentCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4DontFragmentCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DontFragmentCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DontFragmentCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4DontFragmentCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4MoreFragmentsCounter struct {
	obj *snappipb.PatternFlowIpv4MoreFragmentsCounter
}

func NewPatternFlowIpv4MoreFragmentsCounter() PatternFlowIpv4MoreFragmentsCounter {
	obj := patternFlowIpv4MoreFragmentsCounter{obj: &snappipb.PatternFlowIpv4MoreFragmentsCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4MoreFragmentsCounter) Msg() *snappipb.PatternFlowIpv4MoreFragmentsCounter {
	return obj.obj
}

func (obj *patternFlowIpv4MoreFragmentsCounter) SetMsg(msg *snappipb.PatternFlowIpv4MoreFragmentsCounter) PatternFlowIpv4MoreFragmentsCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4MoreFragmentsCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4MoreFragmentsCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4MoreFragmentsCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4MoreFragmentsCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4MoreFragmentsCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4MoreFragmentsCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4MoreFragmentsCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4MoreFragmentsCounter interface {
	Msg() *snappipb.PatternFlowIpv4MoreFragmentsCounter
	SetMsg(*snappipb.PatternFlowIpv4MoreFragmentsCounter) PatternFlowIpv4MoreFragmentsCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4MoreFragmentsCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4MoreFragmentsCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4MoreFragmentsCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4MoreFragmentsCounter object
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) SetStart(value int32) PatternFlowIpv4MoreFragmentsCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4MoreFragmentsCounter object
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) SetStep(value int32) PatternFlowIpv4MoreFragmentsCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4MoreFragmentsCounter object
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) SetCount(value int32) PatternFlowIpv4MoreFragmentsCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4MoreFragmentsCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4MoreFragmentsCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4MoreFragmentsCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4MoreFragmentsCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4FragmentOffsetCounter struct {
	obj *snappipb.PatternFlowIpv4FragmentOffsetCounter
}

func NewPatternFlowIpv4FragmentOffsetCounter() PatternFlowIpv4FragmentOffsetCounter {
	obj := patternFlowIpv4FragmentOffsetCounter{obj: &snappipb.PatternFlowIpv4FragmentOffsetCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4FragmentOffsetCounter) Msg() *snappipb.PatternFlowIpv4FragmentOffsetCounter {
	return obj.obj
}

func (obj *patternFlowIpv4FragmentOffsetCounter) SetMsg(msg *snappipb.PatternFlowIpv4FragmentOffsetCounter) PatternFlowIpv4FragmentOffsetCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4FragmentOffsetCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4FragmentOffsetCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4FragmentOffsetCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4FragmentOffsetCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4FragmentOffsetCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4FragmentOffsetCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4FragmentOffsetCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4FragmentOffsetCounter interface {
	Msg() *snappipb.PatternFlowIpv4FragmentOffsetCounter
	SetMsg(*snappipb.PatternFlowIpv4FragmentOffsetCounter) PatternFlowIpv4FragmentOffsetCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4FragmentOffsetCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4FragmentOffsetCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4FragmentOffsetCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4FragmentOffsetCounter object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) SetStart(value int32) PatternFlowIpv4FragmentOffsetCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4FragmentOffsetCounter object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) SetStep(value int32) PatternFlowIpv4FragmentOffsetCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4FragmentOffsetCounter object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) SetCount(value int32) PatternFlowIpv4FragmentOffsetCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4FragmentOffsetCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 31 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4FragmentOffsetCounter.Start <= 31 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 31 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4FragmentOffsetCounter.Step <= 31 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4FragmentOffsetCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4TimeToLiveCounter struct {
	obj *snappipb.PatternFlowIpv4TimeToLiveCounter
}

func NewPatternFlowIpv4TimeToLiveCounter() PatternFlowIpv4TimeToLiveCounter {
	obj := patternFlowIpv4TimeToLiveCounter{obj: &snappipb.PatternFlowIpv4TimeToLiveCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TimeToLiveCounter) Msg() *snappipb.PatternFlowIpv4TimeToLiveCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TimeToLiveCounter) SetMsg(msg *snappipb.PatternFlowIpv4TimeToLiveCounter) PatternFlowIpv4TimeToLiveCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TimeToLiveCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TimeToLiveCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TimeToLiveCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TimeToLiveCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TimeToLiveCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TimeToLiveCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TimeToLiveCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TimeToLiveCounter interface {
	Msg() *snappipb.PatternFlowIpv4TimeToLiveCounter
	SetMsg(*snappipb.PatternFlowIpv4TimeToLiveCounter) PatternFlowIpv4TimeToLiveCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4TimeToLiveCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4TimeToLiveCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4TimeToLiveCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 64
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4TimeToLiveCounter object
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) SetStart(value int32) PatternFlowIpv4TimeToLiveCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4TimeToLiveCounter object
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) SetStep(value int32) PatternFlowIpv4TimeToLiveCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4TimeToLiveCounter object
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) SetCount(value int32) PatternFlowIpv4TimeToLiveCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4TimeToLiveCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TimeToLiveCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TimeToLiveCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4TimeToLiveCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(64)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4ProtocolCounter struct {
	obj *snappipb.PatternFlowIpv4ProtocolCounter
}

func NewPatternFlowIpv4ProtocolCounter() PatternFlowIpv4ProtocolCounter {
	obj := patternFlowIpv4ProtocolCounter{obj: &snappipb.PatternFlowIpv4ProtocolCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4ProtocolCounter) Msg() *snappipb.PatternFlowIpv4ProtocolCounter {
	return obj.obj
}

func (obj *patternFlowIpv4ProtocolCounter) SetMsg(msg *snappipb.PatternFlowIpv4ProtocolCounter) PatternFlowIpv4ProtocolCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4ProtocolCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4ProtocolCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4ProtocolCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4ProtocolCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4ProtocolCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4ProtocolCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4ProtocolCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4ProtocolCounter interface {
	Msg() *snappipb.PatternFlowIpv4ProtocolCounter
	SetMsg(*snappipb.PatternFlowIpv4ProtocolCounter) PatternFlowIpv4ProtocolCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4ProtocolCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4ProtocolCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4ProtocolCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 61
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4ProtocolCounter object
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) SetStart(value int32) PatternFlowIpv4ProtocolCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4ProtocolCounter object
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) SetStep(value int32) PatternFlowIpv4ProtocolCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4ProtocolCounter object
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) SetCount(value int32) PatternFlowIpv4ProtocolCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4ProtocolCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4ProtocolCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4ProtocolCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4ProtocolCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(61)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4SrcCounter struct {
	obj *snappipb.PatternFlowIpv4SrcCounter
}

func NewPatternFlowIpv4SrcCounter() PatternFlowIpv4SrcCounter {
	obj := patternFlowIpv4SrcCounter{obj: &snappipb.PatternFlowIpv4SrcCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4SrcCounter) Msg() *snappipb.PatternFlowIpv4SrcCounter {
	return obj.obj
}

func (obj *patternFlowIpv4SrcCounter) SetMsg(msg *snappipb.PatternFlowIpv4SrcCounter) PatternFlowIpv4SrcCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4SrcCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4SrcCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4SrcCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4SrcCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4SrcCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4SrcCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4SrcCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4SrcCounter interface {
	Msg() *snappipb.PatternFlowIpv4SrcCounter
	SetMsg(*snappipb.PatternFlowIpv4SrcCounter) PatternFlowIpv4SrcCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowIpv4SrcCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowIpv4SrcCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4SrcCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "0.0.0.0"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowIpv4SrcCounter object
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) SetStart(value string) PatternFlowIpv4SrcCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "0.0.0.1"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowIpv4SrcCounter object
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) SetStep(value string) PatternFlowIpv4SrcCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4SrcCounter object
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) SetCount(value int32) PatternFlowIpv4SrcCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4SrcCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateIpv4(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowIpv4SrcCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateIpv4(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowIpv4SrcCounter"))
		}
	}

}

func (obj *patternFlowIpv4SrcCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("0.0.0.0")
	}
	if obj.obj.Step == nil {
		obj.SetStep("0.0.0.1")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4DstCounter struct {
	obj *snappipb.PatternFlowIpv4DstCounter
}

func NewPatternFlowIpv4DstCounter() PatternFlowIpv4DstCounter {
	obj := patternFlowIpv4DstCounter{obj: &snappipb.PatternFlowIpv4DstCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4DstCounter) Msg() *snappipb.PatternFlowIpv4DstCounter {
	return obj.obj
}

func (obj *patternFlowIpv4DstCounter) SetMsg(msg *snappipb.PatternFlowIpv4DstCounter) PatternFlowIpv4DstCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4DstCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4DstCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DstCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DstCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DstCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4DstCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4DstCounter interface {
	Msg() *snappipb.PatternFlowIpv4DstCounter
	SetMsg(*snappipb.PatternFlowIpv4DstCounter) PatternFlowIpv4DstCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowIpv4DstCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowIpv4DstCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4DstCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv4DstCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "0.0.0.0"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv4DstCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowIpv4DstCounter object
//  description is TBD
func (obj *patternFlowIpv4DstCounter) SetStart(value string) PatternFlowIpv4DstCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv4DstCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "0.0.0.1"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv4DstCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowIpv4DstCounter object
//  description is TBD
func (obj *patternFlowIpv4DstCounter) SetStep(value string) PatternFlowIpv4DstCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DstCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DstCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4DstCounter object
//  description is TBD
func (obj *patternFlowIpv4DstCounter) SetCount(value int32) PatternFlowIpv4DstCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4DstCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateIpv4(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowIpv4DstCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateIpv4(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowIpv4DstCounter"))
		}
	}

}

func (obj *patternFlowIpv4DstCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("0.0.0.0")
	}
	if obj.obj.Step == nil {
		obj.SetStep("0.0.0.1")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv6VersionCounter struct {
	obj *snappipb.PatternFlowIpv6VersionCounter
}

func NewPatternFlowIpv6VersionCounter() PatternFlowIpv6VersionCounter {
	obj := patternFlowIpv6VersionCounter{obj: &snappipb.PatternFlowIpv6VersionCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6VersionCounter) Msg() *snappipb.PatternFlowIpv6VersionCounter {
	return obj.obj
}

func (obj *patternFlowIpv6VersionCounter) SetMsg(msg *snappipb.PatternFlowIpv6VersionCounter) PatternFlowIpv6VersionCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6VersionCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6VersionCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6VersionCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6VersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6VersionCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6VersionCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6VersionCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6VersionCounter interface {
	Msg() *snappipb.PatternFlowIpv6VersionCounter
	SetMsg(*snappipb.PatternFlowIpv6VersionCounter) PatternFlowIpv6VersionCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv6VersionCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv6VersionCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv6VersionCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 6
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv6VersionCounter object
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) SetStart(value int32) PatternFlowIpv6VersionCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv6VersionCounter object
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) SetStep(value int32) PatternFlowIpv6VersionCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv6VersionCounter object
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) SetCount(value int32) PatternFlowIpv6VersionCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv6VersionCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6VersionCounter.Start <= 15 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6VersionCounter.Step <= 15 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv6VersionCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(6)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv6TrafficClassCounter struct {
	obj *snappipb.PatternFlowIpv6TrafficClassCounter
}

func NewPatternFlowIpv6TrafficClassCounter() PatternFlowIpv6TrafficClassCounter {
	obj := patternFlowIpv6TrafficClassCounter{obj: &snappipb.PatternFlowIpv6TrafficClassCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6TrafficClassCounter) Msg() *snappipb.PatternFlowIpv6TrafficClassCounter {
	return obj.obj
}

func (obj *patternFlowIpv6TrafficClassCounter) SetMsg(msg *snappipb.PatternFlowIpv6TrafficClassCounter) PatternFlowIpv6TrafficClassCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6TrafficClassCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6TrafficClassCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6TrafficClassCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6TrafficClassCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6TrafficClassCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6TrafficClassCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6TrafficClassCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6TrafficClassCounter interface {
	Msg() *snappipb.PatternFlowIpv6TrafficClassCounter
	SetMsg(*snappipb.PatternFlowIpv6TrafficClassCounter) PatternFlowIpv6TrafficClassCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv6TrafficClassCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv6TrafficClassCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv6TrafficClassCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv6TrafficClassCounter object
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) SetStart(value int32) PatternFlowIpv6TrafficClassCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv6TrafficClassCounter object
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) SetStep(value int32) PatternFlowIpv6TrafficClassCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv6TrafficClassCounter object
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) SetCount(value int32) PatternFlowIpv6TrafficClassCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv6TrafficClassCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6TrafficClassCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6TrafficClassCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv6TrafficClassCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv6FlowLabelCounter struct {
	obj *snappipb.PatternFlowIpv6FlowLabelCounter
}

func NewPatternFlowIpv6FlowLabelCounter() PatternFlowIpv6FlowLabelCounter {
	obj := patternFlowIpv6FlowLabelCounter{obj: &snappipb.PatternFlowIpv6FlowLabelCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6FlowLabelCounter) Msg() *snappipb.PatternFlowIpv6FlowLabelCounter {
	return obj.obj
}

func (obj *patternFlowIpv6FlowLabelCounter) SetMsg(msg *snappipb.PatternFlowIpv6FlowLabelCounter) PatternFlowIpv6FlowLabelCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6FlowLabelCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6FlowLabelCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6FlowLabelCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6FlowLabelCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6FlowLabelCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6FlowLabelCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6FlowLabelCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6FlowLabelCounter interface {
	Msg() *snappipb.PatternFlowIpv6FlowLabelCounter
	SetMsg(*snappipb.PatternFlowIpv6FlowLabelCounter) PatternFlowIpv6FlowLabelCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv6FlowLabelCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv6FlowLabelCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv6FlowLabelCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv6FlowLabelCounter object
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) SetStart(value int32) PatternFlowIpv6FlowLabelCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv6FlowLabelCounter object
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) SetStep(value int32) PatternFlowIpv6FlowLabelCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv6FlowLabelCounter object
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) SetCount(value int32) PatternFlowIpv6FlowLabelCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv6FlowLabelCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1048575 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6FlowLabelCounter.Start <= 1048575 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1048575 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6FlowLabelCounter.Step <= 1048575 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv6FlowLabelCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv6PayloadLengthCounter struct {
	obj *snappipb.PatternFlowIpv6PayloadLengthCounter
}

func NewPatternFlowIpv6PayloadLengthCounter() PatternFlowIpv6PayloadLengthCounter {
	obj := patternFlowIpv6PayloadLengthCounter{obj: &snappipb.PatternFlowIpv6PayloadLengthCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6PayloadLengthCounter) Msg() *snappipb.PatternFlowIpv6PayloadLengthCounter {
	return obj.obj
}

func (obj *patternFlowIpv6PayloadLengthCounter) SetMsg(msg *snappipb.PatternFlowIpv6PayloadLengthCounter) PatternFlowIpv6PayloadLengthCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6PayloadLengthCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6PayloadLengthCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6PayloadLengthCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6PayloadLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6PayloadLengthCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6PayloadLengthCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6PayloadLengthCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6PayloadLengthCounter interface {
	Msg() *snappipb.PatternFlowIpv6PayloadLengthCounter
	SetMsg(*snappipb.PatternFlowIpv6PayloadLengthCounter) PatternFlowIpv6PayloadLengthCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv6PayloadLengthCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv6PayloadLengthCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv6PayloadLengthCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv6PayloadLengthCounter object
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) SetStart(value int32) PatternFlowIpv6PayloadLengthCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv6PayloadLengthCounter object
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) SetStep(value int32) PatternFlowIpv6PayloadLengthCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv6PayloadLengthCounter object
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) SetCount(value int32) PatternFlowIpv6PayloadLengthCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv6PayloadLengthCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6PayloadLengthCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6PayloadLengthCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv6PayloadLengthCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv6NextHeaderCounter struct {
	obj *snappipb.PatternFlowIpv6NextHeaderCounter
}

func NewPatternFlowIpv6NextHeaderCounter() PatternFlowIpv6NextHeaderCounter {
	obj := patternFlowIpv6NextHeaderCounter{obj: &snappipb.PatternFlowIpv6NextHeaderCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6NextHeaderCounter) Msg() *snappipb.PatternFlowIpv6NextHeaderCounter {
	return obj.obj
}

func (obj *patternFlowIpv6NextHeaderCounter) SetMsg(msg *snappipb.PatternFlowIpv6NextHeaderCounter) PatternFlowIpv6NextHeaderCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6NextHeaderCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6NextHeaderCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6NextHeaderCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6NextHeaderCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6NextHeaderCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6NextHeaderCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6NextHeaderCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6NextHeaderCounter interface {
	Msg() *snappipb.PatternFlowIpv6NextHeaderCounter
	SetMsg(*snappipb.PatternFlowIpv6NextHeaderCounter) PatternFlowIpv6NextHeaderCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv6NextHeaderCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv6NextHeaderCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv6NextHeaderCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 59
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv6NextHeaderCounter object
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) SetStart(value int32) PatternFlowIpv6NextHeaderCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv6NextHeaderCounter object
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) SetStep(value int32) PatternFlowIpv6NextHeaderCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv6NextHeaderCounter object
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) SetCount(value int32) PatternFlowIpv6NextHeaderCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv6NextHeaderCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6NextHeaderCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6NextHeaderCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv6NextHeaderCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(59)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv6HopLimitCounter struct {
	obj *snappipb.PatternFlowIpv6HopLimitCounter
}

func NewPatternFlowIpv6HopLimitCounter() PatternFlowIpv6HopLimitCounter {
	obj := patternFlowIpv6HopLimitCounter{obj: &snappipb.PatternFlowIpv6HopLimitCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6HopLimitCounter) Msg() *snappipb.PatternFlowIpv6HopLimitCounter {
	return obj.obj
}

func (obj *patternFlowIpv6HopLimitCounter) SetMsg(msg *snappipb.PatternFlowIpv6HopLimitCounter) PatternFlowIpv6HopLimitCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6HopLimitCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6HopLimitCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6HopLimitCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6HopLimitCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6HopLimitCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6HopLimitCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6HopLimitCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6HopLimitCounter interface {
	Msg() *snappipb.PatternFlowIpv6HopLimitCounter
	SetMsg(*snappipb.PatternFlowIpv6HopLimitCounter) PatternFlowIpv6HopLimitCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv6HopLimitCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv6HopLimitCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv6HopLimitCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 64
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv6HopLimitCounter object
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) SetStart(value int32) PatternFlowIpv6HopLimitCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv6HopLimitCounter object
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) SetStep(value int32) PatternFlowIpv6HopLimitCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv6HopLimitCounter object
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) SetCount(value int32) PatternFlowIpv6HopLimitCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv6HopLimitCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6HopLimitCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv6HopLimitCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv6HopLimitCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(64)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv6SrcCounter struct {
	obj *snappipb.PatternFlowIpv6SrcCounter
}

func NewPatternFlowIpv6SrcCounter() PatternFlowIpv6SrcCounter {
	obj := patternFlowIpv6SrcCounter{obj: &snappipb.PatternFlowIpv6SrcCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6SrcCounter) Msg() *snappipb.PatternFlowIpv6SrcCounter {
	return obj.obj
}

func (obj *patternFlowIpv6SrcCounter) SetMsg(msg *snappipb.PatternFlowIpv6SrcCounter) PatternFlowIpv6SrcCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6SrcCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6SrcCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6SrcCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6SrcCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6SrcCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6SrcCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6SrcCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6SrcCounter interface {
	Msg() *snappipb.PatternFlowIpv6SrcCounter
	SetMsg(*snappipb.PatternFlowIpv6SrcCounter) PatternFlowIpv6SrcCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowIpv6SrcCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowIpv6SrcCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv6SrcCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "::0"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowIpv6SrcCounter object
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) SetStart(value string) PatternFlowIpv6SrcCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "::1"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowIpv6SrcCounter object
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) SetStep(value string) PatternFlowIpv6SrcCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv6SrcCounter object
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) SetCount(value int32) PatternFlowIpv6SrcCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv6SrcCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateIpv6(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowIpv6SrcCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateIpv6(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowIpv6SrcCounter"))
		}
	}

}

func (obj *patternFlowIpv6SrcCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("::0")
	}
	if obj.obj.Step == nil {
		obj.SetStep("::1")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv6DstCounter struct {
	obj *snappipb.PatternFlowIpv6DstCounter
}

func NewPatternFlowIpv6DstCounter() PatternFlowIpv6DstCounter {
	obj := patternFlowIpv6DstCounter{obj: &snappipb.PatternFlowIpv6DstCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv6DstCounter) Msg() *snappipb.PatternFlowIpv6DstCounter {
	return obj.obj
}

func (obj *patternFlowIpv6DstCounter) SetMsg(msg *snappipb.PatternFlowIpv6DstCounter) PatternFlowIpv6DstCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv6DstCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv6DstCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6DstCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6DstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv6DstCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6DstCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv6DstCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv6DstCounter interface {
	Msg() *snappipb.PatternFlowIpv6DstCounter
	SetMsg(*snappipb.PatternFlowIpv6DstCounter) PatternFlowIpv6DstCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowIpv6DstCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowIpv6DstCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv6DstCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv6DstCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "::0"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv6DstCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowIpv6DstCounter object
//  description is TBD
func (obj *patternFlowIpv6DstCounter) SetStart(value string) PatternFlowIpv6DstCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv6DstCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "::1"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv6DstCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowIpv6DstCounter object
//  description is TBD
func (obj *patternFlowIpv6DstCounter) SetStep(value string) PatternFlowIpv6DstCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6DstCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6DstCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv6DstCounter object
//  description is TBD
func (obj *patternFlowIpv6DstCounter) SetCount(value int32) PatternFlowIpv6DstCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv6DstCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateIpv6(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowIpv6DstCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateIpv6(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowIpv6DstCounter"))
		}
	}

}

func (obj *patternFlowIpv6DstCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("::0")
	}
	if obj.obj.Step == nil {
		obj.SetStep("::1")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPauseDstCounter struct {
	obj *snappipb.PatternFlowPfcPauseDstCounter
}

func NewPatternFlowPfcPauseDstCounter() PatternFlowPfcPauseDstCounter {
	obj := patternFlowPfcPauseDstCounter{obj: &snappipb.PatternFlowPfcPauseDstCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPauseDstCounter) Msg() *snappipb.PatternFlowPfcPauseDstCounter {
	return obj.obj
}

func (obj *patternFlowPfcPauseDstCounter) SetMsg(msg *snappipb.PatternFlowPfcPauseDstCounter) PatternFlowPfcPauseDstCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPauseDstCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPauseDstCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseDstCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseDstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseDstCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseDstCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPauseDstCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPauseDstCounter interface {
	Msg() *snappipb.PatternFlowPfcPauseDstCounter
	SetMsg(*snappipb.PatternFlowPfcPauseDstCounter) PatternFlowPfcPauseDstCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowPfcPauseDstCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowPfcPauseDstCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPauseDstCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "01:80:c2:00:00:01"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowPfcPauseDstCounter object
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) SetStart(value string) PatternFlowPfcPauseDstCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "00:00:00:00:00:01"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowPfcPauseDstCounter object
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) SetStep(value string) PatternFlowPfcPauseDstCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPauseDstCounter object
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) SetCount(value int32) PatternFlowPfcPauseDstCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPauseDstCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateMac(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowPfcPauseDstCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateMac(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowPfcPauseDstCounter"))
		}
	}

}

func (obj *patternFlowPfcPauseDstCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("01:80:c2:00:00:01")
	}
	if obj.obj.Step == nil {
		obj.SetStep("00:00:00:00:00:01")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPauseSrcCounter struct {
	obj *snappipb.PatternFlowPfcPauseSrcCounter
}

func NewPatternFlowPfcPauseSrcCounter() PatternFlowPfcPauseSrcCounter {
	obj := patternFlowPfcPauseSrcCounter{obj: &snappipb.PatternFlowPfcPauseSrcCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPauseSrcCounter) Msg() *snappipb.PatternFlowPfcPauseSrcCounter {
	return obj.obj
}

func (obj *patternFlowPfcPauseSrcCounter) SetMsg(msg *snappipb.PatternFlowPfcPauseSrcCounter) PatternFlowPfcPauseSrcCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPauseSrcCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPauseSrcCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseSrcCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseSrcCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseSrcCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseSrcCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPauseSrcCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPauseSrcCounter interface {
	Msg() *snappipb.PatternFlowPfcPauseSrcCounter
	SetMsg(*snappipb.PatternFlowPfcPauseSrcCounter) PatternFlowPfcPauseSrcCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowPfcPauseSrcCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowPfcPauseSrcCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPauseSrcCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "00:00:00:00:00:00"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowPfcPauseSrcCounter object
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) SetStart(value string) PatternFlowPfcPauseSrcCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "00:00:00:00:00:01"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowPfcPauseSrcCounter object
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) SetStep(value string) PatternFlowPfcPauseSrcCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPauseSrcCounter object
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) SetCount(value int32) PatternFlowPfcPauseSrcCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPauseSrcCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateMac(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowPfcPauseSrcCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateMac(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowPfcPauseSrcCounter"))
		}
	}

}

func (obj *patternFlowPfcPauseSrcCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("00:00:00:00:00:00")
	}
	if obj.obj.Step == nil {
		obj.SetStep("00:00:00:00:00:01")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPauseEtherTypeCounter struct {
	obj *snappipb.PatternFlowPfcPauseEtherTypeCounter
}

func NewPatternFlowPfcPauseEtherTypeCounter() PatternFlowPfcPauseEtherTypeCounter {
	obj := patternFlowPfcPauseEtherTypeCounter{obj: &snappipb.PatternFlowPfcPauseEtherTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPauseEtherTypeCounter) Msg() *snappipb.PatternFlowPfcPauseEtherTypeCounter {
	return obj.obj
}

func (obj *patternFlowPfcPauseEtherTypeCounter) SetMsg(msg *snappipb.PatternFlowPfcPauseEtherTypeCounter) PatternFlowPfcPauseEtherTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPauseEtherTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPauseEtherTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseEtherTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseEtherTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseEtherTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseEtherTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPauseEtherTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPauseEtherTypeCounter interface {
	Msg() *snappipb.PatternFlowPfcPauseEtherTypeCounter
	SetMsg(*snappipb.PatternFlowPfcPauseEtherTypeCounter) PatternFlowPfcPauseEtherTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPfcPauseEtherTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPfcPauseEtherTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPauseEtherTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 34824
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPfcPauseEtherTypeCounter object
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) SetStart(value int32) PatternFlowPfcPauseEtherTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPfcPauseEtherTypeCounter object
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) SetStep(value int32) PatternFlowPfcPauseEtherTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPauseEtherTypeCounter object
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) SetCount(value int32) PatternFlowPfcPauseEtherTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPauseEtherTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseEtherTypeCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseEtherTypeCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPfcPauseEtherTypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(34824)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPauseControlOpCodeCounter struct {
	obj *snappipb.PatternFlowPfcPauseControlOpCodeCounter
}

func NewPatternFlowPfcPauseControlOpCodeCounter() PatternFlowPfcPauseControlOpCodeCounter {
	obj := patternFlowPfcPauseControlOpCodeCounter{obj: &snappipb.PatternFlowPfcPauseControlOpCodeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) Msg() *snappipb.PatternFlowPfcPauseControlOpCodeCounter {
	return obj.obj
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) SetMsg(msg *snappipb.PatternFlowPfcPauseControlOpCodeCounter) PatternFlowPfcPauseControlOpCodeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPauseControlOpCodeCounter interface {
	Msg() *snappipb.PatternFlowPfcPauseControlOpCodeCounter
	SetMsg(*snappipb.PatternFlowPfcPauseControlOpCodeCounter) PatternFlowPfcPauseControlOpCodeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPfcPauseControlOpCodeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPfcPauseControlOpCodeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPauseControlOpCodeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 257
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPfcPauseControlOpCodeCounter object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) SetStart(value int32) PatternFlowPfcPauseControlOpCodeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPfcPauseControlOpCodeCounter object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) SetStep(value int32) PatternFlowPfcPauseControlOpCodeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPauseControlOpCodeCounter object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) SetCount(value int32) PatternFlowPfcPauseControlOpCodeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseControlOpCodeCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseControlOpCodeCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPfcPauseControlOpCodeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(257)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPauseClassEnableVectorCounter struct {
	obj *snappipb.PatternFlowPfcPauseClassEnableVectorCounter
}

func NewPatternFlowPfcPauseClassEnableVectorCounter() PatternFlowPfcPauseClassEnableVectorCounter {
	obj := patternFlowPfcPauseClassEnableVectorCounter{obj: &snappipb.PatternFlowPfcPauseClassEnableVectorCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) Msg() *snappipb.PatternFlowPfcPauseClassEnableVectorCounter {
	return obj.obj
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) SetMsg(msg *snappipb.PatternFlowPfcPauseClassEnableVectorCounter) PatternFlowPfcPauseClassEnableVectorCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPauseClassEnableVectorCounter interface {
	Msg() *snappipb.PatternFlowPfcPauseClassEnableVectorCounter
	SetMsg(*snappipb.PatternFlowPfcPauseClassEnableVectorCounter) PatternFlowPfcPauseClassEnableVectorCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPfcPauseClassEnableVectorCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPfcPauseClassEnableVectorCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPauseClassEnableVectorCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPfcPauseClassEnableVectorCounter object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) SetStart(value int32) PatternFlowPfcPauseClassEnableVectorCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPfcPauseClassEnableVectorCounter object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) SetStep(value int32) PatternFlowPfcPauseClassEnableVectorCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPauseClassEnableVectorCounter object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) SetCount(value int32) PatternFlowPfcPauseClassEnableVectorCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseClassEnableVectorCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPauseClassEnableVectorCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPausePauseClass0Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass0Counter
}

func NewPatternFlowPfcPausePauseClass0Counter() PatternFlowPfcPausePauseClass0Counter {
	obj := patternFlowPfcPausePauseClass0Counter{obj: &snappipb.PatternFlowPfcPausePauseClass0Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass0Counter) Msg() *snappipb.PatternFlowPfcPausePauseClass0Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass0Counter) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass0Counter) PatternFlowPfcPausePauseClass0Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass0Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass0Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass0Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass0Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass0Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass0Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass0Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass0Counter interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass0Counter
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass0Counter) PatternFlowPfcPausePauseClass0Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass0Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass0Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass0Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPfcPausePauseClass0Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) SetStart(value int32) PatternFlowPfcPausePauseClass0Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPfcPausePauseClass0Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) SetStep(value int32) PatternFlowPfcPausePauseClass0Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPausePauseClass0Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) SetCount(value int32) PatternFlowPfcPausePauseClass0Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPausePauseClass0Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass0Counter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass0Counter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPfcPausePauseClass0Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPausePauseClass1Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass1Counter
}

func NewPatternFlowPfcPausePauseClass1Counter() PatternFlowPfcPausePauseClass1Counter {
	obj := patternFlowPfcPausePauseClass1Counter{obj: &snappipb.PatternFlowPfcPausePauseClass1Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass1Counter) Msg() *snappipb.PatternFlowPfcPausePauseClass1Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass1Counter) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass1Counter) PatternFlowPfcPausePauseClass1Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass1Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass1Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass1Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass1Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass1Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass1Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass1Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass1Counter interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass1Counter
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass1Counter) PatternFlowPfcPausePauseClass1Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass1Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass1Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass1Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPfcPausePauseClass1Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) SetStart(value int32) PatternFlowPfcPausePauseClass1Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPfcPausePauseClass1Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) SetStep(value int32) PatternFlowPfcPausePauseClass1Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPausePauseClass1Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) SetCount(value int32) PatternFlowPfcPausePauseClass1Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPausePauseClass1Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass1Counter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass1Counter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPfcPausePauseClass1Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPausePauseClass2Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass2Counter
}

func NewPatternFlowPfcPausePauseClass2Counter() PatternFlowPfcPausePauseClass2Counter {
	obj := patternFlowPfcPausePauseClass2Counter{obj: &snappipb.PatternFlowPfcPausePauseClass2Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass2Counter) Msg() *snappipb.PatternFlowPfcPausePauseClass2Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass2Counter) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass2Counter) PatternFlowPfcPausePauseClass2Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass2Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass2Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass2Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass2Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass2Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass2Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass2Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass2Counter interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass2Counter
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass2Counter) PatternFlowPfcPausePauseClass2Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass2Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass2Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass2Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPfcPausePauseClass2Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) SetStart(value int32) PatternFlowPfcPausePauseClass2Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPfcPausePauseClass2Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) SetStep(value int32) PatternFlowPfcPausePauseClass2Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPausePauseClass2Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) SetCount(value int32) PatternFlowPfcPausePauseClass2Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPausePauseClass2Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass2Counter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass2Counter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPfcPausePauseClass2Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPausePauseClass3Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass3Counter
}

func NewPatternFlowPfcPausePauseClass3Counter() PatternFlowPfcPausePauseClass3Counter {
	obj := patternFlowPfcPausePauseClass3Counter{obj: &snappipb.PatternFlowPfcPausePauseClass3Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass3Counter) Msg() *snappipb.PatternFlowPfcPausePauseClass3Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass3Counter) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass3Counter) PatternFlowPfcPausePauseClass3Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass3Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass3Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass3Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass3Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass3Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass3Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass3Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass3Counter interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass3Counter
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass3Counter) PatternFlowPfcPausePauseClass3Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass3Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass3Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass3Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPfcPausePauseClass3Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) SetStart(value int32) PatternFlowPfcPausePauseClass3Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPfcPausePauseClass3Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) SetStep(value int32) PatternFlowPfcPausePauseClass3Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPausePauseClass3Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) SetCount(value int32) PatternFlowPfcPausePauseClass3Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPausePauseClass3Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass3Counter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass3Counter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPfcPausePauseClass3Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPausePauseClass4Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass4Counter
}

func NewPatternFlowPfcPausePauseClass4Counter() PatternFlowPfcPausePauseClass4Counter {
	obj := patternFlowPfcPausePauseClass4Counter{obj: &snappipb.PatternFlowPfcPausePauseClass4Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass4Counter) Msg() *snappipb.PatternFlowPfcPausePauseClass4Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass4Counter) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass4Counter) PatternFlowPfcPausePauseClass4Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass4Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass4Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass4Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass4Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass4Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass4Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass4Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass4Counter interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass4Counter
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass4Counter) PatternFlowPfcPausePauseClass4Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass4Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass4Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass4Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPfcPausePauseClass4Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) SetStart(value int32) PatternFlowPfcPausePauseClass4Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPfcPausePauseClass4Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) SetStep(value int32) PatternFlowPfcPausePauseClass4Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPausePauseClass4Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) SetCount(value int32) PatternFlowPfcPausePauseClass4Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPausePauseClass4Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass4Counter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass4Counter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPfcPausePauseClass4Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPausePauseClass5Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass5Counter
}

func NewPatternFlowPfcPausePauseClass5Counter() PatternFlowPfcPausePauseClass5Counter {
	obj := patternFlowPfcPausePauseClass5Counter{obj: &snappipb.PatternFlowPfcPausePauseClass5Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass5Counter) Msg() *snappipb.PatternFlowPfcPausePauseClass5Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass5Counter) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass5Counter) PatternFlowPfcPausePauseClass5Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass5Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass5Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass5Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass5Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass5Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass5Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass5Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass5Counter interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass5Counter
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass5Counter) PatternFlowPfcPausePauseClass5Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass5Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass5Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass5Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPfcPausePauseClass5Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) SetStart(value int32) PatternFlowPfcPausePauseClass5Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPfcPausePauseClass5Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) SetStep(value int32) PatternFlowPfcPausePauseClass5Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPausePauseClass5Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) SetCount(value int32) PatternFlowPfcPausePauseClass5Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPausePauseClass5Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass5Counter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass5Counter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPfcPausePauseClass5Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPausePauseClass6Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass6Counter
}

func NewPatternFlowPfcPausePauseClass6Counter() PatternFlowPfcPausePauseClass6Counter {
	obj := patternFlowPfcPausePauseClass6Counter{obj: &snappipb.PatternFlowPfcPausePauseClass6Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass6Counter) Msg() *snappipb.PatternFlowPfcPausePauseClass6Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass6Counter) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass6Counter) PatternFlowPfcPausePauseClass6Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass6Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass6Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass6Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass6Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass6Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass6Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass6Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass6Counter interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass6Counter
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass6Counter) PatternFlowPfcPausePauseClass6Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass6Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass6Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass6Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPfcPausePauseClass6Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) SetStart(value int32) PatternFlowPfcPausePauseClass6Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPfcPausePauseClass6Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) SetStep(value int32) PatternFlowPfcPausePauseClass6Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPausePauseClass6Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) SetCount(value int32) PatternFlowPfcPausePauseClass6Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPausePauseClass6Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass6Counter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass6Counter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPfcPausePauseClass6Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPfcPausePauseClass7Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass7Counter
}

func NewPatternFlowPfcPausePauseClass7Counter() PatternFlowPfcPausePauseClass7Counter {
	obj := patternFlowPfcPausePauseClass7Counter{obj: &snappipb.PatternFlowPfcPausePauseClass7Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPfcPausePauseClass7Counter) Msg() *snappipb.PatternFlowPfcPausePauseClass7Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass7Counter) SetMsg(msg *snappipb.PatternFlowPfcPausePauseClass7Counter) PatternFlowPfcPausePauseClass7Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPfcPausePauseClass7Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPfcPausePauseClass7Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass7Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass7Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass7Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass7Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPfcPausePauseClass7Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPfcPausePauseClass7Counter interface {
	Msg() *snappipb.PatternFlowPfcPausePauseClass7Counter
	SetMsg(*snappipb.PatternFlowPfcPausePauseClass7Counter) PatternFlowPfcPausePauseClass7Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass7Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass7Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass7Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPfcPausePauseClass7Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) SetStart(value int32) PatternFlowPfcPausePauseClass7Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPfcPausePauseClass7Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) SetStep(value int32) PatternFlowPfcPausePauseClass7Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPfcPausePauseClass7Counter object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) SetCount(value int32) PatternFlowPfcPausePauseClass7Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPfcPausePauseClass7Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass7Counter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPfcPausePauseClass7Counter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPfcPausePauseClass7Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowEthernetPauseDstCounter struct {
	obj *snappipb.PatternFlowEthernetPauseDstCounter
}

func NewPatternFlowEthernetPauseDstCounter() PatternFlowEthernetPauseDstCounter {
	obj := patternFlowEthernetPauseDstCounter{obj: &snappipb.PatternFlowEthernetPauseDstCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPauseDstCounter) Msg() *snappipb.PatternFlowEthernetPauseDstCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPauseDstCounter) SetMsg(msg *snappipb.PatternFlowEthernetPauseDstCounter) PatternFlowEthernetPauseDstCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPauseDstCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPauseDstCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseDstCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseDstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseDstCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseDstCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPauseDstCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPauseDstCounter interface {
	Msg() *snappipb.PatternFlowEthernetPauseDstCounter
	SetMsg(*snappipb.PatternFlowEthernetPauseDstCounter) PatternFlowEthernetPauseDstCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowEthernetPauseDstCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowEthernetPauseDstCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowEthernetPauseDstCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "01:80:c2:00:00:01"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowEthernetPauseDstCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) SetStart(value string) PatternFlowEthernetPauseDstCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "00:00:00:00:00:01"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowEthernetPauseDstCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) SetStep(value string) PatternFlowEthernetPauseDstCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowEthernetPauseDstCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) SetCount(value int32) PatternFlowEthernetPauseDstCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowEthernetPauseDstCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateMac(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowEthernetPauseDstCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateMac(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowEthernetPauseDstCounter"))
		}
	}

}

func (obj *patternFlowEthernetPauseDstCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("01:80:c2:00:00:01")
	}
	if obj.obj.Step == nil {
		obj.SetStep("00:00:00:00:00:01")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowEthernetPauseSrcCounter struct {
	obj *snappipb.PatternFlowEthernetPauseSrcCounter
}

func NewPatternFlowEthernetPauseSrcCounter() PatternFlowEthernetPauseSrcCounter {
	obj := patternFlowEthernetPauseSrcCounter{obj: &snappipb.PatternFlowEthernetPauseSrcCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPauseSrcCounter) Msg() *snappipb.PatternFlowEthernetPauseSrcCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPauseSrcCounter) SetMsg(msg *snappipb.PatternFlowEthernetPauseSrcCounter) PatternFlowEthernetPauseSrcCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPauseSrcCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPauseSrcCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseSrcCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseSrcCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseSrcCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseSrcCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPauseSrcCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPauseSrcCounter interface {
	Msg() *snappipb.PatternFlowEthernetPauseSrcCounter
	SetMsg(*snappipb.PatternFlowEthernetPauseSrcCounter) PatternFlowEthernetPauseSrcCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowEthernetPauseSrcCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowEthernetPauseSrcCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowEthernetPauseSrcCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "00:00:00:00:00:00"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowEthernetPauseSrcCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) SetStart(value string) PatternFlowEthernetPauseSrcCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "00:00:00:00:00:01"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowEthernetPauseSrcCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) SetStep(value string) PatternFlowEthernetPauseSrcCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowEthernetPauseSrcCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) SetCount(value int32) PatternFlowEthernetPauseSrcCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowEthernetPauseSrcCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateMac(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowEthernetPauseSrcCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateMac(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowEthernetPauseSrcCounter"))
		}
	}

}

func (obj *patternFlowEthernetPauseSrcCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("00:00:00:00:00:00")
	}
	if obj.obj.Step == nil {
		obj.SetStep("00:00:00:00:00:01")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowEthernetPauseEtherTypeCounter struct {
	obj *snappipb.PatternFlowEthernetPauseEtherTypeCounter
}

func NewPatternFlowEthernetPauseEtherTypeCounter() PatternFlowEthernetPauseEtherTypeCounter {
	obj := patternFlowEthernetPauseEtherTypeCounter{obj: &snappipb.PatternFlowEthernetPauseEtherTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) Msg() *snappipb.PatternFlowEthernetPauseEtherTypeCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) SetMsg(msg *snappipb.PatternFlowEthernetPauseEtherTypeCounter) PatternFlowEthernetPauseEtherTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPauseEtherTypeCounter interface {
	Msg() *snappipb.PatternFlowEthernetPauseEtherTypeCounter
	SetMsg(*snappipb.PatternFlowEthernetPauseEtherTypeCounter) PatternFlowEthernetPauseEtherTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowEthernetPauseEtherTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowEthernetPauseEtherTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowEthernetPauseEtherTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 34824
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowEthernetPauseEtherTypeCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) SetStart(value int32) PatternFlowEthernetPauseEtherTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowEthernetPauseEtherTypeCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) SetStep(value int32) PatternFlowEthernetPauseEtherTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowEthernetPauseEtherTypeCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) SetCount(value int32) PatternFlowEthernetPauseEtherTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseEtherTypeCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseEtherTypeCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowEthernetPauseEtherTypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(34824)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowEthernetPauseControlOpCodeCounter struct {
	obj *snappipb.PatternFlowEthernetPauseControlOpCodeCounter
}

func NewPatternFlowEthernetPauseControlOpCodeCounter() PatternFlowEthernetPauseControlOpCodeCounter {
	obj := patternFlowEthernetPauseControlOpCodeCounter{obj: &snappipb.PatternFlowEthernetPauseControlOpCodeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) Msg() *snappipb.PatternFlowEthernetPauseControlOpCodeCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) SetMsg(msg *snappipb.PatternFlowEthernetPauseControlOpCodeCounter) PatternFlowEthernetPauseControlOpCodeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPauseControlOpCodeCounter interface {
	Msg() *snappipb.PatternFlowEthernetPauseControlOpCodeCounter
	SetMsg(*snappipb.PatternFlowEthernetPauseControlOpCodeCounter) PatternFlowEthernetPauseControlOpCodeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowEthernetPauseControlOpCodeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowEthernetPauseControlOpCodeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowEthernetPauseControlOpCodeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 1
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowEthernetPauseControlOpCodeCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) SetStart(value int32) PatternFlowEthernetPauseControlOpCodeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowEthernetPauseControlOpCodeCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) SetStep(value int32) PatternFlowEthernetPauseControlOpCodeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowEthernetPauseControlOpCodeCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) SetCount(value int32) PatternFlowEthernetPauseControlOpCodeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseControlOpCodeCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseControlOpCodeCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(1)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowEthernetPauseTimeCounter struct {
	obj *snappipb.PatternFlowEthernetPauseTimeCounter
}

func NewPatternFlowEthernetPauseTimeCounter() PatternFlowEthernetPauseTimeCounter {
	obj := patternFlowEthernetPauseTimeCounter{obj: &snappipb.PatternFlowEthernetPauseTimeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowEthernetPauseTimeCounter) Msg() *snappipb.PatternFlowEthernetPauseTimeCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPauseTimeCounter) SetMsg(msg *snappipb.PatternFlowEthernetPauseTimeCounter) PatternFlowEthernetPauseTimeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowEthernetPauseTimeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowEthernetPauseTimeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseTimeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseTimeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowEthernetPauseTimeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseTimeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowEthernetPauseTimeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowEthernetPauseTimeCounter interface {
	Msg() *snappipb.PatternFlowEthernetPauseTimeCounter
	SetMsg(*snappipb.PatternFlowEthernetPauseTimeCounter) PatternFlowEthernetPauseTimeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowEthernetPauseTimeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowEthernetPauseTimeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowEthernetPauseTimeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowEthernetPauseTimeCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) SetStart(value int32) PatternFlowEthernetPauseTimeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowEthernetPauseTimeCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) SetStep(value int32) PatternFlowEthernetPauseTimeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowEthernetPauseTimeCounter object
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) SetCount(value int32) PatternFlowEthernetPauseTimeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowEthernetPauseTimeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseTimeCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowEthernetPauseTimeCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowEthernetPauseTimeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpSrcPortCounter struct {
	obj *snappipb.PatternFlowTcpSrcPortCounter
}

func NewPatternFlowTcpSrcPortCounter() PatternFlowTcpSrcPortCounter {
	obj := patternFlowTcpSrcPortCounter{obj: &snappipb.PatternFlowTcpSrcPortCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpSrcPortCounter) Msg() *snappipb.PatternFlowTcpSrcPortCounter {
	return obj.obj
}

func (obj *patternFlowTcpSrcPortCounter) SetMsg(msg *snappipb.PatternFlowTcpSrcPortCounter) PatternFlowTcpSrcPortCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpSrcPortCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpSrcPortCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpSrcPortCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSrcPortCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpSrcPortCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSrcPortCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpSrcPortCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpSrcPortCounter interface {
	Msg() *snappipb.PatternFlowTcpSrcPortCounter
	SetMsg(*snappipb.PatternFlowTcpSrcPortCounter) PatternFlowTcpSrcPortCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpSrcPortCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpSrcPortCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpSrcPortCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpSrcPortCounter object
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) SetStart(value int32) PatternFlowTcpSrcPortCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpSrcPortCounter object
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) SetStep(value int32) PatternFlowTcpSrcPortCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpSrcPortCounter object
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) SetCount(value int32) PatternFlowTcpSrcPortCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpSrcPortCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpSrcPortCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpSrcPortCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpSrcPortCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpDstPortCounter struct {
	obj *snappipb.PatternFlowTcpDstPortCounter
}

func NewPatternFlowTcpDstPortCounter() PatternFlowTcpDstPortCounter {
	obj := patternFlowTcpDstPortCounter{obj: &snappipb.PatternFlowTcpDstPortCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpDstPortCounter) Msg() *snappipb.PatternFlowTcpDstPortCounter {
	return obj.obj
}

func (obj *patternFlowTcpDstPortCounter) SetMsg(msg *snappipb.PatternFlowTcpDstPortCounter) PatternFlowTcpDstPortCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpDstPortCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpDstPortCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpDstPortCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDstPortCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpDstPortCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDstPortCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpDstPortCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpDstPortCounter interface {
	Msg() *snappipb.PatternFlowTcpDstPortCounter
	SetMsg(*snappipb.PatternFlowTcpDstPortCounter) PatternFlowTcpDstPortCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpDstPortCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpDstPortCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpDstPortCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpDstPortCounter object
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) SetStart(value int32) PatternFlowTcpDstPortCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpDstPortCounter object
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) SetStep(value int32) PatternFlowTcpDstPortCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpDstPortCounter object
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) SetCount(value int32) PatternFlowTcpDstPortCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpDstPortCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpDstPortCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpDstPortCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpDstPortCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpSeqNumCounter struct {
	obj *snappipb.PatternFlowTcpSeqNumCounter
}

func NewPatternFlowTcpSeqNumCounter() PatternFlowTcpSeqNumCounter {
	obj := patternFlowTcpSeqNumCounter{obj: &snappipb.PatternFlowTcpSeqNumCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpSeqNumCounter) Msg() *snappipb.PatternFlowTcpSeqNumCounter {
	return obj.obj
}

func (obj *patternFlowTcpSeqNumCounter) SetMsg(msg *snappipb.PatternFlowTcpSeqNumCounter) PatternFlowTcpSeqNumCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpSeqNumCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpSeqNumCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpSeqNumCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSeqNumCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpSeqNumCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSeqNumCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpSeqNumCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpSeqNumCounter interface {
	Msg() *snappipb.PatternFlowTcpSeqNumCounter
	SetMsg(*snappipb.PatternFlowTcpSeqNumCounter) PatternFlowTcpSeqNumCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int64
	SetStart(value int64) PatternFlowTcpSeqNumCounter
	HasStart() bool
	Step() int64
	SetStep(value int64) PatternFlowTcpSeqNumCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpSeqNumCounter
	HasCount() bool
}

// Start returns a int64
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) Start() int64 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int64
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int64 value in the PatternFlowTcpSeqNumCounter object
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) SetStart(value int64) PatternFlowTcpSeqNumCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int64
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) Step() int64 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int64
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int64 value in the PatternFlowTcpSeqNumCounter object
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) SetStep(value int64) PatternFlowTcpSeqNumCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpSeqNumCounter object
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) SetCount(value int32) PatternFlowTcpSeqNumCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpSeqNumCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpSeqNumCounter.Start <= 4294967295 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpSeqNumCounter.Step <= 4294967295 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpSeqNumCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpAckNumCounter struct {
	obj *snappipb.PatternFlowTcpAckNumCounter
}

func NewPatternFlowTcpAckNumCounter() PatternFlowTcpAckNumCounter {
	obj := patternFlowTcpAckNumCounter{obj: &snappipb.PatternFlowTcpAckNumCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpAckNumCounter) Msg() *snappipb.PatternFlowTcpAckNumCounter {
	return obj.obj
}

func (obj *patternFlowTcpAckNumCounter) SetMsg(msg *snappipb.PatternFlowTcpAckNumCounter) PatternFlowTcpAckNumCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpAckNumCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpAckNumCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpAckNumCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpAckNumCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpAckNumCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpAckNumCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpAckNumCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpAckNumCounter interface {
	Msg() *snappipb.PatternFlowTcpAckNumCounter
	SetMsg(*snappipb.PatternFlowTcpAckNumCounter) PatternFlowTcpAckNumCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int64
	SetStart(value int64) PatternFlowTcpAckNumCounter
	HasStart() bool
	Step() int64
	SetStep(value int64) PatternFlowTcpAckNumCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpAckNumCounter
	HasCount() bool
}

// Start returns a int64
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) Start() int64 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int64
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int64 value in the PatternFlowTcpAckNumCounter object
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) SetStart(value int64) PatternFlowTcpAckNumCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int64
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) Step() int64 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int64
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int64 value in the PatternFlowTcpAckNumCounter object
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) SetStep(value int64) PatternFlowTcpAckNumCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpAckNumCounter object
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) SetCount(value int32) PatternFlowTcpAckNumCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpAckNumCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpAckNumCounter.Start <= 4294967295 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpAckNumCounter.Step <= 4294967295 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpAckNumCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpDataOffsetCounter struct {
	obj *snappipb.PatternFlowTcpDataOffsetCounter
}

func NewPatternFlowTcpDataOffsetCounter() PatternFlowTcpDataOffsetCounter {
	obj := patternFlowTcpDataOffsetCounter{obj: &snappipb.PatternFlowTcpDataOffsetCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpDataOffsetCounter) Msg() *snappipb.PatternFlowTcpDataOffsetCounter {
	return obj.obj
}

func (obj *patternFlowTcpDataOffsetCounter) SetMsg(msg *snappipb.PatternFlowTcpDataOffsetCounter) PatternFlowTcpDataOffsetCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpDataOffsetCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpDataOffsetCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpDataOffsetCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDataOffsetCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpDataOffsetCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDataOffsetCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpDataOffsetCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpDataOffsetCounter interface {
	Msg() *snappipb.PatternFlowTcpDataOffsetCounter
	SetMsg(*snappipb.PatternFlowTcpDataOffsetCounter) PatternFlowTcpDataOffsetCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpDataOffsetCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpDataOffsetCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpDataOffsetCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpDataOffsetCounter object
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) SetStart(value int32) PatternFlowTcpDataOffsetCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpDataOffsetCounter object
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) SetStep(value int32) PatternFlowTcpDataOffsetCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpDataOffsetCounter object
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) SetCount(value int32) PatternFlowTcpDataOffsetCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpDataOffsetCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpDataOffsetCounter.Start <= 15 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpDataOffsetCounter.Step <= 15 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpDataOffsetCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpEcnNsCounter struct {
	obj *snappipb.PatternFlowTcpEcnNsCounter
}

func NewPatternFlowTcpEcnNsCounter() PatternFlowTcpEcnNsCounter {
	obj := patternFlowTcpEcnNsCounter{obj: &snappipb.PatternFlowTcpEcnNsCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpEcnNsCounter) Msg() *snappipb.PatternFlowTcpEcnNsCounter {
	return obj.obj
}

func (obj *patternFlowTcpEcnNsCounter) SetMsg(msg *snappipb.PatternFlowTcpEcnNsCounter) PatternFlowTcpEcnNsCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpEcnNsCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpEcnNsCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnNsCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnNsCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnNsCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnNsCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpEcnNsCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpEcnNsCounter interface {
	Msg() *snappipb.PatternFlowTcpEcnNsCounter
	SetMsg(*snappipb.PatternFlowTcpEcnNsCounter) PatternFlowTcpEcnNsCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpEcnNsCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpEcnNsCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpEcnNsCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpEcnNsCounter object
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) SetStart(value int32) PatternFlowTcpEcnNsCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpEcnNsCounter object
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) SetStep(value int32) PatternFlowTcpEcnNsCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpEcnNsCounter object
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) SetCount(value int32) PatternFlowTcpEcnNsCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpEcnNsCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnNsCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnNsCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpEcnNsCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpEcnCwrCounter struct {
	obj *snappipb.PatternFlowTcpEcnCwrCounter
}

func NewPatternFlowTcpEcnCwrCounter() PatternFlowTcpEcnCwrCounter {
	obj := patternFlowTcpEcnCwrCounter{obj: &snappipb.PatternFlowTcpEcnCwrCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpEcnCwrCounter) Msg() *snappipb.PatternFlowTcpEcnCwrCounter {
	return obj.obj
}

func (obj *patternFlowTcpEcnCwrCounter) SetMsg(msg *snappipb.PatternFlowTcpEcnCwrCounter) PatternFlowTcpEcnCwrCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpEcnCwrCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpEcnCwrCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnCwrCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnCwrCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnCwrCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnCwrCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpEcnCwrCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpEcnCwrCounter interface {
	Msg() *snappipb.PatternFlowTcpEcnCwrCounter
	SetMsg(*snappipb.PatternFlowTcpEcnCwrCounter) PatternFlowTcpEcnCwrCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpEcnCwrCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpEcnCwrCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpEcnCwrCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpEcnCwrCounter object
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) SetStart(value int32) PatternFlowTcpEcnCwrCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpEcnCwrCounter object
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) SetStep(value int32) PatternFlowTcpEcnCwrCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpEcnCwrCounter object
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) SetCount(value int32) PatternFlowTcpEcnCwrCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpEcnCwrCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnCwrCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnCwrCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpEcnCwrCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpEcnEchoCounter struct {
	obj *snappipb.PatternFlowTcpEcnEchoCounter
}

func NewPatternFlowTcpEcnEchoCounter() PatternFlowTcpEcnEchoCounter {
	obj := patternFlowTcpEcnEchoCounter{obj: &snappipb.PatternFlowTcpEcnEchoCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpEcnEchoCounter) Msg() *snappipb.PatternFlowTcpEcnEchoCounter {
	return obj.obj
}

func (obj *patternFlowTcpEcnEchoCounter) SetMsg(msg *snappipb.PatternFlowTcpEcnEchoCounter) PatternFlowTcpEcnEchoCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpEcnEchoCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpEcnEchoCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnEchoCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnEchoCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpEcnEchoCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnEchoCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpEcnEchoCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpEcnEchoCounter interface {
	Msg() *snappipb.PatternFlowTcpEcnEchoCounter
	SetMsg(*snappipb.PatternFlowTcpEcnEchoCounter) PatternFlowTcpEcnEchoCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpEcnEchoCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpEcnEchoCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpEcnEchoCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpEcnEchoCounter object
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) SetStart(value int32) PatternFlowTcpEcnEchoCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpEcnEchoCounter object
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) SetStep(value int32) PatternFlowTcpEcnEchoCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpEcnEchoCounter object
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) SetCount(value int32) PatternFlowTcpEcnEchoCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpEcnEchoCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnEchoCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpEcnEchoCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpEcnEchoCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpCtlUrgCounter struct {
	obj *snappipb.PatternFlowTcpCtlUrgCounter
}

func NewPatternFlowTcpCtlUrgCounter() PatternFlowTcpCtlUrgCounter {
	obj := patternFlowTcpCtlUrgCounter{obj: &snappipb.PatternFlowTcpCtlUrgCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlUrgCounter) Msg() *snappipb.PatternFlowTcpCtlUrgCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlUrgCounter) SetMsg(msg *snappipb.PatternFlowTcpCtlUrgCounter) PatternFlowTcpCtlUrgCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlUrgCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlUrgCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlUrgCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlUrgCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlUrgCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlUrgCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlUrgCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlUrgCounter interface {
	Msg() *snappipb.PatternFlowTcpCtlUrgCounter
	SetMsg(*snappipb.PatternFlowTcpCtlUrgCounter) PatternFlowTcpCtlUrgCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlUrgCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlUrgCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlUrgCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpCtlUrgCounter object
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) SetStart(value int32) PatternFlowTcpCtlUrgCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpCtlUrgCounter object
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) SetStep(value int32) PatternFlowTcpCtlUrgCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpCtlUrgCounter object
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) SetCount(value int32) PatternFlowTcpCtlUrgCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpCtlUrgCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlUrgCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlUrgCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpCtlUrgCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpCtlAckCounter struct {
	obj *snappipb.PatternFlowTcpCtlAckCounter
}

func NewPatternFlowTcpCtlAckCounter() PatternFlowTcpCtlAckCounter {
	obj := patternFlowTcpCtlAckCounter{obj: &snappipb.PatternFlowTcpCtlAckCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlAckCounter) Msg() *snappipb.PatternFlowTcpCtlAckCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlAckCounter) SetMsg(msg *snappipb.PatternFlowTcpCtlAckCounter) PatternFlowTcpCtlAckCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlAckCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlAckCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlAckCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlAckCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlAckCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlAckCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlAckCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlAckCounter interface {
	Msg() *snappipb.PatternFlowTcpCtlAckCounter
	SetMsg(*snappipb.PatternFlowTcpCtlAckCounter) PatternFlowTcpCtlAckCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlAckCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlAckCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlAckCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpCtlAckCounter object
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) SetStart(value int32) PatternFlowTcpCtlAckCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpCtlAckCounter object
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) SetStep(value int32) PatternFlowTcpCtlAckCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpCtlAckCounter object
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) SetCount(value int32) PatternFlowTcpCtlAckCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpCtlAckCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlAckCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlAckCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpCtlAckCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpCtlPshCounter struct {
	obj *snappipb.PatternFlowTcpCtlPshCounter
}

func NewPatternFlowTcpCtlPshCounter() PatternFlowTcpCtlPshCounter {
	obj := patternFlowTcpCtlPshCounter{obj: &snappipb.PatternFlowTcpCtlPshCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlPshCounter) Msg() *snappipb.PatternFlowTcpCtlPshCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlPshCounter) SetMsg(msg *snappipb.PatternFlowTcpCtlPshCounter) PatternFlowTcpCtlPshCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlPshCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlPshCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlPshCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlPshCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlPshCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlPshCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlPshCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlPshCounter interface {
	Msg() *snappipb.PatternFlowTcpCtlPshCounter
	SetMsg(*snappipb.PatternFlowTcpCtlPshCounter) PatternFlowTcpCtlPshCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlPshCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlPshCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlPshCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpCtlPshCounter object
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) SetStart(value int32) PatternFlowTcpCtlPshCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpCtlPshCounter object
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) SetStep(value int32) PatternFlowTcpCtlPshCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpCtlPshCounter object
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) SetCount(value int32) PatternFlowTcpCtlPshCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpCtlPshCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlPshCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlPshCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpCtlPshCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpCtlRstCounter struct {
	obj *snappipb.PatternFlowTcpCtlRstCounter
}

func NewPatternFlowTcpCtlRstCounter() PatternFlowTcpCtlRstCounter {
	obj := patternFlowTcpCtlRstCounter{obj: &snappipb.PatternFlowTcpCtlRstCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlRstCounter) Msg() *snappipb.PatternFlowTcpCtlRstCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlRstCounter) SetMsg(msg *snappipb.PatternFlowTcpCtlRstCounter) PatternFlowTcpCtlRstCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlRstCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlRstCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlRstCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlRstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlRstCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlRstCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlRstCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlRstCounter interface {
	Msg() *snappipb.PatternFlowTcpCtlRstCounter
	SetMsg(*snappipb.PatternFlowTcpCtlRstCounter) PatternFlowTcpCtlRstCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlRstCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlRstCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlRstCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpCtlRstCounter object
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) SetStart(value int32) PatternFlowTcpCtlRstCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpCtlRstCounter object
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) SetStep(value int32) PatternFlowTcpCtlRstCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpCtlRstCounter object
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) SetCount(value int32) PatternFlowTcpCtlRstCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpCtlRstCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlRstCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlRstCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpCtlRstCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpCtlSynCounter struct {
	obj *snappipb.PatternFlowTcpCtlSynCounter
}

func NewPatternFlowTcpCtlSynCounter() PatternFlowTcpCtlSynCounter {
	obj := patternFlowTcpCtlSynCounter{obj: &snappipb.PatternFlowTcpCtlSynCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlSynCounter) Msg() *snappipb.PatternFlowTcpCtlSynCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlSynCounter) SetMsg(msg *snappipb.PatternFlowTcpCtlSynCounter) PatternFlowTcpCtlSynCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlSynCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlSynCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlSynCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlSynCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlSynCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlSynCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlSynCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlSynCounter interface {
	Msg() *snappipb.PatternFlowTcpCtlSynCounter
	SetMsg(*snappipb.PatternFlowTcpCtlSynCounter) PatternFlowTcpCtlSynCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlSynCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlSynCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlSynCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpCtlSynCounter object
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) SetStart(value int32) PatternFlowTcpCtlSynCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpCtlSynCounter object
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) SetStep(value int32) PatternFlowTcpCtlSynCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpCtlSynCounter object
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) SetCount(value int32) PatternFlowTcpCtlSynCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpCtlSynCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlSynCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlSynCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpCtlSynCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpCtlFinCounter struct {
	obj *snappipb.PatternFlowTcpCtlFinCounter
}

func NewPatternFlowTcpCtlFinCounter() PatternFlowTcpCtlFinCounter {
	obj := patternFlowTcpCtlFinCounter{obj: &snappipb.PatternFlowTcpCtlFinCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpCtlFinCounter) Msg() *snappipb.PatternFlowTcpCtlFinCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlFinCounter) SetMsg(msg *snappipb.PatternFlowTcpCtlFinCounter) PatternFlowTcpCtlFinCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpCtlFinCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpCtlFinCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlFinCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlFinCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpCtlFinCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlFinCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpCtlFinCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpCtlFinCounter interface {
	Msg() *snappipb.PatternFlowTcpCtlFinCounter
	SetMsg(*snappipb.PatternFlowTcpCtlFinCounter) PatternFlowTcpCtlFinCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlFinCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlFinCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlFinCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpCtlFinCounter object
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) SetStart(value int32) PatternFlowTcpCtlFinCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpCtlFinCounter object
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) SetStep(value int32) PatternFlowTcpCtlFinCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpCtlFinCounter object
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) SetCount(value int32) PatternFlowTcpCtlFinCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpCtlFinCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlFinCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpCtlFinCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpCtlFinCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowTcpWindowCounter struct {
	obj *snappipb.PatternFlowTcpWindowCounter
}

func NewPatternFlowTcpWindowCounter() PatternFlowTcpWindowCounter {
	obj := patternFlowTcpWindowCounter{obj: &snappipb.PatternFlowTcpWindowCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowTcpWindowCounter) Msg() *snappipb.PatternFlowTcpWindowCounter {
	return obj.obj
}

func (obj *patternFlowTcpWindowCounter) SetMsg(msg *snappipb.PatternFlowTcpWindowCounter) PatternFlowTcpWindowCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowTcpWindowCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowTcpWindowCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpWindowCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpWindowCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowTcpWindowCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpWindowCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowTcpWindowCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowTcpWindowCounter interface {
	Msg() *snappipb.PatternFlowTcpWindowCounter
	SetMsg(*snappipb.PatternFlowTcpWindowCounter) PatternFlowTcpWindowCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowTcpWindowCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowTcpWindowCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowTcpWindowCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpWindowCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpWindowCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowTcpWindowCounter object
//  description is TBD
func (obj *patternFlowTcpWindowCounter) SetStart(value int32) PatternFlowTcpWindowCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpWindowCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpWindowCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowTcpWindowCounter object
//  description is TBD
func (obj *patternFlowTcpWindowCounter) SetStep(value int32) PatternFlowTcpWindowCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpWindowCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpWindowCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowTcpWindowCounter object
//  description is TBD
func (obj *patternFlowTcpWindowCounter) SetCount(value int32) PatternFlowTcpWindowCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowTcpWindowCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpWindowCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowTcpWindowCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowTcpWindowCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowUdpSrcPortCounter struct {
	obj *snappipb.PatternFlowUdpSrcPortCounter
}

func NewPatternFlowUdpSrcPortCounter() PatternFlowUdpSrcPortCounter {
	obj := patternFlowUdpSrcPortCounter{obj: &snappipb.PatternFlowUdpSrcPortCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowUdpSrcPortCounter) Msg() *snappipb.PatternFlowUdpSrcPortCounter {
	return obj.obj
}

func (obj *patternFlowUdpSrcPortCounter) SetMsg(msg *snappipb.PatternFlowUdpSrcPortCounter) PatternFlowUdpSrcPortCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowUdpSrcPortCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowUdpSrcPortCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpSrcPortCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpSrcPortCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpSrcPortCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpSrcPortCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowUdpSrcPortCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowUdpSrcPortCounter interface {
	Msg() *snappipb.PatternFlowUdpSrcPortCounter
	SetMsg(*snappipb.PatternFlowUdpSrcPortCounter) PatternFlowUdpSrcPortCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowUdpSrcPortCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowUdpSrcPortCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowUdpSrcPortCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowUdpSrcPortCounter object
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) SetStart(value int32) PatternFlowUdpSrcPortCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowUdpSrcPortCounter object
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) SetStep(value int32) PatternFlowUdpSrcPortCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowUdpSrcPortCounter object
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) SetCount(value int32) PatternFlowUdpSrcPortCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowUdpSrcPortCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpSrcPortCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpSrcPortCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowUdpSrcPortCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowUdpDstPortCounter struct {
	obj *snappipb.PatternFlowUdpDstPortCounter
}

func NewPatternFlowUdpDstPortCounter() PatternFlowUdpDstPortCounter {
	obj := patternFlowUdpDstPortCounter{obj: &snappipb.PatternFlowUdpDstPortCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowUdpDstPortCounter) Msg() *snappipb.PatternFlowUdpDstPortCounter {
	return obj.obj
}

func (obj *patternFlowUdpDstPortCounter) SetMsg(msg *snappipb.PatternFlowUdpDstPortCounter) PatternFlowUdpDstPortCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowUdpDstPortCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowUdpDstPortCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpDstPortCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpDstPortCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpDstPortCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpDstPortCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowUdpDstPortCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowUdpDstPortCounter interface {
	Msg() *snappipb.PatternFlowUdpDstPortCounter
	SetMsg(*snappipb.PatternFlowUdpDstPortCounter) PatternFlowUdpDstPortCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowUdpDstPortCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowUdpDstPortCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowUdpDstPortCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowUdpDstPortCounter object
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) SetStart(value int32) PatternFlowUdpDstPortCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowUdpDstPortCounter object
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) SetStep(value int32) PatternFlowUdpDstPortCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowUdpDstPortCounter object
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) SetCount(value int32) PatternFlowUdpDstPortCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowUdpDstPortCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpDstPortCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpDstPortCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowUdpDstPortCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowUdpLengthCounter struct {
	obj *snappipb.PatternFlowUdpLengthCounter
}

func NewPatternFlowUdpLengthCounter() PatternFlowUdpLengthCounter {
	obj := patternFlowUdpLengthCounter{obj: &snappipb.PatternFlowUdpLengthCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowUdpLengthCounter) Msg() *snappipb.PatternFlowUdpLengthCounter {
	return obj.obj
}

func (obj *patternFlowUdpLengthCounter) SetMsg(msg *snappipb.PatternFlowUdpLengthCounter) PatternFlowUdpLengthCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowUdpLengthCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowUdpLengthCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpLengthCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowUdpLengthCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpLengthCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowUdpLengthCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowUdpLengthCounter interface {
	Msg() *snappipb.PatternFlowUdpLengthCounter
	SetMsg(*snappipb.PatternFlowUdpLengthCounter) PatternFlowUdpLengthCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowUdpLengthCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowUdpLengthCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowUdpLengthCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowUdpLengthCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowUdpLengthCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowUdpLengthCounter object
//  description is TBD
func (obj *patternFlowUdpLengthCounter) SetStart(value int32) PatternFlowUdpLengthCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowUdpLengthCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowUdpLengthCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowUdpLengthCounter object
//  description is TBD
func (obj *patternFlowUdpLengthCounter) SetStep(value int32) PatternFlowUdpLengthCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowUdpLengthCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowUdpLengthCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowUdpLengthCounter object
//  description is TBD
func (obj *patternFlowUdpLengthCounter) SetCount(value int32) PatternFlowUdpLengthCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowUdpLengthCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpLengthCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowUdpLengthCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowUdpLengthCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGreChecksumPresentCounter struct {
	obj *snappipb.PatternFlowGreChecksumPresentCounter
}

func NewPatternFlowGreChecksumPresentCounter() PatternFlowGreChecksumPresentCounter {
	obj := patternFlowGreChecksumPresentCounter{obj: &snappipb.PatternFlowGreChecksumPresentCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGreChecksumPresentCounter) Msg() *snappipb.PatternFlowGreChecksumPresentCounter {
	return obj.obj
}

func (obj *patternFlowGreChecksumPresentCounter) SetMsg(msg *snappipb.PatternFlowGreChecksumPresentCounter) PatternFlowGreChecksumPresentCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGreChecksumPresentCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGreChecksumPresentCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreChecksumPresentCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksumPresentCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreChecksumPresentCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksumPresentCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGreChecksumPresentCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGreChecksumPresentCounter interface {
	Msg() *snappipb.PatternFlowGreChecksumPresentCounter
	SetMsg(*snappipb.PatternFlowGreChecksumPresentCounter) PatternFlowGreChecksumPresentCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGreChecksumPresentCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGreChecksumPresentCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGreChecksumPresentCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGreChecksumPresentCounter object
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) SetStart(value int32) PatternFlowGreChecksumPresentCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGreChecksumPresentCounter object
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) SetStep(value int32) PatternFlowGreChecksumPresentCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGreChecksumPresentCounter object
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) SetCount(value int32) PatternFlowGreChecksumPresentCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGreChecksumPresentCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreChecksumPresentCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreChecksumPresentCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGreChecksumPresentCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGreReserved0Counter struct {
	obj *snappipb.PatternFlowGreReserved0Counter
}

func NewPatternFlowGreReserved0Counter() PatternFlowGreReserved0Counter {
	obj := patternFlowGreReserved0Counter{obj: &snappipb.PatternFlowGreReserved0Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGreReserved0Counter) Msg() *snappipb.PatternFlowGreReserved0Counter {
	return obj.obj
}

func (obj *patternFlowGreReserved0Counter) SetMsg(msg *snappipb.PatternFlowGreReserved0Counter) PatternFlowGreReserved0Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGreReserved0Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGreReserved0Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreReserved0Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved0Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreReserved0Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved0Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGreReserved0Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGreReserved0Counter interface {
	Msg() *snappipb.PatternFlowGreReserved0Counter
	SetMsg(*snappipb.PatternFlowGreReserved0Counter) PatternFlowGreReserved0Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGreReserved0Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGreReserved0Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGreReserved0Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGreReserved0Counter object
//  description is TBD
func (obj *patternFlowGreReserved0Counter) SetStart(value int32) PatternFlowGreReserved0Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGreReserved0Counter object
//  description is TBD
func (obj *patternFlowGreReserved0Counter) SetStep(value int32) PatternFlowGreReserved0Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGreReserved0Counter object
//  description is TBD
func (obj *patternFlowGreReserved0Counter) SetCount(value int32) PatternFlowGreReserved0Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGreReserved0Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 4095 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreReserved0Counter.Start <= 4095 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 4095 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreReserved0Counter.Step <= 4095 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGreReserved0Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGreVersionCounter struct {
	obj *snappipb.PatternFlowGreVersionCounter
}

func NewPatternFlowGreVersionCounter() PatternFlowGreVersionCounter {
	obj := patternFlowGreVersionCounter{obj: &snappipb.PatternFlowGreVersionCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGreVersionCounter) Msg() *snappipb.PatternFlowGreVersionCounter {
	return obj.obj
}

func (obj *patternFlowGreVersionCounter) SetMsg(msg *snappipb.PatternFlowGreVersionCounter) PatternFlowGreVersionCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGreVersionCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGreVersionCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreVersionCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreVersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreVersionCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreVersionCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGreVersionCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGreVersionCounter interface {
	Msg() *snappipb.PatternFlowGreVersionCounter
	SetMsg(*snappipb.PatternFlowGreVersionCounter) PatternFlowGreVersionCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGreVersionCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGreVersionCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGreVersionCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreVersionCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreVersionCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGreVersionCounter object
//  description is TBD
func (obj *patternFlowGreVersionCounter) SetStart(value int32) PatternFlowGreVersionCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreVersionCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreVersionCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGreVersionCounter object
//  description is TBD
func (obj *patternFlowGreVersionCounter) SetStep(value int32) PatternFlowGreVersionCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreVersionCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreVersionCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGreVersionCounter object
//  description is TBD
func (obj *patternFlowGreVersionCounter) SetCount(value int32) PatternFlowGreVersionCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGreVersionCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreVersionCounter.Start <= 7 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreVersionCounter.Step <= 7 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGreVersionCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGreProtocolCounter struct {
	obj *snappipb.PatternFlowGreProtocolCounter
}

func NewPatternFlowGreProtocolCounter() PatternFlowGreProtocolCounter {
	obj := patternFlowGreProtocolCounter{obj: &snappipb.PatternFlowGreProtocolCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGreProtocolCounter) Msg() *snappipb.PatternFlowGreProtocolCounter {
	return obj.obj
}

func (obj *patternFlowGreProtocolCounter) SetMsg(msg *snappipb.PatternFlowGreProtocolCounter) PatternFlowGreProtocolCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGreProtocolCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGreProtocolCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreProtocolCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreProtocolCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreProtocolCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreProtocolCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGreProtocolCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGreProtocolCounter interface {
	Msg() *snappipb.PatternFlowGreProtocolCounter
	SetMsg(*snappipb.PatternFlowGreProtocolCounter) PatternFlowGreProtocolCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGreProtocolCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGreProtocolCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGreProtocolCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreProtocolCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 2048
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreProtocolCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGreProtocolCounter object
//  description is TBD
func (obj *patternFlowGreProtocolCounter) SetStart(value int32) PatternFlowGreProtocolCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreProtocolCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreProtocolCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGreProtocolCounter object
//  description is TBD
func (obj *patternFlowGreProtocolCounter) SetStep(value int32) PatternFlowGreProtocolCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreProtocolCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreProtocolCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGreProtocolCounter object
//  description is TBD
func (obj *patternFlowGreProtocolCounter) SetCount(value int32) PatternFlowGreProtocolCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGreProtocolCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreProtocolCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreProtocolCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGreProtocolCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(2048)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGreReserved1Counter struct {
	obj *snappipb.PatternFlowGreReserved1Counter
}

func NewPatternFlowGreReserved1Counter() PatternFlowGreReserved1Counter {
	obj := patternFlowGreReserved1Counter{obj: &snappipb.PatternFlowGreReserved1Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGreReserved1Counter) Msg() *snappipb.PatternFlowGreReserved1Counter {
	return obj.obj
}

func (obj *patternFlowGreReserved1Counter) SetMsg(msg *snappipb.PatternFlowGreReserved1Counter) PatternFlowGreReserved1Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGreReserved1Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGreReserved1Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreReserved1Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved1Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGreReserved1Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved1Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGreReserved1Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGreReserved1Counter interface {
	Msg() *snappipb.PatternFlowGreReserved1Counter
	SetMsg(*snappipb.PatternFlowGreReserved1Counter) PatternFlowGreReserved1Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGreReserved1Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGreReserved1Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGreReserved1Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGreReserved1Counter object
//  description is TBD
func (obj *patternFlowGreReserved1Counter) SetStart(value int32) PatternFlowGreReserved1Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGreReserved1Counter object
//  description is TBD
func (obj *patternFlowGreReserved1Counter) SetStep(value int32) PatternFlowGreReserved1Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGreReserved1Counter object
//  description is TBD
func (obj *patternFlowGreReserved1Counter) SetCount(value int32) PatternFlowGreReserved1Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGreReserved1Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreReserved1Counter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGreReserved1Counter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGreReserved1Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1VersionCounter struct {
	obj *snappipb.PatternFlowGtpv1VersionCounter
}

func NewPatternFlowGtpv1VersionCounter() PatternFlowGtpv1VersionCounter {
	obj := patternFlowGtpv1VersionCounter{obj: &snappipb.PatternFlowGtpv1VersionCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1VersionCounter) Msg() *snappipb.PatternFlowGtpv1VersionCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1VersionCounter) SetMsg(msg *snappipb.PatternFlowGtpv1VersionCounter) PatternFlowGtpv1VersionCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1VersionCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1VersionCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1VersionCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1VersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1VersionCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1VersionCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1VersionCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1VersionCounter interface {
	Msg() *snappipb.PatternFlowGtpv1VersionCounter
	SetMsg(*snappipb.PatternFlowGtpv1VersionCounter) PatternFlowGtpv1VersionCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv1VersionCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv1VersionCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1VersionCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 1
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv1VersionCounter object
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) SetStart(value int32) PatternFlowGtpv1VersionCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv1VersionCounter object
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) SetStep(value int32) PatternFlowGtpv1VersionCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1VersionCounter object
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) SetCount(value int32) PatternFlowGtpv1VersionCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1VersionCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1VersionCounter.Start <= 7 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1VersionCounter.Step <= 7 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1VersionCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(1)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1ProtocolTypeCounter struct {
	obj *snappipb.PatternFlowGtpv1ProtocolTypeCounter
}

func NewPatternFlowGtpv1ProtocolTypeCounter() PatternFlowGtpv1ProtocolTypeCounter {
	obj := patternFlowGtpv1ProtocolTypeCounter{obj: &snappipb.PatternFlowGtpv1ProtocolTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) Msg() *snappipb.PatternFlowGtpv1ProtocolTypeCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) SetMsg(msg *snappipb.PatternFlowGtpv1ProtocolTypeCounter) PatternFlowGtpv1ProtocolTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1ProtocolTypeCounter interface {
	Msg() *snappipb.PatternFlowGtpv1ProtocolTypeCounter
	SetMsg(*snappipb.PatternFlowGtpv1ProtocolTypeCounter) PatternFlowGtpv1ProtocolTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv1ProtocolTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv1ProtocolTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1ProtocolTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 1
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv1ProtocolTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) SetStart(value int32) PatternFlowGtpv1ProtocolTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv1ProtocolTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) SetStep(value int32) PatternFlowGtpv1ProtocolTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1ProtocolTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) SetCount(value int32) PatternFlowGtpv1ProtocolTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1ProtocolTypeCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1ProtocolTypeCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1ProtocolTypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(1)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1ReservedCounter struct {
	obj *snappipb.PatternFlowGtpv1ReservedCounter
}

func NewPatternFlowGtpv1ReservedCounter() PatternFlowGtpv1ReservedCounter {
	obj := patternFlowGtpv1ReservedCounter{obj: &snappipb.PatternFlowGtpv1ReservedCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1ReservedCounter) Msg() *snappipb.PatternFlowGtpv1ReservedCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1ReservedCounter) SetMsg(msg *snappipb.PatternFlowGtpv1ReservedCounter) PatternFlowGtpv1ReservedCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1ReservedCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1ReservedCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1ReservedCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ReservedCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1ReservedCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ReservedCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1ReservedCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1ReservedCounter interface {
	Msg() *snappipb.PatternFlowGtpv1ReservedCounter
	SetMsg(*snappipb.PatternFlowGtpv1ReservedCounter) PatternFlowGtpv1ReservedCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv1ReservedCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv1ReservedCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1ReservedCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv1ReservedCounter object
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) SetStart(value int32) PatternFlowGtpv1ReservedCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv1ReservedCounter object
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) SetStep(value int32) PatternFlowGtpv1ReservedCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1ReservedCounter object
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) SetCount(value int32) PatternFlowGtpv1ReservedCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1ReservedCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1ReservedCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1ReservedCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1ReservedCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1EFlagCounter struct {
	obj *snappipb.PatternFlowGtpv1EFlagCounter
}

func NewPatternFlowGtpv1EFlagCounter() PatternFlowGtpv1EFlagCounter {
	obj := patternFlowGtpv1EFlagCounter{obj: &snappipb.PatternFlowGtpv1EFlagCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1EFlagCounter) Msg() *snappipb.PatternFlowGtpv1EFlagCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1EFlagCounter) SetMsg(msg *snappipb.PatternFlowGtpv1EFlagCounter) PatternFlowGtpv1EFlagCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1EFlagCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1EFlagCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1EFlagCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1EFlagCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1EFlagCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1EFlagCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1EFlagCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1EFlagCounter interface {
	Msg() *snappipb.PatternFlowGtpv1EFlagCounter
	SetMsg(*snappipb.PatternFlowGtpv1EFlagCounter) PatternFlowGtpv1EFlagCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv1EFlagCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv1EFlagCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1EFlagCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv1EFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) SetStart(value int32) PatternFlowGtpv1EFlagCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv1EFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) SetStep(value int32) PatternFlowGtpv1EFlagCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1EFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) SetCount(value int32) PatternFlowGtpv1EFlagCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1EFlagCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1EFlagCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1EFlagCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1EFlagCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1SFlagCounter struct {
	obj *snappipb.PatternFlowGtpv1SFlagCounter
}

func NewPatternFlowGtpv1SFlagCounter() PatternFlowGtpv1SFlagCounter {
	obj := patternFlowGtpv1SFlagCounter{obj: &snappipb.PatternFlowGtpv1SFlagCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1SFlagCounter) Msg() *snappipb.PatternFlowGtpv1SFlagCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1SFlagCounter) SetMsg(msg *snappipb.PatternFlowGtpv1SFlagCounter) PatternFlowGtpv1SFlagCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1SFlagCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1SFlagCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1SFlagCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SFlagCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1SFlagCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SFlagCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1SFlagCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1SFlagCounter interface {
	Msg() *snappipb.PatternFlowGtpv1SFlagCounter
	SetMsg(*snappipb.PatternFlowGtpv1SFlagCounter) PatternFlowGtpv1SFlagCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv1SFlagCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv1SFlagCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1SFlagCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv1SFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) SetStart(value int32) PatternFlowGtpv1SFlagCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv1SFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) SetStep(value int32) PatternFlowGtpv1SFlagCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1SFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) SetCount(value int32) PatternFlowGtpv1SFlagCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1SFlagCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1SFlagCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1SFlagCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1SFlagCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1PnFlagCounter struct {
	obj *snappipb.PatternFlowGtpv1PnFlagCounter
}

func NewPatternFlowGtpv1PnFlagCounter() PatternFlowGtpv1PnFlagCounter {
	obj := patternFlowGtpv1PnFlagCounter{obj: &snappipb.PatternFlowGtpv1PnFlagCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1PnFlagCounter) Msg() *snappipb.PatternFlowGtpv1PnFlagCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1PnFlagCounter) SetMsg(msg *snappipb.PatternFlowGtpv1PnFlagCounter) PatternFlowGtpv1PnFlagCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1PnFlagCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1PnFlagCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1PnFlagCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1PnFlagCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1PnFlagCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1PnFlagCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1PnFlagCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1PnFlagCounter interface {
	Msg() *snappipb.PatternFlowGtpv1PnFlagCounter
	SetMsg(*snappipb.PatternFlowGtpv1PnFlagCounter) PatternFlowGtpv1PnFlagCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv1PnFlagCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv1PnFlagCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1PnFlagCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv1PnFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) SetStart(value int32) PatternFlowGtpv1PnFlagCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv1PnFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) SetStep(value int32) PatternFlowGtpv1PnFlagCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1PnFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) SetCount(value int32) PatternFlowGtpv1PnFlagCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1PnFlagCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1PnFlagCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1PnFlagCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1PnFlagCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1MessageTypeCounter struct {
	obj *snappipb.PatternFlowGtpv1MessageTypeCounter
}

func NewPatternFlowGtpv1MessageTypeCounter() PatternFlowGtpv1MessageTypeCounter {
	obj := patternFlowGtpv1MessageTypeCounter{obj: &snappipb.PatternFlowGtpv1MessageTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1MessageTypeCounter) Msg() *snappipb.PatternFlowGtpv1MessageTypeCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1MessageTypeCounter) SetMsg(msg *snappipb.PatternFlowGtpv1MessageTypeCounter) PatternFlowGtpv1MessageTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1MessageTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1MessageTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1MessageTypeCounter interface {
	Msg() *snappipb.PatternFlowGtpv1MessageTypeCounter
	SetMsg(*snappipb.PatternFlowGtpv1MessageTypeCounter) PatternFlowGtpv1MessageTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv1MessageTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv1MessageTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1MessageTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv1MessageTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) SetStart(value int32) PatternFlowGtpv1MessageTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv1MessageTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) SetStep(value int32) PatternFlowGtpv1MessageTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1MessageTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) SetCount(value int32) PatternFlowGtpv1MessageTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1MessageTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1MessageTypeCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1MessageTypeCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1MessageTypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1MessageLengthCounter struct {
	obj *snappipb.PatternFlowGtpv1MessageLengthCounter
}

func NewPatternFlowGtpv1MessageLengthCounter() PatternFlowGtpv1MessageLengthCounter {
	obj := patternFlowGtpv1MessageLengthCounter{obj: &snappipb.PatternFlowGtpv1MessageLengthCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1MessageLengthCounter) Msg() *snappipb.PatternFlowGtpv1MessageLengthCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1MessageLengthCounter) SetMsg(msg *snappipb.PatternFlowGtpv1MessageLengthCounter) PatternFlowGtpv1MessageLengthCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1MessageLengthCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1MessageLengthCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageLengthCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageLengthCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageLengthCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1MessageLengthCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1MessageLengthCounter interface {
	Msg() *snappipb.PatternFlowGtpv1MessageLengthCounter
	SetMsg(*snappipb.PatternFlowGtpv1MessageLengthCounter) PatternFlowGtpv1MessageLengthCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv1MessageLengthCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv1MessageLengthCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1MessageLengthCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv1MessageLengthCounter object
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) SetStart(value int32) PatternFlowGtpv1MessageLengthCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv1MessageLengthCounter object
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) SetStep(value int32) PatternFlowGtpv1MessageLengthCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1MessageLengthCounter object
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) SetCount(value int32) PatternFlowGtpv1MessageLengthCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1MessageLengthCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1MessageLengthCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1MessageLengthCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1MessageLengthCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1TeidCounter struct {
	obj *snappipb.PatternFlowGtpv1TeidCounter
}

func NewPatternFlowGtpv1TeidCounter() PatternFlowGtpv1TeidCounter {
	obj := patternFlowGtpv1TeidCounter{obj: &snappipb.PatternFlowGtpv1TeidCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1TeidCounter) Msg() *snappipb.PatternFlowGtpv1TeidCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1TeidCounter) SetMsg(msg *snappipb.PatternFlowGtpv1TeidCounter) PatternFlowGtpv1TeidCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1TeidCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1TeidCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1TeidCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1TeidCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1TeidCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1TeidCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1TeidCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1TeidCounter interface {
	Msg() *snappipb.PatternFlowGtpv1TeidCounter
	SetMsg(*snappipb.PatternFlowGtpv1TeidCounter) PatternFlowGtpv1TeidCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int64
	SetStart(value int64) PatternFlowGtpv1TeidCounter
	HasStart() bool
	Step() int64
	SetStep(value int64) PatternFlowGtpv1TeidCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1TeidCounter
	HasCount() bool
}

// Start returns a int64
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) Start() int64 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int64
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int64 value in the PatternFlowGtpv1TeidCounter object
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) SetStart(value int64) PatternFlowGtpv1TeidCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int64
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) Step() int64 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int64
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int64 value in the PatternFlowGtpv1TeidCounter object
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) SetStep(value int64) PatternFlowGtpv1TeidCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1TeidCounter object
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) SetCount(value int32) PatternFlowGtpv1TeidCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1TeidCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1TeidCounter.Start <= 4294967295 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1TeidCounter.Step <= 4294967295 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1TeidCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1SquenceNumberCounter struct {
	obj *snappipb.PatternFlowGtpv1SquenceNumberCounter
}

func NewPatternFlowGtpv1SquenceNumberCounter() PatternFlowGtpv1SquenceNumberCounter {
	obj := patternFlowGtpv1SquenceNumberCounter{obj: &snappipb.PatternFlowGtpv1SquenceNumberCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1SquenceNumberCounter) Msg() *snappipb.PatternFlowGtpv1SquenceNumberCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1SquenceNumberCounter) SetMsg(msg *snappipb.PatternFlowGtpv1SquenceNumberCounter) PatternFlowGtpv1SquenceNumberCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1SquenceNumberCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1SquenceNumberCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1SquenceNumberCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SquenceNumberCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1SquenceNumberCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SquenceNumberCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1SquenceNumberCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1SquenceNumberCounter interface {
	Msg() *snappipb.PatternFlowGtpv1SquenceNumberCounter
	SetMsg(*snappipb.PatternFlowGtpv1SquenceNumberCounter) PatternFlowGtpv1SquenceNumberCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv1SquenceNumberCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv1SquenceNumberCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1SquenceNumberCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv1SquenceNumberCounter object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) SetStart(value int32) PatternFlowGtpv1SquenceNumberCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv1SquenceNumberCounter object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) SetStep(value int32) PatternFlowGtpv1SquenceNumberCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1SquenceNumberCounter object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) SetCount(value int32) PatternFlowGtpv1SquenceNumberCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1SquenceNumberCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1SquenceNumberCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1SquenceNumberCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1SquenceNumberCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1NPduNumberCounter struct {
	obj *snappipb.PatternFlowGtpv1NPduNumberCounter
}

func NewPatternFlowGtpv1NPduNumberCounter() PatternFlowGtpv1NPduNumberCounter {
	obj := patternFlowGtpv1NPduNumberCounter{obj: &snappipb.PatternFlowGtpv1NPduNumberCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1NPduNumberCounter) Msg() *snappipb.PatternFlowGtpv1NPduNumberCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1NPduNumberCounter) SetMsg(msg *snappipb.PatternFlowGtpv1NPduNumberCounter) PatternFlowGtpv1NPduNumberCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1NPduNumberCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1NPduNumberCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1NPduNumberCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NPduNumberCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1NPduNumberCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NPduNumberCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1NPduNumberCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1NPduNumberCounter interface {
	Msg() *snappipb.PatternFlowGtpv1NPduNumberCounter
	SetMsg(*snappipb.PatternFlowGtpv1NPduNumberCounter) PatternFlowGtpv1NPduNumberCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv1NPduNumberCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv1NPduNumberCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1NPduNumberCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv1NPduNumberCounter object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) SetStart(value int32) PatternFlowGtpv1NPduNumberCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv1NPduNumberCounter object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) SetStep(value int32) PatternFlowGtpv1NPduNumberCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1NPduNumberCounter object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) SetCount(value int32) PatternFlowGtpv1NPduNumberCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1NPduNumberCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1NPduNumberCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1NPduNumberCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1NPduNumberCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv1NextExtensionHeaderTypeCounter struct {
	obj *snappipb.PatternFlowGtpv1NextExtensionHeaderTypeCounter
}

func NewPatternFlowGtpv1NextExtensionHeaderTypeCounter() PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	obj := patternFlowGtpv1NextExtensionHeaderTypeCounter{obj: &snappipb.PatternFlowGtpv1NextExtensionHeaderTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) Msg() *snappipb.PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) SetMsg(msg *snappipb.PatternFlowGtpv1NextExtensionHeaderTypeCounter) PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv1NextExtensionHeaderTypeCounter interface {
	Msg() *snappipb.PatternFlowGtpv1NextExtensionHeaderTypeCounter
	SetMsg(*snappipb.PatternFlowGtpv1NextExtensionHeaderTypeCounter) PatternFlowGtpv1NextExtensionHeaderTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv1NextExtensionHeaderTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) SetStart(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv1NextExtensionHeaderTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) SetStep(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv1NextExtensionHeaderTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) SetCount(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1NextExtensionHeaderTypeCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv1NextExtensionHeaderTypeCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpExtensionExtensionLength struct {
	obj *snappipb.PatternFlowGtpExtensionExtensionLength
}

func NewPatternFlowGtpExtensionExtensionLength() PatternFlowGtpExtensionExtensionLength {
	obj := patternFlowGtpExtensionExtensionLength{obj: &snappipb.PatternFlowGtpExtensionExtensionLength{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpExtensionExtensionLength) Msg() *snappipb.PatternFlowGtpExtensionExtensionLength {
	return obj.obj
}

func (obj *patternFlowGtpExtensionExtensionLength) SetMsg(msg *snappipb.PatternFlowGtpExtensionExtensionLength) PatternFlowGtpExtensionExtensionLength {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpExtensionExtensionLength) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpExtensionExtensionLength) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionExtensionLength) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionExtensionLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionExtensionLength) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionExtensionLength) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpExtensionExtensionLength) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpExtensionExtensionLength interface {
	Msg() *snappipb.PatternFlowGtpExtensionExtensionLength
	SetMsg(*snappipb.PatternFlowGtpExtensionExtensionLength) PatternFlowGtpExtensionExtensionLength
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpExtensionExtensionLengthChoiceEnum
	SetChoice(value PatternFlowGtpExtensionExtensionLengthChoiceEnum) PatternFlowGtpExtensionExtensionLength
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpExtensionExtensionLength
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpExtensionExtensionLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpExtensionExtensionLength
	HasMetricGroup() bool
	Increment() PatternFlowGtpExtensionExtensionLengthCounter
	SetIncrement(value PatternFlowGtpExtensionExtensionLengthCounter) PatternFlowGtpExtensionExtensionLength
	HasIncrement() bool
	Decrement() PatternFlowGtpExtensionExtensionLengthCounter
	SetDecrement(value PatternFlowGtpExtensionExtensionLengthCounter) PatternFlowGtpExtensionExtensionLength
	HasDecrement() bool
}

type PatternFlowGtpExtensionExtensionLengthChoiceEnum string

var PatternFlowGtpExtensionExtensionLengthChoice = struct {
	VALUE     PatternFlowGtpExtensionExtensionLengthChoiceEnum
	VALUES    PatternFlowGtpExtensionExtensionLengthChoiceEnum
	INCREMENT PatternFlowGtpExtensionExtensionLengthChoiceEnum
	DECREMENT PatternFlowGtpExtensionExtensionLengthChoiceEnum
}{
	VALUE:     PatternFlowGtpExtensionExtensionLengthChoiceEnum("value"),
	VALUES:    PatternFlowGtpExtensionExtensionLengthChoiceEnum("values"),
	INCREMENT: PatternFlowGtpExtensionExtensionLengthChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpExtensionExtensionLengthChoiceEnum("decrement"),
}

func (obj *patternFlowGtpExtensionExtensionLength) Choice() PatternFlowGtpExtensionExtensionLengthChoiceEnum {
	return PatternFlowGtpExtensionExtensionLengthChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpExtensionExtensionLength) SetChoice(value PatternFlowGtpExtensionExtensionLengthChoiceEnum) PatternFlowGtpExtensionExtensionLength {
	intValue, ok := snappipb.PatternFlowGtpExtensionExtensionLength_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpExtensionExtensionLengthChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpExtensionExtensionLength_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpExtensionExtensionLength object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) SetValue(value int32) PatternFlowGtpExtensionExtensionLength {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpExtensionExtensionLengthChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpExtensionExtensionLength object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) SetValues(value []int32) PatternFlowGtpExtensionExtensionLength {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpExtensionExtensionLengthChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionExtensionLength) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionExtensionLength) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpExtensionExtensionLength object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionExtensionLength) SetMetricGroup(value string) PatternFlowGtpExtensionExtensionLength {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpExtensionExtensionLengthCounter
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) Increment() PatternFlowGtpExtensionExtensionLengthCounter {
	obj.SetChoice(PatternFlowGtpExtensionExtensionLengthChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpExtensionExtensionLengthCounter().Msg()
	}
	return &patternFlowGtpExtensionExtensionLengthCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpExtensionExtensionLengthCounter
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpExtensionExtensionLengthCounter value in the PatternFlowGtpExtensionExtensionLength object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) SetIncrement(value PatternFlowGtpExtensionExtensionLengthCounter) PatternFlowGtpExtensionExtensionLength {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpExtensionExtensionLengthChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpExtensionExtensionLengthCounter
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) Decrement() PatternFlowGtpExtensionExtensionLengthCounter {
	obj.SetChoice(PatternFlowGtpExtensionExtensionLengthChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpExtensionExtensionLengthCounter().Msg()
	}
	return &patternFlowGtpExtensionExtensionLengthCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpExtensionExtensionLengthCounter
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpExtensionExtensionLengthCounter value in the PatternFlowGtpExtensionExtensionLength object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) SetDecrement(value PatternFlowGtpExtensionExtensionLengthCounter) PatternFlowGtpExtensionExtensionLength {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpExtensionExtensionLengthChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpExtensionExtensionLength) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionExtensionLength.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionExtensionLength.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpExtensionExtensionLength) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpExtensionExtensionLengthChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpExtensionContents struct {
	obj *snappipb.PatternFlowGtpExtensionContents
}

func NewPatternFlowGtpExtensionContents() PatternFlowGtpExtensionContents {
	obj := patternFlowGtpExtensionContents{obj: &snappipb.PatternFlowGtpExtensionContents{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpExtensionContents) Msg() *snappipb.PatternFlowGtpExtensionContents {
	return obj.obj
}

func (obj *patternFlowGtpExtensionContents) SetMsg(msg *snappipb.PatternFlowGtpExtensionContents) PatternFlowGtpExtensionContents {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpExtensionContents) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpExtensionContents) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionContents) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionContents) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionContents) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionContents) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpExtensionContents) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpExtensionContents interface {
	Msg() *snappipb.PatternFlowGtpExtensionContents
	SetMsg(*snappipb.PatternFlowGtpExtensionContents) PatternFlowGtpExtensionContents
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpExtensionContentsChoiceEnum
	SetChoice(value PatternFlowGtpExtensionContentsChoiceEnum) PatternFlowGtpExtensionContents
	HasChoice() bool
	Value() int64
	SetValue(value int64) PatternFlowGtpExtensionContents
	HasValue() bool
	Values() []int64
	SetValues(value []int64) PatternFlowGtpExtensionContents
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpExtensionContents
	HasMetricGroup() bool
	Increment() PatternFlowGtpExtensionContentsCounter
	SetIncrement(value PatternFlowGtpExtensionContentsCounter) PatternFlowGtpExtensionContents
	HasIncrement() bool
	Decrement() PatternFlowGtpExtensionContentsCounter
	SetDecrement(value PatternFlowGtpExtensionContentsCounter) PatternFlowGtpExtensionContents
	HasDecrement() bool
}

type PatternFlowGtpExtensionContentsChoiceEnum string

var PatternFlowGtpExtensionContentsChoice = struct {
	VALUE     PatternFlowGtpExtensionContentsChoiceEnum
	VALUES    PatternFlowGtpExtensionContentsChoiceEnum
	INCREMENT PatternFlowGtpExtensionContentsChoiceEnum
	DECREMENT PatternFlowGtpExtensionContentsChoiceEnum
}{
	VALUE:     PatternFlowGtpExtensionContentsChoiceEnum("value"),
	VALUES:    PatternFlowGtpExtensionContentsChoiceEnum("values"),
	INCREMENT: PatternFlowGtpExtensionContentsChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpExtensionContentsChoiceEnum("decrement"),
}

func (obj *patternFlowGtpExtensionContents) Choice() PatternFlowGtpExtensionContentsChoiceEnum {
	return PatternFlowGtpExtensionContentsChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpExtensionContents) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpExtensionContents) SetChoice(value PatternFlowGtpExtensionContentsChoiceEnum) PatternFlowGtpExtensionContents {
	intValue, ok := snappipb.PatternFlowGtpExtensionContents_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpExtensionContentsChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpExtensionContents_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int64
//  description is TBD
func (obj *patternFlowGtpExtensionContents) Value() int64 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int64
//  description is TBD
func (obj *patternFlowGtpExtensionContents) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int64 value in the PatternFlowGtpExtensionContents object
//  description is TBD
func (obj *patternFlowGtpExtensionContents) SetValue(value int64) PatternFlowGtpExtensionContents {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpExtensionContentsChoice.VALUE)
	return obj
}

// Values returns a []int64
//  description is TBD
func (obj *patternFlowGtpExtensionContents) Values() []int64 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int64, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int64 value in the PatternFlowGtpExtensionContents object
//  description is TBD
func (obj *patternFlowGtpExtensionContents) SetValues(value []int64) PatternFlowGtpExtensionContents {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int64, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpExtensionContentsChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionContents) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionContents) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpExtensionContents object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionContents) SetMetricGroup(value string) PatternFlowGtpExtensionContents {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpExtensionContentsCounter
//  description is TBD
func (obj *patternFlowGtpExtensionContents) Increment() PatternFlowGtpExtensionContentsCounter {
	obj.SetChoice(PatternFlowGtpExtensionContentsChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpExtensionContentsCounter().Msg()
	}
	return &patternFlowGtpExtensionContentsCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpExtensionContentsCounter
//  description is TBD
func (obj *patternFlowGtpExtensionContents) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpExtensionContentsCounter value in the PatternFlowGtpExtensionContents object
//  description is TBD
func (obj *patternFlowGtpExtensionContents) SetIncrement(value PatternFlowGtpExtensionContentsCounter) PatternFlowGtpExtensionContents {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpExtensionContentsChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpExtensionContentsCounter
//  description is TBD
func (obj *patternFlowGtpExtensionContents) Decrement() PatternFlowGtpExtensionContentsCounter {
	obj.SetChoice(PatternFlowGtpExtensionContentsChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpExtensionContentsCounter().Msg()
	}
	return &patternFlowGtpExtensionContentsCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpExtensionContentsCounter
//  description is TBD
func (obj *patternFlowGtpExtensionContents) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpExtensionContentsCounter value in the PatternFlowGtpExtensionContents object
//  description is TBD
func (obj *patternFlowGtpExtensionContents) SetDecrement(value PatternFlowGtpExtensionContentsCounter) PatternFlowGtpExtensionContents {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpExtensionContentsChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpExtensionContents) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 281474976710655 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionContents.Value <= 281474976710655 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 281474976710655 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionContents.Values <= 281474976710655 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpExtensionContents) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpExtensionContentsChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpExtensionNextExtensionHeader struct {
	obj *snappipb.PatternFlowGtpExtensionNextExtensionHeader
}

func NewPatternFlowGtpExtensionNextExtensionHeader() PatternFlowGtpExtensionNextExtensionHeader {
	obj := patternFlowGtpExtensionNextExtensionHeader{obj: &snappipb.PatternFlowGtpExtensionNextExtensionHeader{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) Msg() *snappipb.PatternFlowGtpExtensionNextExtensionHeader {
	return obj.obj
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) SetMsg(msg *snappipb.PatternFlowGtpExtensionNextExtensionHeader) PatternFlowGtpExtensionNextExtensionHeader {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpExtensionNextExtensionHeader interface {
	Msg() *snappipb.PatternFlowGtpExtensionNextExtensionHeader
	SetMsg(*snappipb.PatternFlowGtpExtensionNextExtensionHeader) PatternFlowGtpExtensionNextExtensionHeader
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum
	SetChoice(value PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum) PatternFlowGtpExtensionNextExtensionHeader
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowGtpExtensionNextExtensionHeader
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowGtpExtensionNextExtensionHeader
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpExtensionNextExtensionHeader
	HasMetricGroup() bool
	Increment() PatternFlowGtpExtensionNextExtensionHeaderCounter
	SetIncrement(value PatternFlowGtpExtensionNextExtensionHeaderCounter) PatternFlowGtpExtensionNextExtensionHeader
	HasIncrement() bool
	Decrement() PatternFlowGtpExtensionNextExtensionHeaderCounter
	SetDecrement(value PatternFlowGtpExtensionNextExtensionHeaderCounter) PatternFlowGtpExtensionNextExtensionHeader
	HasDecrement() bool
}

type PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum string

var PatternFlowGtpExtensionNextExtensionHeaderChoice = struct {
	VALUE     PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum
	VALUES    PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum
	INCREMENT PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum
	DECREMENT PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum
}{
	VALUE:     PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum("value"),
	VALUES:    PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum("values"),
	INCREMENT: PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum("increment"),
	DECREMENT: PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum("decrement"),
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) Choice() PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum {
	return PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) SetChoice(value PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum) PatternFlowGtpExtensionNextExtensionHeader {
	intValue, ok := snappipb.PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowGtpExtensionNextExtensionHeaderChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowGtpExtensionNextExtensionHeader object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) SetValue(value int32) PatternFlowGtpExtensionNextExtensionHeader {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowGtpExtensionNextExtensionHeaderChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowGtpExtensionNextExtensionHeader object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) SetValues(value []int32) PatternFlowGtpExtensionNextExtensionHeader {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowGtpExtensionNextExtensionHeaderChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionNextExtensionHeader) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionNextExtensionHeader) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowGtpExtensionNextExtensionHeader object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionNextExtensionHeader) SetMetricGroup(value string) PatternFlowGtpExtensionNextExtensionHeader {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowGtpExtensionNextExtensionHeaderCounter
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) Increment() PatternFlowGtpExtensionNextExtensionHeaderCounter {
	obj.SetChoice(PatternFlowGtpExtensionNextExtensionHeaderChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowGtpExtensionNextExtensionHeaderCounter().Msg()
	}
	return &patternFlowGtpExtensionNextExtensionHeaderCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowGtpExtensionNextExtensionHeaderCounter
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowGtpExtensionNextExtensionHeaderCounter value in the PatternFlowGtpExtensionNextExtensionHeader object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) SetIncrement(value PatternFlowGtpExtensionNextExtensionHeaderCounter) PatternFlowGtpExtensionNextExtensionHeader {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpExtensionNextExtensionHeaderChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowGtpExtensionNextExtensionHeaderCounter
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) Decrement() PatternFlowGtpExtensionNextExtensionHeaderCounter {
	obj.SetChoice(PatternFlowGtpExtensionNextExtensionHeaderChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowGtpExtensionNextExtensionHeaderCounter().Msg()
	}
	return &patternFlowGtpExtensionNextExtensionHeaderCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowGtpExtensionNextExtensionHeaderCounter
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowGtpExtensionNextExtensionHeaderCounter value in the PatternFlowGtpExtensionNextExtensionHeader object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) SetDecrement(value PatternFlowGtpExtensionNextExtensionHeaderCounter) PatternFlowGtpExtensionNextExtensionHeader {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowGtpExtensionNextExtensionHeaderChoice.DECREMENT)
	return obj
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionNextExtensionHeader.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionNextExtensionHeader.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowGtpExtensionNextExtensionHeaderChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpv2VersionCounter struct {
	obj *snappipb.PatternFlowGtpv2VersionCounter
}

func NewPatternFlowGtpv2VersionCounter() PatternFlowGtpv2VersionCounter {
	obj := patternFlowGtpv2VersionCounter{obj: &snappipb.PatternFlowGtpv2VersionCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2VersionCounter) Msg() *snappipb.PatternFlowGtpv2VersionCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2VersionCounter) SetMsg(msg *snappipb.PatternFlowGtpv2VersionCounter) PatternFlowGtpv2VersionCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2VersionCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2VersionCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2VersionCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2VersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2VersionCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2VersionCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2VersionCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2VersionCounter interface {
	Msg() *snappipb.PatternFlowGtpv2VersionCounter
	SetMsg(*snappipb.PatternFlowGtpv2VersionCounter) PatternFlowGtpv2VersionCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv2VersionCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv2VersionCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv2VersionCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 2
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv2VersionCounter object
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) SetStart(value int32) PatternFlowGtpv2VersionCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv2VersionCounter object
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) SetStep(value int32) PatternFlowGtpv2VersionCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv2VersionCounter object
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) SetCount(value int32) PatternFlowGtpv2VersionCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv2VersionCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2VersionCounter.Start <= 7 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2VersionCounter.Step <= 7 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv2VersionCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(2)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv2PiggybackingFlagCounter struct {
	obj *snappipb.PatternFlowGtpv2PiggybackingFlagCounter
}

func NewPatternFlowGtpv2PiggybackingFlagCounter() PatternFlowGtpv2PiggybackingFlagCounter {
	obj := patternFlowGtpv2PiggybackingFlagCounter{obj: &snappipb.PatternFlowGtpv2PiggybackingFlagCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) Msg() *snappipb.PatternFlowGtpv2PiggybackingFlagCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) SetMsg(msg *snappipb.PatternFlowGtpv2PiggybackingFlagCounter) PatternFlowGtpv2PiggybackingFlagCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2PiggybackingFlagCounter interface {
	Msg() *snappipb.PatternFlowGtpv2PiggybackingFlagCounter
	SetMsg(*snappipb.PatternFlowGtpv2PiggybackingFlagCounter) PatternFlowGtpv2PiggybackingFlagCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv2PiggybackingFlagCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv2PiggybackingFlagCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv2PiggybackingFlagCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv2PiggybackingFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) SetStart(value int32) PatternFlowGtpv2PiggybackingFlagCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv2PiggybackingFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) SetStep(value int32) PatternFlowGtpv2PiggybackingFlagCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv2PiggybackingFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) SetCount(value int32) PatternFlowGtpv2PiggybackingFlagCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2PiggybackingFlagCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2PiggybackingFlagCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv2TeidFlagCounter struct {
	obj *snappipb.PatternFlowGtpv2TeidFlagCounter
}

func NewPatternFlowGtpv2TeidFlagCounter() PatternFlowGtpv2TeidFlagCounter {
	obj := patternFlowGtpv2TeidFlagCounter{obj: &snappipb.PatternFlowGtpv2TeidFlagCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2TeidFlagCounter) Msg() *snappipb.PatternFlowGtpv2TeidFlagCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2TeidFlagCounter) SetMsg(msg *snappipb.PatternFlowGtpv2TeidFlagCounter) PatternFlowGtpv2TeidFlagCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2TeidFlagCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2TeidFlagCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2TeidFlagCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidFlagCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2TeidFlagCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidFlagCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2TeidFlagCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2TeidFlagCounter interface {
	Msg() *snappipb.PatternFlowGtpv2TeidFlagCounter
	SetMsg(*snappipb.PatternFlowGtpv2TeidFlagCounter) PatternFlowGtpv2TeidFlagCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv2TeidFlagCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv2TeidFlagCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv2TeidFlagCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv2TeidFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) SetStart(value int32) PatternFlowGtpv2TeidFlagCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv2TeidFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) SetStep(value int32) PatternFlowGtpv2TeidFlagCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv2TeidFlagCounter object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) SetCount(value int32) PatternFlowGtpv2TeidFlagCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv2TeidFlagCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2TeidFlagCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2TeidFlagCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv2TeidFlagCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv2Spare1Counter struct {
	obj *snappipb.PatternFlowGtpv2Spare1Counter
}

func NewPatternFlowGtpv2Spare1Counter() PatternFlowGtpv2Spare1Counter {
	obj := patternFlowGtpv2Spare1Counter{obj: &snappipb.PatternFlowGtpv2Spare1Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2Spare1Counter) Msg() *snappipb.PatternFlowGtpv2Spare1Counter {
	return obj.obj
}

func (obj *patternFlowGtpv2Spare1Counter) SetMsg(msg *snappipb.PatternFlowGtpv2Spare1Counter) PatternFlowGtpv2Spare1Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2Spare1Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2Spare1Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare1Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare1Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare1Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare1Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare1Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2Spare1Counter interface {
	Msg() *snappipb.PatternFlowGtpv2Spare1Counter
	SetMsg(*snappipb.PatternFlowGtpv2Spare1Counter) PatternFlowGtpv2Spare1Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv2Spare1Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv2Spare1Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv2Spare1Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv2Spare1Counter object
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) SetStart(value int32) PatternFlowGtpv2Spare1Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv2Spare1Counter object
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) SetStep(value int32) PatternFlowGtpv2Spare1Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv2Spare1Counter object
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) SetCount(value int32) PatternFlowGtpv2Spare1Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv2Spare1Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Spare1Counter.Start <= 7 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Spare1Counter.Step <= 7 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv2Spare1Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv2MessageTypeCounter struct {
	obj *snappipb.PatternFlowGtpv2MessageTypeCounter
}

func NewPatternFlowGtpv2MessageTypeCounter() PatternFlowGtpv2MessageTypeCounter {
	obj := patternFlowGtpv2MessageTypeCounter{obj: &snappipb.PatternFlowGtpv2MessageTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2MessageTypeCounter) Msg() *snappipb.PatternFlowGtpv2MessageTypeCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2MessageTypeCounter) SetMsg(msg *snappipb.PatternFlowGtpv2MessageTypeCounter) PatternFlowGtpv2MessageTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2MessageTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2MessageTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2MessageTypeCounter interface {
	Msg() *snappipb.PatternFlowGtpv2MessageTypeCounter
	SetMsg(*snappipb.PatternFlowGtpv2MessageTypeCounter) PatternFlowGtpv2MessageTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv2MessageTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv2MessageTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv2MessageTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv2MessageTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) SetStart(value int32) PatternFlowGtpv2MessageTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv2MessageTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) SetStep(value int32) PatternFlowGtpv2MessageTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv2MessageTypeCounter object
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) SetCount(value int32) PatternFlowGtpv2MessageTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv2MessageTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2MessageTypeCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2MessageTypeCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv2MessageTypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv2MessageLengthCounter struct {
	obj *snappipb.PatternFlowGtpv2MessageLengthCounter
}

func NewPatternFlowGtpv2MessageLengthCounter() PatternFlowGtpv2MessageLengthCounter {
	obj := patternFlowGtpv2MessageLengthCounter{obj: &snappipb.PatternFlowGtpv2MessageLengthCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2MessageLengthCounter) Msg() *snappipb.PatternFlowGtpv2MessageLengthCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2MessageLengthCounter) SetMsg(msg *snappipb.PatternFlowGtpv2MessageLengthCounter) PatternFlowGtpv2MessageLengthCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2MessageLengthCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2MessageLengthCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageLengthCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageLengthCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageLengthCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2MessageLengthCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2MessageLengthCounter interface {
	Msg() *snappipb.PatternFlowGtpv2MessageLengthCounter
	SetMsg(*snappipb.PatternFlowGtpv2MessageLengthCounter) PatternFlowGtpv2MessageLengthCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv2MessageLengthCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv2MessageLengthCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv2MessageLengthCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv2MessageLengthCounter object
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) SetStart(value int32) PatternFlowGtpv2MessageLengthCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv2MessageLengthCounter object
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) SetStep(value int32) PatternFlowGtpv2MessageLengthCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv2MessageLengthCounter object
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) SetCount(value int32) PatternFlowGtpv2MessageLengthCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv2MessageLengthCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2MessageLengthCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2MessageLengthCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv2MessageLengthCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv2TeidCounter struct {
	obj *snappipb.PatternFlowGtpv2TeidCounter
}

func NewPatternFlowGtpv2TeidCounter() PatternFlowGtpv2TeidCounter {
	obj := patternFlowGtpv2TeidCounter{obj: &snappipb.PatternFlowGtpv2TeidCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2TeidCounter) Msg() *snappipb.PatternFlowGtpv2TeidCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2TeidCounter) SetMsg(msg *snappipb.PatternFlowGtpv2TeidCounter) PatternFlowGtpv2TeidCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2TeidCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2TeidCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2TeidCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2TeidCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2TeidCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2TeidCounter interface {
	Msg() *snappipb.PatternFlowGtpv2TeidCounter
	SetMsg(*snappipb.PatternFlowGtpv2TeidCounter) PatternFlowGtpv2TeidCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int64
	SetStart(value int64) PatternFlowGtpv2TeidCounter
	HasStart() bool
	Step() int64
	SetStep(value int64) PatternFlowGtpv2TeidCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv2TeidCounter
	HasCount() bool
}

// Start returns a int64
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) Start() int64 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int64
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int64 value in the PatternFlowGtpv2TeidCounter object
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) SetStart(value int64) PatternFlowGtpv2TeidCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int64
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) Step() int64 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int64
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int64 value in the PatternFlowGtpv2TeidCounter object
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) SetStep(value int64) PatternFlowGtpv2TeidCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv2TeidCounter object
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) SetCount(value int32) PatternFlowGtpv2TeidCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv2TeidCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2TeidCounter.Start <= 4294967295 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2TeidCounter.Step <= 4294967295 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv2TeidCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv2SequenceNumberCounter struct {
	obj *snappipb.PatternFlowGtpv2SequenceNumberCounter
}

func NewPatternFlowGtpv2SequenceNumberCounter() PatternFlowGtpv2SequenceNumberCounter {
	obj := patternFlowGtpv2SequenceNumberCounter{obj: &snappipb.PatternFlowGtpv2SequenceNumberCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2SequenceNumberCounter) Msg() *snappipb.PatternFlowGtpv2SequenceNumberCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2SequenceNumberCounter) SetMsg(msg *snappipb.PatternFlowGtpv2SequenceNumberCounter) PatternFlowGtpv2SequenceNumberCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2SequenceNumberCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2SequenceNumberCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2SequenceNumberCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2SequenceNumberCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2SequenceNumberCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2SequenceNumberCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2SequenceNumberCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2SequenceNumberCounter interface {
	Msg() *snappipb.PatternFlowGtpv2SequenceNumberCounter
	SetMsg(*snappipb.PatternFlowGtpv2SequenceNumberCounter) PatternFlowGtpv2SequenceNumberCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv2SequenceNumberCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv2SequenceNumberCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv2SequenceNumberCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv2SequenceNumberCounter object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) SetStart(value int32) PatternFlowGtpv2SequenceNumberCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv2SequenceNumberCounter object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) SetStep(value int32) PatternFlowGtpv2SequenceNumberCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv2SequenceNumberCounter object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) SetCount(value int32) PatternFlowGtpv2SequenceNumberCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv2SequenceNumberCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2SequenceNumberCounter.Start <= 16777215 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 16777215 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2SequenceNumberCounter.Step <= 16777215 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv2SequenceNumberCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpv2Spare2Counter struct {
	obj *snappipb.PatternFlowGtpv2Spare2Counter
}

func NewPatternFlowGtpv2Spare2Counter() PatternFlowGtpv2Spare2Counter {
	obj := patternFlowGtpv2Spare2Counter{obj: &snappipb.PatternFlowGtpv2Spare2Counter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpv2Spare2Counter) Msg() *snappipb.PatternFlowGtpv2Spare2Counter {
	return obj.obj
}

func (obj *patternFlowGtpv2Spare2Counter) SetMsg(msg *snappipb.PatternFlowGtpv2Spare2Counter) PatternFlowGtpv2Spare2Counter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpv2Spare2Counter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpv2Spare2Counter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare2Counter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare2Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare2Counter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare2Counter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpv2Spare2Counter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpv2Spare2Counter interface {
	Msg() *snappipb.PatternFlowGtpv2Spare2Counter
	SetMsg(*snappipb.PatternFlowGtpv2Spare2Counter) PatternFlowGtpv2Spare2Counter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpv2Spare2Counter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpv2Spare2Counter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpv2Spare2Counter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpv2Spare2Counter object
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) SetStart(value int32) PatternFlowGtpv2Spare2Counter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpv2Spare2Counter object
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) SetStep(value int32) PatternFlowGtpv2Spare2Counter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpv2Spare2Counter object
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) SetCount(value int32) PatternFlowGtpv2Spare2Counter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpv2Spare2Counter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Spare2Counter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpv2Spare2Counter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpv2Spare2Counter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowArpHardwareTypeCounter struct {
	obj *snappipb.PatternFlowArpHardwareTypeCounter
}

func NewPatternFlowArpHardwareTypeCounter() PatternFlowArpHardwareTypeCounter {
	obj := patternFlowArpHardwareTypeCounter{obj: &snappipb.PatternFlowArpHardwareTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpHardwareTypeCounter) Msg() *snappipb.PatternFlowArpHardwareTypeCounter {
	return obj.obj
}

func (obj *patternFlowArpHardwareTypeCounter) SetMsg(msg *snappipb.PatternFlowArpHardwareTypeCounter) PatternFlowArpHardwareTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpHardwareTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpHardwareTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpHardwareTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpHardwareTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpHardwareTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpHardwareTypeCounter interface {
	Msg() *snappipb.PatternFlowArpHardwareTypeCounter
	SetMsg(*snappipb.PatternFlowArpHardwareTypeCounter) PatternFlowArpHardwareTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowArpHardwareTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowArpHardwareTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowArpHardwareTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 1
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowArpHardwareTypeCounter object
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) SetStart(value int32) PatternFlowArpHardwareTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowArpHardwareTypeCounter object
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) SetStep(value int32) PatternFlowArpHardwareTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowArpHardwareTypeCounter object
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) SetCount(value int32) PatternFlowArpHardwareTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowArpHardwareTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpHardwareTypeCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpHardwareTypeCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowArpHardwareTypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(1)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowArpProtocolTypeCounter struct {
	obj *snappipb.PatternFlowArpProtocolTypeCounter
}

func NewPatternFlowArpProtocolTypeCounter() PatternFlowArpProtocolTypeCounter {
	obj := patternFlowArpProtocolTypeCounter{obj: &snappipb.PatternFlowArpProtocolTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpProtocolTypeCounter) Msg() *snappipb.PatternFlowArpProtocolTypeCounter {
	return obj.obj
}

func (obj *patternFlowArpProtocolTypeCounter) SetMsg(msg *snappipb.PatternFlowArpProtocolTypeCounter) PatternFlowArpProtocolTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpProtocolTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpProtocolTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpProtocolTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpProtocolTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpProtocolTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpProtocolTypeCounter interface {
	Msg() *snappipb.PatternFlowArpProtocolTypeCounter
	SetMsg(*snappipb.PatternFlowArpProtocolTypeCounter) PatternFlowArpProtocolTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowArpProtocolTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowArpProtocolTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowArpProtocolTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 2048
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowArpProtocolTypeCounter object
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) SetStart(value int32) PatternFlowArpProtocolTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowArpProtocolTypeCounter object
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) SetStep(value int32) PatternFlowArpProtocolTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowArpProtocolTypeCounter object
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) SetCount(value int32) PatternFlowArpProtocolTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowArpProtocolTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpProtocolTypeCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpProtocolTypeCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowArpProtocolTypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(2048)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowArpHardwareLengthCounter struct {
	obj *snappipb.PatternFlowArpHardwareLengthCounter
}

func NewPatternFlowArpHardwareLengthCounter() PatternFlowArpHardwareLengthCounter {
	obj := patternFlowArpHardwareLengthCounter{obj: &snappipb.PatternFlowArpHardwareLengthCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpHardwareLengthCounter) Msg() *snappipb.PatternFlowArpHardwareLengthCounter {
	return obj.obj
}

func (obj *patternFlowArpHardwareLengthCounter) SetMsg(msg *snappipb.PatternFlowArpHardwareLengthCounter) PatternFlowArpHardwareLengthCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpHardwareLengthCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpHardwareLengthCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpHardwareLengthCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpHardwareLengthCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareLengthCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpHardwareLengthCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpHardwareLengthCounter interface {
	Msg() *snappipb.PatternFlowArpHardwareLengthCounter
	SetMsg(*snappipb.PatternFlowArpHardwareLengthCounter) PatternFlowArpHardwareLengthCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowArpHardwareLengthCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowArpHardwareLengthCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowArpHardwareLengthCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 6
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowArpHardwareLengthCounter object
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) SetStart(value int32) PatternFlowArpHardwareLengthCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowArpHardwareLengthCounter object
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) SetStep(value int32) PatternFlowArpHardwareLengthCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowArpHardwareLengthCounter object
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) SetCount(value int32) PatternFlowArpHardwareLengthCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowArpHardwareLengthCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpHardwareLengthCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpHardwareLengthCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowArpHardwareLengthCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(6)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowArpProtocolLengthCounter struct {
	obj *snappipb.PatternFlowArpProtocolLengthCounter
}

func NewPatternFlowArpProtocolLengthCounter() PatternFlowArpProtocolLengthCounter {
	obj := patternFlowArpProtocolLengthCounter{obj: &snappipb.PatternFlowArpProtocolLengthCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpProtocolLengthCounter) Msg() *snappipb.PatternFlowArpProtocolLengthCounter {
	return obj.obj
}

func (obj *patternFlowArpProtocolLengthCounter) SetMsg(msg *snappipb.PatternFlowArpProtocolLengthCounter) PatternFlowArpProtocolLengthCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpProtocolLengthCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpProtocolLengthCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpProtocolLengthCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpProtocolLengthCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolLengthCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpProtocolLengthCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpProtocolLengthCounter interface {
	Msg() *snappipb.PatternFlowArpProtocolLengthCounter
	SetMsg(*snappipb.PatternFlowArpProtocolLengthCounter) PatternFlowArpProtocolLengthCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowArpProtocolLengthCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowArpProtocolLengthCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowArpProtocolLengthCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 4
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowArpProtocolLengthCounter object
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) SetStart(value int32) PatternFlowArpProtocolLengthCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowArpProtocolLengthCounter object
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) SetStep(value int32) PatternFlowArpProtocolLengthCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowArpProtocolLengthCounter object
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) SetCount(value int32) PatternFlowArpProtocolLengthCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowArpProtocolLengthCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpProtocolLengthCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpProtocolLengthCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowArpProtocolLengthCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(4)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowArpOperationCounter struct {
	obj *snappipb.PatternFlowArpOperationCounter
}

func NewPatternFlowArpOperationCounter() PatternFlowArpOperationCounter {
	obj := patternFlowArpOperationCounter{obj: &snappipb.PatternFlowArpOperationCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpOperationCounter) Msg() *snappipb.PatternFlowArpOperationCounter {
	return obj.obj
}

func (obj *patternFlowArpOperationCounter) SetMsg(msg *snappipb.PatternFlowArpOperationCounter) PatternFlowArpOperationCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpOperationCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpOperationCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpOperationCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpOperationCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpOperationCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpOperationCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpOperationCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpOperationCounter interface {
	Msg() *snappipb.PatternFlowArpOperationCounter
	SetMsg(*snappipb.PatternFlowArpOperationCounter) PatternFlowArpOperationCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowArpOperationCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowArpOperationCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowArpOperationCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpOperationCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 1
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpOperationCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowArpOperationCounter object
//  description is TBD
func (obj *patternFlowArpOperationCounter) SetStart(value int32) PatternFlowArpOperationCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpOperationCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpOperationCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowArpOperationCounter object
//  description is TBD
func (obj *patternFlowArpOperationCounter) SetStep(value int32) PatternFlowArpOperationCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpOperationCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpOperationCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowArpOperationCounter object
//  description is TBD
func (obj *patternFlowArpOperationCounter) SetCount(value int32) PatternFlowArpOperationCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowArpOperationCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpOperationCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowArpOperationCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowArpOperationCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(1)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowArpSenderHardwareAddrCounter struct {
	obj *snappipb.PatternFlowArpSenderHardwareAddrCounter
}

func NewPatternFlowArpSenderHardwareAddrCounter() PatternFlowArpSenderHardwareAddrCounter {
	obj := patternFlowArpSenderHardwareAddrCounter{obj: &snappipb.PatternFlowArpSenderHardwareAddrCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpSenderHardwareAddrCounter) Msg() *snappipb.PatternFlowArpSenderHardwareAddrCounter {
	return obj.obj
}

func (obj *patternFlowArpSenderHardwareAddrCounter) SetMsg(msg *snappipb.PatternFlowArpSenderHardwareAddrCounter) PatternFlowArpSenderHardwareAddrCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpSenderHardwareAddrCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpSenderHardwareAddrCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpSenderHardwareAddrCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderHardwareAddrCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpSenderHardwareAddrCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderHardwareAddrCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpSenderHardwareAddrCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpSenderHardwareAddrCounter interface {
	Msg() *snappipb.PatternFlowArpSenderHardwareAddrCounter
	SetMsg(*snappipb.PatternFlowArpSenderHardwareAddrCounter) PatternFlowArpSenderHardwareAddrCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowArpSenderHardwareAddrCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowArpSenderHardwareAddrCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowArpSenderHardwareAddrCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "00:00:00:00:00:00"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowArpSenderHardwareAddrCounter object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) SetStart(value string) PatternFlowArpSenderHardwareAddrCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "00:00:00:00:00:01"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowArpSenderHardwareAddrCounter object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) SetStep(value string) PatternFlowArpSenderHardwareAddrCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowArpSenderHardwareAddrCounter object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) SetCount(value int32) PatternFlowArpSenderHardwareAddrCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowArpSenderHardwareAddrCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateMac(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowArpSenderHardwareAddrCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateMac(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowArpSenderHardwareAddrCounter"))
		}
	}

}

func (obj *patternFlowArpSenderHardwareAddrCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("00:00:00:00:00:00")
	}
	if obj.obj.Step == nil {
		obj.SetStep("00:00:00:00:00:01")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowArpSenderProtocolAddrCounter struct {
	obj *snappipb.PatternFlowArpSenderProtocolAddrCounter
}

func NewPatternFlowArpSenderProtocolAddrCounter() PatternFlowArpSenderProtocolAddrCounter {
	obj := patternFlowArpSenderProtocolAddrCounter{obj: &snappipb.PatternFlowArpSenderProtocolAddrCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpSenderProtocolAddrCounter) Msg() *snappipb.PatternFlowArpSenderProtocolAddrCounter {
	return obj.obj
}

func (obj *patternFlowArpSenderProtocolAddrCounter) SetMsg(msg *snappipb.PatternFlowArpSenderProtocolAddrCounter) PatternFlowArpSenderProtocolAddrCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpSenderProtocolAddrCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpSenderProtocolAddrCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpSenderProtocolAddrCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderProtocolAddrCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpSenderProtocolAddrCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderProtocolAddrCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpSenderProtocolAddrCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpSenderProtocolAddrCounter interface {
	Msg() *snappipb.PatternFlowArpSenderProtocolAddrCounter
	SetMsg(*snappipb.PatternFlowArpSenderProtocolAddrCounter) PatternFlowArpSenderProtocolAddrCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowArpSenderProtocolAddrCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowArpSenderProtocolAddrCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowArpSenderProtocolAddrCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "0.0.0.0"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowArpSenderProtocolAddrCounter object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) SetStart(value string) PatternFlowArpSenderProtocolAddrCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "0.0.0.1"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowArpSenderProtocolAddrCounter object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) SetStep(value string) PatternFlowArpSenderProtocolAddrCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowArpSenderProtocolAddrCounter object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) SetCount(value int32) PatternFlowArpSenderProtocolAddrCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowArpSenderProtocolAddrCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateIpv4(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowArpSenderProtocolAddrCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateIpv4(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowArpSenderProtocolAddrCounter"))
		}
	}

}

func (obj *patternFlowArpSenderProtocolAddrCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("0.0.0.0")
	}
	if obj.obj.Step == nil {
		obj.SetStep("0.0.0.1")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowArpTargetHardwareAddrCounter struct {
	obj *snappipb.PatternFlowArpTargetHardwareAddrCounter
}

func NewPatternFlowArpTargetHardwareAddrCounter() PatternFlowArpTargetHardwareAddrCounter {
	obj := patternFlowArpTargetHardwareAddrCounter{obj: &snappipb.PatternFlowArpTargetHardwareAddrCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpTargetHardwareAddrCounter) Msg() *snappipb.PatternFlowArpTargetHardwareAddrCounter {
	return obj.obj
}

func (obj *patternFlowArpTargetHardwareAddrCounter) SetMsg(msg *snappipb.PatternFlowArpTargetHardwareAddrCounter) PatternFlowArpTargetHardwareAddrCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpTargetHardwareAddrCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpTargetHardwareAddrCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpTargetHardwareAddrCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetHardwareAddrCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpTargetHardwareAddrCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetHardwareAddrCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpTargetHardwareAddrCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpTargetHardwareAddrCounter interface {
	Msg() *snappipb.PatternFlowArpTargetHardwareAddrCounter
	SetMsg(*snappipb.PatternFlowArpTargetHardwareAddrCounter) PatternFlowArpTargetHardwareAddrCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowArpTargetHardwareAddrCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowArpTargetHardwareAddrCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowArpTargetHardwareAddrCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "00:00:00:00:00:00"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowArpTargetHardwareAddrCounter object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) SetStart(value string) PatternFlowArpTargetHardwareAddrCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "00:00:00:00:00:01"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowArpTargetHardwareAddrCounter object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) SetStep(value string) PatternFlowArpTargetHardwareAddrCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowArpTargetHardwareAddrCounter object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) SetCount(value int32) PatternFlowArpTargetHardwareAddrCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowArpTargetHardwareAddrCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateMac(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowArpTargetHardwareAddrCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateMac(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowArpTargetHardwareAddrCounter"))
		}
	}

}

func (obj *patternFlowArpTargetHardwareAddrCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("00:00:00:00:00:00")
	}
	if obj.obj.Step == nil {
		obj.SetStep("00:00:00:00:00:01")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowArpTargetProtocolAddrCounter struct {
	obj *snappipb.PatternFlowArpTargetProtocolAddrCounter
}

func NewPatternFlowArpTargetProtocolAddrCounter() PatternFlowArpTargetProtocolAddrCounter {
	obj := patternFlowArpTargetProtocolAddrCounter{obj: &snappipb.PatternFlowArpTargetProtocolAddrCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowArpTargetProtocolAddrCounter) Msg() *snappipb.PatternFlowArpTargetProtocolAddrCounter {
	return obj.obj
}

func (obj *patternFlowArpTargetProtocolAddrCounter) SetMsg(msg *snappipb.PatternFlowArpTargetProtocolAddrCounter) PatternFlowArpTargetProtocolAddrCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowArpTargetProtocolAddrCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowArpTargetProtocolAddrCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpTargetProtocolAddrCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetProtocolAddrCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowArpTargetProtocolAddrCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetProtocolAddrCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowArpTargetProtocolAddrCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowArpTargetProtocolAddrCounter interface {
	Msg() *snappipb.PatternFlowArpTargetProtocolAddrCounter
	SetMsg(*snappipb.PatternFlowArpTargetProtocolAddrCounter) PatternFlowArpTargetProtocolAddrCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowArpTargetProtocolAddrCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowArpTargetProtocolAddrCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowArpTargetProtocolAddrCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "0.0.0.0"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowArpTargetProtocolAddrCounter object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) SetStart(value string) PatternFlowArpTargetProtocolAddrCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "0.0.0.1"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowArpTargetProtocolAddrCounter object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) SetStep(value string) PatternFlowArpTargetProtocolAddrCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowArpTargetProtocolAddrCounter object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) SetCount(value int32) PatternFlowArpTargetProtocolAddrCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowArpTargetProtocolAddrCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateIpv4(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowArpTargetProtocolAddrCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateIpv4(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowArpTargetProtocolAddrCounter"))
		}
	}

}

func (obj *patternFlowArpTargetProtocolAddrCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("0.0.0.0")
	}
	if obj.obj.Step == nil {
		obj.SetStep("0.0.0.1")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIcmpEchoType struct {
	obj *snappipb.PatternFlowIcmpEchoType
}

func NewPatternFlowIcmpEchoType() PatternFlowIcmpEchoType {
	obj := patternFlowIcmpEchoType{obj: &snappipb.PatternFlowIcmpEchoType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpEchoType) Msg() *snappipb.PatternFlowIcmpEchoType {
	return obj.obj
}

func (obj *patternFlowIcmpEchoType) SetMsg(msg *snappipb.PatternFlowIcmpEchoType) PatternFlowIcmpEchoType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpEchoType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpEchoType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpEchoType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpEchoType interface {
	Msg() *snappipb.PatternFlowIcmpEchoType
	SetMsg(*snappipb.PatternFlowIcmpEchoType) PatternFlowIcmpEchoType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIcmpEchoTypeChoiceEnum
	SetChoice(value PatternFlowIcmpEchoTypeChoiceEnum) PatternFlowIcmpEchoType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIcmpEchoType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpEchoType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpEchoType
	HasMetricGroup() bool
	Increment() PatternFlowIcmpEchoTypeCounter
	SetIncrement(value PatternFlowIcmpEchoTypeCounter) PatternFlowIcmpEchoType
	HasIncrement() bool
	Decrement() PatternFlowIcmpEchoTypeCounter
	SetDecrement(value PatternFlowIcmpEchoTypeCounter) PatternFlowIcmpEchoType
	HasDecrement() bool
}

type PatternFlowIcmpEchoTypeChoiceEnum string

var PatternFlowIcmpEchoTypeChoice = struct {
	VALUE     PatternFlowIcmpEchoTypeChoiceEnum
	VALUES    PatternFlowIcmpEchoTypeChoiceEnum
	INCREMENT PatternFlowIcmpEchoTypeChoiceEnum
	DECREMENT PatternFlowIcmpEchoTypeChoiceEnum
}{
	VALUE:     PatternFlowIcmpEchoTypeChoiceEnum("value"),
	VALUES:    PatternFlowIcmpEchoTypeChoiceEnum("values"),
	INCREMENT: PatternFlowIcmpEchoTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowIcmpEchoTypeChoiceEnum("decrement"),
}

func (obj *patternFlowIcmpEchoType) Choice() PatternFlowIcmpEchoTypeChoiceEnum {
	return PatternFlowIcmpEchoTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIcmpEchoType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIcmpEchoType) SetChoice(value PatternFlowIcmpEchoTypeChoiceEnum) PatternFlowIcmpEchoType {
	intValue, ok := snappipb.PatternFlowIcmpEchoType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpEchoTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIcmpEchoType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoType) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 8
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIcmpEchoType object
//  description is TBD
func (obj *patternFlowIcmpEchoType) SetValue(value int32) PatternFlowIcmpEchoType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIcmpEchoTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpEchoType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIcmpEchoType object
//  description is TBD
func (obj *patternFlowIcmpEchoType) SetValues(value []int32) PatternFlowIcmpEchoType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIcmpEchoTypeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIcmpEchoType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoType) SetMetricGroup(value string) PatternFlowIcmpEchoType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIcmpEchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoType) Increment() PatternFlowIcmpEchoTypeCounter {
	obj.SetChoice(PatternFlowIcmpEchoTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIcmpEchoTypeCounter().Msg()
	}
	return &patternFlowIcmpEchoTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIcmpEchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIcmpEchoTypeCounter value in the PatternFlowIcmpEchoType object
//  description is TBD
func (obj *patternFlowIcmpEchoType) SetIncrement(value PatternFlowIcmpEchoTypeCounter) PatternFlowIcmpEchoType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpEchoTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIcmpEchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoType) Decrement() PatternFlowIcmpEchoTypeCounter {
	obj.SetChoice(PatternFlowIcmpEchoTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIcmpEchoTypeCounter().Msg()
	}
	return &patternFlowIcmpEchoTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIcmpEchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIcmpEchoTypeCounter value in the PatternFlowIcmpEchoType object
//  description is TBD
func (obj *patternFlowIcmpEchoType) SetDecrement(value PatternFlowIcmpEchoTypeCounter) PatternFlowIcmpEchoType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpEchoTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIcmpEchoType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoType.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoType.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIcmpEchoType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIcmpEchoTypeChoice.VALUE)
		obj.SetValue(8)
	}

}

type patternFlowIcmpEchoCode struct {
	obj *snappipb.PatternFlowIcmpEchoCode
}

func NewPatternFlowIcmpEchoCode() PatternFlowIcmpEchoCode {
	obj := patternFlowIcmpEchoCode{obj: &snappipb.PatternFlowIcmpEchoCode{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpEchoCode) Msg() *snappipb.PatternFlowIcmpEchoCode {
	return obj.obj
}

func (obj *patternFlowIcmpEchoCode) SetMsg(msg *snappipb.PatternFlowIcmpEchoCode) PatternFlowIcmpEchoCode {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpEchoCode) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpEchoCode) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoCode) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoCode) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoCode) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoCode) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpEchoCode) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpEchoCode interface {
	Msg() *snappipb.PatternFlowIcmpEchoCode
	SetMsg(*snappipb.PatternFlowIcmpEchoCode) PatternFlowIcmpEchoCode
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIcmpEchoCodeChoiceEnum
	SetChoice(value PatternFlowIcmpEchoCodeChoiceEnum) PatternFlowIcmpEchoCode
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIcmpEchoCode
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpEchoCode
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpEchoCode
	HasMetricGroup() bool
	Increment() PatternFlowIcmpEchoCodeCounter
	SetIncrement(value PatternFlowIcmpEchoCodeCounter) PatternFlowIcmpEchoCode
	HasIncrement() bool
	Decrement() PatternFlowIcmpEchoCodeCounter
	SetDecrement(value PatternFlowIcmpEchoCodeCounter) PatternFlowIcmpEchoCode
	HasDecrement() bool
}

type PatternFlowIcmpEchoCodeChoiceEnum string

var PatternFlowIcmpEchoCodeChoice = struct {
	VALUE     PatternFlowIcmpEchoCodeChoiceEnum
	VALUES    PatternFlowIcmpEchoCodeChoiceEnum
	INCREMENT PatternFlowIcmpEchoCodeChoiceEnum
	DECREMENT PatternFlowIcmpEchoCodeChoiceEnum
}{
	VALUE:     PatternFlowIcmpEchoCodeChoiceEnum("value"),
	VALUES:    PatternFlowIcmpEchoCodeChoiceEnum("values"),
	INCREMENT: PatternFlowIcmpEchoCodeChoiceEnum("increment"),
	DECREMENT: PatternFlowIcmpEchoCodeChoiceEnum("decrement"),
}

func (obj *patternFlowIcmpEchoCode) Choice() PatternFlowIcmpEchoCodeChoiceEnum {
	return PatternFlowIcmpEchoCodeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIcmpEchoCode) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIcmpEchoCode) SetChoice(value PatternFlowIcmpEchoCodeChoiceEnum) PatternFlowIcmpEchoCode {
	intValue, ok := snappipb.PatternFlowIcmpEchoCode_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpEchoCodeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIcmpEchoCode_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCode) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCode) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIcmpEchoCode object
//  description is TBD
func (obj *patternFlowIcmpEchoCode) SetValue(value int32) PatternFlowIcmpEchoCode {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIcmpEchoCodeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpEchoCode) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIcmpEchoCode object
//  description is TBD
func (obj *patternFlowIcmpEchoCode) SetValues(value []int32) PatternFlowIcmpEchoCode {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIcmpEchoCodeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoCode) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoCode) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIcmpEchoCode object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoCode) SetMetricGroup(value string) PatternFlowIcmpEchoCode {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIcmpEchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoCode) Increment() PatternFlowIcmpEchoCodeCounter {
	obj.SetChoice(PatternFlowIcmpEchoCodeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIcmpEchoCodeCounter().Msg()
	}
	return &patternFlowIcmpEchoCodeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIcmpEchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoCode) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIcmpEchoCodeCounter value in the PatternFlowIcmpEchoCode object
//  description is TBD
func (obj *patternFlowIcmpEchoCode) SetIncrement(value PatternFlowIcmpEchoCodeCounter) PatternFlowIcmpEchoCode {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpEchoCodeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIcmpEchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoCode) Decrement() PatternFlowIcmpEchoCodeCounter {
	obj.SetChoice(PatternFlowIcmpEchoCodeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIcmpEchoCodeCounter().Msg()
	}
	return &patternFlowIcmpEchoCodeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIcmpEchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoCode) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIcmpEchoCodeCounter value in the PatternFlowIcmpEchoCode object
//  description is TBD
func (obj *patternFlowIcmpEchoCode) SetDecrement(value PatternFlowIcmpEchoCodeCounter) PatternFlowIcmpEchoCode {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpEchoCodeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIcmpEchoCode) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoCode.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoCode.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIcmpEchoCode) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIcmpEchoCodeChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIcmpEchoChecksum struct {
	obj *snappipb.PatternFlowIcmpEchoChecksum
}

func NewPatternFlowIcmpEchoChecksum() PatternFlowIcmpEchoChecksum {
	obj := patternFlowIcmpEchoChecksum{obj: &snappipb.PatternFlowIcmpEchoChecksum{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpEchoChecksum) Msg() *snappipb.PatternFlowIcmpEchoChecksum {
	return obj.obj
}

func (obj *patternFlowIcmpEchoChecksum) SetMsg(msg *snappipb.PatternFlowIcmpEchoChecksum) PatternFlowIcmpEchoChecksum {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpEchoChecksum) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpEchoChecksum) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoChecksum) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoChecksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoChecksum) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoChecksum) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpEchoChecksum) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpEchoChecksum interface {
	Msg() *snappipb.PatternFlowIcmpEchoChecksum
	SetMsg(*snappipb.PatternFlowIcmpEchoChecksum) PatternFlowIcmpEchoChecksum
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIcmpEchoChecksumChoiceEnum
	SetChoice(value PatternFlowIcmpEchoChecksumChoiceEnum) PatternFlowIcmpEchoChecksum
	Generated() PatternFlowIcmpEchoChecksumGeneratedEnum
	SetGenerated(value PatternFlowIcmpEchoChecksumGeneratedEnum) PatternFlowIcmpEchoChecksum
	HasGenerated() bool
	Custom() int32
	SetCustom(value int32) PatternFlowIcmpEchoChecksum
	HasCustom() bool
}

type PatternFlowIcmpEchoChecksumChoiceEnum string

var PatternFlowIcmpEchoChecksumChoice = struct {
	GENERATED PatternFlowIcmpEchoChecksumChoiceEnum
	CUSTOM    PatternFlowIcmpEchoChecksumChoiceEnum
}{
	GENERATED: PatternFlowIcmpEchoChecksumChoiceEnum("generated"),
	CUSTOM:    PatternFlowIcmpEchoChecksumChoiceEnum("custom"),
}

func (obj *patternFlowIcmpEchoChecksum) Choice() PatternFlowIcmpEchoChecksumChoiceEnum {
	return PatternFlowIcmpEchoChecksumChoiceEnum(obj.obj.Choice.Enum().String())
}

func (obj *patternFlowIcmpEchoChecksum) SetChoice(value PatternFlowIcmpEchoChecksumChoiceEnum) PatternFlowIcmpEchoChecksum {
	intValue, ok := snappipb.PatternFlowIcmpEchoChecksum_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpEchoChecksumChoiceEnum", string(value)))
		return obj
	}
	obj.obj.Choice = snappipb.PatternFlowIcmpEchoChecksum_Choice_Enum(intValue)

	if string(value) != "generated" {
		obj.obj.Generated = nil
	}

	if string(value) != "custom" {
		obj.obj.Custom = nil
	}

	return obj
}

type PatternFlowIcmpEchoChecksumGeneratedEnum string

var PatternFlowIcmpEchoChecksumGenerated = struct {
	GOOD PatternFlowIcmpEchoChecksumGeneratedEnum
	BAD  PatternFlowIcmpEchoChecksumGeneratedEnum
}{
	GOOD: PatternFlowIcmpEchoChecksumGeneratedEnum("good"),
	BAD:  PatternFlowIcmpEchoChecksumGeneratedEnum("bad"),
}

func (obj *patternFlowIcmpEchoChecksum) Generated() PatternFlowIcmpEchoChecksumGeneratedEnum {
	return PatternFlowIcmpEchoChecksumGeneratedEnum(obj.obj.Generated.Enum().String())
}

// Generated returns a string
//  A system generated checksum value
func (obj *patternFlowIcmpEchoChecksum) HasGenerated() bool {
	return obj.obj.Generated != nil
}

func (obj *patternFlowIcmpEchoChecksum) SetGenerated(value PatternFlowIcmpEchoChecksumGeneratedEnum) PatternFlowIcmpEchoChecksum {
	intValue, ok := snappipb.PatternFlowIcmpEchoChecksum_Generated_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpEchoChecksumGeneratedEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIcmpEchoChecksum_Generated_Enum(intValue)
	obj.obj.Generated = &enumValue

	return obj
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIcmpEchoChecksum) Custom() int32 {

	return *obj.obj.Custom

}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIcmpEchoChecksum) HasCustom() bool {
	return obj.obj.Custom != nil
}

// SetCustom sets the int32 value in the PatternFlowIcmpEchoChecksum object
//  A custom checksum value
func (obj *patternFlowIcmpEchoChecksum) SetCustom(value int32) PatternFlowIcmpEchoChecksum {
	obj.obj.Custom = &value
	obj.SetChoice(PatternFlowIcmpEchoChecksumChoice.CUSTOM)
	return obj
}

func (obj *patternFlowIcmpEchoChecksum) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Choice required
	if obj.obj.Choice.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("Choice is required field on PatternFlowIcmpEchoChecksum and got value %s", obj.obj.Choice.String()))
	}

	if obj.obj.Custom != nil {
		if *obj.obj.Custom < 0 || *obj.obj.Custom > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoChecksum.Custom <= 65535 but Got %d", *obj.obj.Custom))
		}

	}

}

func (obj *patternFlowIcmpEchoChecksum) setDefault() {
	if obj.obj.Choice.Number() == 0 {
		obj.SetChoice(PatternFlowIcmpEchoChecksumChoice.GENERATED)
		if obj.obj.Generated == nil {
			obj.SetGenerated(PatternFlowIcmpEchoChecksumGenerated.GOOD)

		}

	}

}

type patternFlowIcmpEchoIdentifier struct {
	obj *snappipb.PatternFlowIcmpEchoIdentifier
}

func NewPatternFlowIcmpEchoIdentifier() PatternFlowIcmpEchoIdentifier {
	obj := patternFlowIcmpEchoIdentifier{obj: &snappipb.PatternFlowIcmpEchoIdentifier{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpEchoIdentifier) Msg() *snappipb.PatternFlowIcmpEchoIdentifier {
	return obj.obj
}

func (obj *patternFlowIcmpEchoIdentifier) SetMsg(msg *snappipb.PatternFlowIcmpEchoIdentifier) PatternFlowIcmpEchoIdentifier {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpEchoIdentifier) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpEchoIdentifier) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoIdentifier) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoIdentifier) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoIdentifier) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoIdentifier) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpEchoIdentifier) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpEchoIdentifier interface {
	Msg() *snappipb.PatternFlowIcmpEchoIdentifier
	SetMsg(*snappipb.PatternFlowIcmpEchoIdentifier) PatternFlowIcmpEchoIdentifier
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIcmpEchoIdentifierChoiceEnum
	SetChoice(value PatternFlowIcmpEchoIdentifierChoiceEnum) PatternFlowIcmpEchoIdentifier
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIcmpEchoIdentifier
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpEchoIdentifier
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpEchoIdentifier
	HasMetricGroup() bool
	Increment() PatternFlowIcmpEchoIdentifierCounter
	SetIncrement(value PatternFlowIcmpEchoIdentifierCounter) PatternFlowIcmpEchoIdentifier
	HasIncrement() bool
	Decrement() PatternFlowIcmpEchoIdentifierCounter
	SetDecrement(value PatternFlowIcmpEchoIdentifierCounter) PatternFlowIcmpEchoIdentifier
	HasDecrement() bool
}

type PatternFlowIcmpEchoIdentifierChoiceEnum string

var PatternFlowIcmpEchoIdentifierChoice = struct {
	VALUE     PatternFlowIcmpEchoIdentifierChoiceEnum
	VALUES    PatternFlowIcmpEchoIdentifierChoiceEnum
	INCREMENT PatternFlowIcmpEchoIdentifierChoiceEnum
	DECREMENT PatternFlowIcmpEchoIdentifierChoiceEnum
}{
	VALUE:     PatternFlowIcmpEchoIdentifierChoiceEnum("value"),
	VALUES:    PatternFlowIcmpEchoIdentifierChoiceEnum("values"),
	INCREMENT: PatternFlowIcmpEchoIdentifierChoiceEnum("increment"),
	DECREMENT: PatternFlowIcmpEchoIdentifierChoiceEnum("decrement"),
}

func (obj *patternFlowIcmpEchoIdentifier) Choice() PatternFlowIcmpEchoIdentifierChoiceEnum {
	return PatternFlowIcmpEchoIdentifierChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIcmpEchoIdentifier) SetChoice(value PatternFlowIcmpEchoIdentifierChoiceEnum) PatternFlowIcmpEchoIdentifier {
	intValue, ok := snappipb.PatternFlowIcmpEchoIdentifier_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpEchoIdentifierChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIcmpEchoIdentifier_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIcmpEchoIdentifier object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) SetValue(value int32) PatternFlowIcmpEchoIdentifier {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIcmpEchoIdentifierChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIcmpEchoIdentifier object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) SetValues(value []int32) PatternFlowIcmpEchoIdentifier {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIcmpEchoIdentifierChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoIdentifier) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoIdentifier) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIcmpEchoIdentifier object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoIdentifier) SetMetricGroup(value string) PatternFlowIcmpEchoIdentifier {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIcmpEchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) Increment() PatternFlowIcmpEchoIdentifierCounter {
	obj.SetChoice(PatternFlowIcmpEchoIdentifierChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIcmpEchoIdentifierCounter().Msg()
	}
	return &patternFlowIcmpEchoIdentifierCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIcmpEchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIcmpEchoIdentifierCounter value in the PatternFlowIcmpEchoIdentifier object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) SetIncrement(value PatternFlowIcmpEchoIdentifierCounter) PatternFlowIcmpEchoIdentifier {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpEchoIdentifierChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIcmpEchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) Decrement() PatternFlowIcmpEchoIdentifierCounter {
	obj.SetChoice(PatternFlowIcmpEchoIdentifierChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIcmpEchoIdentifierCounter().Msg()
	}
	return &patternFlowIcmpEchoIdentifierCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIcmpEchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIcmpEchoIdentifierCounter value in the PatternFlowIcmpEchoIdentifier object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) SetDecrement(value PatternFlowIcmpEchoIdentifierCounter) PatternFlowIcmpEchoIdentifier {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpEchoIdentifierChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIcmpEchoIdentifier) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoIdentifier.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoIdentifier.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIcmpEchoIdentifier) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIcmpEchoIdentifierChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIcmpEchoSequenceNumber struct {
	obj *snappipb.PatternFlowIcmpEchoSequenceNumber
}

func NewPatternFlowIcmpEchoSequenceNumber() PatternFlowIcmpEchoSequenceNumber {
	obj := patternFlowIcmpEchoSequenceNumber{obj: &snappipb.PatternFlowIcmpEchoSequenceNumber{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpEchoSequenceNumber) Msg() *snappipb.PatternFlowIcmpEchoSequenceNumber {
	return obj.obj
}

func (obj *patternFlowIcmpEchoSequenceNumber) SetMsg(msg *snappipb.PatternFlowIcmpEchoSequenceNumber) PatternFlowIcmpEchoSequenceNumber {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpEchoSequenceNumber) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpEchoSequenceNumber) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoSequenceNumber) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoSequenceNumber) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoSequenceNumber) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoSequenceNumber) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpEchoSequenceNumber) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpEchoSequenceNumber interface {
	Msg() *snappipb.PatternFlowIcmpEchoSequenceNumber
	SetMsg(*snappipb.PatternFlowIcmpEchoSequenceNumber) PatternFlowIcmpEchoSequenceNumber
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIcmpEchoSequenceNumberChoiceEnum
	SetChoice(value PatternFlowIcmpEchoSequenceNumberChoiceEnum) PatternFlowIcmpEchoSequenceNumber
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIcmpEchoSequenceNumber
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpEchoSequenceNumber
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpEchoSequenceNumber
	HasMetricGroup() bool
	Increment() PatternFlowIcmpEchoSequenceNumberCounter
	SetIncrement(value PatternFlowIcmpEchoSequenceNumberCounter) PatternFlowIcmpEchoSequenceNumber
	HasIncrement() bool
	Decrement() PatternFlowIcmpEchoSequenceNumberCounter
	SetDecrement(value PatternFlowIcmpEchoSequenceNumberCounter) PatternFlowIcmpEchoSequenceNumber
	HasDecrement() bool
}

type PatternFlowIcmpEchoSequenceNumberChoiceEnum string

var PatternFlowIcmpEchoSequenceNumberChoice = struct {
	VALUE     PatternFlowIcmpEchoSequenceNumberChoiceEnum
	VALUES    PatternFlowIcmpEchoSequenceNumberChoiceEnum
	INCREMENT PatternFlowIcmpEchoSequenceNumberChoiceEnum
	DECREMENT PatternFlowIcmpEchoSequenceNumberChoiceEnum
}{
	VALUE:     PatternFlowIcmpEchoSequenceNumberChoiceEnum("value"),
	VALUES:    PatternFlowIcmpEchoSequenceNumberChoiceEnum("values"),
	INCREMENT: PatternFlowIcmpEchoSequenceNumberChoiceEnum("increment"),
	DECREMENT: PatternFlowIcmpEchoSequenceNumberChoiceEnum("decrement"),
}

func (obj *patternFlowIcmpEchoSequenceNumber) Choice() PatternFlowIcmpEchoSequenceNumberChoiceEnum {
	return PatternFlowIcmpEchoSequenceNumberChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIcmpEchoSequenceNumber) SetChoice(value PatternFlowIcmpEchoSequenceNumberChoiceEnum) PatternFlowIcmpEchoSequenceNumber {
	intValue, ok := snappipb.PatternFlowIcmpEchoSequenceNumber_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpEchoSequenceNumberChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIcmpEchoSequenceNumber_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIcmpEchoSequenceNumber object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) SetValue(value int32) PatternFlowIcmpEchoSequenceNumber {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIcmpEchoSequenceNumberChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIcmpEchoSequenceNumber object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) SetValues(value []int32) PatternFlowIcmpEchoSequenceNumber {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIcmpEchoSequenceNumberChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoSequenceNumber) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoSequenceNumber) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIcmpEchoSequenceNumber object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoSequenceNumber) SetMetricGroup(value string) PatternFlowIcmpEchoSequenceNumber {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIcmpEchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) Increment() PatternFlowIcmpEchoSequenceNumberCounter {
	obj.SetChoice(PatternFlowIcmpEchoSequenceNumberChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIcmpEchoSequenceNumberCounter().Msg()
	}
	return &patternFlowIcmpEchoSequenceNumberCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIcmpEchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIcmpEchoSequenceNumberCounter value in the PatternFlowIcmpEchoSequenceNumber object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) SetIncrement(value PatternFlowIcmpEchoSequenceNumberCounter) PatternFlowIcmpEchoSequenceNumber {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpEchoSequenceNumberChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIcmpEchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) Decrement() PatternFlowIcmpEchoSequenceNumberCounter {
	obj.SetChoice(PatternFlowIcmpEchoSequenceNumberChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIcmpEchoSequenceNumberCounter().Msg()
	}
	return &patternFlowIcmpEchoSequenceNumberCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIcmpEchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIcmpEchoSequenceNumberCounter value in the PatternFlowIcmpEchoSequenceNumber object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) SetDecrement(value PatternFlowIcmpEchoSequenceNumberCounter) PatternFlowIcmpEchoSequenceNumber {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpEchoSequenceNumberChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIcmpEchoSequenceNumber) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoSequenceNumber.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoSequenceNumber.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIcmpEchoSequenceNumber) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIcmpEchoSequenceNumberChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIcmpv6EchoType struct {
	obj *snappipb.PatternFlowIcmpv6EchoType
}

func NewPatternFlowIcmpv6EchoType() PatternFlowIcmpv6EchoType {
	obj := patternFlowIcmpv6EchoType{obj: &snappipb.PatternFlowIcmpv6EchoType{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpv6EchoType) Msg() *snappipb.PatternFlowIcmpv6EchoType {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoType) SetMsg(msg *snappipb.PatternFlowIcmpv6EchoType) PatternFlowIcmpv6EchoType {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpv6EchoType) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpv6EchoType) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoType) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoType) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoType) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoType) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpv6EchoType interface {
	Msg() *snappipb.PatternFlowIcmpv6EchoType
	SetMsg(*snappipb.PatternFlowIcmpv6EchoType) PatternFlowIcmpv6EchoType
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIcmpv6EchoTypeChoiceEnum
	SetChoice(value PatternFlowIcmpv6EchoTypeChoiceEnum) PatternFlowIcmpv6EchoType
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIcmpv6EchoType
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpv6EchoType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpv6EchoType
	HasMetricGroup() bool
	Increment() PatternFlowIcmpv6EchoTypeCounter
	SetIncrement(value PatternFlowIcmpv6EchoTypeCounter) PatternFlowIcmpv6EchoType
	HasIncrement() bool
	Decrement() PatternFlowIcmpv6EchoTypeCounter
	SetDecrement(value PatternFlowIcmpv6EchoTypeCounter) PatternFlowIcmpv6EchoType
	HasDecrement() bool
}

type PatternFlowIcmpv6EchoTypeChoiceEnum string

var PatternFlowIcmpv6EchoTypeChoice = struct {
	VALUE     PatternFlowIcmpv6EchoTypeChoiceEnum
	VALUES    PatternFlowIcmpv6EchoTypeChoiceEnum
	INCREMENT PatternFlowIcmpv6EchoTypeChoiceEnum
	DECREMENT PatternFlowIcmpv6EchoTypeChoiceEnum
}{
	VALUE:     PatternFlowIcmpv6EchoTypeChoiceEnum("value"),
	VALUES:    PatternFlowIcmpv6EchoTypeChoiceEnum("values"),
	INCREMENT: PatternFlowIcmpv6EchoTypeChoiceEnum("increment"),
	DECREMENT: PatternFlowIcmpv6EchoTypeChoiceEnum("decrement"),
}

func (obj *patternFlowIcmpv6EchoType) Choice() PatternFlowIcmpv6EchoTypeChoiceEnum {
	return PatternFlowIcmpv6EchoTypeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIcmpv6EchoType) SetChoice(value PatternFlowIcmpv6EchoTypeChoiceEnum) PatternFlowIcmpv6EchoType {
	intValue, ok := snappipb.PatternFlowIcmpv6EchoType_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpv6EchoTypeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIcmpv6EchoType_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 128
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIcmpv6EchoType object
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) SetValue(value int32) PatternFlowIcmpv6EchoType {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIcmpv6EchoTypeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIcmpv6EchoType object
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) SetValues(value []int32) PatternFlowIcmpv6EchoType {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIcmpv6EchoTypeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoType) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoType) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIcmpv6EchoType object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoType) SetMetricGroup(value string) PatternFlowIcmpv6EchoType {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIcmpv6EchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) Increment() PatternFlowIcmpv6EchoTypeCounter {
	obj.SetChoice(PatternFlowIcmpv6EchoTypeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIcmpv6EchoTypeCounter().Msg()
	}
	return &patternFlowIcmpv6EchoTypeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIcmpv6EchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIcmpv6EchoTypeCounter value in the PatternFlowIcmpv6EchoType object
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) SetIncrement(value PatternFlowIcmpv6EchoTypeCounter) PatternFlowIcmpv6EchoType {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpv6EchoTypeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIcmpv6EchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) Decrement() PatternFlowIcmpv6EchoTypeCounter {
	obj.SetChoice(PatternFlowIcmpv6EchoTypeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIcmpv6EchoTypeCounter().Msg()
	}
	return &patternFlowIcmpv6EchoTypeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIcmpv6EchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIcmpv6EchoTypeCounter value in the PatternFlowIcmpv6EchoType object
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) SetDecrement(value PatternFlowIcmpv6EchoTypeCounter) PatternFlowIcmpv6EchoType {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpv6EchoTypeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIcmpv6EchoType) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoType.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoType.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIcmpv6EchoType) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIcmpv6EchoTypeChoice.VALUE)
		obj.SetValue(128)
	}

}

type patternFlowIcmpv6EchoCode struct {
	obj *snappipb.PatternFlowIcmpv6EchoCode
}

func NewPatternFlowIcmpv6EchoCode() PatternFlowIcmpv6EchoCode {
	obj := patternFlowIcmpv6EchoCode{obj: &snappipb.PatternFlowIcmpv6EchoCode{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpv6EchoCode) Msg() *snappipb.PatternFlowIcmpv6EchoCode {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoCode) SetMsg(msg *snappipb.PatternFlowIcmpv6EchoCode) PatternFlowIcmpv6EchoCode {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpv6EchoCode) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpv6EchoCode) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoCode) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoCode) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoCode) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoCode) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoCode) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpv6EchoCode interface {
	Msg() *snappipb.PatternFlowIcmpv6EchoCode
	SetMsg(*snappipb.PatternFlowIcmpv6EchoCode) PatternFlowIcmpv6EchoCode
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIcmpv6EchoCodeChoiceEnum
	SetChoice(value PatternFlowIcmpv6EchoCodeChoiceEnum) PatternFlowIcmpv6EchoCode
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIcmpv6EchoCode
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpv6EchoCode
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpv6EchoCode
	HasMetricGroup() bool
	Increment() PatternFlowIcmpv6EchoCodeCounter
	SetIncrement(value PatternFlowIcmpv6EchoCodeCounter) PatternFlowIcmpv6EchoCode
	HasIncrement() bool
	Decrement() PatternFlowIcmpv6EchoCodeCounter
	SetDecrement(value PatternFlowIcmpv6EchoCodeCounter) PatternFlowIcmpv6EchoCode
	HasDecrement() bool
}

type PatternFlowIcmpv6EchoCodeChoiceEnum string

var PatternFlowIcmpv6EchoCodeChoice = struct {
	VALUE     PatternFlowIcmpv6EchoCodeChoiceEnum
	VALUES    PatternFlowIcmpv6EchoCodeChoiceEnum
	INCREMENT PatternFlowIcmpv6EchoCodeChoiceEnum
	DECREMENT PatternFlowIcmpv6EchoCodeChoiceEnum
}{
	VALUE:     PatternFlowIcmpv6EchoCodeChoiceEnum("value"),
	VALUES:    PatternFlowIcmpv6EchoCodeChoiceEnum("values"),
	INCREMENT: PatternFlowIcmpv6EchoCodeChoiceEnum("increment"),
	DECREMENT: PatternFlowIcmpv6EchoCodeChoiceEnum("decrement"),
}

func (obj *patternFlowIcmpv6EchoCode) Choice() PatternFlowIcmpv6EchoCodeChoiceEnum {
	return PatternFlowIcmpv6EchoCodeChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIcmpv6EchoCode) SetChoice(value PatternFlowIcmpv6EchoCodeChoiceEnum) PatternFlowIcmpv6EchoCode {
	intValue, ok := snappipb.PatternFlowIcmpv6EchoCode_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpv6EchoCodeChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIcmpv6EchoCode_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIcmpv6EchoCode object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) SetValue(value int32) PatternFlowIcmpv6EchoCode {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIcmpv6EchoCodeChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIcmpv6EchoCode object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) SetValues(value []int32) PatternFlowIcmpv6EchoCode {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIcmpv6EchoCodeChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoCode) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoCode) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIcmpv6EchoCode object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoCode) SetMetricGroup(value string) PatternFlowIcmpv6EchoCode {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIcmpv6EchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) Increment() PatternFlowIcmpv6EchoCodeCounter {
	obj.SetChoice(PatternFlowIcmpv6EchoCodeChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIcmpv6EchoCodeCounter().Msg()
	}
	return &patternFlowIcmpv6EchoCodeCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIcmpv6EchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIcmpv6EchoCodeCounter value in the PatternFlowIcmpv6EchoCode object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) SetIncrement(value PatternFlowIcmpv6EchoCodeCounter) PatternFlowIcmpv6EchoCode {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpv6EchoCodeChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIcmpv6EchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) Decrement() PatternFlowIcmpv6EchoCodeCounter {
	obj.SetChoice(PatternFlowIcmpv6EchoCodeChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIcmpv6EchoCodeCounter().Msg()
	}
	return &patternFlowIcmpv6EchoCodeCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIcmpv6EchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIcmpv6EchoCodeCounter value in the PatternFlowIcmpv6EchoCode object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) SetDecrement(value PatternFlowIcmpv6EchoCodeCounter) PatternFlowIcmpv6EchoCode {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpv6EchoCodeChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIcmpv6EchoCode) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoCode.Value <= 255 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoCode.Values <= 255 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIcmpv6EchoCode) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIcmpv6EchoCodeChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIcmpv6EchoIdentifier struct {
	obj *snappipb.PatternFlowIcmpv6EchoIdentifier
}

func NewPatternFlowIcmpv6EchoIdentifier() PatternFlowIcmpv6EchoIdentifier {
	obj := patternFlowIcmpv6EchoIdentifier{obj: &snappipb.PatternFlowIcmpv6EchoIdentifier{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpv6EchoIdentifier) Msg() *snappipb.PatternFlowIcmpv6EchoIdentifier {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoIdentifier) SetMsg(msg *snappipb.PatternFlowIcmpv6EchoIdentifier) PatternFlowIcmpv6EchoIdentifier {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpv6EchoIdentifier) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpv6EchoIdentifier) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoIdentifier) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoIdentifier) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoIdentifier) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoIdentifier) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoIdentifier) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpv6EchoIdentifier interface {
	Msg() *snappipb.PatternFlowIcmpv6EchoIdentifier
	SetMsg(*snappipb.PatternFlowIcmpv6EchoIdentifier) PatternFlowIcmpv6EchoIdentifier
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIcmpv6EchoIdentifierChoiceEnum
	SetChoice(value PatternFlowIcmpv6EchoIdentifierChoiceEnum) PatternFlowIcmpv6EchoIdentifier
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIcmpv6EchoIdentifier
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpv6EchoIdentifier
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpv6EchoIdentifier
	HasMetricGroup() bool
	Increment() PatternFlowIcmpv6EchoIdentifierCounter
	SetIncrement(value PatternFlowIcmpv6EchoIdentifierCounter) PatternFlowIcmpv6EchoIdentifier
	HasIncrement() bool
	Decrement() PatternFlowIcmpv6EchoIdentifierCounter
	SetDecrement(value PatternFlowIcmpv6EchoIdentifierCounter) PatternFlowIcmpv6EchoIdentifier
	HasDecrement() bool
}

type PatternFlowIcmpv6EchoIdentifierChoiceEnum string

var PatternFlowIcmpv6EchoIdentifierChoice = struct {
	VALUE     PatternFlowIcmpv6EchoIdentifierChoiceEnum
	VALUES    PatternFlowIcmpv6EchoIdentifierChoiceEnum
	INCREMENT PatternFlowIcmpv6EchoIdentifierChoiceEnum
	DECREMENT PatternFlowIcmpv6EchoIdentifierChoiceEnum
}{
	VALUE:     PatternFlowIcmpv6EchoIdentifierChoiceEnum("value"),
	VALUES:    PatternFlowIcmpv6EchoIdentifierChoiceEnum("values"),
	INCREMENT: PatternFlowIcmpv6EchoIdentifierChoiceEnum("increment"),
	DECREMENT: PatternFlowIcmpv6EchoIdentifierChoiceEnum("decrement"),
}

func (obj *patternFlowIcmpv6EchoIdentifier) Choice() PatternFlowIcmpv6EchoIdentifierChoiceEnum {
	return PatternFlowIcmpv6EchoIdentifierChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIcmpv6EchoIdentifier) SetChoice(value PatternFlowIcmpv6EchoIdentifierChoiceEnum) PatternFlowIcmpv6EchoIdentifier {
	intValue, ok := snappipb.PatternFlowIcmpv6EchoIdentifier_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpv6EchoIdentifierChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIcmpv6EchoIdentifier_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIcmpv6EchoIdentifier object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) SetValue(value int32) PatternFlowIcmpv6EchoIdentifier {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIcmpv6EchoIdentifierChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIcmpv6EchoIdentifier object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) SetValues(value []int32) PatternFlowIcmpv6EchoIdentifier {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIcmpv6EchoIdentifierChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoIdentifier) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoIdentifier) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIcmpv6EchoIdentifier object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoIdentifier) SetMetricGroup(value string) PatternFlowIcmpv6EchoIdentifier {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIcmpv6EchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) Increment() PatternFlowIcmpv6EchoIdentifierCounter {
	obj.SetChoice(PatternFlowIcmpv6EchoIdentifierChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIcmpv6EchoIdentifierCounter().Msg()
	}
	return &patternFlowIcmpv6EchoIdentifierCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIcmpv6EchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIcmpv6EchoIdentifierCounter value in the PatternFlowIcmpv6EchoIdentifier object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) SetIncrement(value PatternFlowIcmpv6EchoIdentifierCounter) PatternFlowIcmpv6EchoIdentifier {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpv6EchoIdentifierChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIcmpv6EchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) Decrement() PatternFlowIcmpv6EchoIdentifierCounter {
	obj.SetChoice(PatternFlowIcmpv6EchoIdentifierChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIcmpv6EchoIdentifierCounter().Msg()
	}
	return &patternFlowIcmpv6EchoIdentifierCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIcmpv6EchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIcmpv6EchoIdentifierCounter value in the PatternFlowIcmpv6EchoIdentifier object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) SetDecrement(value PatternFlowIcmpv6EchoIdentifierCounter) PatternFlowIcmpv6EchoIdentifier {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpv6EchoIdentifierChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIcmpv6EchoIdentifier) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoIdentifier.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoIdentifier.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIcmpv6EchoIdentifier) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIcmpv6EchoIdentifierChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIcmpv6EchoSequenceNumber struct {
	obj *snappipb.PatternFlowIcmpv6EchoSequenceNumber
}

func NewPatternFlowIcmpv6EchoSequenceNumber() PatternFlowIcmpv6EchoSequenceNumber {
	obj := patternFlowIcmpv6EchoSequenceNumber{obj: &snappipb.PatternFlowIcmpv6EchoSequenceNumber{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) Msg() *snappipb.PatternFlowIcmpv6EchoSequenceNumber {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) SetMsg(msg *snappipb.PatternFlowIcmpv6EchoSequenceNumber) PatternFlowIcmpv6EchoSequenceNumber {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpv6EchoSequenceNumber interface {
	Msg() *snappipb.PatternFlowIcmpv6EchoSequenceNumber
	SetMsg(*snappipb.PatternFlowIcmpv6EchoSequenceNumber) PatternFlowIcmpv6EchoSequenceNumber
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIcmpv6EchoSequenceNumberChoiceEnum
	SetChoice(value PatternFlowIcmpv6EchoSequenceNumberChoiceEnum) PatternFlowIcmpv6EchoSequenceNumber
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIcmpv6EchoSequenceNumber
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpv6EchoSequenceNumber
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpv6EchoSequenceNumber
	HasMetricGroup() bool
	Increment() PatternFlowIcmpv6EchoSequenceNumberCounter
	SetIncrement(value PatternFlowIcmpv6EchoSequenceNumberCounter) PatternFlowIcmpv6EchoSequenceNumber
	HasIncrement() bool
	Decrement() PatternFlowIcmpv6EchoSequenceNumberCounter
	SetDecrement(value PatternFlowIcmpv6EchoSequenceNumberCounter) PatternFlowIcmpv6EchoSequenceNumber
	HasDecrement() bool
}

type PatternFlowIcmpv6EchoSequenceNumberChoiceEnum string

var PatternFlowIcmpv6EchoSequenceNumberChoice = struct {
	VALUE     PatternFlowIcmpv6EchoSequenceNumberChoiceEnum
	VALUES    PatternFlowIcmpv6EchoSequenceNumberChoiceEnum
	INCREMENT PatternFlowIcmpv6EchoSequenceNumberChoiceEnum
	DECREMENT PatternFlowIcmpv6EchoSequenceNumberChoiceEnum
}{
	VALUE:     PatternFlowIcmpv6EchoSequenceNumberChoiceEnum("value"),
	VALUES:    PatternFlowIcmpv6EchoSequenceNumberChoiceEnum("values"),
	INCREMENT: PatternFlowIcmpv6EchoSequenceNumberChoiceEnum("increment"),
	DECREMENT: PatternFlowIcmpv6EchoSequenceNumberChoiceEnum("decrement"),
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) Choice() PatternFlowIcmpv6EchoSequenceNumberChoiceEnum {
	return PatternFlowIcmpv6EchoSequenceNumberChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) SetChoice(value PatternFlowIcmpv6EchoSequenceNumberChoiceEnum) PatternFlowIcmpv6EchoSequenceNumber {
	intValue, ok := snappipb.PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpv6EchoSequenceNumberChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIcmpv6EchoSequenceNumber object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) SetValue(value int32) PatternFlowIcmpv6EchoSequenceNumber {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIcmpv6EchoSequenceNumberChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIcmpv6EchoSequenceNumber object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) SetValues(value []int32) PatternFlowIcmpv6EchoSequenceNumber {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIcmpv6EchoSequenceNumberChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoSequenceNumber) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoSequenceNumber) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIcmpv6EchoSequenceNumber object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoSequenceNumber) SetMetricGroup(value string) PatternFlowIcmpv6EchoSequenceNumber {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIcmpv6EchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) Increment() PatternFlowIcmpv6EchoSequenceNumberCounter {
	obj.SetChoice(PatternFlowIcmpv6EchoSequenceNumberChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIcmpv6EchoSequenceNumberCounter().Msg()
	}
	return &patternFlowIcmpv6EchoSequenceNumberCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIcmpv6EchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIcmpv6EchoSequenceNumberCounter value in the PatternFlowIcmpv6EchoSequenceNumber object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) SetIncrement(value PatternFlowIcmpv6EchoSequenceNumberCounter) PatternFlowIcmpv6EchoSequenceNumber {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpv6EchoSequenceNumberChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIcmpv6EchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) Decrement() PatternFlowIcmpv6EchoSequenceNumberCounter {
	obj.SetChoice(PatternFlowIcmpv6EchoSequenceNumberChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIcmpv6EchoSequenceNumberCounter().Msg()
	}
	return &patternFlowIcmpv6EchoSequenceNumberCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIcmpv6EchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIcmpv6EchoSequenceNumberCounter value in the PatternFlowIcmpv6EchoSequenceNumber object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) SetDecrement(value PatternFlowIcmpv6EchoSequenceNumberCounter) PatternFlowIcmpv6EchoSequenceNumber {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIcmpv6EchoSequenceNumberChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoSequenceNumber.Value <= 65535 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoSequenceNumber.Values <= 65535 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIcmpv6EchoSequenceNumberChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIcmpv6EchoChecksum struct {
	obj *snappipb.PatternFlowIcmpv6EchoChecksum
}

func NewPatternFlowIcmpv6EchoChecksum() PatternFlowIcmpv6EchoChecksum {
	obj := patternFlowIcmpv6EchoChecksum{obj: &snappipb.PatternFlowIcmpv6EchoChecksum{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpv6EchoChecksum) Msg() *snappipb.PatternFlowIcmpv6EchoChecksum {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoChecksum) SetMsg(msg *snappipb.PatternFlowIcmpv6EchoChecksum) PatternFlowIcmpv6EchoChecksum {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpv6EchoChecksum) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpv6EchoChecksum) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoChecksum) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoChecksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoChecksum) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoChecksum) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoChecksum) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpv6EchoChecksum interface {
	Msg() *snappipb.PatternFlowIcmpv6EchoChecksum
	SetMsg(*snappipb.PatternFlowIcmpv6EchoChecksum) PatternFlowIcmpv6EchoChecksum
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIcmpv6EchoChecksumChoiceEnum
	SetChoice(value PatternFlowIcmpv6EchoChecksumChoiceEnum) PatternFlowIcmpv6EchoChecksum
	Generated() PatternFlowIcmpv6EchoChecksumGeneratedEnum
	SetGenerated(value PatternFlowIcmpv6EchoChecksumGeneratedEnum) PatternFlowIcmpv6EchoChecksum
	HasGenerated() bool
	Custom() int32
	SetCustom(value int32) PatternFlowIcmpv6EchoChecksum
	HasCustom() bool
}

type PatternFlowIcmpv6EchoChecksumChoiceEnum string

var PatternFlowIcmpv6EchoChecksumChoice = struct {
	GENERATED PatternFlowIcmpv6EchoChecksumChoiceEnum
	CUSTOM    PatternFlowIcmpv6EchoChecksumChoiceEnum
}{
	GENERATED: PatternFlowIcmpv6EchoChecksumChoiceEnum("generated"),
	CUSTOM:    PatternFlowIcmpv6EchoChecksumChoiceEnum("custom"),
}

func (obj *patternFlowIcmpv6EchoChecksum) Choice() PatternFlowIcmpv6EchoChecksumChoiceEnum {
	return PatternFlowIcmpv6EchoChecksumChoiceEnum(obj.obj.Choice.Enum().String())
}

func (obj *patternFlowIcmpv6EchoChecksum) SetChoice(value PatternFlowIcmpv6EchoChecksumChoiceEnum) PatternFlowIcmpv6EchoChecksum {
	intValue, ok := snappipb.PatternFlowIcmpv6EchoChecksum_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpv6EchoChecksumChoiceEnum", string(value)))
		return obj
	}
	obj.obj.Choice = snappipb.PatternFlowIcmpv6EchoChecksum_Choice_Enum(intValue)

	if string(value) != "generated" {
		obj.obj.Generated = nil
	}

	if string(value) != "custom" {
		obj.obj.Custom = nil
	}

	return obj
}

type PatternFlowIcmpv6EchoChecksumGeneratedEnum string

var PatternFlowIcmpv6EchoChecksumGenerated = struct {
	GOOD PatternFlowIcmpv6EchoChecksumGeneratedEnum
	BAD  PatternFlowIcmpv6EchoChecksumGeneratedEnum
}{
	GOOD: PatternFlowIcmpv6EchoChecksumGeneratedEnum("good"),
	BAD:  PatternFlowIcmpv6EchoChecksumGeneratedEnum("bad"),
}

func (obj *patternFlowIcmpv6EchoChecksum) Generated() PatternFlowIcmpv6EchoChecksumGeneratedEnum {
	return PatternFlowIcmpv6EchoChecksumGeneratedEnum(obj.obj.Generated.Enum().String())
}

// Generated returns a string
//  A system generated checksum value
func (obj *patternFlowIcmpv6EchoChecksum) HasGenerated() bool {
	return obj.obj.Generated != nil
}

func (obj *patternFlowIcmpv6EchoChecksum) SetGenerated(value PatternFlowIcmpv6EchoChecksumGeneratedEnum) PatternFlowIcmpv6EchoChecksum {
	intValue, ok := snappipb.PatternFlowIcmpv6EchoChecksum_Generated_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIcmpv6EchoChecksumGeneratedEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIcmpv6EchoChecksum_Generated_Enum(intValue)
	obj.obj.Generated = &enumValue

	return obj
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIcmpv6EchoChecksum) Custom() int32 {

	return *obj.obj.Custom

}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIcmpv6EchoChecksum) HasCustom() bool {
	return obj.obj.Custom != nil
}

// SetCustom sets the int32 value in the PatternFlowIcmpv6EchoChecksum object
//  A custom checksum value
func (obj *patternFlowIcmpv6EchoChecksum) SetCustom(value int32) PatternFlowIcmpv6EchoChecksum {
	obj.obj.Custom = &value
	obj.SetChoice(PatternFlowIcmpv6EchoChecksumChoice.CUSTOM)
	return obj
}

func (obj *patternFlowIcmpv6EchoChecksum) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// Choice required
	if obj.obj.Choice.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("Choice is required field on PatternFlowIcmpv6EchoChecksum and got value %s", obj.obj.Choice.String()))
	}

	if obj.obj.Custom != nil {
		if *obj.obj.Custom < 0 || *obj.obj.Custom > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoChecksum.Custom <= 65535 but Got %d", *obj.obj.Custom))
		}

	}

}

func (obj *patternFlowIcmpv6EchoChecksum) setDefault() {
	if obj.obj.Choice.Number() == 0 {
		obj.SetChoice(PatternFlowIcmpv6EchoChecksumChoice.GENERATED)
		if obj.obj.Generated == nil {
			obj.SetGenerated(PatternFlowIcmpv6EchoChecksumGenerated.GOOD)

		}

	}

}

type patternFlowPppAddressCounter struct {
	obj *snappipb.PatternFlowPppAddressCounter
}

func NewPatternFlowPppAddressCounter() PatternFlowPppAddressCounter {
	obj := patternFlowPppAddressCounter{obj: &snappipb.PatternFlowPppAddressCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPppAddressCounter) Msg() *snappipb.PatternFlowPppAddressCounter {
	return obj.obj
}

func (obj *patternFlowPppAddressCounter) SetMsg(msg *snappipb.PatternFlowPppAddressCounter) PatternFlowPppAddressCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPppAddressCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPppAddressCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppAddressCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppAddressCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppAddressCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppAddressCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPppAddressCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPppAddressCounter interface {
	Msg() *snappipb.PatternFlowPppAddressCounter
	SetMsg(*snappipb.PatternFlowPppAddressCounter) PatternFlowPppAddressCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPppAddressCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPppAddressCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPppAddressCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPppAddressCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 255
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPppAddressCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPppAddressCounter object
//  description is TBD
func (obj *patternFlowPppAddressCounter) SetStart(value int32) PatternFlowPppAddressCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPppAddressCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPppAddressCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPppAddressCounter object
//  description is TBD
func (obj *patternFlowPppAddressCounter) SetStep(value int32) PatternFlowPppAddressCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPppAddressCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPppAddressCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPppAddressCounter object
//  description is TBD
func (obj *patternFlowPppAddressCounter) SetCount(value int32) PatternFlowPppAddressCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPppAddressCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppAddressCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppAddressCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPppAddressCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(255)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPppControlCounter struct {
	obj *snappipb.PatternFlowPppControlCounter
}

func NewPatternFlowPppControlCounter() PatternFlowPppControlCounter {
	obj := patternFlowPppControlCounter{obj: &snappipb.PatternFlowPppControlCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPppControlCounter) Msg() *snappipb.PatternFlowPppControlCounter {
	return obj.obj
}

func (obj *patternFlowPppControlCounter) SetMsg(msg *snappipb.PatternFlowPppControlCounter) PatternFlowPppControlCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPppControlCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPppControlCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppControlCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppControlCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppControlCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppControlCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPppControlCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPppControlCounter interface {
	Msg() *snappipb.PatternFlowPppControlCounter
	SetMsg(*snappipb.PatternFlowPppControlCounter) PatternFlowPppControlCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPppControlCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPppControlCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPppControlCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPppControlCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 3
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPppControlCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPppControlCounter object
//  description is TBD
func (obj *patternFlowPppControlCounter) SetStart(value int32) PatternFlowPppControlCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPppControlCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPppControlCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPppControlCounter object
//  description is TBD
func (obj *patternFlowPppControlCounter) SetStep(value int32) PatternFlowPppControlCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPppControlCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPppControlCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPppControlCounter object
//  description is TBD
func (obj *patternFlowPppControlCounter) SetCount(value int32) PatternFlowPppControlCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPppControlCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppControlCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppControlCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPppControlCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(3)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowPppProtocolTypeCounter struct {
	obj *snappipb.PatternFlowPppProtocolTypeCounter
}

func NewPatternFlowPppProtocolTypeCounter() PatternFlowPppProtocolTypeCounter {
	obj := patternFlowPppProtocolTypeCounter{obj: &snappipb.PatternFlowPppProtocolTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowPppProtocolTypeCounter) Msg() *snappipb.PatternFlowPppProtocolTypeCounter {
	return obj.obj
}

func (obj *patternFlowPppProtocolTypeCounter) SetMsg(msg *snappipb.PatternFlowPppProtocolTypeCounter) PatternFlowPppProtocolTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowPppProtocolTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowPppProtocolTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppProtocolTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppProtocolTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowPppProtocolTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppProtocolTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowPppProtocolTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowPppProtocolTypeCounter interface {
	Msg() *snappipb.PatternFlowPppProtocolTypeCounter
	SetMsg(*snappipb.PatternFlowPppProtocolTypeCounter) PatternFlowPppProtocolTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowPppProtocolTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowPppProtocolTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowPppProtocolTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) Start() int32 {

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowPppProtocolTypeCounter object
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) SetStart(value int32) PatternFlowPppProtocolTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) Step() int32 {

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowPppProtocolTypeCounter object
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) SetStep(value int32) PatternFlowPppProtocolTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowPppProtocolTypeCounter object
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) SetCount(value int32) PatternFlowPppProtocolTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowPppProtocolTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppProtocolTypeCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowPppProtocolTypeCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowPppProtocolTypeCounter) setDefault() {
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIgmpv1VersionCounter struct {
	obj *snappipb.PatternFlowIgmpv1VersionCounter
}

func NewPatternFlowIgmpv1VersionCounter() PatternFlowIgmpv1VersionCounter {
	obj := patternFlowIgmpv1VersionCounter{obj: &snappipb.PatternFlowIgmpv1VersionCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIgmpv1VersionCounter) Msg() *snappipb.PatternFlowIgmpv1VersionCounter {
	return obj.obj
}

func (obj *patternFlowIgmpv1VersionCounter) SetMsg(msg *snappipb.PatternFlowIgmpv1VersionCounter) PatternFlowIgmpv1VersionCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIgmpv1VersionCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIgmpv1VersionCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1VersionCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1VersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1VersionCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1VersionCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIgmpv1VersionCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIgmpv1VersionCounter interface {
	Msg() *snappipb.PatternFlowIgmpv1VersionCounter
	SetMsg(*snappipb.PatternFlowIgmpv1VersionCounter) PatternFlowIgmpv1VersionCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIgmpv1VersionCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIgmpv1VersionCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIgmpv1VersionCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 1
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIgmpv1VersionCounter object
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) SetStart(value int32) PatternFlowIgmpv1VersionCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIgmpv1VersionCounter object
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) SetStep(value int32) PatternFlowIgmpv1VersionCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIgmpv1VersionCounter object
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) SetCount(value int32) PatternFlowIgmpv1VersionCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIgmpv1VersionCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1VersionCounter.Start <= 15 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1VersionCounter.Step <= 15 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIgmpv1VersionCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(1)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIgmpv1TypeCounter struct {
	obj *snappipb.PatternFlowIgmpv1TypeCounter
}

func NewPatternFlowIgmpv1TypeCounter() PatternFlowIgmpv1TypeCounter {
	obj := patternFlowIgmpv1TypeCounter{obj: &snappipb.PatternFlowIgmpv1TypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIgmpv1TypeCounter) Msg() *snappipb.PatternFlowIgmpv1TypeCounter {
	return obj.obj
}

func (obj *patternFlowIgmpv1TypeCounter) SetMsg(msg *snappipb.PatternFlowIgmpv1TypeCounter) PatternFlowIgmpv1TypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIgmpv1TypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIgmpv1TypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1TypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1TypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1TypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1TypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIgmpv1TypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIgmpv1TypeCounter interface {
	Msg() *snappipb.PatternFlowIgmpv1TypeCounter
	SetMsg(*snappipb.PatternFlowIgmpv1TypeCounter) PatternFlowIgmpv1TypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIgmpv1TypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIgmpv1TypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIgmpv1TypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 17
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIgmpv1TypeCounter object
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) SetStart(value int32) PatternFlowIgmpv1TypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIgmpv1TypeCounter object
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) SetStep(value int32) PatternFlowIgmpv1TypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIgmpv1TypeCounter object
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) SetCount(value int32) PatternFlowIgmpv1TypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIgmpv1TypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1TypeCounter.Start <= 15 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 15 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1TypeCounter.Step <= 15 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIgmpv1TypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(17)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIgmpv1UnusedCounter struct {
	obj *snappipb.PatternFlowIgmpv1UnusedCounter
}

func NewPatternFlowIgmpv1UnusedCounter() PatternFlowIgmpv1UnusedCounter {
	obj := patternFlowIgmpv1UnusedCounter{obj: &snappipb.PatternFlowIgmpv1UnusedCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIgmpv1UnusedCounter) Msg() *snappipb.PatternFlowIgmpv1UnusedCounter {
	return obj.obj
}

func (obj *patternFlowIgmpv1UnusedCounter) SetMsg(msg *snappipb.PatternFlowIgmpv1UnusedCounter) PatternFlowIgmpv1UnusedCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIgmpv1UnusedCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIgmpv1UnusedCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1UnusedCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1UnusedCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1UnusedCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1UnusedCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIgmpv1UnusedCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIgmpv1UnusedCounter interface {
	Msg() *snappipb.PatternFlowIgmpv1UnusedCounter
	SetMsg(*snappipb.PatternFlowIgmpv1UnusedCounter) PatternFlowIgmpv1UnusedCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIgmpv1UnusedCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIgmpv1UnusedCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIgmpv1UnusedCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIgmpv1UnusedCounter object
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) SetStart(value int32) PatternFlowIgmpv1UnusedCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIgmpv1UnusedCounter object
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) SetStep(value int32) PatternFlowIgmpv1UnusedCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIgmpv1UnusedCounter object
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) SetCount(value int32) PatternFlowIgmpv1UnusedCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIgmpv1UnusedCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1UnusedCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIgmpv1UnusedCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIgmpv1UnusedCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIgmpv1GroupAddressCounter struct {
	obj *snappipb.PatternFlowIgmpv1GroupAddressCounter
}

func NewPatternFlowIgmpv1GroupAddressCounter() PatternFlowIgmpv1GroupAddressCounter {
	obj := patternFlowIgmpv1GroupAddressCounter{obj: &snappipb.PatternFlowIgmpv1GroupAddressCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIgmpv1GroupAddressCounter) Msg() *snappipb.PatternFlowIgmpv1GroupAddressCounter {
	return obj.obj
}

func (obj *patternFlowIgmpv1GroupAddressCounter) SetMsg(msg *snappipb.PatternFlowIgmpv1GroupAddressCounter) PatternFlowIgmpv1GroupAddressCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIgmpv1GroupAddressCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIgmpv1GroupAddressCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1GroupAddressCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1GroupAddressCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIgmpv1GroupAddressCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1GroupAddressCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIgmpv1GroupAddressCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIgmpv1GroupAddressCounter interface {
	Msg() *snappipb.PatternFlowIgmpv1GroupAddressCounter
	SetMsg(*snappipb.PatternFlowIgmpv1GroupAddressCounter) PatternFlowIgmpv1GroupAddressCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() string
	SetStart(value string) PatternFlowIgmpv1GroupAddressCounter
	HasStart() bool
	Step() string
	SetStep(value string) PatternFlowIgmpv1GroupAddressCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIgmpv1GroupAddressCounter
	HasCount() bool
}

// Start returns a string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) Start() string {

	if obj.obj.Start == nil {
		*obj.obj.Start = "0.0.0.0"
	}

	return *obj.obj.Start

}

// Start returns a string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the string value in the PatternFlowIgmpv1GroupAddressCounter object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) SetStart(value string) PatternFlowIgmpv1GroupAddressCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) Step() string {

	if obj.obj.Step == nil {
		*obj.obj.Step = "0.0.0.1"
	}

	return *obj.obj.Step

}

// Step returns a string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the string value in the PatternFlowIgmpv1GroupAddressCounter object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) SetStep(value string) PatternFlowIgmpv1GroupAddressCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIgmpv1GroupAddressCounter object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) SetCount(value int32) PatternFlowIgmpv1GroupAddressCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIgmpv1GroupAddressCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		err := validateIpv4(obj.Start())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Start PatternFlowIgmpv1GroupAddressCounter"))
		}
	}

	if obj.obj.Step != nil {
		err := validateIpv4(obj.Step())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Step PatternFlowIgmpv1GroupAddressCounter"))
		}
	}

}

func (obj *patternFlowIgmpv1GroupAddressCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart("0.0.0.0")
	}
	if obj.obj.Step == nil {
		obj.SetStep("0.0.0.1")
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type bgpRouteAdvanced struct {
	obj *snappipb.BgpRouteAdvanced
}

func NewBgpRouteAdvanced() BgpRouteAdvanced {
	obj := bgpRouteAdvanced{obj: &snappipb.BgpRouteAdvanced{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpRouteAdvanced) Msg() *snappipb.BgpRouteAdvanced {
	return obj.obj
}

func (obj *bgpRouteAdvanced) SetMsg(msg *snappipb.BgpRouteAdvanced) BgpRouteAdvanced {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpRouteAdvanced) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpRouteAdvanced) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpRouteAdvanced) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpRouteAdvanced) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpRouteAdvanced) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpRouteAdvanced) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpRouteAdvanced) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpRouteAdvanced interface {
	Msg() *snappipb.BgpRouteAdvanced
	SetMsg(*snappipb.BgpRouteAdvanced) BgpRouteAdvanced
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	MultiExitDiscriminator() int32
	SetMultiExitDiscriminator(value int32) BgpRouteAdvanced
	HasMultiExitDiscriminator() bool
	Origin() BgpRouteAdvancedOriginEnum
	SetOrigin(value BgpRouteAdvancedOriginEnum) BgpRouteAdvanced
	HasOrigin() bool
}

// MultiExitDiscriminator returns a int32
//  The multi exit discriminator (MED) value.  A null value means the MED feature is not enabled.
func (obj *bgpRouteAdvanced) MultiExitDiscriminator() int32 {

	return *obj.obj.MultiExitDiscriminator

}

// MultiExitDiscriminator returns a int32
//  The multi exit discriminator (MED) value.  A null value means the MED feature is not enabled.
func (obj *bgpRouteAdvanced) HasMultiExitDiscriminator() bool {
	return obj.obj.MultiExitDiscriminator != nil
}

// SetMultiExitDiscriminator sets the int32 value in the BgpRouteAdvanced object
//  The multi exit discriminator (MED) value.  A null value means the MED feature is not enabled.
func (obj *bgpRouteAdvanced) SetMultiExitDiscriminator(value int32) BgpRouteAdvanced {
	obj.obj.MultiExitDiscriminator = &value

	return obj
}

type BgpRouteAdvancedOriginEnum string

var BgpRouteAdvancedOrigin = struct {
	IGP BgpRouteAdvancedOriginEnum
	EGP BgpRouteAdvancedOriginEnum
}{
	IGP: BgpRouteAdvancedOriginEnum("igp"),
	EGP: BgpRouteAdvancedOriginEnum("egp"),
}

func (obj *bgpRouteAdvanced) Origin() BgpRouteAdvancedOriginEnum {
	return BgpRouteAdvancedOriginEnum(obj.obj.Origin.Enum().String())
}

// Origin returns a string
//  The origin value.  A null value means the origin feature is not enabled.
func (obj *bgpRouteAdvanced) HasOrigin() bool {
	return obj.obj.Origin != nil
}

func (obj *bgpRouteAdvanced) SetOrigin(value BgpRouteAdvancedOriginEnum) BgpRouteAdvanced {
	intValue, ok := snappipb.BgpRouteAdvanced_Origin_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpRouteAdvancedOriginEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpRouteAdvanced_Origin_Enum(intValue)
	obj.obj.Origin = &enumValue

	return obj
}

func (obj *bgpRouteAdvanced) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpRouteAdvanced) setDefault() {
	if obj.obj.Origin == nil {
		obj.SetOrigin(BgpRouteAdvancedOrigin.IGP)

	}

}

type bgpCommunity struct {
	obj *snappipb.BgpCommunity
}

func NewBgpCommunity() BgpCommunity {
	obj := bgpCommunity{obj: &snappipb.BgpCommunity{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpCommunity) Msg() *snappipb.BgpCommunity {
	return obj.obj
}

func (obj *bgpCommunity) SetMsg(msg *snappipb.BgpCommunity) BgpCommunity {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpCommunity) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpCommunity) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpCommunity) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpCommunity) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpCommunity) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpCommunity) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpCommunity) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpCommunity interface {
	Msg() *snappipb.BgpCommunity
	SetMsg(*snappipb.BgpCommunity) BgpCommunity
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Type() BgpCommunityTypeEnum
	SetType(value BgpCommunityTypeEnum) BgpCommunity
	HasType() bool
	AsNumber() int32
	SetAsNumber(value int32) BgpCommunity
	HasAsNumber() bool
	AsCustom() int32
	SetAsCustom(value int32) BgpCommunity
	HasAsCustom() bool
}

type BgpCommunityTypeEnum string

var BgpCommunityType = struct {
	MANUAL_AS_NUMBER    BgpCommunityTypeEnum
	NO_EXPORT           BgpCommunityTypeEnum
	NO_ADVERTISED       BgpCommunityTypeEnum
	NO_EXPORT_SUBCONFED BgpCommunityTypeEnum
	LLGR_STALE          BgpCommunityTypeEnum
	NO_LLGR             BgpCommunityTypeEnum
}{
	MANUAL_AS_NUMBER:    BgpCommunityTypeEnum("manual_as_number"),
	NO_EXPORT:           BgpCommunityTypeEnum("no_export"),
	NO_ADVERTISED:       BgpCommunityTypeEnum("no_advertised"),
	NO_EXPORT_SUBCONFED: BgpCommunityTypeEnum("no_export_subconfed"),
	LLGR_STALE:          BgpCommunityTypeEnum("llgr_stale"),
	NO_LLGR:             BgpCommunityTypeEnum("no_llgr"),
}

func (obj *bgpCommunity) Type() BgpCommunityTypeEnum {
	return BgpCommunityTypeEnum(obj.obj.Type.Enum().String())
}

// Type returns a string
//  The type of community AS number.
func (obj *bgpCommunity) HasType() bool {
	return obj.obj.Type != nil
}

func (obj *bgpCommunity) SetType(value BgpCommunityTypeEnum) BgpCommunity {
	intValue, ok := snappipb.BgpCommunity_Type_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpCommunityTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpCommunity_Type_Enum(intValue)
	obj.obj.Type = &enumValue

	return obj
}

// AsNumber returns a int32
//  First two octets of 32 bit community AS number.
func (obj *bgpCommunity) AsNumber() int32 {

	if obj.obj.AsNumber == nil {
		*obj.obj.AsNumber = 0
	}

	return *obj.obj.AsNumber

}

// AsNumber returns a int32
//  First two octets of 32 bit community AS number.
func (obj *bgpCommunity) HasAsNumber() bool {
	return obj.obj.AsNumber != nil
}

// SetAsNumber sets the int32 value in the BgpCommunity object
//  First two octets of 32 bit community AS number.
func (obj *bgpCommunity) SetAsNumber(value int32) BgpCommunity {
	obj.obj.AsNumber = &value

	return obj
}

// AsCustom returns a int32
//  Last two octets of the community AS number.
func (obj *bgpCommunity) AsCustom() int32 {

	if obj.obj.AsCustom == nil {
		*obj.obj.AsCustom = 0
	}

	return *obj.obj.AsCustom

}

// AsCustom returns a int32
//  Last two octets of the community AS number.
func (obj *bgpCommunity) HasAsCustom() bool {
	return obj.obj.AsCustom != nil
}

// SetAsCustom sets the int32 value in the BgpCommunity object
//  Last two octets of the community AS number.
func (obj *bgpCommunity) SetAsCustom(value int32) BgpCommunity {
	obj.obj.AsCustom = &value

	return obj
}

func (obj *bgpCommunity) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.AsNumber != nil {
		if *obj.obj.AsNumber < 0 || *obj.obj.AsNumber > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpCommunity.AsNumber <= 65535 but Got %d", *obj.obj.AsNumber))
		}

	}

	if obj.obj.AsCustom != nil {
		if *obj.obj.AsCustom < 0 || *obj.obj.AsCustom > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpCommunity.AsCustom <= 65535 but Got %d", *obj.obj.AsCustom))
		}

	}

}

func (obj *bgpCommunity) setDefault() {
	if obj.obj.AsNumber == nil {
		obj.SetAsNumber(0)
	}
	if obj.obj.AsCustom == nil {
		obj.SetAsCustom(0)
	}

}

type bgpAsPath struct {
	obj *snappipb.BgpAsPath
}

func NewBgpAsPath() BgpAsPath {
	obj := bgpAsPath{obj: &snappipb.BgpAsPath{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpAsPath) Msg() *snappipb.BgpAsPath {
	return obj.obj
}

func (obj *bgpAsPath) SetMsg(msg *snappipb.BgpAsPath) BgpAsPath {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpAsPath) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpAsPath) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpAsPath) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpAsPath) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpAsPath) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpAsPath) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpAsPath) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpAsPath interface {
	Msg() *snappipb.BgpAsPath
	SetMsg(*snappipb.BgpAsPath) BgpAsPath
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	AsSetMode() BgpAsPathAsSetModeEnum
	SetAsSetMode(value BgpAsPathAsSetModeEnum) BgpAsPath
	HasAsSetMode() bool
	Segments() BgpAsPathBgpAsPathSegmentIter
}

type BgpAsPathAsSetModeEnum string

var BgpAsPathAsSetMode = struct {
	DO_NOT_INCLUDE_LOCAL_AS  BgpAsPathAsSetModeEnum
	INCLUDE_AS_SEQ           BgpAsPathAsSetModeEnum
	INCLUDE_AS_SET           BgpAsPathAsSetModeEnum
	INCLUDE_AS_CONFED_SEQ    BgpAsPathAsSetModeEnum
	INCLUDE_AS_CONFED_SET    BgpAsPathAsSetModeEnum
	PREPEND_TO_FIRST_SEGMENT BgpAsPathAsSetModeEnum
}{
	DO_NOT_INCLUDE_LOCAL_AS:  BgpAsPathAsSetModeEnum("do_not_include_local_as"),
	INCLUDE_AS_SEQ:           BgpAsPathAsSetModeEnum("include_as_seq"),
	INCLUDE_AS_SET:           BgpAsPathAsSetModeEnum("include_as_set"),
	INCLUDE_AS_CONFED_SEQ:    BgpAsPathAsSetModeEnum("include_as_confed_seq"),
	INCLUDE_AS_CONFED_SET:    BgpAsPathAsSetModeEnum("include_as_confed_set"),
	PREPEND_TO_FIRST_SEGMENT: BgpAsPathAsSetModeEnum("prepend_to_first_segment"),
}

func (obj *bgpAsPath) AsSetMode() BgpAsPathAsSetModeEnum {
	return BgpAsPathAsSetModeEnum(obj.obj.AsSetMode.Enum().String())
}

// AsSetMode returns a string
//  Defines how the Local AS should be included in the MP REACH NLRI. For iBGP sessions, "Do Not Include Local AS" must be chosen. For eBGP sessions, any choice other than "Do Not Include Local AS" can be chosen.
func (obj *bgpAsPath) HasAsSetMode() bool {
	return obj.obj.AsSetMode != nil
}

func (obj *bgpAsPath) SetAsSetMode(value BgpAsPathAsSetModeEnum) BgpAsPath {
	intValue, ok := snappipb.BgpAsPath_AsSetMode_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpAsPathAsSetModeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpAsPath_AsSetMode_Enum(intValue)
	obj.obj.AsSetMode = &enumValue

	return obj
}

// Segments returns a []BgpAsPathSegment
//  The additional AS path segments to be added in the NLRI.  By default, an empty AS path is always included and  the local AS is added to it as per the value of 'as_set_mode' attribute.
func (obj *bgpAsPath) Segments() BgpAsPathBgpAsPathSegmentIter {
	if obj.obj.Segments == nil {
		obj.obj.Segments = []*snappipb.BgpAsPathSegment{}
	}
	return &bgpAsPathBgpAsPathSegmentIter{obj: obj}
}

type bgpAsPathBgpAsPathSegmentIter struct {
	obj *bgpAsPath
}

type BgpAsPathBgpAsPathSegmentIter interface {
	Add() BgpAsPathSegment
	Items() []BgpAsPathSegment
}

func (obj *bgpAsPathBgpAsPathSegmentIter) Add() BgpAsPathSegment {
	newObj := &snappipb.BgpAsPathSegment{}
	obj.obj.obj.Segments = append(obj.obj.obj.Segments, newObj)
	newLibObj := &bgpAsPathSegment{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpAsPathBgpAsPathSegmentIter) Items() []BgpAsPathSegment {
	slice := []BgpAsPathSegment{}
	for _, item := range obj.obj.obj.Segments {
		slice = append(slice, &bgpAsPathSegment{obj: item})
	}
	return slice
}

func (obj *bgpAsPath) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}
	if obj.obj.Segments != nil {
		for _, item := range obj.Segments().Items() {
			item.validateObj(set_default)
		}
	}

}

func (obj *bgpAsPath) setDefault() {
	if obj.obj.AsSetMode == nil {
		obj.SetAsSetMode(BgpAsPathAsSetMode.DO_NOT_INCLUDE_LOCAL_AS)

	}

}

type bgpAddPath struct {
	obj *snappipb.BgpAddPath
}

func NewBgpAddPath() BgpAddPath {
	obj := bgpAddPath{obj: &snappipb.BgpAddPath{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpAddPath) Msg() *snappipb.BgpAddPath {
	return obj.obj
}

func (obj *bgpAddPath) SetMsg(msg *snappipb.BgpAddPath) BgpAddPath {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpAddPath) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpAddPath) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpAddPath) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpAddPath) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpAddPath) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpAddPath) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpAddPath) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpAddPath interface {
	Msg() *snappipb.BgpAddPath
	SetMsg(*snappipb.BgpAddPath) BgpAddPath
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PathId() int32
	SetPathId(value int32) BgpAddPath
	HasPathId() bool
}

// PathId returns a int32
//  The id of the additional path.
func (obj *bgpAddPath) PathId() int32 {

	if obj.obj.PathId == nil {
		*obj.obj.PathId = 1
	}

	return *obj.obj.PathId

}

// PathId returns a int32
//  The id of the additional path.
func (obj *bgpAddPath) HasPathId() bool {
	return obj.obj.PathId != nil
}

// SetPathId sets the int32 value in the BgpAddPath object
//  The id of the additional path.
func (obj *bgpAddPath) SetPathId(value int32) BgpAddPath {
	obj.obj.PathId = &value

	return obj
}

func (obj *bgpAddPath) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpAddPath) setDefault() {
	if obj.obj.PathId == nil {
		obj.SetPathId(1)
	}

}

type bgpExtCommunity struct {
	obj *snappipb.BgpExtCommunity
}

func NewBgpExtCommunity() BgpExtCommunity {
	obj := bgpExtCommunity{obj: &snappipb.BgpExtCommunity{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpExtCommunity) Msg() *snappipb.BgpExtCommunity {
	return obj.obj
}

func (obj *bgpExtCommunity) SetMsg(msg *snappipb.BgpExtCommunity) BgpExtCommunity {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpExtCommunity) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpExtCommunity) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpExtCommunity) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpExtCommunity) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpExtCommunity) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpExtCommunity) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpExtCommunity) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpExtCommunity interface {
	Msg() *snappipb.BgpExtCommunity
	SetMsg(*snappipb.BgpExtCommunity) BgpExtCommunity
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Type() BgpExtCommunityTypeEnum
	SetType(value BgpExtCommunityTypeEnum) BgpExtCommunity
	HasType() bool
	Subtype() BgpExtCommunitySubtypeEnum
	SetSubtype(value BgpExtCommunitySubtypeEnum) BgpExtCommunity
	HasSubtype() bool
	Value() string
	SetValue(value string) BgpExtCommunity
	HasValue() bool
}

type BgpExtCommunityTypeEnum string

var BgpExtCommunityType = struct {
	ADMINISTRATOR_AS_2OCTET                BgpExtCommunityTypeEnum
	ADMINISTRATOR_IPV4_ADDRESS             BgpExtCommunityTypeEnum
	ADMINISTRATOR_AS_4OCTET                BgpExtCommunityTypeEnum
	OPAQUE                                 BgpExtCommunityTypeEnum
	EVPN                                   BgpExtCommunityTypeEnum
	ADMINISTRATOR_AS_2OCTET_LINK_BANDWIDTH BgpExtCommunityTypeEnum
}{
	ADMINISTRATOR_AS_2OCTET:                BgpExtCommunityTypeEnum("administrator_as_2octet"),
	ADMINISTRATOR_IPV4_ADDRESS:             BgpExtCommunityTypeEnum("administrator_ipv4_address"),
	ADMINISTRATOR_AS_4OCTET:                BgpExtCommunityTypeEnum("administrator_as_4octet"),
	OPAQUE:                                 BgpExtCommunityTypeEnum("opaque"),
	EVPN:                                   BgpExtCommunityTypeEnum("evpn"),
	ADMINISTRATOR_AS_2OCTET_LINK_BANDWIDTH: BgpExtCommunityTypeEnum("administrator_as_2octet_link_bandwidth"),
}

func (obj *bgpExtCommunity) Type() BgpExtCommunityTypeEnum {
	return BgpExtCommunityTypeEnum(obj.obj.Type.Enum().String())
}

// Type returns a string
//  Extended Community Type field of 1 Byte.
//  - administrator_as_2octet: Two-Octet AS Specific Extended Community (RFC 4360).
//  - administrator_ipv4_address: IPv4 Address Specific Extended Community (RFC 4360).
//  - administrator_as_4octet:  4-Octet AS Specific Extended Community (RFC 5668).
//  - opaque: Opaque Extended Community (RFC 7432).
//  - evpn: EVPN Extended Community (RFC 7153).
//  - administrator_as_2octet_link_bandwidth : Link Bandwidth Extended Community (RFC 7153).
func (obj *bgpExtCommunity) HasType() bool {
	return obj.obj.Type != nil
}

func (obj *bgpExtCommunity) SetType(value BgpExtCommunityTypeEnum) BgpExtCommunity {
	intValue, ok := snappipb.BgpExtCommunity_Type_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpExtCommunityTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpExtCommunity_Type_Enum(intValue)
	obj.obj.Type = &enumValue

	return obj
}

type BgpExtCommunitySubtypeEnum string

var BgpExtCommunitySubtype = struct {
	ROUTE_TARGET       BgpExtCommunitySubtypeEnum
	ORIGIN             BgpExtCommunitySubtypeEnum
	EXTENDED_BANDWIDTH BgpExtCommunitySubtypeEnum
	COLOR              BgpExtCommunitySubtypeEnum
	ENCAPSULATION      BgpExtCommunitySubtypeEnum
	MAC_ADDRESS        BgpExtCommunitySubtypeEnum
}{
	ROUTE_TARGET:       BgpExtCommunitySubtypeEnum("route_target"),
	ORIGIN:             BgpExtCommunitySubtypeEnum("origin"),
	EXTENDED_BANDWIDTH: BgpExtCommunitySubtypeEnum("extended_bandwidth"),
	COLOR:              BgpExtCommunitySubtypeEnum("color"),
	ENCAPSULATION:      BgpExtCommunitySubtypeEnum("encapsulation"),
	MAC_ADDRESS:        BgpExtCommunitySubtypeEnum("mac_address"),
}

func (obj *bgpExtCommunity) Subtype() BgpExtCommunitySubtypeEnum {
	return BgpExtCommunitySubtypeEnum(obj.obj.Subtype.Enum().String())
}

// Subtype returns a string
//  Extended Community Sub Type field of 1 Byte.
//  - route_target: Route Target.
//  - origin: Origin.
//  - extended_bandwidth: Specifies the link bandwidth.
//  - color: Specifies the color value.
//  - encapsulation: Specifies the Encapsulation Extended Community.
//  - mac_address: Specifies the Extended community MAC address.
func (obj *bgpExtCommunity) HasSubtype() bool {
	return obj.obj.Subtype != nil
}

func (obj *bgpExtCommunity) SetSubtype(value BgpExtCommunitySubtypeEnum) BgpExtCommunity {
	intValue, ok := snappipb.BgpExtCommunity_Subtype_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpExtCommunitySubtypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpExtCommunity_Subtype_Enum(intValue)
	obj.obj.Subtype = &enumValue

	return obj
}

// Value returns a string
//  Extended Community value of 6 Bytes. Example - for the Opaque type and Color subtype value can be '0000000000c8'  for the color value 200.
func (obj *bgpExtCommunity) Value() string {

	return *obj.obj.Value

}

// Value returns a string
//  Extended Community value of 6 Bytes. Example - for the Opaque type and Color subtype value can be '0000000000c8'  for the color value 200.
func (obj *bgpExtCommunity) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the string value in the BgpExtCommunity object
//  Extended Community value of 6 Bytes. Example - for the Opaque type and Color subtype value can be '0000000000c8'  for the color value 200.
func (obj *bgpExtCommunity) SetValue(value string) BgpExtCommunity {
	obj.obj.Value = &value

	return obj
}

func (obj *bgpExtCommunity) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		err := validateHex(obj.Value())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Value BgpExtCommunity"))
		}
	}

}

func (obj *bgpExtCommunity) setDefault() {

}

type bgpSrteV4TunnelTlv struct {
	obj *snappipb.BgpSrteV4TunnelTlv
}

func NewBgpSrteV4TunnelTlv() BgpSrteV4TunnelTlv {
	obj := bgpSrteV4TunnelTlv{obj: &snappipb.BgpSrteV4TunnelTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteV4TunnelTlv) Msg() *snappipb.BgpSrteV4TunnelTlv {
	return obj.obj
}

func (obj *bgpSrteV4TunnelTlv) SetMsg(msg *snappipb.BgpSrteV4TunnelTlv) BgpSrteV4TunnelTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteV4TunnelTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteV4TunnelTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteV4TunnelTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteV4TunnelTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteV4TunnelTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteV4TunnelTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteV4TunnelTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteV4TunnelTlv interface {
	Msg() *snappipb.BgpSrteV4TunnelTlv
	SetMsg(*snappipb.BgpSrteV4TunnelTlv) BgpSrteV4TunnelTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	RemoteEndpointSubTlv() BgpSrteRemoteEndpointSubTlv
	SetRemoteEndpointSubTlv(value BgpSrteRemoteEndpointSubTlv) BgpSrteV4TunnelTlv
	HasRemoteEndpointSubTlv() bool
	ColorSubTlv() BgpSrteColorSubTlv
	SetColorSubTlv(value BgpSrteColorSubTlv) BgpSrteV4TunnelTlv
	HasColorSubTlv() bool
	BindingSubTlv() BgpSrteBindingSubTlv
	SetBindingSubTlv(value BgpSrteBindingSubTlv) BgpSrteV4TunnelTlv
	HasBindingSubTlv() bool
	PreferenceSubTlv() BgpSrtePreferenceSubTlv
	SetPreferenceSubTlv(value BgpSrtePreferenceSubTlv) BgpSrteV4TunnelTlv
	HasPreferenceSubTlv() bool
	PolicyPrioritySubTlv() BgpSrtePolicyPrioritySubTlv
	SetPolicyPrioritySubTlv(value BgpSrtePolicyPrioritySubTlv) BgpSrteV4TunnelTlv
	HasPolicyPrioritySubTlv() bool
	PolicyNameSubTlv() BgpSrtePolicyNameSubTlv
	SetPolicyNameSubTlv(value BgpSrtePolicyNameSubTlv) BgpSrteV4TunnelTlv
	HasPolicyNameSubTlv() bool
	ExplicitNullLabelPolicySubTlv() BgpSrteExplicitNullLabelPolicySubTlv
	SetExplicitNullLabelPolicySubTlv(value BgpSrteExplicitNullLabelPolicySubTlv) BgpSrteV4TunnelTlv
	HasExplicitNullLabelPolicySubTlv() bool
	SegmentLists() BgpSrteV4TunnelTlvBgpSrteSegmentListIter
	Name() string
	SetName(value string) BgpSrteV4TunnelTlv
	Active() bool
	SetActive(value bool) BgpSrteV4TunnelTlv
	HasActive() bool
}

// RemoteEndpointSubTlv returns a BgpSrteRemoteEndpointSubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) RemoteEndpointSubTlv() BgpSrteRemoteEndpointSubTlv {
	if obj.obj.RemoteEndpointSubTlv == nil {
		obj.obj.RemoteEndpointSubTlv = NewBgpSrteRemoteEndpointSubTlv().Msg()
	}
	return &bgpSrteRemoteEndpointSubTlv{obj: obj.obj.RemoteEndpointSubTlv}
}

// RemoteEndpointSubTlv returns a BgpSrteRemoteEndpointSubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) HasRemoteEndpointSubTlv() bool {
	return obj.obj.RemoteEndpointSubTlv != nil
}

// SetRemoteEndpointSubTlv sets the BgpSrteRemoteEndpointSubTlv value in the BgpSrteV4TunnelTlv object
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) SetRemoteEndpointSubTlv(value BgpSrteRemoteEndpointSubTlv) BgpSrteV4TunnelTlv {
	obj.RemoteEndpointSubTlv().SetMsg(value.Msg())

	return obj
}

// ColorSubTlv returns a BgpSrteColorSubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) ColorSubTlv() BgpSrteColorSubTlv {
	if obj.obj.ColorSubTlv == nil {
		obj.obj.ColorSubTlv = NewBgpSrteColorSubTlv().Msg()
	}
	return &bgpSrteColorSubTlv{obj: obj.obj.ColorSubTlv}
}

// ColorSubTlv returns a BgpSrteColorSubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) HasColorSubTlv() bool {
	return obj.obj.ColorSubTlv != nil
}

// SetColorSubTlv sets the BgpSrteColorSubTlv value in the BgpSrteV4TunnelTlv object
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) SetColorSubTlv(value BgpSrteColorSubTlv) BgpSrteV4TunnelTlv {
	obj.ColorSubTlv().SetMsg(value.Msg())

	return obj
}

// BindingSubTlv returns a BgpSrteBindingSubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) BindingSubTlv() BgpSrteBindingSubTlv {
	if obj.obj.BindingSubTlv == nil {
		obj.obj.BindingSubTlv = NewBgpSrteBindingSubTlv().Msg()
	}
	return &bgpSrteBindingSubTlv{obj: obj.obj.BindingSubTlv}
}

// BindingSubTlv returns a BgpSrteBindingSubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) HasBindingSubTlv() bool {
	return obj.obj.BindingSubTlv != nil
}

// SetBindingSubTlv sets the BgpSrteBindingSubTlv value in the BgpSrteV4TunnelTlv object
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) SetBindingSubTlv(value BgpSrteBindingSubTlv) BgpSrteV4TunnelTlv {
	obj.BindingSubTlv().SetMsg(value.Msg())

	return obj
}

// PreferenceSubTlv returns a BgpSrtePreferenceSubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) PreferenceSubTlv() BgpSrtePreferenceSubTlv {
	if obj.obj.PreferenceSubTlv == nil {
		obj.obj.PreferenceSubTlv = NewBgpSrtePreferenceSubTlv().Msg()
	}
	return &bgpSrtePreferenceSubTlv{obj: obj.obj.PreferenceSubTlv}
}

// PreferenceSubTlv returns a BgpSrtePreferenceSubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) HasPreferenceSubTlv() bool {
	return obj.obj.PreferenceSubTlv != nil
}

// SetPreferenceSubTlv sets the BgpSrtePreferenceSubTlv value in the BgpSrteV4TunnelTlv object
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) SetPreferenceSubTlv(value BgpSrtePreferenceSubTlv) BgpSrteV4TunnelTlv {
	obj.PreferenceSubTlv().SetMsg(value.Msg())

	return obj
}

// PolicyPrioritySubTlv returns a BgpSrtePolicyPrioritySubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) PolicyPrioritySubTlv() BgpSrtePolicyPrioritySubTlv {
	if obj.obj.PolicyPrioritySubTlv == nil {
		obj.obj.PolicyPrioritySubTlv = NewBgpSrtePolicyPrioritySubTlv().Msg()
	}
	return &bgpSrtePolicyPrioritySubTlv{obj: obj.obj.PolicyPrioritySubTlv}
}

// PolicyPrioritySubTlv returns a BgpSrtePolicyPrioritySubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) HasPolicyPrioritySubTlv() bool {
	return obj.obj.PolicyPrioritySubTlv != nil
}

// SetPolicyPrioritySubTlv sets the BgpSrtePolicyPrioritySubTlv value in the BgpSrteV4TunnelTlv object
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) SetPolicyPrioritySubTlv(value BgpSrtePolicyPrioritySubTlv) BgpSrteV4TunnelTlv {
	obj.PolicyPrioritySubTlv().SetMsg(value.Msg())

	return obj
}

// PolicyNameSubTlv returns a BgpSrtePolicyNameSubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) PolicyNameSubTlv() BgpSrtePolicyNameSubTlv {
	if obj.obj.PolicyNameSubTlv == nil {
		obj.obj.PolicyNameSubTlv = NewBgpSrtePolicyNameSubTlv().Msg()
	}
	return &bgpSrtePolicyNameSubTlv{obj: obj.obj.PolicyNameSubTlv}
}

// PolicyNameSubTlv returns a BgpSrtePolicyNameSubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) HasPolicyNameSubTlv() bool {
	return obj.obj.PolicyNameSubTlv != nil
}

// SetPolicyNameSubTlv sets the BgpSrtePolicyNameSubTlv value in the BgpSrteV4TunnelTlv object
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) SetPolicyNameSubTlv(value BgpSrtePolicyNameSubTlv) BgpSrteV4TunnelTlv {
	obj.PolicyNameSubTlv().SetMsg(value.Msg())

	return obj
}

// ExplicitNullLabelPolicySubTlv returns a BgpSrteExplicitNullLabelPolicySubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) ExplicitNullLabelPolicySubTlv() BgpSrteExplicitNullLabelPolicySubTlv {
	if obj.obj.ExplicitNullLabelPolicySubTlv == nil {
		obj.obj.ExplicitNullLabelPolicySubTlv = NewBgpSrteExplicitNullLabelPolicySubTlv().Msg()
	}
	return &bgpSrteExplicitNullLabelPolicySubTlv{obj: obj.obj.ExplicitNullLabelPolicySubTlv}
}

// ExplicitNullLabelPolicySubTlv returns a BgpSrteExplicitNullLabelPolicySubTlv
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) HasExplicitNullLabelPolicySubTlv() bool {
	return obj.obj.ExplicitNullLabelPolicySubTlv != nil
}

// SetExplicitNullLabelPolicySubTlv sets the BgpSrteExplicitNullLabelPolicySubTlv value in the BgpSrteV4TunnelTlv object
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) SetExplicitNullLabelPolicySubTlv(value BgpSrteExplicitNullLabelPolicySubTlv) BgpSrteV4TunnelTlv {
	obj.ExplicitNullLabelPolicySubTlv().SetMsg(value.Msg())

	return obj
}

// SegmentLists returns a []BgpSrteSegmentList
//  description is TBD
func (obj *bgpSrteV4TunnelTlv) SegmentLists() BgpSrteV4TunnelTlvBgpSrteSegmentListIter {
	if obj.obj.SegmentLists == nil {
		obj.obj.SegmentLists = []*snappipb.BgpSrteSegmentList{}
	}
	return &bgpSrteV4TunnelTlvBgpSrteSegmentListIter{obj: obj}
}

type bgpSrteV4TunnelTlvBgpSrteSegmentListIter struct {
	obj *bgpSrteV4TunnelTlv
}

type BgpSrteV4TunnelTlvBgpSrteSegmentListIter interface {
	Add() BgpSrteSegmentList
	Items() []BgpSrteSegmentList
}

func (obj *bgpSrteV4TunnelTlvBgpSrteSegmentListIter) Add() BgpSrteSegmentList {
	newObj := &snappipb.BgpSrteSegmentList{}
	obj.obj.obj.SegmentLists = append(obj.obj.obj.SegmentLists, newObj)
	newLibObj := &bgpSrteSegmentList{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpSrteV4TunnelTlvBgpSrteSegmentListIter) Items() []BgpSrteSegmentList {
	slice := []BgpSrteSegmentList{}
	for _, item := range obj.obj.obj.SegmentLists {
		slice = append(slice, &bgpSrteSegmentList{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteV4TunnelTlv) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the BgpSrteV4TunnelTlv object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteV4TunnelTlv) SetName(value string) BgpSrteV4TunnelTlv {
	obj.obj.Name = value

	return obj
}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV4TunnelTlv) Active() bool {

	if obj.obj.Active == nil {
		*obj.obj.Active = true
	}

	return *obj.obj.Active

}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV4TunnelTlv) HasActive() bool {
	return obj.obj.Active != nil
}

// SetActive sets the bool value in the BgpSrteV4TunnelTlv object
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV4TunnelTlv) SetActive(value bool) BgpSrteV4TunnelTlv {
	obj.obj.Active = &value

	return obj
}

func (obj *bgpSrteV4TunnelTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.RemoteEndpointSubTlv != nil {
		obj.RemoteEndpointSubTlv().validateObj(set_default)
	}

	if obj.obj.ColorSubTlv != nil {
		obj.ColorSubTlv().validateObj(set_default)
	}

	if obj.obj.BindingSubTlv != nil {
		obj.BindingSubTlv().validateObj(set_default)
	}

	if obj.obj.PreferenceSubTlv != nil {
		obj.PreferenceSubTlv().validateObj(set_default)
	}

	if obj.obj.PolicyPrioritySubTlv != nil {
		obj.PolicyPrioritySubTlv().validateObj(set_default)
	}

	if obj.obj.PolicyNameSubTlv != nil {
		obj.PolicyNameSubTlv().validateObj(set_default)
	}

	if obj.obj.ExplicitNullLabelPolicySubTlv != nil {
		obj.ExplicitNullLabelPolicySubTlv().validateObj(set_default)
	}
	if obj.obj.SegmentLists != nil {
		for _, item := range obj.SegmentLists().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface BgpSrteV4TunnelTlv")
	}
}

func (obj *bgpSrteV4TunnelTlv) setDefault() {
	if obj.obj.Active == nil {
		obj.SetActive(true)
	}

}

type bgpSrteV6TunnelTlv struct {
	obj *snappipb.BgpSrteV6TunnelTlv
}

func NewBgpSrteV6TunnelTlv() BgpSrteV6TunnelTlv {
	obj := bgpSrteV6TunnelTlv{obj: &snappipb.BgpSrteV6TunnelTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteV6TunnelTlv) Msg() *snappipb.BgpSrteV6TunnelTlv {
	return obj.obj
}

func (obj *bgpSrteV6TunnelTlv) SetMsg(msg *snappipb.BgpSrteV6TunnelTlv) BgpSrteV6TunnelTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteV6TunnelTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteV6TunnelTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteV6TunnelTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteV6TunnelTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteV6TunnelTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteV6TunnelTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteV6TunnelTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteV6TunnelTlv interface {
	Msg() *snappipb.BgpSrteV6TunnelTlv
	SetMsg(*snappipb.BgpSrteV6TunnelTlv) BgpSrteV6TunnelTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	RemoteEndpointSubTlv() BgpSrteRemoteEndpointSubTlv
	SetRemoteEndpointSubTlv(value BgpSrteRemoteEndpointSubTlv) BgpSrteV6TunnelTlv
	HasRemoteEndpointSubTlv() bool
	ColorSubTlv() BgpSrteColorSubTlv
	SetColorSubTlv(value BgpSrteColorSubTlv) BgpSrteV6TunnelTlv
	HasColorSubTlv() bool
	BindingSubTlv() BgpSrteBindingSubTlv
	SetBindingSubTlv(value BgpSrteBindingSubTlv) BgpSrteV6TunnelTlv
	HasBindingSubTlv() bool
	PreferenceSubTlv() BgpSrtePreferenceSubTlv
	SetPreferenceSubTlv(value BgpSrtePreferenceSubTlv) BgpSrteV6TunnelTlv
	HasPreferenceSubTlv() bool
	PolicyPrioritySubTlv() BgpSrtePolicyPrioritySubTlv
	SetPolicyPrioritySubTlv(value BgpSrtePolicyPrioritySubTlv) BgpSrteV6TunnelTlv
	HasPolicyPrioritySubTlv() bool
	PolicyNameSubTlv() BgpSrtePolicyNameSubTlv
	SetPolicyNameSubTlv(value BgpSrtePolicyNameSubTlv) BgpSrteV6TunnelTlv
	HasPolicyNameSubTlv() bool
	ExplicitNullLabelPolicySubTlv() BgpSrteExplicitNullLabelPolicySubTlv
	SetExplicitNullLabelPolicySubTlv(value BgpSrteExplicitNullLabelPolicySubTlv) BgpSrteV6TunnelTlv
	HasExplicitNullLabelPolicySubTlv() bool
	SegmentLists() BgpSrteV6TunnelTlvBgpSrteSegmentListIter
	Name() string
	SetName(value string) BgpSrteV6TunnelTlv
	Active() bool
	SetActive(value bool) BgpSrteV6TunnelTlv
	HasActive() bool
}

// RemoteEndpointSubTlv returns a BgpSrteRemoteEndpointSubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) RemoteEndpointSubTlv() BgpSrteRemoteEndpointSubTlv {
	if obj.obj.RemoteEndpointSubTlv == nil {
		obj.obj.RemoteEndpointSubTlv = NewBgpSrteRemoteEndpointSubTlv().Msg()
	}
	return &bgpSrteRemoteEndpointSubTlv{obj: obj.obj.RemoteEndpointSubTlv}
}

// RemoteEndpointSubTlv returns a BgpSrteRemoteEndpointSubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) HasRemoteEndpointSubTlv() bool {
	return obj.obj.RemoteEndpointSubTlv != nil
}

// SetRemoteEndpointSubTlv sets the BgpSrteRemoteEndpointSubTlv value in the BgpSrteV6TunnelTlv object
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) SetRemoteEndpointSubTlv(value BgpSrteRemoteEndpointSubTlv) BgpSrteV6TunnelTlv {
	obj.RemoteEndpointSubTlv().SetMsg(value.Msg())

	return obj
}

// ColorSubTlv returns a BgpSrteColorSubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) ColorSubTlv() BgpSrteColorSubTlv {
	if obj.obj.ColorSubTlv == nil {
		obj.obj.ColorSubTlv = NewBgpSrteColorSubTlv().Msg()
	}
	return &bgpSrteColorSubTlv{obj: obj.obj.ColorSubTlv}
}

// ColorSubTlv returns a BgpSrteColorSubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) HasColorSubTlv() bool {
	return obj.obj.ColorSubTlv != nil
}

// SetColorSubTlv sets the BgpSrteColorSubTlv value in the BgpSrteV6TunnelTlv object
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) SetColorSubTlv(value BgpSrteColorSubTlv) BgpSrteV6TunnelTlv {
	obj.ColorSubTlv().SetMsg(value.Msg())

	return obj
}

// BindingSubTlv returns a BgpSrteBindingSubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) BindingSubTlv() BgpSrteBindingSubTlv {
	if obj.obj.BindingSubTlv == nil {
		obj.obj.BindingSubTlv = NewBgpSrteBindingSubTlv().Msg()
	}
	return &bgpSrteBindingSubTlv{obj: obj.obj.BindingSubTlv}
}

// BindingSubTlv returns a BgpSrteBindingSubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) HasBindingSubTlv() bool {
	return obj.obj.BindingSubTlv != nil
}

// SetBindingSubTlv sets the BgpSrteBindingSubTlv value in the BgpSrteV6TunnelTlv object
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) SetBindingSubTlv(value BgpSrteBindingSubTlv) BgpSrteV6TunnelTlv {
	obj.BindingSubTlv().SetMsg(value.Msg())

	return obj
}

// PreferenceSubTlv returns a BgpSrtePreferenceSubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) PreferenceSubTlv() BgpSrtePreferenceSubTlv {
	if obj.obj.PreferenceSubTlv == nil {
		obj.obj.PreferenceSubTlv = NewBgpSrtePreferenceSubTlv().Msg()
	}
	return &bgpSrtePreferenceSubTlv{obj: obj.obj.PreferenceSubTlv}
}

// PreferenceSubTlv returns a BgpSrtePreferenceSubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) HasPreferenceSubTlv() bool {
	return obj.obj.PreferenceSubTlv != nil
}

// SetPreferenceSubTlv sets the BgpSrtePreferenceSubTlv value in the BgpSrteV6TunnelTlv object
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) SetPreferenceSubTlv(value BgpSrtePreferenceSubTlv) BgpSrteV6TunnelTlv {
	obj.PreferenceSubTlv().SetMsg(value.Msg())

	return obj
}

// PolicyPrioritySubTlv returns a BgpSrtePolicyPrioritySubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) PolicyPrioritySubTlv() BgpSrtePolicyPrioritySubTlv {
	if obj.obj.PolicyPrioritySubTlv == nil {
		obj.obj.PolicyPrioritySubTlv = NewBgpSrtePolicyPrioritySubTlv().Msg()
	}
	return &bgpSrtePolicyPrioritySubTlv{obj: obj.obj.PolicyPrioritySubTlv}
}

// PolicyPrioritySubTlv returns a BgpSrtePolicyPrioritySubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) HasPolicyPrioritySubTlv() bool {
	return obj.obj.PolicyPrioritySubTlv != nil
}

// SetPolicyPrioritySubTlv sets the BgpSrtePolicyPrioritySubTlv value in the BgpSrteV6TunnelTlv object
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) SetPolicyPrioritySubTlv(value BgpSrtePolicyPrioritySubTlv) BgpSrteV6TunnelTlv {
	obj.PolicyPrioritySubTlv().SetMsg(value.Msg())

	return obj
}

// PolicyNameSubTlv returns a BgpSrtePolicyNameSubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) PolicyNameSubTlv() BgpSrtePolicyNameSubTlv {
	if obj.obj.PolicyNameSubTlv == nil {
		obj.obj.PolicyNameSubTlv = NewBgpSrtePolicyNameSubTlv().Msg()
	}
	return &bgpSrtePolicyNameSubTlv{obj: obj.obj.PolicyNameSubTlv}
}

// PolicyNameSubTlv returns a BgpSrtePolicyNameSubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) HasPolicyNameSubTlv() bool {
	return obj.obj.PolicyNameSubTlv != nil
}

// SetPolicyNameSubTlv sets the BgpSrtePolicyNameSubTlv value in the BgpSrteV6TunnelTlv object
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) SetPolicyNameSubTlv(value BgpSrtePolicyNameSubTlv) BgpSrteV6TunnelTlv {
	obj.PolicyNameSubTlv().SetMsg(value.Msg())

	return obj
}

// ExplicitNullLabelPolicySubTlv returns a BgpSrteExplicitNullLabelPolicySubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) ExplicitNullLabelPolicySubTlv() BgpSrteExplicitNullLabelPolicySubTlv {
	if obj.obj.ExplicitNullLabelPolicySubTlv == nil {
		obj.obj.ExplicitNullLabelPolicySubTlv = NewBgpSrteExplicitNullLabelPolicySubTlv().Msg()
	}
	return &bgpSrteExplicitNullLabelPolicySubTlv{obj: obj.obj.ExplicitNullLabelPolicySubTlv}
}

// ExplicitNullLabelPolicySubTlv returns a BgpSrteExplicitNullLabelPolicySubTlv
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) HasExplicitNullLabelPolicySubTlv() bool {
	return obj.obj.ExplicitNullLabelPolicySubTlv != nil
}

// SetExplicitNullLabelPolicySubTlv sets the BgpSrteExplicitNullLabelPolicySubTlv value in the BgpSrteV6TunnelTlv object
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) SetExplicitNullLabelPolicySubTlv(value BgpSrteExplicitNullLabelPolicySubTlv) BgpSrteV6TunnelTlv {
	obj.ExplicitNullLabelPolicySubTlv().SetMsg(value.Msg())

	return obj
}

// SegmentLists returns a []BgpSrteSegmentList
//  description is TBD
func (obj *bgpSrteV6TunnelTlv) SegmentLists() BgpSrteV6TunnelTlvBgpSrteSegmentListIter {
	if obj.obj.SegmentLists == nil {
		obj.obj.SegmentLists = []*snappipb.BgpSrteSegmentList{}
	}
	return &bgpSrteV6TunnelTlvBgpSrteSegmentListIter{obj: obj}
}

type bgpSrteV6TunnelTlvBgpSrteSegmentListIter struct {
	obj *bgpSrteV6TunnelTlv
}

type BgpSrteV6TunnelTlvBgpSrteSegmentListIter interface {
	Add() BgpSrteSegmentList
	Items() []BgpSrteSegmentList
}

func (obj *bgpSrteV6TunnelTlvBgpSrteSegmentListIter) Add() BgpSrteSegmentList {
	newObj := &snappipb.BgpSrteSegmentList{}
	obj.obj.obj.SegmentLists = append(obj.obj.obj.SegmentLists, newObj)
	newLibObj := &bgpSrteSegmentList{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpSrteV6TunnelTlvBgpSrteSegmentListIter) Items() []BgpSrteSegmentList {
	slice := []BgpSrteSegmentList{}
	for _, item := range obj.obj.obj.SegmentLists {
		slice = append(slice, &bgpSrteSegmentList{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteV6TunnelTlv) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the BgpSrteV6TunnelTlv object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteV6TunnelTlv) SetName(value string) BgpSrteV6TunnelTlv {
	obj.obj.Name = value

	return obj
}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV6TunnelTlv) Active() bool {

	if obj.obj.Active == nil {
		*obj.obj.Active = true
	}

	return *obj.obj.Active

}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV6TunnelTlv) HasActive() bool {
	return obj.obj.Active != nil
}

// SetActive sets the bool value in the BgpSrteV6TunnelTlv object
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteV6TunnelTlv) SetActive(value bool) BgpSrteV6TunnelTlv {
	obj.obj.Active = &value

	return obj
}

func (obj *bgpSrteV6TunnelTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.RemoteEndpointSubTlv != nil {
		obj.RemoteEndpointSubTlv().validateObj(set_default)
	}

	if obj.obj.ColorSubTlv != nil {
		obj.ColorSubTlv().validateObj(set_default)
	}

	if obj.obj.BindingSubTlv != nil {
		obj.BindingSubTlv().validateObj(set_default)
	}

	if obj.obj.PreferenceSubTlv != nil {
		obj.PreferenceSubTlv().validateObj(set_default)
	}

	if obj.obj.PolicyPrioritySubTlv != nil {
		obj.PolicyPrioritySubTlv().validateObj(set_default)
	}

	if obj.obj.PolicyNameSubTlv != nil {
		obj.PolicyNameSubTlv().validateObj(set_default)
	}

	if obj.obj.ExplicitNullLabelPolicySubTlv != nil {
		obj.ExplicitNullLabelPolicySubTlv().validateObj(set_default)
	}
	if obj.obj.SegmentLists != nil {
		for _, item := range obj.SegmentLists().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface BgpSrteV6TunnelTlv")
	}
}

func (obj *bgpSrteV6TunnelTlv) setDefault() {
	if obj.obj.Active == nil {
		obj.SetActive(true)
	}

}

type patternFlowIpv4PriorityRawCounter struct {
	obj *snappipb.PatternFlowIpv4PriorityRawCounter
}

func NewPatternFlowIpv4PriorityRawCounter() PatternFlowIpv4PriorityRawCounter {
	obj := patternFlowIpv4PriorityRawCounter{obj: &snappipb.PatternFlowIpv4PriorityRawCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4PriorityRawCounter) Msg() *snappipb.PatternFlowIpv4PriorityRawCounter {
	return obj.obj
}

func (obj *patternFlowIpv4PriorityRawCounter) SetMsg(msg *snappipb.PatternFlowIpv4PriorityRawCounter) PatternFlowIpv4PriorityRawCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4PriorityRawCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4PriorityRawCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4PriorityRawCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4PriorityRawCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4PriorityRawCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4PriorityRawCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4PriorityRawCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4PriorityRawCounter interface {
	Msg() *snappipb.PatternFlowIpv4PriorityRawCounter
	SetMsg(*snappipb.PatternFlowIpv4PriorityRawCounter) PatternFlowIpv4PriorityRawCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4PriorityRawCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4PriorityRawCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4PriorityRawCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4PriorityRawCounter object
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) SetStart(value int32) PatternFlowIpv4PriorityRawCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4PriorityRawCounter object
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) SetStep(value int32) PatternFlowIpv4PriorityRawCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4PriorityRawCounter object
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) SetCount(value int32) PatternFlowIpv4PriorityRawCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4PriorityRawCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4PriorityRawCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4PriorityRawCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4PriorityRawCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4TosPrecedence struct {
	obj *snappipb.PatternFlowIpv4TosPrecedence
}

func NewPatternFlowIpv4TosPrecedence() PatternFlowIpv4TosPrecedence {
	obj := patternFlowIpv4TosPrecedence{obj: &snappipb.PatternFlowIpv4TosPrecedence{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosPrecedence) Msg() *snappipb.PatternFlowIpv4TosPrecedence {
	return obj.obj
}

func (obj *patternFlowIpv4TosPrecedence) SetMsg(msg *snappipb.PatternFlowIpv4TosPrecedence) PatternFlowIpv4TosPrecedence {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosPrecedence) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosPrecedence) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosPrecedence) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosPrecedence) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosPrecedence) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosPrecedence) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosPrecedence) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosPrecedence interface {
	Msg() *snappipb.PatternFlowIpv4TosPrecedence
	SetMsg(*snappipb.PatternFlowIpv4TosPrecedence) PatternFlowIpv4TosPrecedence
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4TosPrecedenceChoiceEnum
	SetChoice(value PatternFlowIpv4TosPrecedenceChoiceEnum) PatternFlowIpv4TosPrecedence
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosPrecedence
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosPrecedence
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosPrecedence
	HasMetricGroup() bool
	Increment() PatternFlowIpv4TosPrecedenceCounter
	SetIncrement(value PatternFlowIpv4TosPrecedenceCounter) PatternFlowIpv4TosPrecedence
	HasIncrement() bool
	Decrement() PatternFlowIpv4TosPrecedenceCounter
	SetDecrement(value PatternFlowIpv4TosPrecedenceCounter) PatternFlowIpv4TosPrecedence
	HasDecrement() bool
}

type PatternFlowIpv4TosPrecedenceChoiceEnum string

var PatternFlowIpv4TosPrecedenceChoice = struct {
	VALUE     PatternFlowIpv4TosPrecedenceChoiceEnum
	VALUES    PatternFlowIpv4TosPrecedenceChoiceEnum
	INCREMENT PatternFlowIpv4TosPrecedenceChoiceEnum
	DECREMENT PatternFlowIpv4TosPrecedenceChoiceEnum
}{
	VALUE:     PatternFlowIpv4TosPrecedenceChoiceEnum("value"),
	VALUES:    PatternFlowIpv4TosPrecedenceChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4TosPrecedenceChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4TosPrecedenceChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4TosPrecedence) Choice() PatternFlowIpv4TosPrecedenceChoiceEnum {
	return PatternFlowIpv4TosPrecedenceChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4TosPrecedence) SetChoice(value PatternFlowIpv4TosPrecedenceChoiceEnum) PatternFlowIpv4TosPrecedence {
	intValue, ok := snappipb.PatternFlowIpv4TosPrecedence_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4TosPrecedenceChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4TosPrecedence_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4TosPrecedence object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) SetValue(value int32) PatternFlowIpv4TosPrecedence {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4TosPrecedenceChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4TosPrecedence object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) SetValues(value []int32) PatternFlowIpv4TosPrecedence {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4TosPrecedenceChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosPrecedence) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosPrecedence) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4TosPrecedence object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosPrecedence) SetMetricGroup(value string) PatternFlowIpv4TosPrecedence {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4TosPrecedenceCounter
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) Increment() PatternFlowIpv4TosPrecedenceCounter {
	obj.SetChoice(PatternFlowIpv4TosPrecedenceChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4TosPrecedenceCounter().Msg()
	}
	return &patternFlowIpv4TosPrecedenceCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4TosPrecedenceCounter
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4TosPrecedenceCounter value in the PatternFlowIpv4TosPrecedence object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) SetIncrement(value PatternFlowIpv4TosPrecedenceCounter) PatternFlowIpv4TosPrecedence {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosPrecedenceChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4TosPrecedenceCounter
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) Decrement() PatternFlowIpv4TosPrecedenceCounter {
	obj.SetChoice(PatternFlowIpv4TosPrecedenceChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4TosPrecedenceCounter().Msg()
	}
	return &patternFlowIpv4TosPrecedenceCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4TosPrecedenceCounter
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4TosPrecedenceCounter value in the PatternFlowIpv4TosPrecedence object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) SetDecrement(value PatternFlowIpv4TosPrecedenceCounter) PatternFlowIpv4TosPrecedence {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosPrecedenceChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4TosPrecedence) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosPrecedence.Value <= 7 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosPrecedence.Values <= 7 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4TosPrecedence) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4TosPrecedenceChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4TosDelay struct {
	obj *snappipb.PatternFlowIpv4TosDelay
}

func NewPatternFlowIpv4TosDelay() PatternFlowIpv4TosDelay {
	obj := patternFlowIpv4TosDelay{obj: &snappipb.PatternFlowIpv4TosDelay{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosDelay) Msg() *snappipb.PatternFlowIpv4TosDelay {
	return obj.obj
}

func (obj *patternFlowIpv4TosDelay) SetMsg(msg *snappipb.PatternFlowIpv4TosDelay) PatternFlowIpv4TosDelay {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosDelay) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosDelay) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosDelay) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosDelay) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosDelay) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosDelay) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosDelay) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosDelay interface {
	Msg() *snappipb.PatternFlowIpv4TosDelay
	SetMsg(*snappipb.PatternFlowIpv4TosDelay) PatternFlowIpv4TosDelay
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4TosDelayChoiceEnum
	SetChoice(value PatternFlowIpv4TosDelayChoiceEnum) PatternFlowIpv4TosDelay
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosDelay
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosDelay
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosDelay
	HasMetricGroup() bool
	Increment() PatternFlowIpv4TosDelayCounter
	SetIncrement(value PatternFlowIpv4TosDelayCounter) PatternFlowIpv4TosDelay
	HasIncrement() bool
	Decrement() PatternFlowIpv4TosDelayCounter
	SetDecrement(value PatternFlowIpv4TosDelayCounter) PatternFlowIpv4TosDelay
	HasDecrement() bool
}

type PatternFlowIpv4TosDelayChoiceEnum string

var PatternFlowIpv4TosDelayChoice = struct {
	VALUE     PatternFlowIpv4TosDelayChoiceEnum
	VALUES    PatternFlowIpv4TosDelayChoiceEnum
	INCREMENT PatternFlowIpv4TosDelayChoiceEnum
	DECREMENT PatternFlowIpv4TosDelayChoiceEnum
}{
	VALUE:     PatternFlowIpv4TosDelayChoiceEnum("value"),
	VALUES:    PatternFlowIpv4TosDelayChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4TosDelayChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4TosDelayChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4TosDelay) Choice() PatternFlowIpv4TosDelayChoiceEnum {
	return PatternFlowIpv4TosDelayChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4TosDelay) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4TosDelay) SetChoice(value PatternFlowIpv4TosDelayChoiceEnum) PatternFlowIpv4TosDelay {
	intValue, ok := snappipb.PatternFlowIpv4TosDelay_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4TosDelayChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4TosDelay_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelay) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelay) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4TosDelay object
//  description is TBD
func (obj *patternFlowIpv4TosDelay) SetValue(value int32) PatternFlowIpv4TosDelay {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4TosDelayChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosDelay) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4TosDelay object
//  description is TBD
func (obj *patternFlowIpv4TosDelay) SetValues(value []int32) PatternFlowIpv4TosDelay {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4TosDelayChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosDelay) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosDelay) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4TosDelay object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosDelay) SetMetricGroup(value string) PatternFlowIpv4TosDelay {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4TosDelayCounter
//  description is TBD
func (obj *patternFlowIpv4TosDelay) Increment() PatternFlowIpv4TosDelayCounter {
	obj.SetChoice(PatternFlowIpv4TosDelayChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4TosDelayCounter().Msg()
	}
	return &patternFlowIpv4TosDelayCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4TosDelayCounter
//  description is TBD
func (obj *patternFlowIpv4TosDelay) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4TosDelayCounter value in the PatternFlowIpv4TosDelay object
//  description is TBD
func (obj *patternFlowIpv4TosDelay) SetIncrement(value PatternFlowIpv4TosDelayCounter) PatternFlowIpv4TosDelay {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosDelayChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4TosDelayCounter
//  description is TBD
func (obj *patternFlowIpv4TosDelay) Decrement() PatternFlowIpv4TosDelayCounter {
	obj.SetChoice(PatternFlowIpv4TosDelayChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4TosDelayCounter().Msg()
	}
	return &patternFlowIpv4TosDelayCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4TosDelayCounter
//  description is TBD
func (obj *patternFlowIpv4TosDelay) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4TosDelayCounter value in the PatternFlowIpv4TosDelay object
//  description is TBD
func (obj *patternFlowIpv4TosDelay) SetDecrement(value PatternFlowIpv4TosDelayCounter) PatternFlowIpv4TosDelay {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosDelayChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4TosDelay) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosDelay.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosDelay.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4TosDelay) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4TosDelayChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4TosThroughput struct {
	obj *snappipb.PatternFlowIpv4TosThroughput
}

func NewPatternFlowIpv4TosThroughput() PatternFlowIpv4TosThroughput {
	obj := patternFlowIpv4TosThroughput{obj: &snappipb.PatternFlowIpv4TosThroughput{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosThroughput) Msg() *snappipb.PatternFlowIpv4TosThroughput {
	return obj.obj
}

func (obj *patternFlowIpv4TosThroughput) SetMsg(msg *snappipb.PatternFlowIpv4TosThroughput) PatternFlowIpv4TosThroughput {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosThroughput) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosThroughput) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosThroughput) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosThroughput) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosThroughput) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosThroughput) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosThroughput) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosThroughput interface {
	Msg() *snappipb.PatternFlowIpv4TosThroughput
	SetMsg(*snappipb.PatternFlowIpv4TosThroughput) PatternFlowIpv4TosThroughput
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4TosThroughputChoiceEnum
	SetChoice(value PatternFlowIpv4TosThroughputChoiceEnum) PatternFlowIpv4TosThroughput
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosThroughput
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosThroughput
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosThroughput
	HasMetricGroup() bool
	Increment() PatternFlowIpv4TosThroughputCounter
	SetIncrement(value PatternFlowIpv4TosThroughputCounter) PatternFlowIpv4TosThroughput
	HasIncrement() bool
	Decrement() PatternFlowIpv4TosThroughputCounter
	SetDecrement(value PatternFlowIpv4TosThroughputCounter) PatternFlowIpv4TosThroughput
	HasDecrement() bool
}

type PatternFlowIpv4TosThroughputChoiceEnum string

var PatternFlowIpv4TosThroughputChoice = struct {
	VALUE     PatternFlowIpv4TosThroughputChoiceEnum
	VALUES    PatternFlowIpv4TosThroughputChoiceEnum
	INCREMENT PatternFlowIpv4TosThroughputChoiceEnum
	DECREMENT PatternFlowIpv4TosThroughputChoiceEnum
}{
	VALUE:     PatternFlowIpv4TosThroughputChoiceEnum("value"),
	VALUES:    PatternFlowIpv4TosThroughputChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4TosThroughputChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4TosThroughputChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4TosThroughput) Choice() PatternFlowIpv4TosThroughputChoiceEnum {
	return PatternFlowIpv4TosThroughputChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4TosThroughput) SetChoice(value PatternFlowIpv4TosThroughputChoiceEnum) PatternFlowIpv4TosThroughput {
	intValue, ok := snappipb.PatternFlowIpv4TosThroughput_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4TosThroughputChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4TosThroughput_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4TosThroughput object
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) SetValue(value int32) PatternFlowIpv4TosThroughput {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4TosThroughputChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4TosThroughput object
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) SetValues(value []int32) PatternFlowIpv4TosThroughput {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4TosThroughputChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosThroughput) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosThroughput) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4TosThroughput object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosThroughput) SetMetricGroup(value string) PatternFlowIpv4TosThroughput {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4TosThroughputCounter
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) Increment() PatternFlowIpv4TosThroughputCounter {
	obj.SetChoice(PatternFlowIpv4TosThroughputChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4TosThroughputCounter().Msg()
	}
	return &patternFlowIpv4TosThroughputCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4TosThroughputCounter
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4TosThroughputCounter value in the PatternFlowIpv4TosThroughput object
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) SetIncrement(value PatternFlowIpv4TosThroughputCounter) PatternFlowIpv4TosThroughput {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosThroughputChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4TosThroughputCounter
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) Decrement() PatternFlowIpv4TosThroughputCounter {
	obj.SetChoice(PatternFlowIpv4TosThroughputChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4TosThroughputCounter().Msg()
	}
	return &patternFlowIpv4TosThroughputCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4TosThroughputCounter
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4TosThroughputCounter value in the PatternFlowIpv4TosThroughput object
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) SetDecrement(value PatternFlowIpv4TosThroughputCounter) PatternFlowIpv4TosThroughput {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosThroughputChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4TosThroughput) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosThroughput.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosThroughput.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4TosThroughput) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4TosThroughputChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4TosReliability struct {
	obj *snappipb.PatternFlowIpv4TosReliability
}

func NewPatternFlowIpv4TosReliability() PatternFlowIpv4TosReliability {
	obj := patternFlowIpv4TosReliability{obj: &snappipb.PatternFlowIpv4TosReliability{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosReliability) Msg() *snappipb.PatternFlowIpv4TosReliability {
	return obj.obj
}

func (obj *patternFlowIpv4TosReliability) SetMsg(msg *snappipb.PatternFlowIpv4TosReliability) PatternFlowIpv4TosReliability {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosReliability) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosReliability) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosReliability) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosReliability) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosReliability) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosReliability) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosReliability) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosReliability interface {
	Msg() *snappipb.PatternFlowIpv4TosReliability
	SetMsg(*snappipb.PatternFlowIpv4TosReliability) PatternFlowIpv4TosReliability
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4TosReliabilityChoiceEnum
	SetChoice(value PatternFlowIpv4TosReliabilityChoiceEnum) PatternFlowIpv4TosReliability
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosReliability
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosReliability
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosReliability
	HasMetricGroup() bool
	Increment() PatternFlowIpv4TosReliabilityCounter
	SetIncrement(value PatternFlowIpv4TosReliabilityCounter) PatternFlowIpv4TosReliability
	HasIncrement() bool
	Decrement() PatternFlowIpv4TosReliabilityCounter
	SetDecrement(value PatternFlowIpv4TosReliabilityCounter) PatternFlowIpv4TosReliability
	HasDecrement() bool
}

type PatternFlowIpv4TosReliabilityChoiceEnum string

var PatternFlowIpv4TosReliabilityChoice = struct {
	VALUE     PatternFlowIpv4TosReliabilityChoiceEnum
	VALUES    PatternFlowIpv4TosReliabilityChoiceEnum
	INCREMENT PatternFlowIpv4TosReliabilityChoiceEnum
	DECREMENT PatternFlowIpv4TosReliabilityChoiceEnum
}{
	VALUE:     PatternFlowIpv4TosReliabilityChoiceEnum("value"),
	VALUES:    PatternFlowIpv4TosReliabilityChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4TosReliabilityChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4TosReliabilityChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4TosReliability) Choice() PatternFlowIpv4TosReliabilityChoiceEnum {
	return PatternFlowIpv4TosReliabilityChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4TosReliability) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4TosReliability) SetChoice(value PatternFlowIpv4TosReliabilityChoiceEnum) PatternFlowIpv4TosReliability {
	intValue, ok := snappipb.PatternFlowIpv4TosReliability_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4TosReliabilityChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4TosReliability_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliability) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliability) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4TosReliability object
//  description is TBD
func (obj *patternFlowIpv4TosReliability) SetValue(value int32) PatternFlowIpv4TosReliability {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4TosReliabilityChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosReliability) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4TosReliability object
//  description is TBD
func (obj *patternFlowIpv4TosReliability) SetValues(value []int32) PatternFlowIpv4TosReliability {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4TosReliabilityChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosReliability) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosReliability) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4TosReliability object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosReliability) SetMetricGroup(value string) PatternFlowIpv4TosReliability {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4TosReliabilityCounter
//  description is TBD
func (obj *patternFlowIpv4TosReliability) Increment() PatternFlowIpv4TosReliabilityCounter {
	obj.SetChoice(PatternFlowIpv4TosReliabilityChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4TosReliabilityCounter().Msg()
	}
	return &patternFlowIpv4TosReliabilityCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4TosReliabilityCounter
//  description is TBD
func (obj *patternFlowIpv4TosReliability) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4TosReliabilityCounter value in the PatternFlowIpv4TosReliability object
//  description is TBD
func (obj *patternFlowIpv4TosReliability) SetIncrement(value PatternFlowIpv4TosReliabilityCounter) PatternFlowIpv4TosReliability {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosReliabilityChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4TosReliabilityCounter
//  description is TBD
func (obj *patternFlowIpv4TosReliability) Decrement() PatternFlowIpv4TosReliabilityCounter {
	obj.SetChoice(PatternFlowIpv4TosReliabilityChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4TosReliabilityCounter().Msg()
	}
	return &patternFlowIpv4TosReliabilityCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4TosReliabilityCounter
//  description is TBD
func (obj *patternFlowIpv4TosReliability) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4TosReliabilityCounter value in the PatternFlowIpv4TosReliability object
//  description is TBD
func (obj *patternFlowIpv4TosReliability) SetDecrement(value PatternFlowIpv4TosReliabilityCounter) PatternFlowIpv4TosReliability {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosReliabilityChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4TosReliability) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosReliability.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosReliability.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4TosReliability) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4TosReliabilityChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4TosMonetary struct {
	obj *snappipb.PatternFlowIpv4TosMonetary
}

func NewPatternFlowIpv4TosMonetary() PatternFlowIpv4TosMonetary {
	obj := patternFlowIpv4TosMonetary{obj: &snappipb.PatternFlowIpv4TosMonetary{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosMonetary) Msg() *snappipb.PatternFlowIpv4TosMonetary {
	return obj.obj
}

func (obj *patternFlowIpv4TosMonetary) SetMsg(msg *snappipb.PatternFlowIpv4TosMonetary) PatternFlowIpv4TosMonetary {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosMonetary) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosMonetary) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosMonetary) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosMonetary) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosMonetary) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosMonetary) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosMonetary) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosMonetary interface {
	Msg() *snappipb.PatternFlowIpv4TosMonetary
	SetMsg(*snappipb.PatternFlowIpv4TosMonetary) PatternFlowIpv4TosMonetary
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4TosMonetaryChoiceEnum
	SetChoice(value PatternFlowIpv4TosMonetaryChoiceEnum) PatternFlowIpv4TosMonetary
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosMonetary
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosMonetary
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosMonetary
	HasMetricGroup() bool
	Increment() PatternFlowIpv4TosMonetaryCounter
	SetIncrement(value PatternFlowIpv4TosMonetaryCounter) PatternFlowIpv4TosMonetary
	HasIncrement() bool
	Decrement() PatternFlowIpv4TosMonetaryCounter
	SetDecrement(value PatternFlowIpv4TosMonetaryCounter) PatternFlowIpv4TosMonetary
	HasDecrement() bool
}

type PatternFlowIpv4TosMonetaryChoiceEnum string

var PatternFlowIpv4TosMonetaryChoice = struct {
	VALUE     PatternFlowIpv4TosMonetaryChoiceEnum
	VALUES    PatternFlowIpv4TosMonetaryChoiceEnum
	INCREMENT PatternFlowIpv4TosMonetaryChoiceEnum
	DECREMENT PatternFlowIpv4TosMonetaryChoiceEnum
}{
	VALUE:     PatternFlowIpv4TosMonetaryChoiceEnum("value"),
	VALUES:    PatternFlowIpv4TosMonetaryChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4TosMonetaryChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4TosMonetaryChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4TosMonetary) Choice() PatternFlowIpv4TosMonetaryChoiceEnum {
	return PatternFlowIpv4TosMonetaryChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4TosMonetary) SetChoice(value PatternFlowIpv4TosMonetaryChoiceEnum) PatternFlowIpv4TosMonetary {
	intValue, ok := snappipb.PatternFlowIpv4TosMonetary_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4TosMonetaryChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4TosMonetary_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4TosMonetary object
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) SetValue(value int32) PatternFlowIpv4TosMonetary {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4TosMonetaryChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4TosMonetary object
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) SetValues(value []int32) PatternFlowIpv4TosMonetary {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4TosMonetaryChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosMonetary) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosMonetary) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4TosMonetary object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosMonetary) SetMetricGroup(value string) PatternFlowIpv4TosMonetary {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4TosMonetaryCounter
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) Increment() PatternFlowIpv4TosMonetaryCounter {
	obj.SetChoice(PatternFlowIpv4TosMonetaryChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4TosMonetaryCounter().Msg()
	}
	return &patternFlowIpv4TosMonetaryCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4TosMonetaryCounter
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4TosMonetaryCounter value in the PatternFlowIpv4TosMonetary object
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) SetIncrement(value PatternFlowIpv4TosMonetaryCounter) PatternFlowIpv4TosMonetary {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosMonetaryChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4TosMonetaryCounter
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) Decrement() PatternFlowIpv4TosMonetaryCounter {
	obj.SetChoice(PatternFlowIpv4TosMonetaryChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4TosMonetaryCounter().Msg()
	}
	return &patternFlowIpv4TosMonetaryCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4TosMonetaryCounter
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4TosMonetaryCounter value in the PatternFlowIpv4TosMonetary object
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) SetDecrement(value PatternFlowIpv4TosMonetaryCounter) PatternFlowIpv4TosMonetary {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosMonetaryChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4TosMonetary) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosMonetary.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosMonetary.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4TosMonetary) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4TosMonetaryChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4TosUnused struct {
	obj *snappipb.PatternFlowIpv4TosUnused
}

func NewPatternFlowIpv4TosUnused() PatternFlowIpv4TosUnused {
	obj := patternFlowIpv4TosUnused{obj: &snappipb.PatternFlowIpv4TosUnused{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosUnused) Msg() *snappipb.PatternFlowIpv4TosUnused {
	return obj.obj
}

func (obj *patternFlowIpv4TosUnused) SetMsg(msg *snappipb.PatternFlowIpv4TosUnused) PatternFlowIpv4TosUnused {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosUnused) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosUnused) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosUnused) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosUnused) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosUnused) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosUnused) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosUnused) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosUnused interface {
	Msg() *snappipb.PatternFlowIpv4TosUnused
	SetMsg(*snappipb.PatternFlowIpv4TosUnused) PatternFlowIpv4TosUnused
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4TosUnusedChoiceEnum
	SetChoice(value PatternFlowIpv4TosUnusedChoiceEnum) PatternFlowIpv4TosUnused
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosUnused
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosUnused
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosUnused
	HasMetricGroup() bool
	Increment() PatternFlowIpv4TosUnusedCounter
	SetIncrement(value PatternFlowIpv4TosUnusedCounter) PatternFlowIpv4TosUnused
	HasIncrement() bool
	Decrement() PatternFlowIpv4TosUnusedCounter
	SetDecrement(value PatternFlowIpv4TosUnusedCounter) PatternFlowIpv4TosUnused
	HasDecrement() bool
}

type PatternFlowIpv4TosUnusedChoiceEnum string

var PatternFlowIpv4TosUnusedChoice = struct {
	VALUE     PatternFlowIpv4TosUnusedChoiceEnum
	VALUES    PatternFlowIpv4TosUnusedChoiceEnum
	INCREMENT PatternFlowIpv4TosUnusedChoiceEnum
	DECREMENT PatternFlowIpv4TosUnusedChoiceEnum
}{
	VALUE:     PatternFlowIpv4TosUnusedChoiceEnum("value"),
	VALUES:    PatternFlowIpv4TosUnusedChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4TosUnusedChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4TosUnusedChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4TosUnused) Choice() PatternFlowIpv4TosUnusedChoiceEnum {
	return PatternFlowIpv4TosUnusedChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4TosUnused) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4TosUnused) SetChoice(value PatternFlowIpv4TosUnusedChoiceEnum) PatternFlowIpv4TosUnused {
	intValue, ok := snappipb.PatternFlowIpv4TosUnused_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4TosUnusedChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4TosUnused_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnused) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnused) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4TosUnused object
//  description is TBD
func (obj *patternFlowIpv4TosUnused) SetValue(value int32) PatternFlowIpv4TosUnused {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4TosUnusedChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosUnused) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4TosUnused object
//  description is TBD
func (obj *patternFlowIpv4TosUnused) SetValues(value []int32) PatternFlowIpv4TosUnused {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4TosUnusedChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosUnused) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosUnused) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4TosUnused object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosUnused) SetMetricGroup(value string) PatternFlowIpv4TosUnused {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4TosUnusedCounter
//  description is TBD
func (obj *patternFlowIpv4TosUnused) Increment() PatternFlowIpv4TosUnusedCounter {
	obj.SetChoice(PatternFlowIpv4TosUnusedChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4TosUnusedCounter().Msg()
	}
	return &patternFlowIpv4TosUnusedCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4TosUnusedCounter
//  description is TBD
func (obj *patternFlowIpv4TosUnused) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4TosUnusedCounter value in the PatternFlowIpv4TosUnused object
//  description is TBD
func (obj *patternFlowIpv4TosUnused) SetIncrement(value PatternFlowIpv4TosUnusedCounter) PatternFlowIpv4TosUnused {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosUnusedChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4TosUnusedCounter
//  description is TBD
func (obj *patternFlowIpv4TosUnused) Decrement() PatternFlowIpv4TosUnusedCounter {
	obj.SetChoice(PatternFlowIpv4TosUnusedChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4TosUnusedCounter().Msg()
	}
	return &patternFlowIpv4TosUnusedCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4TosUnusedCounter
//  description is TBD
func (obj *patternFlowIpv4TosUnused) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4TosUnusedCounter value in the PatternFlowIpv4TosUnused object
//  description is TBD
func (obj *patternFlowIpv4TosUnused) SetDecrement(value PatternFlowIpv4TosUnusedCounter) PatternFlowIpv4TosUnused {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4TosUnusedChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4TosUnused) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosUnused.Value <= 1 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosUnused.Values <= 1 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4TosUnused) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4TosUnusedChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4DscpPhb struct {
	obj *snappipb.PatternFlowIpv4DscpPhb
}

func NewPatternFlowIpv4DscpPhb() PatternFlowIpv4DscpPhb {
	obj := patternFlowIpv4DscpPhb{obj: &snappipb.PatternFlowIpv4DscpPhb{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4DscpPhb) Msg() *snappipb.PatternFlowIpv4DscpPhb {
	return obj.obj
}

func (obj *patternFlowIpv4DscpPhb) SetMsg(msg *snappipb.PatternFlowIpv4DscpPhb) PatternFlowIpv4DscpPhb {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4DscpPhb) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4DscpPhb) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DscpPhb) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpPhb) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DscpPhb) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpPhb) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4DscpPhb) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4DscpPhb interface {
	Msg() *snappipb.PatternFlowIpv4DscpPhb
	SetMsg(*snappipb.PatternFlowIpv4DscpPhb) PatternFlowIpv4DscpPhb
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4DscpPhbChoiceEnum
	SetChoice(value PatternFlowIpv4DscpPhbChoiceEnum) PatternFlowIpv4DscpPhb
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4DscpPhb
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4DscpPhb
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4DscpPhb
	HasMetricGroup() bool
	Increment() PatternFlowIpv4DscpPhbCounter
	SetIncrement(value PatternFlowIpv4DscpPhbCounter) PatternFlowIpv4DscpPhb
	HasIncrement() bool
	Decrement() PatternFlowIpv4DscpPhbCounter
	SetDecrement(value PatternFlowIpv4DscpPhbCounter) PatternFlowIpv4DscpPhb
	HasDecrement() bool
}

type PatternFlowIpv4DscpPhbChoiceEnum string

var PatternFlowIpv4DscpPhbChoice = struct {
	VALUE     PatternFlowIpv4DscpPhbChoiceEnum
	VALUES    PatternFlowIpv4DscpPhbChoiceEnum
	INCREMENT PatternFlowIpv4DscpPhbChoiceEnum
	DECREMENT PatternFlowIpv4DscpPhbChoiceEnum
}{
	VALUE:     PatternFlowIpv4DscpPhbChoiceEnum("value"),
	VALUES:    PatternFlowIpv4DscpPhbChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4DscpPhbChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4DscpPhbChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4DscpPhb) Choice() PatternFlowIpv4DscpPhbChoiceEnum {
	return PatternFlowIpv4DscpPhbChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4DscpPhb) SetChoice(value PatternFlowIpv4DscpPhbChoiceEnum) PatternFlowIpv4DscpPhb {
	intValue, ok := snappipb.PatternFlowIpv4DscpPhb_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4DscpPhbChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4DscpPhb_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4DscpPhb object
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) SetValue(value int32) PatternFlowIpv4DscpPhb {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4DscpPhbChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4DscpPhb object
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) SetValues(value []int32) PatternFlowIpv4DscpPhb {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4DscpPhbChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DscpPhb) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DscpPhb) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4DscpPhb object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DscpPhb) SetMetricGroup(value string) PatternFlowIpv4DscpPhb {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4DscpPhbCounter
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) Increment() PatternFlowIpv4DscpPhbCounter {
	obj.SetChoice(PatternFlowIpv4DscpPhbChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4DscpPhbCounter().Msg()
	}
	return &patternFlowIpv4DscpPhbCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4DscpPhbCounter
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4DscpPhbCounter value in the PatternFlowIpv4DscpPhb object
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) SetIncrement(value PatternFlowIpv4DscpPhbCounter) PatternFlowIpv4DscpPhb {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4DscpPhbChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4DscpPhbCounter
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) Decrement() PatternFlowIpv4DscpPhbCounter {
	obj.SetChoice(PatternFlowIpv4DscpPhbChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4DscpPhbCounter().Msg()
	}
	return &patternFlowIpv4DscpPhbCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4DscpPhbCounter
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4DscpPhbCounter value in the PatternFlowIpv4DscpPhb object
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) SetDecrement(value PatternFlowIpv4DscpPhbCounter) PatternFlowIpv4DscpPhb {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4DscpPhbChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4DscpPhb) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 63 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DscpPhb.Value <= 63 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 63 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DscpPhb.Values <= 63 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4DscpPhb) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4DscpPhbChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowIpv4DscpEcn struct {
	obj *snappipb.PatternFlowIpv4DscpEcn
}

func NewPatternFlowIpv4DscpEcn() PatternFlowIpv4DscpEcn {
	obj := patternFlowIpv4DscpEcn{obj: &snappipb.PatternFlowIpv4DscpEcn{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4DscpEcn) Msg() *snappipb.PatternFlowIpv4DscpEcn {
	return obj.obj
}

func (obj *patternFlowIpv4DscpEcn) SetMsg(msg *snappipb.PatternFlowIpv4DscpEcn) PatternFlowIpv4DscpEcn {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4DscpEcn) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4DscpEcn) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DscpEcn) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpEcn) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DscpEcn) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpEcn) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4DscpEcn) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4DscpEcn interface {
	Msg() *snappipb.PatternFlowIpv4DscpEcn
	SetMsg(*snappipb.PatternFlowIpv4DscpEcn) PatternFlowIpv4DscpEcn
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Choice() PatternFlowIpv4DscpEcnChoiceEnum
	SetChoice(value PatternFlowIpv4DscpEcnChoiceEnum) PatternFlowIpv4DscpEcn
	HasChoice() bool
	Value() int32
	SetValue(value int32) PatternFlowIpv4DscpEcn
	HasValue() bool
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4DscpEcn
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4DscpEcn
	HasMetricGroup() bool
	Increment() PatternFlowIpv4DscpEcnCounter
	SetIncrement(value PatternFlowIpv4DscpEcnCounter) PatternFlowIpv4DscpEcn
	HasIncrement() bool
	Decrement() PatternFlowIpv4DscpEcnCounter
	SetDecrement(value PatternFlowIpv4DscpEcnCounter) PatternFlowIpv4DscpEcn
	HasDecrement() bool
}

type PatternFlowIpv4DscpEcnChoiceEnum string

var PatternFlowIpv4DscpEcnChoice = struct {
	VALUE     PatternFlowIpv4DscpEcnChoiceEnum
	VALUES    PatternFlowIpv4DscpEcnChoiceEnum
	INCREMENT PatternFlowIpv4DscpEcnChoiceEnum
	DECREMENT PatternFlowIpv4DscpEcnChoiceEnum
}{
	VALUE:     PatternFlowIpv4DscpEcnChoiceEnum("value"),
	VALUES:    PatternFlowIpv4DscpEcnChoiceEnum("values"),
	INCREMENT: PatternFlowIpv4DscpEcnChoiceEnum("increment"),
	DECREMENT: PatternFlowIpv4DscpEcnChoiceEnum("decrement"),
}

func (obj *patternFlowIpv4DscpEcn) Choice() PatternFlowIpv4DscpEcnChoiceEnum {
	return PatternFlowIpv4DscpEcnChoiceEnum(obj.obj.Choice.Enum().String())
}

// Choice returns a string
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) HasChoice() bool {
	return obj.obj.Choice != nil
}

func (obj *patternFlowIpv4DscpEcn) SetChoice(value PatternFlowIpv4DscpEcnChoiceEnum) PatternFlowIpv4DscpEcn {
	intValue, ok := snappipb.PatternFlowIpv4DscpEcn_Choice_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on PatternFlowIpv4DscpEcnChoiceEnum", string(value)))
		return obj
	}
	enumValue := snappipb.PatternFlowIpv4DscpEcn_Choice_Enum(intValue)
	obj.obj.Choice = &enumValue

	if string(value) != "value" {
		obj.obj.Value = nil
	}

	if string(value) != "values" {
		obj.obj.Values = nil
	}

	if string(value) != "increment" {
		obj.obj.Increment = nil
	}

	if string(value) != "decrement" {
		obj.obj.Decrement = nil
	}

	return obj
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) Value() int32 {

	if obj.obj.Value == nil {
		*obj.obj.Value = 0
	}

	return *obj.obj.Value

}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) HasValue() bool {
	return obj.obj.Value != nil
}

// SetValue sets the int32 value in the PatternFlowIpv4DscpEcn object
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) SetValue(value int32) PatternFlowIpv4DscpEcn {
	obj.obj.Value = &value
	obj.SetChoice(PatternFlowIpv4DscpEcnChoice.VALUE)
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) Values() []int32 {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	return obj.obj.Values
}

// SetValues sets the []int32 value in the PatternFlowIpv4DscpEcn object
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) SetValues(value []int32) PatternFlowIpv4DscpEcn {
	if obj.obj.Values == nil {
		obj.obj.Values = make([]int32, 0)
	}
	obj.obj.Values = value

	obj.SetChoice(PatternFlowIpv4DscpEcnChoice.VALUES)
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DscpEcn) MetricGroup() string {

	return *obj.obj.MetricGroup

}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DscpEcn) HasMetricGroup() bool {
	return obj.obj.MetricGroup != nil
}

// SetMetricGroup sets the string value in the PatternFlowIpv4DscpEcn object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DscpEcn) SetMetricGroup(value string) PatternFlowIpv4DscpEcn {
	obj.obj.MetricGroup = &value

	return obj
}

// Increment returns a PatternFlowIpv4DscpEcnCounter
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) Increment() PatternFlowIpv4DscpEcnCounter {
	obj.SetChoice(PatternFlowIpv4DscpEcnChoice.INCREMENT)
	if obj.obj.Increment == nil {
		obj.obj.Increment = NewPatternFlowIpv4DscpEcnCounter().Msg()
	}
	return &patternFlowIpv4DscpEcnCounter{obj: obj.obj.Increment}
}

// Increment returns a PatternFlowIpv4DscpEcnCounter
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) HasIncrement() bool {
	return obj.obj.Increment != nil
}

// SetIncrement sets the PatternFlowIpv4DscpEcnCounter value in the PatternFlowIpv4DscpEcn object
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) SetIncrement(value PatternFlowIpv4DscpEcnCounter) PatternFlowIpv4DscpEcn {
	obj.Increment().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4DscpEcnChoice.INCREMENT)
	return obj
}

// Decrement returns a PatternFlowIpv4DscpEcnCounter
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) Decrement() PatternFlowIpv4DscpEcnCounter {
	obj.SetChoice(PatternFlowIpv4DscpEcnChoice.DECREMENT)
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = NewPatternFlowIpv4DscpEcnCounter().Msg()
	}
	return &patternFlowIpv4DscpEcnCounter{obj: obj.obj.Decrement}
}

// Decrement returns a PatternFlowIpv4DscpEcnCounter
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) HasDecrement() bool {
	return obj.obj.Decrement != nil
}

// SetDecrement sets the PatternFlowIpv4DscpEcnCounter value in the PatternFlowIpv4DscpEcn object
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) SetDecrement(value PatternFlowIpv4DscpEcnCounter) PatternFlowIpv4DscpEcn {
	obj.Decrement().SetMsg(value.Msg())
	obj.SetChoice(PatternFlowIpv4DscpEcnChoice.DECREMENT)
	return obj
}

func (obj *patternFlowIpv4DscpEcn) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Value != nil {
		if *obj.obj.Value < 0 || *obj.obj.Value > 3 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DscpEcn.Value <= 3 but Got %d", *obj.obj.Value))
		}

	}

	for _, item := range obj.obj.Values {
		if item < 0 || item > 3 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DscpEcn.Values <= 3 but Got %d", item))
		}

	}

	if obj.obj.Increment != nil {
		obj.Increment().validateObj(set_default)
	}

	if obj.obj.Decrement != nil {
		obj.Decrement().validateObj(set_default)
	}
}

func (obj *patternFlowIpv4DscpEcn) setDefault() {
	if obj.obj.Choice == nil {
		obj.SetChoice(PatternFlowIpv4DscpEcnChoice.VALUE)
		obj.SetValue(0)
	}

}

type patternFlowGtpExtensionExtensionLengthCounter struct {
	obj *snappipb.PatternFlowGtpExtensionExtensionLengthCounter
}

func NewPatternFlowGtpExtensionExtensionLengthCounter() PatternFlowGtpExtensionExtensionLengthCounter {
	obj := patternFlowGtpExtensionExtensionLengthCounter{obj: &snappipb.PatternFlowGtpExtensionExtensionLengthCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) Msg() *snappipb.PatternFlowGtpExtensionExtensionLengthCounter {
	return obj.obj
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) SetMsg(msg *snappipb.PatternFlowGtpExtensionExtensionLengthCounter) PatternFlowGtpExtensionExtensionLengthCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpExtensionExtensionLengthCounter interface {
	Msg() *snappipb.PatternFlowGtpExtensionExtensionLengthCounter
	SetMsg(*snappipb.PatternFlowGtpExtensionExtensionLengthCounter) PatternFlowGtpExtensionExtensionLengthCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpExtensionExtensionLengthCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpExtensionExtensionLengthCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpExtensionExtensionLengthCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpExtensionExtensionLengthCounter object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) SetStart(value int32) PatternFlowGtpExtensionExtensionLengthCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpExtensionExtensionLengthCounter object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) SetStep(value int32) PatternFlowGtpExtensionExtensionLengthCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpExtensionExtensionLengthCounter object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) SetCount(value int32) PatternFlowGtpExtensionExtensionLengthCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionExtensionLengthCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionExtensionLengthCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpExtensionContentsCounter struct {
	obj *snappipb.PatternFlowGtpExtensionContentsCounter
}

func NewPatternFlowGtpExtensionContentsCounter() PatternFlowGtpExtensionContentsCounter {
	obj := patternFlowGtpExtensionContentsCounter{obj: &snappipb.PatternFlowGtpExtensionContentsCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpExtensionContentsCounter) Msg() *snappipb.PatternFlowGtpExtensionContentsCounter {
	return obj.obj
}

func (obj *patternFlowGtpExtensionContentsCounter) SetMsg(msg *snappipb.PatternFlowGtpExtensionContentsCounter) PatternFlowGtpExtensionContentsCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpExtensionContentsCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpExtensionContentsCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionContentsCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionContentsCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionContentsCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionContentsCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpExtensionContentsCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpExtensionContentsCounter interface {
	Msg() *snappipb.PatternFlowGtpExtensionContentsCounter
	SetMsg(*snappipb.PatternFlowGtpExtensionContentsCounter) PatternFlowGtpExtensionContentsCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int64
	SetStart(value int64) PatternFlowGtpExtensionContentsCounter
	HasStart() bool
	Step() int64
	SetStep(value int64) PatternFlowGtpExtensionContentsCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpExtensionContentsCounter
	HasCount() bool
}

// Start returns a int64
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) Start() int64 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int64
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int64 value in the PatternFlowGtpExtensionContentsCounter object
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) SetStart(value int64) PatternFlowGtpExtensionContentsCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int64
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) Step() int64 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int64
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int64 value in the PatternFlowGtpExtensionContentsCounter object
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) SetStep(value int64) PatternFlowGtpExtensionContentsCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpExtensionContentsCounter object
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) SetCount(value int32) PatternFlowGtpExtensionContentsCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpExtensionContentsCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 281474976710655 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionContentsCounter.Start <= 281474976710655 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 281474976710655 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionContentsCounter.Step <= 281474976710655 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpExtensionContentsCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowGtpExtensionNextExtensionHeaderCounter struct {
	obj *snappipb.PatternFlowGtpExtensionNextExtensionHeaderCounter
}

func NewPatternFlowGtpExtensionNextExtensionHeaderCounter() PatternFlowGtpExtensionNextExtensionHeaderCounter {
	obj := patternFlowGtpExtensionNextExtensionHeaderCounter{obj: &snappipb.PatternFlowGtpExtensionNextExtensionHeaderCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) Msg() *snappipb.PatternFlowGtpExtensionNextExtensionHeaderCounter {
	return obj.obj
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) SetMsg(msg *snappipb.PatternFlowGtpExtensionNextExtensionHeaderCounter) PatternFlowGtpExtensionNextExtensionHeaderCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowGtpExtensionNextExtensionHeaderCounter interface {
	Msg() *snappipb.PatternFlowGtpExtensionNextExtensionHeaderCounter
	SetMsg(*snappipb.PatternFlowGtpExtensionNextExtensionHeaderCounter) PatternFlowGtpExtensionNextExtensionHeaderCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowGtpExtensionNextExtensionHeaderCounter object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) SetStart(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowGtpExtensionNextExtensionHeaderCounter object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) SetStep(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowGtpExtensionNextExtensionHeaderCounter object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) SetCount(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionNextExtensionHeaderCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowGtpExtensionNextExtensionHeaderCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIcmpEchoTypeCounter struct {
	obj *snappipb.PatternFlowIcmpEchoTypeCounter
}

func NewPatternFlowIcmpEchoTypeCounter() PatternFlowIcmpEchoTypeCounter {
	obj := patternFlowIcmpEchoTypeCounter{obj: &snappipb.PatternFlowIcmpEchoTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpEchoTypeCounter) Msg() *snappipb.PatternFlowIcmpEchoTypeCounter {
	return obj.obj
}

func (obj *patternFlowIcmpEchoTypeCounter) SetMsg(msg *snappipb.PatternFlowIcmpEchoTypeCounter) PatternFlowIcmpEchoTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpEchoTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpEchoTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpEchoTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpEchoTypeCounter interface {
	Msg() *snappipb.PatternFlowIcmpEchoTypeCounter
	SetMsg(*snappipb.PatternFlowIcmpEchoTypeCounter) PatternFlowIcmpEchoTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIcmpEchoTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIcmpEchoTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIcmpEchoTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 8
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIcmpEchoTypeCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) SetStart(value int32) PatternFlowIcmpEchoTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIcmpEchoTypeCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) SetStep(value int32) PatternFlowIcmpEchoTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIcmpEchoTypeCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) SetCount(value int32) PatternFlowIcmpEchoTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIcmpEchoTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoTypeCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoTypeCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIcmpEchoTypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(8)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIcmpEchoCodeCounter struct {
	obj *snappipb.PatternFlowIcmpEchoCodeCounter
}

func NewPatternFlowIcmpEchoCodeCounter() PatternFlowIcmpEchoCodeCounter {
	obj := patternFlowIcmpEchoCodeCounter{obj: &snappipb.PatternFlowIcmpEchoCodeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpEchoCodeCounter) Msg() *snappipb.PatternFlowIcmpEchoCodeCounter {
	return obj.obj
}

func (obj *patternFlowIcmpEchoCodeCounter) SetMsg(msg *snappipb.PatternFlowIcmpEchoCodeCounter) PatternFlowIcmpEchoCodeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpEchoCodeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpEchoCodeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoCodeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoCodeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoCodeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoCodeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpEchoCodeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpEchoCodeCounter interface {
	Msg() *snappipb.PatternFlowIcmpEchoCodeCounter
	SetMsg(*snappipb.PatternFlowIcmpEchoCodeCounter) PatternFlowIcmpEchoCodeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIcmpEchoCodeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIcmpEchoCodeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIcmpEchoCodeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIcmpEchoCodeCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) SetStart(value int32) PatternFlowIcmpEchoCodeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIcmpEchoCodeCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) SetStep(value int32) PatternFlowIcmpEchoCodeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIcmpEchoCodeCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) SetCount(value int32) PatternFlowIcmpEchoCodeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIcmpEchoCodeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoCodeCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoCodeCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIcmpEchoCodeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIcmpEchoIdentifierCounter struct {
	obj *snappipb.PatternFlowIcmpEchoIdentifierCounter
}

func NewPatternFlowIcmpEchoIdentifierCounter() PatternFlowIcmpEchoIdentifierCounter {
	obj := patternFlowIcmpEchoIdentifierCounter{obj: &snappipb.PatternFlowIcmpEchoIdentifierCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpEchoIdentifierCounter) Msg() *snappipb.PatternFlowIcmpEchoIdentifierCounter {
	return obj.obj
}

func (obj *patternFlowIcmpEchoIdentifierCounter) SetMsg(msg *snappipb.PatternFlowIcmpEchoIdentifierCounter) PatternFlowIcmpEchoIdentifierCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpEchoIdentifierCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpEchoIdentifierCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoIdentifierCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoIdentifierCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoIdentifierCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoIdentifierCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpEchoIdentifierCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpEchoIdentifierCounter interface {
	Msg() *snappipb.PatternFlowIcmpEchoIdentifierCounter
	SetMsg(*snappipb.PatternFlowIcmpEchoIdentifierCounter) PatternFlowIcmpEchoIdentifierCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIcmpEchoIdentifierCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIcmpEchoIdentifierCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIcmpEchoIdentifierCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIcmpEchoIdentifierCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) SetStart(value int32) PatternFlowIcmpEchoIdentifierCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIcmpEchoIdentifierCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) SetStep(value int32) PatternFlowIcmpEchoIdentifierCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIcmpEchoIdentifierCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) SetCount(value int32) PatternFlowIcmpEchoIdentifierCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIcmpEchoIdentifierCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoIdentifierCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoIdentifierCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIcmpEchoIdentifierCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIcmpEchoSequenceNumberCounter struct {
	obj *snappipb.PatternFlowIcmpEchoSequenceNumberCounter
}

func NewPatternFlowIcmpEchoSequenceNumberCounter() PatternFlowIcmpEchoSequenceNumberCounter {
	obj := patternFlowIcmpEchoSequenceNumberCounter{obj: &snappipb.PatternFlowIcmpEchoSequenceNumberCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) Msg() *snappipb.PatternFlowIcmpEchoSequenceNumberCounter {
	return obj.obj
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) SetMsg(msg *snappipb.PatternFlowIcmpEchoSequenceNumberCounter) PatternFlowIcmpEchoSequenceNumberCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpEchoSequenceNumberCounter interface {
	Msg() *snappipb.PatternFlowIcmpEchoSequenceNumberCounter
	SetMsg(*snappipb.PatternFlowIcmpEchoSequenceNumberCounter) PatternFlowIcmpEchoSequenceNumberCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIcmpEchoSequenceNumberCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIcmpEchoSequenceNumberCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIcmpEchoSequenceNumberCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIcmpEchoSequenceNumberCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) SetStart(value int32) PatternFlowIcmpEchoSequenceNumberCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIcmpEchoSequenceNumberCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) SetStep(value int32) PatternFlowIcmpEchoSequenceNumberCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIcmpEchoSequenceNumberCounter object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) SetCount(value int32) PatternFlowIcmpEchoSequenceNumberCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoSequenceNumberCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpEchoSequenceNumberCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIcmpv6EchoTypeCounter struct {
	obj *snappipb.PatternFlowIcmpv6EchoTypeCounter
}

func NewPatternFlowIcmpv6EchoTypeCounter() PatternFlowIcmpv6EchoTypeCounter {
	obj := patternFlowIcmpv6EchoTypeCounter{obj: &snappipb.PatternFlowIcmpv6EchoTypeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpv6EchoTypeCounter) Msg() *snappipb.PatternFlowIcmpv6EchoTypeCounter {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoTypeCounter) SetMsg(msg *snappipb.PatternFlowIcmpv6EchoTypeCounter) PatternFlowIcmpv6EchoTypeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpv6EchoTypeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpv6EchoTypeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoTypeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoTypeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoTypeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoTypeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpv6EchoTypeCounter interface {
	Msg() *snappipb.PatternFlowIcmpv6EchoTypeCounter
	SetMsg(*snappipb.PatternFlowIcmpv6EchoTypeCounter) PatternFlowIcmpv6EchoTypeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIcmpv6EchoTypeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIcmpv6EchoTypeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIcmpv6EchoTypeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 128
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIcmpv6EchoTypeCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) SetStart(value int32) PatternFlowIcmpv6EchoTypeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIcmpv6EchoTypeCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) SetStep(value int32) PatternFlowIcmpv6EchoTypeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIcmpv6EchoTypeCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) SetCount(value int32) PatternFlowIcmpv6EchoTypeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIcmpv6EchoTypeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoTypeCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoTypeCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIcmpv6EchoTypeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(128)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIcmpv6EchoCodeCounter struct {
	obj *snappipb.PatternFlowIcmpv6EchoCodeCounter
}

func NewPatternFlowIcmpv6EchoCodeCounter() PatternFlowIcmpv6EchoCodeCounter {
	obj := patternFlowIcmpv6EchoCodeCounter{obj: &snappipb.PatternFlowIcmpv6EchoCodeCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpv6EchoCodeCounter) Msg() *snappipb.PatternFlowIcmpv6EchoCodeCounter {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoCodeCounter) SetMsg(msg *snappipb.PatternFlowIcmpv6EchoCodeCounter) PatternFlowIcmpv6EchoCodeCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpv6EchoCodeCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpv6EchoCodeCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoCodeCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoCodeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoCodeCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoCodeCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoCodeCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpv6EchoCodeCounter interface {
	Msg() *snappipb.PatternFlowIcmpv6EchoCodeCounter
	SetMsg(*snappipb.PatternFlowIcmpv6EchoCodeCounter) PatternFlowIcmpv6EchoCodeCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIcmpv6EchoCodeCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIcmpv6EchoCodeCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIcmpv6EchoCodeCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIcmpv6EchoCodeCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) SetStart(value int32) PatternFlowIcmpv6EchoCodeCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIcmpv6EchoCodeCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) SetStep(value int32) PatternFlowIcmpv6EchoCodeCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIcmpv6EchoCodeCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) SetCount(value int32) PatternFlowIcmpv6EchoCodeCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIcmpv6EchoCodeCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoCodeCounter.Start <= 255 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoCodeCounter.Step <= 255 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIcmpv6EchoCodeCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIcmpv6EchoIdentifierCounter struct {
	obj *snappipb.PatternFlowIcmpv6EchoIdentifierCounter
}

func NewPatternFlowIcmpv6EchoIdentifierCounter() PatternFlowIcmpv6EchoIdentifierCounter {
	obj := patternFlowIcmpv6EchoIdentifierCounter{obj: &snappipb.PatternFlowIcmpv6EchoIdentifierCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) Msg() *snappipb.PatternFlowIcmpv6EchoIdentifierCounter {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) SetMsg(msg *snappipb.PatternFlowIcmpv6EchoIdentifierCounter) PatternFlowIcmpv6EchoIdentifierCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpv6EchoIdentifierCounter interface {
	Msg() *snappipb.PatternFlowIcmpv6EchoIdentifierCounter
	SetMsg(*snappipb.PatternFlowIcmpv6EchoIdentifierCounter) PatternFlowIcmpv6EchoIdentifierCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIcmpv6EchoIdentifierCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIcmpv6EchoIdentifierCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIcmpv6EchoIdentifierCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIcmpv6EchoIdentifierCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) SetStart(value int32) PatternFlowIcmpv6EchoIdentifierCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIcmpv6EchoIdentifierCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) SetStep(value int32) PatternFlowIcmpv6EchoIdentifierCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIcmpv6EchoIdentifierCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) SetCount(value int32) PatternFlowIcmpv6EchoIdentifierCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoIdentifierCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoIdentifierCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIcmpv6EchoSequenceNumberCounter struct {
	obj *snappipb.PatternFlowIcmpv6EchoSequenceNumberCounter
}

func NewPatternFlowIcmpv6EchoSequenceNumberCounter() PatternFlowIcmpv6EchoSequenceNumberCounter {
	obj := patternFlowIcmpv6EchoSequenceNumberCounter{obj: &snappipb.PatternFlowIcmpv6EchoSequenceNumberCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) Msg() *snappipb.PatternFlowIcmpv6EchoSequenceNumberCounter {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) SetMsg(msg *snappipb.PatternFlowIcmpv6EchoSequenceNumberCounter) PatternFlowIcmpv6EchoSequenceNumberCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIcmpv6EchoSequenceNumberCounter interface {
	Msg() *snappipb.PatternFlowIcmpv6EchoSequenceNumberCounter
	SetMsg(*snappipb.PatternFlowIcmpv6EchoSequenceNumberCounter) PatternFlowIcmpv6EchoSequenceNumberCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIcmpv6EchoSequenceNumberCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) SetStart(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIcmpv6EchoSequenceNumberCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) SetStep(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIcmpv6EchoSequenceNumberCounter object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) SetCount(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoSequenceNumberCounter.Start <= 65535 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 65535 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIcmpv6EchoSequenceNumberCounter.Step <= 65535 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type bgpAsPathSegment struct {
	obj *snappipb.BgpAsPathSegment
}

func NewBgpAsPathSegment() BgpAsPathSegment {
	obj := bgpAsPathSegment{obj: &snappipb.BgpAsPathSegment{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpAsPathSegment) Msg() *snappipb.BgpAsPathSegment {
	return obj.obj
}

func (obj *bgpAsPathSegment) SetMsg(msg *snappipb.BgpAsPathSegment) BgpAsPathSegment {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpAsPathSegment) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpAsPathSegment) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpAsPathSegment) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpAsPathSegment) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpAsPathSegment) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpAsPathSegment) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpAsPathSegment) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpAsPathSegment interface {
	Msg() *snappipb.BgpAsPathSegment
	SetMsg(*snappipb.BgpAsPathSegment) BgpAsPathSegment
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Type() BgpAsPathSegmentTypeEnum
	SetType(value BgpAsPathSegmentTypeEnum) BgpAsPathSegment
	HasType() bool
	AsNumbers() []int64
	SetAsNumbers(value []int64) BgpAsPathSegment
}

type BgpAsPathSegmentTypeEnum string

var BgpAsPathSegmentType = struct {
	AS_SEQ        BgpAsPathSegmentTypeEnum
	AS_SET        BgpAsPathSegmentTypeEnum
	AS_CONFED_SEQ BgpAsPathSegmentTypeEnum
	AS_CONFED_SET BgpAsPathSegmentTypeEnum
}{
	AS_SEQ:        BgpAsPathSegmentTypeEnum("as_seq"),
	AS_SET:        BgpAsPathSegmentTypeEnum("as_set"),
	AS_CONFED_SEQ: BgpAsPathSegmentTypeEnum("as_confed_seq"),
	AS_CONFED_SET: BgpAsPathSegmentTypeEnum("as_confed_set"),
}

func (obj *bgpAsPathSegment) Type() BgpAsPathSegmentTypeEnum {
	return BgpAsPathSegmentTypeEnum(obj.obj.Type.Enum().String())
}

// Type returns a string
//  AS sequence is the most common type of AS_PATH, it contains the  list of ASNs starting with the most recent ASN being added read  from left to right.
//  The other three AS_PATH types are used for Confederations - AS_SET is the type of AS_PATH attribute that summarizes routes using using the aggregate-address command, allowing AS_PATHs to be  summarized in the update as well. - AS_CONFED_SEQ gives the list of ASNs in the path starting with the  most recent ASN to be added reading left to right - AS_CONFED_SET will allow summarization of multiple AS PATHs to be  sent in BGP Updates.
func (obj *bgpAsPathSegment) HasType() bool {
	return obj.obj.Type != nil
}

func (obj *bgpAsPathSegment) SetType(value BgpAsPathSegmentTypeEnum) BgpAsPathSegment {
	intValue, ok := snappipb.BgpAsPathSegment_Type_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpAsPathSegmentTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpAsPathSegment_Type_Enum(intValue)
	obj.obj.Type = &enumValue

	return obj
}

// AsNumbers returns a []int64
//  The AS numbers in this AS path segment.
func (obj *bgpAsPathSegment) AsNumbers() []int64 {
	if obj.obj.AsNumbers == nil {
		obj.obj.AsNumbers = make([]int64, 0)
	}
	return obj.obj.AsNumbers
}

// SetAsNumbers sets the []int64 value in the BgpAsPathSegment object
//  The AS numbers in this AS path segment.
func (obj *bgpAsPathSegment) SetAsNumbers(value []int64) BgpAsPathSegment {
	if obj.obj.AsNumbers == nil {
		obj.obj.AsNumbers = make([]int64, 0)
	}
	obj.obj.AsNumbers = value

	return obj
}

func (obj *bgpAsPathSegment) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpAsPathSegment) setDefault() {
	if obj.obj.Type == nil {
		obj.SetType(BgpAsPathSegmentType.AS_SEQ)

	}

}

type bgpSrteRemoteEndpointSubTlv struct {
	obj *snappipb.BgpSrteRemoteEndpointSubTlv
}

func NewBgpSrteRemoteEndpointSubTlv() BgpSrteRemoteEndpointSubTlv {
	obj := bgpSrteRemoteEndpointSubTlv{obj: &snappipb.BgpSrteRemoteEndpointSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteRemoteEndpointSubTlv) Msg() *snappipb.BgpSrteRemoteEndpointSubTlv {
	return obj.obj
}

func (obj *bgpSrteRemoteEndpointSubTlv) SetMsg(msg *snappipb.BgpSrteRemoteEndpointSubTlv) BgpSrteRemoteEndpointSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteRemoteEndpointSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteRemoteEndpointSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteRemoteEndpointSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteRemoteEndpointSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteRemoteEndpointSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteRemoteEndpointSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteRemoteEndpointSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteRemoteEndpointSubTlv interface {
	Msg() *snappipb.BgpSrteRemoteEndpointSubTlv
	SetMsg(*snappipb.BgpSrteRemoteEndpointSubTlv) BgpSrteRemoteEndpointSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	AsNumber() int64
	SetAsNumber(value int64) BgpSrteRemoteEndpointSubTlv
	HasAsNumber() bool
	AddressFamily() BgpSrteRemoteEndpointSubTlvAddressFamilyEnum
	SetAddressFamily(value BgpSrteRemoteEndpointSubTlvAddressFamilyEnum) BgpSrteRemoteEndpointSubTlv
	HasAddressFamily() bool
	Ipv4Address() string
	SetIpv4Address(value string) BgpSrteRemoteEndpointSubTlv
	HasIpv4Address() bool
	Ipv6Address() string
	SetIpv6Address(value string) BgpSrteRemoteEndpointSubTlv
	HasIpv6Address() bool
}

// AsNumber returns a int64
//  Autonomous system (AS) number
func (obj *bgpSrteRemoteEndpointSubTlv) AsNumber() int64 {

	if obj.obj.AsNumber == nil {
		*obj.obj.AsNumber = 0
	}

	return *obj.obj.AsNumber

}

// AsNumber returns a int64
//  Autonomous system (AS) number
func (obj *bgpSrteRemoteEndpointSubTlv) HasAsNumber() bool {
	return obj.obj.AsNumber != nil
}

// SetAsNumber sets the int64 value in the BgpSrteRemoteEndpointSubTlv object
//  Autonomous system (AS) number
func (obj *bgpSrteRemoteEndpointSubTlv) SetAsNumber(value int64) BgpSrteRemoteEndpointSubTlv {
	obj.obj.AsNumber = &value

	return obj
}

type BgpSrteRemoteEndpointSubTlvAddressFamilyEnum string

var BgpSrteRemoteEndpointSubTlvAddressFamily = struct {
	IPV4 BgpSrteRemoteEndpointSubTlvAddressFamilyEnum
	IPV6 BgpSrteRemoteEndpointSubTlvAddressFamilyEnum
}{
	IPV4: BgpSrteRemoteEndpointSubTlvAddressFamilyEnum("ipv4"),
	IPV6: BgpSrteRemoteEndpointSubTlvAddressFamilyEnum("ipv6"),
}

func (obj *bgpSrteRemoteEndpointSubTlv) AddressFamily() BgpSrteRemoteEndpointSubTlvAddressFamilyEnum {
	return BgpSrteRemoteEndpointSubTlvAddressFamilyEnum(obj.obj.AddressFamily.Enum().String())
}

// AddressFamily returns a string
//  Determines the address type
func (obj *bgpSrteRemoteEndpointSubTlv) HasAddressFamily() bool {
	return obj.obj.AddressFamily != nil
}

func (obj *bgpSrteRemoteEndpointSubTlv) SetAddressFamily(value BgpSrteRemoteEndpointSubTlvAddressFamilyEnum) BgpSrteRemoteEndpointSubTlv {
	intValue, ok := snappipb.BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpSrteRemoteEndpointSubTlvAddressFamilyEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum(intValue)
	obj.obj.AddressFamily = &enumValue

	return obj
}

// Ipv4Address returns a string
//  The IPv4 address of the Remote Endpoint.
func (obj *bgpSrteRemoteEndpointSubTlv) Ipv4Address() string {

	if obj.obj.Ipv4Address == nil {
		*obj.obj.Ipv4Address = "0.0.0.0"
	}

	return *obj.obj.Ipv4Address

}

// Ipv4Address returns a string
//  The IPv4 address of the Remote Endpoint.
func (obj *bgpSrteRemoteEndpointSubTlv) HasIpv4Address() bool {
	return obj.obj.Ipv4Address != nil
}

// SetIpv4Address sets the string value in the BgpSrteRemoteEndpointSubTlv object
//  The IPv4 address of the Remote Endpoint.
func (obj *bgpSrteRemoteEndpointSubTlv) SetIpv4Address(value string) BgpSrteRemoteEndpointSubTlv {
	obj.obj.Ipv4Address = &value

	return obj
}

// Ipv6Address returns a string
//  The IPv6 address of the Remote Endpoint.
func (obj *bgpSrteRemoteEndpointSubTlv) Ipv6Address() string {

	if obj.obj.Ipv6Address == nil {
		*obj.obj.Ipv6Address = "::0"
	}

	return *obj.obj.Ipv6Address

}

// Ipv6Address returns a string
//  The IPv6 address of the Remote Endpoint.
func (obj *bgpSrteRemoteEndpointSubTlv) HasIpv6Address() bool {
	return obj.obj.Ipv6Address != nil
}

// SetIpv6Address sets the string value in the BgpSrteRemoteEndpointSubTlv object
//  The IPv6 address of the Remote Endpoint.
func (obj *bgpSrteRemoteEndpointSubTlv) SetIpv6Address(value string) BgpSrteRemoteEndpointSubTlv {
	obj.obj.Ipv6Address = &value

	return obj
}

func (obj *bgpSrteRemoteEndpointSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.AsNumber != nil {
		if *obj.obj.AsNumber < 0 || *obj.obj.AsNumber > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteRemoteEndpointSubTlv.AsNumber <= 4294967295 but Got %d", *obj.obj.AsNumber))
		}

	}

	if obj.obj.Ipv4Address != nil {
		err := validateIpv4(obj.Ipv4Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Ipv4Address BgpSrteRemoteEndpointSubTlv"))
		}
	}

	if obj.obj.Ipv6Address != nil {
		err := validateIpv6(obj.Ipv6Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Ipv6Address BgpSrteRemoteEndpointSubTlv"))
		}
	}

}

func (obj *bgpSrteRemoteEndpointSubTlv) setDefault() {
	if obj.obj.AsNumber == nil {
		obj.SetAsNumber(0)
	}
	if obj.obj.AddressFamily == nil {
		obj.SetAddressFamily(BgpSrteRemoteEndpointSubTlvAddressFamily.IPV4)

	}
	if obj.obj.Ipv4Address == nil {
		obj.SetIpv4Address("0.0.0.0")
	}
	if obj.obj.Ipv6Address == nil {
		obj.SetIpv6Address("::0")
	}

}

type bgpSrteColorSubTlv struct {
	obj *snappipb.BgpSrteColorSubTlv
}

func NewBgpSrteColorSubTlv() BgpSrteColorSubTlv {
	obj := bgpSrteColorSubTlv{obj: &snappipb.BgpSrteColorSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteColorSubTlv) Msg() *snappipb.BgpSrteColorSubTlv {
	return obj.obj
}

func (obj *bgpSrteColorSubTlv) SetMsg(msg *snappipb.BgpSrteColorSubTlv) BgpSrteColorSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteColorSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteColorSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteColorSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteColorSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteColorSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteColorSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteColorSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteColorSubTlv interface {
	Msg() *snappipb.BgpSrteColorSubTlv
	SetMsg(*snappipb.BgpSrteColorSubTlv) BgpSrteColorSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Color() string
	SetColor(value string) BgpSrteColorSubTlv
	HasColor() bool
}

// Color returns a string
//  Six octet values. Example: 000000000064 for color value 100.
func (obj *bgpSrteColorSubTlv) Color() string {

	return *obj.obj.Color

}

// Color returns a string
//  Six octet values. Example: 000000000064 for color value 100.
func (obj *bgpSrteColorSubTlv) HasColor() bool {
	return obj.obj.Color != nil
}

// SetColor sets the string value in the BgpSrteColorSubTlv object
//  Six octet values. Example: 000000000064 for color value 100.
func (obj *bgpSrteColorSubTlv) SetColor(value string) BgpSrteColorSubTlv {
	obj.obj.Color = &value

	return obj
}

func (obj *bgpSrteColorSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Color != nil {
		err := validateHex(obj.Color())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Color BgpSrteColorSubTlv"))
		}
	}

}

func (obj *bgpSrteColorSubTlv) setDefault() {

}

type bgpSrteBindingSubTlv struct {
	obj *snappipb.BgpSrteBindingSubTlv
}

func NewBgpSrteBindingSubTlv() BgpSrteBindingSubTlv {
	obj := bgpSrteBindingSubTlv{obj: &snappipb.BgpSrteBindingSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteBindingSubTlv) Msg() *snappipb.BgpSrteBindingSubTlv {
	return obj.obj
}

func (obj *bgpSrteBindingSubTlv) SetMsg(msg *snappipb.BgpSrteBindingSubTlv) BgpSrteBindingSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteBindingSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteBindingSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteBindingSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteBindingSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteBindingSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteBindingSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteBindingSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteBindingSubTlv interface {
	Msg() *snappipb.BgpSrteBindingSubTlv
	SetMsg(*snappipb.BgpSrteBindingSubTlv) BgpSrteBindingSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	BindingSidType() BgpSrteBindingSubTlvBindingSidTypeEnum
	SetBindingSidType(value BgpSrteBindingSubTlvBindingSidTypeEnum) BgpSrteBindingSubTlv
	HasBindingSidType() bool
	FourOctetSid() int32
	SetFourOctetSid(value int32) BgpSrteBindingSubTlv
	HasFourOctetSid() bool
	Ipv6Sid() string
	SetIpv6Sid(value string) BgpSrteBindingSubTlv
	HasIpv6Sid() bool
	SFlag() bool
	SetSFlag(value bool) BgpSrteBindingSubTlv
	HasSFlag() bool
	IFlag() bool
	SetIFlag(value bool) BgpSrteBindingSubTlv
	HasIFlag() bool
}

type BgpSrteBindingSubTlvBindingSidTypeEnum string

var BgpSrteBindingSubTlvBindingSidType = struct {
	NO_BINDING     BgpSrteBindingSubTlvBindingSidTypeEnum
	FOUR_OCTET_SID BgpSrteBindingSubTlvBindingSidTypeEnum
	IPV6_SID       BgpSrteBindingSubTlvBindingSidTypeEnum
}{
	NO_BINDING:     BgpSrteBindingSubTlvBindingSidTypeEnum("no_binding"),
	FOUR_OCTET_SID: BgpSrteBindingSubTlvBindingSidTypeEnum("four_octet_sid"),
	IPV6_SID:       BgpSrteBindingSubTlvBindingSidTypeEnum("ipv6_sid"),
}

func (obj *bgpSrteBindingSubTlv) BindingSidType() BgpSrteBindingSubTlvBindingSidTypeEnum {
	return BgpSrteBindingSubTlvBindingSidTypeEnum(obj.obj.BindingSidType.Enum().String())
}

// BindingSidType returns a string
//  Type of the binding SID.  Supported types are "No Binding SID" or "Four Octets Sid" or "IPv6 SID".
func (obj *bgpSrteBindingSubTlv) HasBindingSidType() bool {
	return obj.obj.BindingSidType != nil
}

func (obj *bgpSrteBindingSubTlv) SetBindingSidType(value BgpSrteBindingSubTlvBindingSidTypeEnum) BgpSrteBindingSubTlv {
	intValue, ok := snappipb.BgpSrteBindingSubTlv_BindingSidType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpSrteBindingSubTlvBindingSidTypeEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpSrteBindingSubTlv_BindingSidType_Enum(intValue)
	obj.obj.BindingSidType = &enumValue

	return obj
}

// FourOctetSid returns a int32
//  Binding SID is encoded in 4 octets.
func (obj *bgpSrteBindingSubTlv) FourOctetSid() int32 {

	return *obj.obj.FourOctetSid

}

// FourOctetSid returns a int32
//  Binding SID is encoded in 4 octets.
func (obj *bgpSrteBindingSubTlv) HasFourOctetSid() bool {
	return obj.obj.FourOctetSid != nil
}

// SetFourOctetSid sets the int32 value in the BgpSrteBindingSubTlv object
//  Binding SID is encoded in 4 octets.
func (obj *bgpSrteBindingSubTlv) SetFourOctetSid(value int32) BgpSrteBindingSubTlv {
	obj.obj.FourOctetSid = &value

	return obj
}

// Ipv6Sid returns a string
//  IPv6 SID value.
func (obj *bgpSrteBindingSubTlv) Ipv6Sid() string {

	return *obj.obj.Ipv6Sid

}

// Ipv6Sid returns a string
//  IPv6 SID value.
func (obj *bgpSrteBindingSubTlv) HasIpv6Sid() bool {
	return obj.obj.Ipv6Sid != nil
}

// SetIpv6Sid sets the string value in the BgpSrteBindingSubTlv object
//  IPv6 SID value.
func (obj *bgpSrteBindingSubTlv) SetIpv6Sid(value string) BgpSrteBindingSubTlv {
	obj.obj.Ipv6Sid = &value

	return obj
}

// SFlag returns a bool
//  S-Flag encodes the "Specified-BSID-only" behavior.
func (obj *bgpSrteBindingSubTlv) SFlag() bool {

	if obj.obj.SFlag == nil {
		*obj.obj.SFlag = false
	}

	return *obj.obj.SFlag

}

// SFlag returns a bool
//  S-Flag encodes the "Specified-BSID-only" behavior.
func (obj *bgpSrteBindingSubTlv) HasSFlag() bool {
	return obj.obj.SFlag != nil
}

// SetSFlag sets the bool value in the BgpSrteBindingSubTlv object
//  S-Flag encodes the "Specified-BSID-only" behavior.
func (obj *bgpSrteBindingSubTlv) SetSFlag(value bool) BgpSrteBindingSubTlv {
	obj.obj.SFlag = &value

	return obj
}

// IFlag returns a bool
//  I-Flag encodes the "Drop Upon Invalid" behavior.
func (obj *bgpSrteBindingSubTlv) IFlag() bool {

	if obj.obj.IFlag == nil {
		*obj.obj.IFlag = false
	}

	return *obj.obj.IFlag

}

// IFlag returns a bool
//  I-Flag encodes the "Drop Upon Invalid" behavior.
func (obj *bgpSrteBindingSubTlv) HasIFlag() bool {
	return obj.obj.IFlag != nil
}

// SetIFlag sets the bool value in the BgpSrteBindingSubTlv object
//  I-Flag encodes the "Drop Upon Invalid" behavior.
func (obj *bgpSrteBindingSubTlv) SetIFlag(value bool) BgpSrteBindingSubTlv {
	obj.obj.IFlag = &value

	return obj
}

func (obj *bgpSrteBindingSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Ipv6Sid != nil {
		err := validateIpv6(obj.Ipv6Sid())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Ipv6Sid BgpSrteBindingSubTlv"))
		}
	}

}

func (obj *bgpSrteBindingSubTlv) setDefault() {
	if obj.obj.BindingSidType == nil {
		obj.SetBindingSidType(BgpSrteBindingSubTlvBindingSidType.NO_BINDING)

	}
	if obj.obj.SFlag == nil {
		obj.SetSFlag(false)
	}
	if obj.obj.IFlag == nil {
		obj.SetIFlag(false)
	}

}

type bgpSrtePreferenceSubTlv struct {
	obj *snappipb.BgpSrtePreferenceSubTlv
}

func NewBgpSrtePreferenceSubTlv() BgpSrtePreferenceSubTlv {
	obj := bgpSrtePreferenceSubTlv{obj: &snappipb.BgpSrtePreferenceSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrtePreferenceSubTlv) Msg() *snappipb.BgpSrtePreferenceSubTlv {
	return obj.obj
}

func (obj *bgpSrtePreferenceSubTlv) SetMsg(msg *snappipb.BgpSrtePreferenceSubTlv) BgpSrtePreferenceSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrtePreferenceSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrtePreferenceSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrtePreferenceSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrtePreferenceSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrtePreferenceSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrtePreferenceSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrtePreferenceSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrtePreferenceSubTlv interface {
	Msg() *snappipb.BgpSrtePreferenceSubTlv
	SetMsg(*snappipb.BgpSrtePreferenceSubTlv) BgpSrtePreferenceSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Preference() int64
	SetPreference(value int64) BgpSrtePreferenceSubTlv
	HasPreference() bool
}

// Preference returns a int64
//  The preference value of the SR Policy candidate path.
func (obj *bgpSrtePreferenceSubTlv) Preference() int64 {

	if obj.obj.Preference == nil {
		*obj.obj.Preference = 0
	}

	return *obj.obj.Preference

}

// Preference returns a int64
//  The preference value of the SR Policy candidate path.
func (obj *bgpSrtePreferenceSubTlv) HasPreference() bool {
	return obj.obj.Preference != nil
}

// SetPreference sets the int64 value in the BgpSrtePreferenceSubTlv object
//  The preference value of the SR Policy candidate path.
func (obj *bgpSrtePreferenceSubTlv) SetPreference(value int64) BgpSrtePreferenceSubTlv {
	obj.obj.Preference = &value

	return obj
}

func (obj *bgpSrtePreferenceSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Preference != nil {
		if *obj.obj.Preference < 0 || *obj.obj.Preference > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrtePreferenceSubTlv.Preference <= 4294967295 but Got %d", *obj.obj.Preference))
		}

	}

}

func (obj *bgpSrtePreferenceSubTlv) setDefault() {
	if obj.obj.Preference == nil {
		obj.SetPreference(0)
	}

}

type bgpSrtePolicyPrioritySubTlv struct {
	obj *snappipb.BgpSrtePolicyPrioritySubTlv
}

func NewBgpSrtePolicyPrioritySubTlv() BgpSrtePolicyPrioritySubTlv {
	obj := bgpSrtePolicyPrioritySubTlv{obj: &snappipb.BgpSrtePolicyPrioritySubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrtePolicyPrioritySubTlv) Msg() *snappipb.BgpSrtePolicyPrioritySubTlv {
	return obj.obj
}

func (obj *bgpSrtePolicyPrioritySubTlv) SetMsg(msg *snappipb.BgpSrtePolicyPrioritySubTlv) BgpSrtePolicyPrioritySubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrtePolicyPrioritySubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrtePolicyPrioritySubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrtePolicyPrioritySubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrtePolicyPrioritySubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrtePolicyPrioritySubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrtePolicyPrioritySubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrtePolicyPrioritySubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrtePolicyPrioritySubTlv interface {
	Msg() *snappipb.BgpSrtePolicyPrioritySubTlv
	SetMsg(*snappipb.BgpSrtePolicyPrioritySubTlv) BgpSrtePolicyPrioritySubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PolicyPriority() int32
	SetPolicyPriority(value int32) BgpSrtePolicyPrioritySubTlv
	HasPolicyPriority() bool
}

// PolicyPriority returns a int32
//  One-octet Priority value.
func (obj *bgpSrtePolicyPrioritySubTlv) PolicyPriority() int32 {

	return *obj.obj.PolicyPriority

}

// PolicyPriority returns a int32
//  One-octet Priority value.
func (obj *bgpSrtePolicyPrioritySubTlv) HasPolicyPriority() bool {
	return obj.obj.PolicyPriority != nil
}

// SetPolicyPriority sets the int32 value in the BgpSrtePolicyPrioritySubTlv object
//  One-octet Priority value.
func (obj *bgpSrtePolicyPrioritySubTlv) SetPolicyPriority(value int32) BgpSrtePolicyPrioritySubTlv {
	obj.obj.PolicyPriority = &value

	return obj
}

func (obj *bgpSrtePolicyPrioritySubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.PolicyPriority != nil {
		if *obj.obj.PolicyPriority < 0 || *obj.obj.PolicyPriority > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrtePolicyPrioritySubTlv.PolicyPriority <= 255 but Got %d", *obj.obj.PolicyPriority))
		}

	}

}

func (obj *bgpSrtePolicyPrioritySubTlv) setDefault() {

}

type bgpSrtePolicyNameSubTlv struct {
	obj *snappipb.BgpSrtePolicyNameSubTlv
}

func NewBgpSrtePolicyNameSubTlv() BgpSrtePolicyNameSubTlv {
	obj := bgpSrtePolicyNameSubTlv{obj: &snappipb.BgpSrtePolicyNameSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrtePolicyNameSubTlv) Msg() *snappipb.BgpSrtePolicyNameSubTlv {
	return obj.obj
}

func (obj *bgpSrtePolicyNameSubTlv) SetMsg(msg *snappipb.BgpSrtePolicyNameSubTlv) BgpSrtePolicyNameSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrtePolicyNameSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrtePolicyNameSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrtePolicyNameSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrtePolicyNameSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrtePolicyNameSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrtePolicyNameSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrtePolicyNameSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrtePolicyNameSubTlv interface {
	Msg() *snappipb.BgpSrtePolicyNameSubTlv
	SetMsg(*snappipb.BgpSrtePolicyNameSubTlv) BgpSrtePolicyNameSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	PolicyName() string
	SetPolicyName(value string) BgpSrtePolicyNameSubTlv
	HasPolicyName() bool
}

// PolicyName returns a string
//  Symbolic name for the policy that should be a string of printable ASCII characters, without a NULL terminator.
func (obj *bgpSrtePolicyNameSubTlv) PolicyName() string {

	return *obj.obj.PolicyName

}

// PolicyName returns a string
//  Symbolic name for the policy that should be a string of printable ASCII characters, without a NULL terminator.
func (obj *bgpSrtePolicyNameSubTlv) HasPolicyName() bool {
	return obj.obj.PolicyName != nil
}

// SetPolicyName sets the string value in the BgpSrtePolicyNameSubTlv object
//  Symbolic name for the policy that should be a string of printable ASCII characters, without a NULL terminator.
func (obj *bgpSrtePolicyNameSubTlv) SetPolicyName(value string) BgpSrtePolicyNameSubTlv {
	obj.obj.PolicyName = &value

	return obj
}

func (obj *bgpSrtePolicyNameSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpSrtePolicyNameSubTlv) setDefault() {

}

type bgpSrteExplicitNullLabelPolicySubTlv struct {
	obj *snappipb.BgpSrteExplicitNullLabelPolicySubTlv
}

func NewBgpSrteExplicitNullLabelPolicySubTlv() BgpSrteExplicitNullLabelPolicySubTlv {
	obj := bgpSrteExplicitNullLabelPolicySubTlv{obj: &snappipb.BgpSrteExplicitNullLabelPolicySubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) Msg() *snappipb.BgpSrteExplicitNullLabelPolicySubTlv {
	return obj.obj
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) SetMsg(msg *snappipb.BgpSrteExplicitNullLabelPolicySubTlv) BgpSrteExplicitNullLabelPolicySubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteExplicitNullLabelPolicySubTlv interface {
	Msg() *snappipb.BgpSrteExplicitNullLabelPolicySubTlv
	SetMsg(*snappipb.BgpSrteExplicitNullLabelPolicySubTlv) BgpSrteExplicitNullLabelPolicySubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	ExplicitNullLabelPolicy() BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum
	SetExplicitNullLabelPolicy(value BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum) BgpSrteExplicitNullLabelPolicySubTlv
	HasExplicitNullLabelPolicy() bool
}

type BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum string

var BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicy = struct {
	RESERVED_ENLP       BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum
	PUSH_IPV4_ENLP      BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum
	PUSH_IPV6_ENLP      BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum
	PUSH_IPV4_IPV6_ENLP BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum
	DO_NOT_PUSH_ENLP    BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum
}{
	RESERVED_ENLP:       BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum("reserved_enlp"),
	PUSH_IPV4_ENLP:      BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum("push_ipv4_enlp"),
	PUSH_IPV6_ENLP:      BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum("push_ipv6_enlp"),
	PUSH_IPV4_IPV6_ENLP: BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum("push_ipv4_ipv6_enlp"),
	DO_NOT_PUSH_ENLP:    BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum("do_not_push_enlp"),
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) ExplicitNullLabelPolicy() BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum {
	return BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum(obj.obj.ExplicitNullLabelPolicy.Enum().String())
}

// ExplicitNullLabelPolicy returns a string
//  The value of the explicit null label policy
func (obj *bgpSrteExplicitNullLabelPolicySubTlv) HasExplicitNullLabelPolicy() bool {
	return obj.obj.ExplicitNullLabelPolicy != nil
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) SetExplicitNullLabelPolicy(value BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum) BgpSrteExplicitNullLabelPolicySubTlv {
	intValue, ok := snappipb.BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicyEnum", string(value)))
		return obj
	}
	enumValue := snappipb.BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum(intValue)
	obj.obj.ExplicitNullLabelPolicy = &enumValue

	return obj
}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

}

func (obj *bgpSrteExplicitNullLabelPolicySubTlv) setDefault() {
	if obj.obj.ExplicitNullLabelPolicy == nil {
		obj.SetExplicitNullLabelPolicy(BgpSrteExplicitNullLabelPolicySubTlvExplicitNullLabelPolicy.DO_NOT_PUSH_ENLP)

	}

}

type bgpSrteSegmentList struct {
	obj *snappipb.BgpSrteSegmentList
}

func NewBgpSrteSegmentList() BgpSrteSegmentList {
	obj := bgpSrteSegmentList{obj: &snappipb.BgpSrteSegmentList{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentList) Msg() *snappipb.BgpSrteSegmentList {
	return obj.obj
}

func (obj *bgpSrteSegmentList) SetMsg(msg *snappipb.BgpSrteSegmentList) BgpSrteSegmentList {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentList) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentList) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentList) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentList) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentList) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentList) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentList) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentList interface {
	Msg() *snappipb.BgpSrteSegmentList
	SetMsg(*snappipb.BgpSrteSegmentList) BgpSrteSegmentList
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Weight() int64
	SetWeight(value int64) BgpSrteSegmentList
	HasWeight() bool
	Segments() BgpSrteSegmentListBgpSrteSegmentIter
	Name() string
	SetName(value string) BgpSrteSegmentList
	Active() bool
	SetActive(value bool) BgpSrteSegmentList
	HasActive() bool
}

// Weight returns a int64
//  The Weight associated with a given path and the sub-TLV is optional.
func (obj *bgpSrteSegmentList) Weight() int64 {

	if obj.obj.Weight == nil {
		*obj.obj.Weight = 0
	}

	return *obj.obj.Weight

}

// Weight returns a int64
//  The Weight associated with a given path and the sub-TLV is optional.
func (obj *bgpSrteSegmentList) HasWeight() bool {
	return obj.obj.Weight != nil
}

// SetWeight sets the int64 value in the BgpSrteSegmentList object
//  The Weight associated with a given path and the sub-TLV is optional.
func (obj *bgpSrteSegmentList) SetWeight(value int64) BgpSrteSegmentList {
	obj.obj.Weight = &value

	return obj
}

// Segments returns a []BgpSrteSegment
//  description is TBD
func (obj *bgpSrteSegmentList) Segments() BgpSrteSegmentListBgpSrteSegmentIter {
	if obj.obj.Segments == nil {
		obj.obj.Segments = []*snappipb.BgpSrteSegment{}
	}
	return &bgpSrteSegmentListBgpSrteSegmentIter{obj: obj}
}

type bgpSrteSegmentListBgpSrteSegmentIter struct {
	obj *bgpSrteSegmentList
}

type BgpSrteSegmentListBgpSrteSegmentIter interface {
	Add() BgpSrteSegment
	Items() []BgpSrteSegment
}

func (obj *bgpSrteSegmentListBgpSrteSegmentIter) Add() BgpSrteSegment {
	newObj := &snappipb.BgpSrteSegment{}
	obj.obj.obj.Segments = append(obj.obj.obj.Segments, newObj)
	newLibObj := &bgpSrteSegment{obj: newObj}
	newLibObj.setDefault()
	return newLibObj
}

func (obj *bgpSrteSegmentListBgpSrteSegmentIter) Items() []BgpSrteSegment {
	slice := []BgpSrteSegment{}
	for _, item := range obj.obj.obj.Segments {
		slice = append(slice, &bgpSrteSegment{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteSegmentList) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the BgpSrteSegmentList object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteSegmentList) SetName(value string) BgpSrteSegmentList {
	obj.obj.Name = value

	return obj
}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteSegmentList) Active() bool {

	if obj.obj.Active == nil {
		*obj.obj.Active = true
	}

	return *obj.obj.Active

}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteSegmentList) HasActive() bool {
	return obj.obj.Active != nil
}

// SetActive sets the bool value in the BgpSrteSegmentList object
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteSegmentList) SetActive(value bool) BgpSrteSegmentList {
	obj.obj.Active = &value

	return obj
}

func (obj *bgpSrteSegmentList) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Weight != nil {
		if *obj.obj.Weight < 0 || *obj.obj.Weight > 4294967295 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentList.Weight <= 4294967295 but Got %d", *obj.obj.Weight))
		}

	}

	if obj.obj.Segments != nil {
		for _, item := range obj.Segments().Items() {
			item.validateObj(set_default)
		}
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface BgpSrteSegmentList")
	}
}

func (obj *bgpSrteSegmentList) setDefault() {
	if obj.obj.Weight == nil {
		obj.SetWeight(0)
	}
	if obj.obj.Active == nil {
		obj.SetActive(true)
	}

}

type patternFlowIpv4TosPrecedenceCounter struct {
	obj *snappipb.PatternFlowIpv4TosPrecedenceCounter
}

func NewPatternFlowIpv4TosPrecedenceCounter() PatternFlowIpv4TosPrecedenceCounter {
	obj := patternFlowIpv4TosPrecedenceCounter{obj: &snappipb.PatternFlowIpv4TosPrecedenceCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosPrecedenceCounter) Msg() *snappipb.PatternFlowIpv4TosPrecedenceCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosPrecedenceCounter) SetMsg(msg *snappipb.PatternFlowIpv4TosPrecedenceCounter) PatternFlowIpv4TosPrecedenceCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosPrecedenceCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosPrecedenceCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosPrecedenceCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosPrecedenceCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosPrecedenceCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosPrecedenceCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosPrecedenceCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosPrecedenceCounter interface {
	Msg() *snappipb.PatternFlowIpv4TosPrecedenceCounter
	SetMsg(*snappipb.PatternFlowIpv4TosPrecedenceCounter) PatternFlowIpv4TosPrecedenceCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosPrecedenceCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosPrecedenceCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosPrecedenceCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4TosPrecedenceCounter object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) SetStart(value int32) PatternFlowIpv4TosPrecedenceCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4TosPrecedenceCounter object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) SetStep(value int32) PatternFlowIpv4TosPrecedenceCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4TosPrecedenceCounter object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) SetCount(value int32) PatternFlowIpv4TosPrecedenceCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4TosPrecedenceCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosPrecedenceCounter.Start <= 7 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosPrecedenceCounter.Step <= 7 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4TosPrecedenceCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4TosDelayCounter struct {
	obj *snappipb.PatternFlowIpv4TosDelayCounter
}

func NewPatternFlowIpv4TosDelayCounter() PatternFlowIpv4TosDelayCounter {
	obj := patternFlowIpv4TosDelayCounter{obj: &snappipb.PatternFlowIpv4TosDelayCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosDelayCounter) Msg() *snappipb.PatternFlowIpv4TosDelayCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosDelayCounter) SetMsg(msg *snappipb.PatternFlowIpv4TosDelayCounter) PatternFlowIpv4TosDelayCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosDelayCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosDelayCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosDelayCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosDelayCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosDelayCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosDelayCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosDelayCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosDelayCounter interface {
	Msg() *snappipb.PatternFlowIpv4TosDelayCounter
	SetMsg(*snappipb.PatternFlowIpv4TosDelayCounter) PatternFlowIpv4TosDelayCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosDelayCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosDelayCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosDelayCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4TosDelayCounter object
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) SetStart(value int32) PatternFlowIpv4TosDelayCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4TosDelayCounter object
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) SetStep(value int32) PatternFlowIpv4TosDelayCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4TosDelayCounter object
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) SetCount(value int32) PatternFlowIpv4TosDelayCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4TosDelayCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosDelayCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosDelayCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4TosDelayCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4TosThroughputCounter struct {
	obj *snappipb.PatternFlowIpv4TosThroughputCounter
}

func NewPatternFlowIpv4TosThroughputCounter() PatternFlowIpv4TosThroughputCounter {
	obj := patternFlowIpv4TosThroughputCounter{obj: &snappipb.PatternFlowIpv4TosThroughputCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosThroughputCounter) Msg() *snappipb.PatternFlowIpv4TosThroughputCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosThroughputCounter) SetMsg(msg *snappipb.PatternFlowIpv4TosThroughputCounter) PatternFlowIpv4TosThroughputCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosThroughputCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosThroughputCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosThroughputCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosThroughputCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosThroughputCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosThroughputCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosThroughputCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosThroughputCounter interface {
	Msg() *snappipb.PatternFlowIpv4TosThroughputCounter
	SetMsg(*snappipb.PatternFlowIpv4TosThroughputCounter) PatternFlowIpv4TosThroughputCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosThroughputCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosThroughputCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosThroughputCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4TosThroughputCounter object
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) SetStart(value int32) PatternFlowIpv4TosThroughputCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4TosThroughputCounter object
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) SetStep(value int32) PatternFlowIpv4TosThroughputCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4TosThroughputCounter object
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) SetCount(value int32) PatternFlowIpv4TosThroughputCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4TosThroughputCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosThroughputCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosThroughputCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4TosThroughputCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4TosReliabilityCounter struct {
	obj *snappipb.PatternFlowIpv4TosReliabilityCounter
}

func NewPatternFlowIpv4TosReliabilityCounter() PatternFlowIpv4TosReliabilityCounter {
	obj := patternFlowIpv4TosReliabilityCounter{obj: &snappipb.PatternFlowIpv4TosReliabilityCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosReliabilityCounter) Msg() *snappipb.PatternFlowIpv4TosReliabilityCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosReliabilityCounter) SetMsg(msg *snappipb.PatternFlowIpv4TosReliabilityCounter) PatternFlowIpv4TosReliabilityCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosReliabilityCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosReliabilityCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosReliabilityCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosReliabilityCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosReliabilityCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosReliabilityCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosReliabilityCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosReliabilityCounter interface {
	Msg() *snappipb.PatternFlowIpv4TosReliabilityCounter
	SetMsg(*snappipb.PatternFlowIpv4TosReliabilityCounter) PatternFlowIpv4TosReliabilityCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosReliabilityCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosReliabilityCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosReliabilityCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4TosReliabilityCounter object
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) SetStart(value int32) PatternFlowIpv4TosReliabilityCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4TosReliabilityCounter object
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) SetStep(value int32) PatternFlowIpv4TosReliabilityCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4TosReliabilityCounter object
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) SetCount(value int32) PatternFlowIpv4TosReliabilityCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4TosReliabilityCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosReliabilityCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosReliabilityCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4TosReliabilityCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4TosMonetaryCounter struct {
	obj *snappipb.PatternFlowIpv4TosMonetaryCounter
}

func NewPatternFlowIpv4TosMonetaryCounter() PatternFlowIpv4TosMonetaryCounter {
	obj := patternFlowIpv4TosMonetaryCounter{obj: &snappipb.PatternFlowIpv4TosMonetaryCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosMonetaryCounter) Msg() *snappipb.PatternFlowIpv4TosMonetaryCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosMonetaryCounter) SetMsg(msg *snappipb.PatternFlowIpv4TosMonetaryCounter) PatternFlowIpv4TosMonetaryCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosMonetaryCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosMonetaryCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosMonetaryCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosMonetaryCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosMonetaryCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosMonetaryCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosMonetaryCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosMonetaryCounter interface {
	Msg() *snappipb.PatternFlowIpv4TosMonetaryCounter
	SetMsg(*snappipb.PatternFlowIpv4TosMonetaryCounter) PatternFlowIpv4TosMonetaryCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosMonetaryCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosMonetaryCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosMonetaryCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4TosMonetaryCounter object
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) SetStart(value int32) PatternFlowIpv4TosMonetaryCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4TosMonetaryCounter object
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) SetStep(value int32) PatternFlowIpv4TosMonetaryCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4TosMonetaryCounter object
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) SetCount(value int32) PatternFlowIpv4TosMonetaryCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4TosMonetaryCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosMonetaryCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosMonetaryCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4TosMonetaryCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4TosUnusedCounter struct {
	obj *snappipb.PatternFlowIpv4TosUnusedCounter
}

func NewPatternFlowIpv4TosUnusedCounter() PatternFlowIpv4TosUnusedCounter {
	obj := patternFlowIpv4TosUnusedCounter{obj: &snappipb.PatternFlowIpv4TosUnusedCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4TosUnusedCounter) Msg() *snappipb.PatternFlowIpv4TosUnusedCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosUnusedCounter) SetMsg(msg *snappipb.PatternFlowIpv4TosUnusedCounter) PatternFlowIpv4TosUnusedCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4TosUnusedCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4TosUnusedCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosUnusedCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosUnusedCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4TosUnusedCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosUnusedCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4TosUnusedCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4TosUnusedCounter interface {
	Msg() *snappipb.PatternFlowIpv4TosUnusedCounter
	SetMsg(*snappipb.PatternFlowIpv4TosUnusedCounter) PatternFlowIpv4TosUnusedCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosUnusedCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosUnusedCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosUnusedCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4TosUnusedCounter object
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) SetStart(value int32) PatternFlowIpv4TosUnusedCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4TosUnusedCounter object
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) SetStep(value int32) PatternFlowIpv4TosUnusedCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4TosUnusedCounter object
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) SetCount(value int32) PatternFlowIpv4TosUnusedCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4TosUnusedCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosUnusedCounter.Start <= 1 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 1 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4TosUnusedCounter.Step <= 1 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4TosUnusedCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4DscpPhbCounter struct {
	obj *snappipb.PatternFlowIpv4DscpPhbCounter
}

func NewPatternFlowIpv4DscpPhbCounter() PatternFlowIpv4DscpPhbCounter {
	obj := patternFlowIpv4DscpPhbCounter{obj: &snappipb.PatternFlowIpv4DscpPhbCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4DscpPhbCounter) Msg() *snappipb.PatternFlowIpv4DscpPhbCounter {
	return obj.obj
}

func (obj *patternFlowIpv4DscpPhbCounter) SetMsg(msg *snappipb.PatternFlowIpv4DscpPhbCounter) PatternFlowIpv4DscpPhbCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4DscpPhbCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4DscpPhbCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DscpPhbCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpPhbCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DscpPhbCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpPhbCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4DscpPhbCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4DscpPhbCounter interface {
	Msg() *snappipb.PatternFlowIpv4DscpPhbCounter
	SetMsg(*snappipb.PatternFlowIpv4DscpPhbCounter) PatternFlowIpv4DscpPhbCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4DscpPhbCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4DscpPhbCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4DscpPhbCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4DscpPhbCounter object
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) SetStart(value int32) PatternFlowIpv4DscpPhbCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4DscpPhbCounter object
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) SetStep(value int32) PatternFlowIpv4DscpPhbCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4DscpPhbCounter object
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) SetCount(value int32) PatternFlowIpv4DscpPhbCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4DscpPhbCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 63 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DscpPhbCounter.Start <= 63 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 63 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DscpPhbCounter.Step <= 63 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4DscpPhbCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type patternFlowIpv4DscpEcnCounter struct {
	obj *snappipb.PatternFlowIpv4DscpEcnCounter
}

func NewPatternFlowIpv4DscpEcnCounter() PatternFlowIpv4DscpEcnCounter {
	obj := patternFlowIpv4DscpEcnCounter{obj: &snappipb.PatternFlowIpv4DscpEcnCounter{}}
	obj.setDefault()
	return &obj
}

func (obj *patternFlowIpv4DscpEcnCounter) Msg() *snappipb.PatternFlowIpv4DscpEcnCounter {
	return obj.obj
}

func (obj *patternFlowIpv4DscpEcnCounter) SetMsg(msg *snappipb.PatternFlowIpv4DscpEcnCounter) PatternFlowIpv4DscpEcnCounter {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *patternFlowIpv4DscpEcnCounter) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *patternFlowIpv4DscpEcnCounter) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DscpEcnCounter) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpEcnCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *patternFlowIpv4DscpEcnCounter) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpEcnCounter) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *patternFlowIpv4DscpEcnCounter) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type PatternFlowIpv4DscpEcnCounter interface {
	Msg() *snappipb.PatternFlowIpv4DscpEcnCounter
	SetMsg(*snappipb.PatternFlowIpv4DscpEcnCounter) PatternFlowIpv4DscpEcnCounter
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Start() int32
	SetStart(value int32) PatternFlowIpv4DscpEcnCounter
	HasStart() bool
	Step() int32
	SetStep(value int32) PatternFlowIpv4DscpEcnCounter
	HasStep() bool
	Count() int32
	SetCount(value int32) PatternFlowIpv4DscpEcnCounter
	HasCount() bool
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) Start() int32 {

	if obj.obj.Start == nil {
		*obj.obj.Start = 0
	}

	return *obj.obj.Start

}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) HasStart() bool {
	return obj.obj.Start != nil
}

// SetStart sets the int32 value in the PatternFlowIpv4DscpEcnCounter object
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) SetStart(value int32) PatternFlowIpv4DscpEcnCounter {
	obj.obj.Start = &value

	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) Step() int32 {

	if obj.obj.Step == nil {
		*obj.obj.Step = 1
	}

	return *obj.obj.Step

}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) HasStep() bool {
	return obj.obj.Step != nil
}

// SetStep sets the int32 value in the PatternFlowIpv4DscpEcnCounter object
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) SetStep(value int32) PatternFlowIpv4DscpEcnCounter {
	obj.obj.Step = &value

	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) Count() int32 {

	if obj.obj.Count == nil {
		*obj.obj.Count = 1
	}

	return *obj.obj.Count

}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) HasCount() bool {
	return obj.obj.Count != nil
}

// SetCount sets the int32 value in the PatternFlowIpv4DscpEcnCounter object
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) SetCount(value int32) PatternFlowIpv4DscpEcnCounter {
	obj.obj.Count = &value

	return obj
}

func (obj *patternFlowIpv4DscpEcnCounter) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Start != nil {
		if *obj.obj.Start < 0 || *obj.obj.Start > 3 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DscpEcnCounter.Start <= 3 but Got %d", *obj.obj.Start))
		}

	}

	if obj.obj.Step != nil {
		if *obj.obj.Step < 0 || *obj.obj.Step > 3 {
			validation = append(
				validation, fmt.Sprintf("0 <= PatternFlowIpv4DscpEcnCounter.Step <= 3 but Got %d", *obj.obj.Step))
		}

	}

}

func (obj *patternFlowIpv4DscpEcnCounter) setDefault() {
	if obj.obj.Start == nil {
		obj.SetStart(0)
	}
	if obj.obj.Step == nil {
		obj.SetStep(1)
	}
	if obj.obj.Count == nil {
		obj.SetCount(1)
	}

}

type bgpSrteSegment struct {
	obj *snappipb.BgpSrteSegment
}

func NewBgpSrteSegment() BgpSrteSegment {
	obj := bgpSrteSegment{obj: &snappipb.BgpSrteSegment{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegment) Msg() *snappipb.BgpSrteSegment {
	return obj.obj
}

func (obj *bgpSrteSegment) SetMsg(msg *snappipb.BgpSrteSegment) BgpSrteSegment {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegment) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegment) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegment) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegment) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegment) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegment) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegment) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegment interface {
	Msg() *snappipb.BgpSrteSegment
	SetMsg(*snappipb.BgpSrteSegment) BgpSrteSegment
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	SegmentType() BgpSrteSegmentSegmentTypeEnum
	SetSegmentType(value BgpSrteSegmentSegmentTypeEnum) BgpSrteSegment
	TypeA() BgpSrteSegmentATypeSubTlv
	SetTypeA(value BgpSrteSegmentATypeSubTlv) BgpSrteSegment
	HasTypeA() bool
	TypeB() BgpSrteSegmentBTypeSubTlv
	SetTypeB(value BgpSrteSegmentBTypeSubTlv) BgpSrteSegment
	HasTypeB() bool
	TypeC() BgpSrteSegmentCTypeSubTlv
	SetTypeC(value BgpSrteSegmentCTypeSubTlv) BgpSrteSegment
	HasTypeC() bool
	TypeD() BgpSrteSegmentDTypeSubTlv
	SetTypeD(value BgpSrteSegmentDTypeSubTlv) BgpSrteSegment
	HasTypeD() bool
	TypeE() BgpSrteSegmentETypeSubTlv
	SetTypeE(value BgpSrteSegmentETypeSubTlv) BgpSrteSegment
	HasTypeE() bool
	TypeF() BgpSrteSegmentFTypeSubTlv
	SetTypeF(value BgpSrteSegmentFTypeSubTlv) BgpSrteSegment
	HasTypeF() bool
	TypeG() BgpSrteSegmentGTypeSubTlv
	SetTypeG(value BgpSrteSegmentGTypeSubTlv) BgpSrteSegment
	HasTypeG() bool
	TypeH() BgpSrteSegmentHTypeSubTlv
	SetTypeH(value BgpSrteSegmentHTypeSubTlv) BgpSrteSegment
	HasTypeH() bool
	TypeI() BgpSrteSegmentITypeSubTlv
	SetTypeI(value BgpSrteSegmentITypeSubTlv) BgpSrteSegment
	HasTypeI() bool
	TypeJ() BgpSrteSegmentJTypeSubTlv
	SetTypeJ(value BgpSrteSegmentJTypeSubTlv) BgpSrteSegment
	HasTypeJ() bool
	TypeK() BgpSrteSegmentKTypeSubTlv
	SetTypeK(value BgpSrteSegmentKTypeSubTlv) BgpSrteSegment
	HasTypeK() bool
	Name() string
	SetName(value string) BgpSrteSegment
	Active() bool
	SetActive(value bool) BgpSrteSegment
	HasActive() bool
}

type BgpSrteSegmentSegmentTypeEnum string

var BgpSrteSegmentSegmentType = struct {
	TYPE_A BgpSrteSegmentSegmentTypeEnum
	TYPE_B BgpSrteSegmentSegmentTypeEnum
	TYPE_C BgpSrteSegmentSegmentTypeEnum
	TYPE_D BgpSrteSegmentSegmentTypeEnum
	TYPE_E BgpSrteSegmentSegmentTypeEnum
	TYPE_F BgpSrteSegmentSegmentTypeEnum
	TYPE_G BgpSrteSegmentSegmentTypeEnum
	TYPE_H BgpSrteSegmentSegmentTypeEnum
	TYPE_I BgpSrteSegmentSegmentTypeEnum
	TYPE_J BgpSrteSegmentSegmentTypeEnum
	TYPE_K BgpSrteSegmentSegmentTypeEnum
}{
	TYPE_A: BgpSrteSegmentSegmentTypeEnum("type_a"),
	TYPE_B: BgpSrteSegmentSegmentTypeEnum("type_b"),
	TYPE_C: BgpSrteSegmentSegmentTypeEnum("type_c"),
	TYPE_D: BgpSrteSegmentSegmentTypeEnum("type_d"),
	TYPE_E: BgpSrteSegmentSegmentTypeEnum("type_e"),
	TYPE_F: BgpSrteSegmentSegmentTypeEnum("type_f"),
	TYPE_G: BgpSrteSegmentSegmentTypeEnum("type_g"),
	TYPE_H: BgpSrteSegmentSegmentTypeEnum("type_h"),
	TYPE_I: BgpSrteSegmentSegmentTypeEnum("type_i"),
	TYPE_J: BgpSrteSegmentSegmentTypeEnum("type_j"),
	TYPE_K: BgpSrteSegmentSegmentTypeEnum("type_k"),
}

func (obj *bgpSrteSegment) SegmentType() BgpSrteSegmentSegmentTypeEnum {
	return BgpSrteSegmentSegmentTypeEnum(obj.obj.SegmentType.Enum().String())
}

func (obj *bgpSrteSegment) SetSegmentType(value BgpSrteSegmentSegmentTypeEnum) BgpSrteSegment {
	intValue, ok := snappipb.BgpSrteSegment_SegmentType_Enum_value[string(value)]
	if !ok {
		validation = append(validation, fmt.Sprintf(
			"%s is not a valid choice on BgpSrteSegmentSegmentTypeEnum", string(value)))
		return obj
	}
	obj.obj.SegmentType = snappipb.BgpSrteSegment_SegmentType_Enum(intValue)

	return obj
}

// TypeA returns a BgpSrteSegmentATypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) TypeA() BgpSrteSegmentATypeSubTlv {
	if obj.obj.TypeA == nil {
		obj.obj.TypeA = NewBgpSrteSegmentATypeSubTlv().Msg()
	}
	return &bgpSrteSegmentATypeSubTlv{obj: obj.obj.TypeA}
}

// TypeA returns a BgpSrteSegmentATypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) HasTypeA() bool {
	return obj.obj.TypeA != nil
}

// SetTypeA sets the BgpSrteSegmentATypeSubTlv value in the BgpSrteSegment object
//  description is TBD
func (obj *bgpSrteSegment) SetTypeA(value BgpSrteSegmentATypeSubTlv) BgpSrteSegment {
	obj.TypeA().SetMsg(value.Msg())

	return obj
}

// TypeB returns a BgpSrteSegmentBTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) TypeB() BgpSrteSegmentBTypeSubTlv {
	if obj.obj.TypeB == nil {
		obj.obj.TypeB = NewBgpSrteSegmentBTypeSubTlv().Msg()
	}
	return &bgpSrteSegmentBTypeSubTlv{obj: obj.obj.TypeB}
}

// TypeB returns a BgpSrteSegmentBTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) HasTypeB() bool {
	return obj.obj.TypeB != nil
}

// SetTypeB sets the BgpSrteSegmentBTypeSubTlv value in the BgpSrteSegment object
//  description is TBD
func (obj *bgpSrteSegment) SetTypeB(value BgpSrteSegmentBTypeSubTlv) BgpSrteSegment {
	obj.TypeB().SetMsg(value.Msg())

	return obj
}

// TypeC returns a BgpSrteSegmentCTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) TypeC() BgpSrteSegmentCTypeSubTlv {
	if obj.obj.TypeC == nil {
		obj.obj.TypeC = NewBgpSrteSegmentCTypeSubTlv().Msg()
	}
	return &bgpSrteSegmentCTypeSubTlv{obj: obj.obj.TypeC}
}

// TypeC returns a BgpSrteSegmentCTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) HasTypeC() bool {
	return obj.obj.TypeC != nil
}

// SetTypeC sets the BgpSrteSegmentCTypeSubTlv value in the BgpSrteSegment object
//  description is TBD
func (obj *bgpSrteSegment) SetTypeC(value BgpSrteSegmentCTypeSubTlv) BgpSrteSegment {
	obj.TypeC().SetMsg(value.Msg())

	return obj
}

// TypeD returns a BgpSrteSegmentDTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) TypeD() BgpSrteSegmentDTypeSubTlv {
	if obj.obj.TypeD == nil {
		obj.obj.TypeD = NewBgpSrteSegmentDTypeSubTlv().Msg()
	}
	return &bgpSrteSegmentDTypeSubTlv{obj: obj.obj.TypeD}
}

// TypeD returns a BgpSrteSegmentDTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) HasTypeD() bool {
	return obj.obj.TypeD != nil
}

// SetTypeD sets the BgpSrteSegmentDTypeSubTlv value in the BgpSrteSegment object
//  description is TBD
func (obj *bgpSrteSegment) SetTypeD(value BgpSrteSegmentDTypeSubTlv) BgpSrteSegment {
	obj.TypeD().SetMsg(value.Msg())

	return obj
}

// TypeE returns a BgpSrteSegmentETypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) TypeE() BgpSrteSegmentETypeSubTlv {
	if obj.obj.TypeE == nil {
		obj.obj.TypeE = NewBgpSrteSegmentETypeSubTlv().Msg()
	}
	return &bgpSrteSegmentETypeSubTlv{obj: obj.obj.TypeE}
}

// TypeE returns a BgpSrteSegmentETypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) HasTypeE() bool {
	return obj.obj.TypeE != nil
}

// SetTypeE sets the BgpSrteSegmentETypeSubTlv value in the BgpSrteSegment object
//  description is TBD
func (obj *bgpSrteSegment) SetTypeE(value BgpSrteSegmentETypeSubTlv) BgpSrteSegment {
	obj.TypeE().SetMsg(value.Msg())

	return obj
}

// TypeF returns a BgpSrteSegmentFTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) TypeF() BgpSrteSegmentFTypeSubTlv {
	if obj.obj.TypeF == nil {
		obj.obj.TypeF = NewBgpSrteSegmentFTypeSubTlv().Msg()
	}
	return &bgpSrteSegmentFTypeSubTlv{obj: obj.obj.TypeF}
}

// TypeF returns a BgpSrteSegmentFTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) HasTypeF() bool {
	return obj.obj.TypeF != nil
}

// SetTypeF sets the BgpSrteSegmentFTypeSubTlv value in the BgpSrteSegment object
//  description is TBD
func (obj *bgpSrteSegment) SetTypeF(value BgpSrteSegmentFTypeSubTlv) BgpSrteSegment {
	obj.TypeF().SetMsg(value.Msg())

	return obj
}

// TypeG returns a BgpSrteSegmentGTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) TypeG() BgpSrteSegmentGTypeSubTlv {
	if obj.obj.TypeG == nil {
		obj.obj.TypeG = NewBgpSrteSegmentGTypeSubTlv().Msg()
	}
	return &bgpSrteSegmentGTypeSubTlv{obj: obj.obj.TypeG}
}

// TypeG returns a BgpSrteSegmentGTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) HasTypeG() bool {
	return obj.obj.TypeG != nil
}

// SetTypeG sets the BgpSrteSegmentGTypeSubTlv value in the BgpSrteSegment object
//  description is TBD
func (obj *bgpSrteSegment) SetTypeG(value BgpSrteSegmentGTypeSubTlv) BgpSrteSegment {
	obj.TypeG().SetMsg(value.Msg())

	return obj
}

// TypeH returns a BgpSrteSegmentHTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) TypeH() BgpSrteSegmentHTypeSubTlv {
	if obj.obj.TypeH == nil {
		obj.obj.TypeH = NewBgpSrteSegmentHTypeSubTlv().Msg()
	}
	return &bgpSrteSegmentHTypeSubTlv{obj: obj.obj.TypeH}
}

// TypeH returns a BgpSrteSegmentHTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) HasTypeH() bool {
	return obj.obj.TypeH != nil
}

// SetTypeH sets the BgpSrteSegmentHTypeSubTlv value in the BgpSrteSegment object
//  description is TBD
func (obj *bgpSrteSegment) SetTypeH(value BgpSrteSegmentHTypeSubTlv) BgpSrteSegment {
	obj.TypeH().SetMsg(value.Msg())

	return obj
}

// TypeI returns a BgpSrteSegmentITypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) TypeI() BgpSrteSegmentITypeSubTlv {
	if obj.obj.TypeI == nil {
		obj.obj.TypeI = NewBgpSrteSegmentITypeSubTlv().Msg()
	}
	return &bgpSrteSegmentITypeSubTlv{obj: obj.obj.TypeI}
}

// TypeI returns a BgpSrteSegmentITypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) HasTypeI() bool {
	return obj.obj.TypeI != nil
}

// SetTypeI sets the BgpSrteSegmentITypeSubTlv value in the BgpSrteSegment object
//  description is TBD
func (obj *bgpSrteSegment) SetTypeI(value BgpSrteSegmentITypeSubTlv) BgpSrteSegment {
	obj.TypeI().SetMsg(value.Msg())

	return obj
}

// TypeJ returns a BgpSrteSegmentJTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) TypeJ() BgpSrteSegmentJTypeSubTlv {
	if obj.obj.TypeJ == nil {
		obj.obj.TypeJ = NewBgpSrteSegmentJTypeSubTlv().Msg()
	}
	return &bgpSrteSegmentJTypeSubTlv{obj: obj.obj.TypeJ}
}

// TypeJ returns a BgpSrteSegmentJTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) HasTypeJ() bool {
	return obj.obj.TypeJ != nil
}

// SetTypeJ sets the BgpSrteSegmentJTypeSubTlv value in the BgpSrteSegment object
//  description is TBD
func (obj *bgpSrteSegment) SetTypeJ(value BgpSrteSegmentJTypeSubTlv) BgpSrteSegment {
	obj.TypeJ().SetMsg(value.Msg())

	return obj
}

// TypeK returns a BgpSrteSegmentKTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) TypeK() BgpSrteSegmentKTypeSubTlv {
	if obj.obj.TypeK == nil {
		obj.obj.TypeK = NewBgpSrteSegmentKTypeSubTlv().Msg()
	}
	return &bgpSrteSegmentKTypeSubTlv{obj: obj.obj.TypeK}
}

// TypeK returns a BgpSrteSegmentKTypeSubTlv
//  description is TBD
func (obj *bgpSrteSegment) HasTypeK() bool {
	return obj.obj.TypeK != nil
}

// SetTypeK sets the BgpSrteSegmentKTypeSubTlv value in the BgpSrteSegment object
//  description is TBD
func (obj *bgpSrteSegment) SetTypeK(value BgpSrteSegmentKTypeSubTlv) BgpSrteSegment {
	obj.TypeK().SetMsg(value.Msg())

	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteSegment) Name() string {

	return obj.obj.Name
}

// SetName sets the string value in the BgpSrteSegment object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *bgpSrteSegment) SetName(value string) BgpSrteSegment {
	obj.obj.Name = value

	return obj
}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteSegment) Active() bool {

	if obj.obj.Active == nil {
		*obj.obj.Active = true
	}

	return *obj.obj.Active

}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteSegment) HasActive() bool {
	return obj.obj.Active != nil
}

// SetActive sets the bool value in the BgpSrteSegment object
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *bgpSrteSegment) SetActive(value bool) BgpSrteSegment {
	obj.obj.Active = &value

	return obj
}

func (obj *bgpSrteSegment) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	// SegmentType required
	if obj.obj.SegmentType.Number() == 0 {
		validation = append(
			validation, fmt.Sprintf("SegmentType is required field on BgpSrteSegment and got value %s", obj.obj.SegmentType.String()))
	}

	if obj.obj.TypeA != nil {
		obj.TypeA().validateObj(set_default)
	}

	if obj.obj.TypeB != nil {
		obj.TypeB().validateObj(set_default)
	}

	if obj.obj.TypeC != nil {
		obj.TypeC().validateObj(set_default)
	}

	if obj.obj.TypeD != nil {
		obj.TypeD().validateObj(set_default)
	}

	if obj.obj.TypeE != nil {
		obj.TypeE().validateObj(set_default)
	}

	if obj.obj.TypeF != nil {
		obj.TypeF().validateObj(set_default)
	}

	if obj.obj.TypeG != nil {
		obj.TypeG().validateObj(set_default)
	}

	if obj.obj.TypeH != nil {
		obj.TypeH().validateObj(set_default)
	}

	if obj.obj.TypeI != nil {
		obj.TypeI().validateObj(set_default)
	}

	if obj.obj.TypeJ != nil {
		obj.TypeJ().validateObj(set_default)
	}

	if obj.obj.TypeK != nil {
		obj.TypeK().validateObj(set_default)
	}

	// Name required
	if obj.obj.Name == "" {
		validation = append(validation, "Name is required field on interface BgpSrteSegment")
	}
}

func (obj *bgpSrteSegment) setDefault() {
	if obj.obj.Active == nil {
		obj.SetActive(true)
	}

}

type bgpSrteSegmentATypeSubTlv struct {
	obj *snappipb.BgpSrteSegmentATypeSubTlv
}

func NewBgpSrteSegmentATypeSubTlv() BgpSrteSegmentATypeSubTlv {
	obj := bgpSrteSegmentATypeSubTlv{obj: &snappipb.BgpSrteSegmentATypeSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentATypeSubTlv) Msg() *snappipb.BgpSrteSegmentATypeSubTlv {
	return obj.obj
}

func (obj *bgpSrteSegmentATypeSubTlv) SetMsg(msg *snappipb.BgpSrteSegmentATypeSubTlv) BgpSrteSegmentATypeSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentATypeSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentATypeSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentATypeSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentATypeSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentATypeSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentATypeSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentATypeSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentATypeSubTlv interface {
	Msg() *snappipb.BgpSrteSegmentATypeSubTlv
	SetMsg(*snappipb.BgpSrteSegmentATypeSubTlv) BgpSrteSegmentATypeSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() string
	SetFlags(value string) BgpSrteSegmentATypeSubTlv
	HasFlags() bool
	Label() int32
	SetLabel(value int32) BgpSrteSegmentATypeSubTlv
	HasLabel() bool
	Tc() int32
	SetTc(value int32) BgpSrteSegmentATypeSubTlv
	HasTc() bool
	SBit() bool
	SetSBit(value bool) BgpSrteSegmentATypeSubTlv
	HasSBit() bool
	Ttl() int32
	SetTtl(value int32) BgpSrteSegmentATypeSubTlv
	HasTtl() bool
}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentATypeSubTlv) Flags() string {

	return *obj.obj.Flags

}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentATypeSubTlv) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the string value in the BgpSrteSegmentATypeSubTlv object
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentATypeSubTlv) SetFlags(value string) BgpSrteSegmentATypeSubTlv {
	obj.obj.Flags = &value

	return obj
}

// Label returns a int32
//  Label value in [0, 2^20 -1].
func (obj *bgpSrteSegmentATypeSubTlv) Label() int32 {

	return *obj.obj.Label

}

// Label returns a int32
//  Label value in [0, 2^20 -1].
func (obj *bgpSrteSegmentATypeSubTlv) HasLabel() bool {
	return obj.obj.Label != nil
}

// SetLabel sets the int32 value in the BgpSrteSegmentATypeSubTlv object
//  Label value in [0, 2^20 -1].
func (obj *bgpSrteSegmentATypeSubTlv) SetLabel(value int32) BgpSrteSegmentATypeSubTlv {
	obj.obj.Label = &value

	return obj
}

// Tc returns a int32
//  Traffic class in bits.
func (obj *bgpSrteSegmentATypeSubTlv) Tc() int32 {

	return *obj.obj.Tc

}

// Tc returns a int32
//  Traffic class in bits.
func (obj *bgpSrteSegmentATypeSubTlv) HasTc() bool {
	return obj.obj.Tc != nil
}

// SetTc sets the int32 value in the BgpSrteSegmentATypeSubTlv object
//  Traffic class in bits.
func (obj *bgpSrteSegmentATypeSubTlv) SetTc(value int32) BgpSrteSegmentATypeSubTlv {
	obj.obj.Tc = &value

	return obj
}

// SBit returns a bool
//  Bottom-of-Stack bit.
func (obj *bgpSrteSegmentATypeSubTlv) SBit() bool {

	return *obj.obj.SBit

}

// SBit returns a bool
//  Bottom-of-Stack bit.
func (obj *bgpSrteSegmentATypeSubTlv) HasSBit() bool {
	return obj.obj.SBit != nil
}

// SetSBit sets the bool value in the BgpSrteSegmentATypeSubTlv object
//  Bottom-of-Stack bit.
func (obj *bgpSrteSegmentATypeSubTlv) SetSBit(value bool) BgpSrteSegmentATypeSubTlv {
	obj.obj.SBit = &value

	return obj
}

// Ttl returns a int32
//  Time To Live.
func (obj *bgpSrteSegmentATypeSubTlv) Ttl() int32 {

	return *obj.obj.Ttl

}

// Ttl returns a int32
//  Time To Live.
func (obj *bgpSrteSegmentATypeSubTlv) HasTtl() bool {
	return obj.obj.Ttl != nil
}

// SetTtl sets the int32 value in the BgpSrteSegmentATypeSubTlv object
//  Time To Live.
func (obj *bgpSrteSegmentATypeSubTlv) SetTtl(value int32) BgpSrteSegmentATypeSubTlv {
	obj.obj.Ttl = &value

	return obj
}

func (obj *bgpSrteSegmentATypeSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		err := validateHex(obj.Flags())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Flags BgpSrteSegmentATypeSubTlv"))
		}
	}

	if obj.obj.Label != nil {
		if *obj.obj.Label < 0 || *obj.obj.Label > 1048575 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentATypeSubTlv.Label <= 1048575 but Got %d", *obj.obj.Label))
		}

	}

	if obj.obj.Tc != nil {
		if *obj.obj.Tc < 0 || *obj.obj.Tc > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentATypeSubTlv.Tc <= 7 but Got %d", *obj.obj.Tc))
		}

	}

	if obj.obj.Ttl != nil {
		if *obj.obj.Ttl < 0 || *obj.obj.Ttl > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentATypeSubTlv.Ttl <= 255 but Got %d", *obj.obj.Ttl))
		}

	}

}

func (obj *bgpSrteSegmentATypeSubTlv) setDefault() {

}

type bgpSrteSegmentBTypeSubTlv struct {
	obj *snappipb.BgpSrteSegmentBTypeSubTlv
}

func NewBgpSrteSegmentBTypeSubTlv() BgpSrteSegmentBTypeSubTlv {
	obj := bgpSrteSegmentBTypeSubTlv{obj: &snappipb.BgpSrteSegmentBTypeSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentBTypeSubTlv) Msg() *snappipb.BgpSrteSegmentBTypeSubTlv {
	return obj.obj
}

func (obj *bgpSrteSegmentBTypeSubTlv) SetMsg(msg *snappipb.BgpSrteSegmentBTypeSubTlv) BgpSrteSegmentBTypeSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentBTypeSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentBTypeSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentBTypeSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentBTypeSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentBTypeSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentBTypeSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentBTypeSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentBTypeSubTlv interface {
	Msg() *snappipb.BgpSrteSegmentBTypeSubTlv
	SetMsg(*snappipb.BgpSrteSegmentBTypeSubTlv) BgpSrteSegmentBTypeSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() string
	SetFlags(value string) BgpSrteSegmentBTypeSubTlv
	HasFlags() bool
	Srv6Sid() string
	SetSrv6Sid(value string) BgpSrteSegmentBTypeSubTlv
	Srv6SidEndpointBehavior() BgpSrteSRv6SIDEndpointBehaviorAndStructure
	SetSrv6SidEndpointBehavior(value BgpSrteSRv6SIDEndpointBehaviorAndStructure) BgpSrteSegmentBTypeSubTlv
	HasSrv6SidEndpointBehavior() bool
}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentBTypeSubTlv) Flags() string {

	return *obj.obj.Flags

}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentBTypeSubTlv) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the string value in the BgpSrteSegmentBTypeSubTlv object
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentBTypeSubTlv) SetFlags(value string) BgpSrteSegmentBTypeSubTlv {
	obj.obj.Flags = &value

	return obj
}

// Srv6Sid returns a string
//  SRv6 SID.
func (obj *bgpSrteSegmentBTypeSubTlv) Srv6Sid() string {

	return obj.obj.Srv6Sid
}

// SetSrv6Sid sets the string value in the BgpSrteSegmentBTypeSubTlv object
//  SRv6 SID.
func (obj *bgpSrteSegmentBTypeSubTlv) SetSrv6Sid(value string) BgpSrteSegmentBTypeSubTlv {
	obj.obj.Srv6Sid = value

	return obj
}

// Srv6SidEndpointBehavior returns a BgpSrteSRv6SIDEndpointBehaviorAndStructure
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentBTypeSubTlv) Srv6SidEndpointBehavior() BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	if obj.obj.Srv6SidEndpointBehavior == nil {
		obj.obj.Srv6SidEndpointBehavior = NewBgpSrteSRv6SIDEndpointBehaviorAndStructure().Msg()
	}
	return &bgpSrteSRv6SIDEndpointBehaviorAndStructure{obj: obj.obj.Srv6SidEndpointBehavior}
}

// Srv6SidEndpointBehavior returns a BgpSrteSRv6SIDEndpointBehaviorAndStructure
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentBTypeSubTlv) HasSrv6SidEndpointBehavior() bool {
	return obj.obj.Srv6SidEndpointBehavior != nil
}

// SetSrv6SidEndpointBehavior sets the BgpSrteSRv6SIDEndpointBehaviorAndStructure value in the BgpSrteSegmentBTypeSubTlv object
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentBTypeSubTlv) SetSrv6SidEndpointBehavior(value BgpSrteSRv6SIDEndpointBehaviorAndStructure) BgpSrteSegmentBTypeSubTlv {
	obj.Srv6SidEndpointBehavior().SetMsg(value.Msg())

	return obj
}

func (obj *bgpSrteSegmentBTypeSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		err := validateHex(obj.Flags())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Flags BgpSrteSegmentBTypeSubTlv"))
		}
	}

	// Srv6Sid required
	if obj.obj.Srv6Sid == "" {
		validation = append(validation, "Srv6Sid is required field on interface BgpSrteSegmentBTypeSubTlv")
	} else {
		err := validateIpv6(obj.Srv6Sid())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Srv6Sid BgpSrteSegmentBTypeSubTlv"))
		}
	}

	if obj.obj.Srv6SidEndpointBehavior != nil {
		obj.Srv6SidEndpointBehavior().validateObj(set_default)
	}
}

func (obj *bgpSrteSegmentBTypeSubTlv) setDefault() {

}

type bgpSrteSegmentCTypeSubTlv struct {
	obj *snappipb.BgpSrteSegmentCTypeSubTlv
}

func NewBgpSrteSegmentCTypeSubTlv() BgpSrteSegmentCTypeSubTlv {
	obj := bgpSrteSegmentCTypeSubTlv{obj: &snappipb.BgpSrteSegmentCTypeSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentCTypeSubTlv) Msg() *snappipb.BgpSrteSegmentCTypeSubTlv {
	return obj.obj
}

func (obj *bgpSrteSegmentCTypeSubTlv) SetMsg(msg *snappipb.BgpSrteSegmentCTypeSubTlv) BgpSrteSegmentCTypeSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentCTypeSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentCTypeSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentCTypeSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentCTypeSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentCTypeSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentCTypeSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentCTypeSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentCTypeSubTlv interface {
	Msg() *snappipb.BgpSrteSegmentCTypeSubTlv
	SetMsg(*snappipb.BgpSrteSegmentCTypeSubTlv) BgpSrteSegmentCTypeSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() string
	SetFlags(value string) BgpSrteSegmentCTypeSubTlv
	HasFlags() bool
	SrAlgorithm() int32
	SetSrAlgorithm(value int32) BgpSrteSegmentCTypeSubTlv
	HasSrAlgorithm() bool
	Ipv4NodeAddress() string
	SetIpv4NodeAddress(value string) BgpSrteSegmentCTypeSubTlv
	SrMplsSid() BgpSrteSrMplsSid
	SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentCTypeSubTlv
	HasSrMplsSid() bool
}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentCTypeSubTlv) Flags() string {

	return *obj.obj.Flags

}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentCTypeSubTlv) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the string value in the BgpSrteSegmentCTypeSubTlv object
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentCTypeSubTlv) SetFlags(value string) BgpSrteSegmentCTypeSubTlv {
	obj.obj.Flags = &value

	return obj
}

// SrAlgorithm returns a int32
//  SR Algorithm identifier when A-Flag in on.
func (obj *bgpSrteSegmentCTypeSubTlv) SrAlgorithm() int32 {

	if obj.obj.SrAlgorithm == nil {
		*obj.obj.SrAlgorithm = 0
	}

	return *obj.obj.SrAlgorithm

}

// SrAlgorithm returns a int32
//  SR Algorithm identifier when A-Flag in on.
func (obj *bgpSrteSegmentCTypeSubTlv) HasSrAlgorithm() bool {
	return obj.obj.SrAlgorithm != nil
}

// SetSrAlgorithm sets the int32 value in the BgpSrteSegmentCTypeSubTlv object
//  SR Algorithm identifier when A-Flag in on.
func (obj *bgpSrteSegmentCTypeSubTlv) SetSrAlgorithm(value int32) BgpSrteSegmentCTypeSubTlv {
	obj.obj.SrAlgorithm = &value

	return obj
}

// Ipv4NodeAddress returns a string
//  IPv4 address representing a node.
func (obj *bgpSrteSegmentCTypeSubTlv) Ipv4NodeAddress() string {

	return obj.obj.Ipv4NodeAddress
}

// SetIpv4NodeAddress sets the string value in the BgpSrteSegmentCTypeSubTlv object
//  IPv4 address representing a node.
func (obj *bgpSrteSegmentCTypeSubTlv) SetIpv4NodeAddress(value string) BgpSrteSegmentCTypeSubTlv {
	obj.obj.Ipv4NodeAddress = value

	return obj
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentCTypeSubTlv) SrMplsSid() BgpSrteSrMplsSid {
	if obj.obj.SrMplsSid == nil {
		obj.obj.SrMplsSid = NewBgpSrteSrMplsSid().Msg()
	}
	return &bgpSrteSrMplsSid{obj: obj.obj.SrMplsSid}
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentCTypeSubTlv) HasSrMplsSid() bool {
	return obj.obj.SrMplsSid != nil
}

// SetSrMplsSid sets the BgpSrteSrMplsSid value in the BgpSrteSegmentCTypeSubTlv object
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentCTypeSubTlv) SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentCTypeSubTlv {
	obj.SrMplsSid().SetMsg(value.Msg())

	return obj
}

func (obj *bgpSrteSegmentCTypeSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		err := validateHex(obj.Flags())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Flags BgpSrteSegmentCTypeSubTlv"))
		}
	}

	if obj.obj.SrAlgorithm != nil {
		if *obj.obj.SrAlgorithm < 0 || *obj.obj.SrAlgorithm > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentCTypeSubTlv.SrAlgorithm <= 255 but Got %d", *obj.obj.SrAlgorithm))
		}

	}

	// Ipv4NodeAddress required
	if obj.obj.Ipv4NodeAddress == "" {
		validation = append(validation, "Ipv4NodeAddress is required field on interface BgpSrteSegmentCTypeSubTlv")
	} else {
		err := validateIpv4(obj.Ipv4NodeAddress())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Ipv4NodeAddress BgpSrteSegmentCTypeSubTlv"))
		}
	}

	if obj.obj.SrMplsSid != nil {
		obj.SrMplsSid().validateObj(set_default)
	}
}

func (obj *bgpSrteSegmentCTypeSubTlv) setDefault() {
	if obj.obj.SrAlgorithm == nil {
		obj.SetSrAlgorithm(0)
	}

}

type bgpSrteSegmentDTypeSubTlv struct {
	obj *snappipb.BgpSrteSegmentDTypeSubTlv
}

func NewBgpSrteSegmentDTypeSubTlv() BgpSrteSegmentDTypeSubTlv {
	obj := bgpSrteSegmentDTypeSubTlv{obj: &snappipb.BgpSrteSegmentDTypeSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentDTypeSubTlv) Msg() *snappipb.BgpSrteSegmentDTypeSubTlv {
	return obj.obj
}

func (obj *bgpSrteSegmentDTypeSubTlv) SetMsg(msg *snappipb.BgpSrteSegmentDTypeSubTlv) BgpSrteSegmentDTypeSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentDTypeSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentDTypeSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentDTypeSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentDTypeSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentDTypeSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentDTypeSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentDTypeSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentDTypeSubTlv interface {
	Msg() *snappipb.BgpSrteSegmentDTypeSubTlv
	SetMsg(*snappipb.BgpSrteSegmentDTypeSubTlv) BgpSrteSegmentDTypeSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() string
	SetFlags(value string) BgpSrteSegmentDTypeSubTlv
	HasFlags() bool
	SrAlgorithm() int32
	SetSrAlgorithm(value int32) BgpSrteSegmentDTypeSubTlv
	HasSrAlgorithm() bool
	Ipv6NodeAddress() string
	SetIpv6NodeAddress(value string) BgpSrteSegmentDTypeSubTlv
	SrMplsSid() BgpSrteSrMplsSid
	SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentDTypeSubTlv
	HasSrMplsSid() bool
}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentDTypeSubTlv) Flags() string {

	return *obj.obj.Flags

}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentDTypeSubTlv) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the string value in the BgpSrteSegmentDTypeSubTlv object
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentDTypeSubTlv) SetFlags(value string) BgpSrteSegmentDTypeSubTlv {
	obj.obj.Flags = &value

	return obj
}

// SrAlgorithm returns a int32
//  specifying SR Algorithm when when A-Flag as defined in above flags.
func (obj *bgpSrteSegmentDTypeSubTlv) SrAlgorithm() int32 {

	if obj.obj.SrAlgorithm == nil {
		*obj.obj.SrAlgorithm = 0
	}

	return *obj.obj.SrAlgorithm

}

// SrAlgorithm returns a int32
//  specifying SR Algorithm when when A-Flag as defined in above flags.
func (obj *bgpSrteSegmentDTypeSubTlv) HasSrAlgorithm() bool {
	return obj.obj.SrAlgorithm != nil
}

// SetSrAlgorithm sets the int32 value in the BgpSrteSegmentDTypeSubTlv object
//  specifying SR Algorithm when when A-Flag as defined in above flags.
func (obj *bgpSrteSegmentDTypeSubTlv) SetSrAlgorithm(value int32) BgpSrteSegmentDTypeSubTlv {
	obj.obj.SrAlgorithm = &value

	return obj
}

// Ipv6NodeAddress returns a string
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentDTypeSubTlv) Ipv6NodeAddress() string {

	return obj.obj.Ipv6NodeAddress
}

// SetIpv6NodeAddress sets the string value in the BgpSrteSegmentDTypeSubTlv object
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentDTypeSubTlv) SetIpv6NodeAddress(value string) BgpSrteSegmentDTypeSubTlv {
	obj.obj.Ipv6NodeAddress = value

	return obj
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentDTypeSubTlv) SrMplsSid() BgpSrteSrMplsSid {
	if obj.obj.SrMplsSid == nil {
		obj.obj.SrMplsSid = NewBgpSrteSrMplsSid().Msg()
	}
	return &bgpSrteSrMplsSid{obj: obj.obj.SrMplsSid}
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentDTypeSubTlv) HasSrMplsSid() bool {
	return obj.obj.SrMplsSid != nil
}

// SetSrMplsSid sets the BgpSrteSrMplsSid value in the BgpSrteSegmentDTypeSubTlv object
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentDTypeSubTlv) SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentDTypeSubTlv {
	obj.SrMplsSid().SetMsg(value.Msg())

	return obj
}

func (obj *bgpSrteSegmentDTypeSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		err := validateHex(obj.Flags())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Flags BgpSrteSegmentDTypeSubTlv"))
		}
	}

	if obj.obj.SrAlgorithm != nil {
		if *obj.obj.SrAlgorithm < 0 || *obj.obj.SrAlgorithm > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentDTypeSubTlv.SrAlgorithm <= 255 but Got %d", *obj.obj.SrAlgorithm))
		}

	}

	// Ipv6NodeAddress required
	if obj.obj.Ipv6NodeAddress == "" {
		validation = append(validation, "Ipv6NodeAddress is required field on interface BgpSrteSegmentDTypeSubTlv")
	} else {
		err := validateIpv6(obj.Ipv6NodeAddress())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Ipv6NodeAddress BgpSrteSegmentDTypeSubTlv"))
		}
	}

	if obj.obj.SrMplsSid != nil {
		obj.SrMplsSid().validateObj(set_default)
	}
}

func (obj *bgpSrteSegmentDTypeSubTlv) setDefault() {
	if obj.obj.SrAlgorithm == nil {
		obj.SetSrAlgorithm(0)
	}

}

type bgpSrteSegmentETypeSubTlv struct {
	obj *snappipb.BgpSrteSegmentETypeSubTlv
}

func NewBgpSrteSegmentETypeSubTlv() BgpSrteSegmentETypeSubTlv {
	obj := bgpSrteSegmentETypeSubTlv{obj: &snappipb.BgpSrteSegmentETypeSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentETypeSubTlv) Msg() *snappipb.BgpSrteSegmentETypeSubTlv {
	return obj.obj
}

func (obj *bgpSrteSegmentETypeSubTlv) SetMsg(msg *snappipb.BgpSrteSegmentETypeSubTlv) BgpSrteSegmentETypeSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentETypeSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentETypeSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentETypeSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentETypeSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentETypeSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentETypeSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentETypeSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentETypeSubTlv interface {
	Msg() *snappipb.BgpSrteSegmentETypeSubTlv
	SetMsg(*snappipb.BgpSrteSegmentETypeSubTlv) BgpSrteSegmentETypeSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() string
	SetFlags(value string) BgpSrteSegmentETypeSubTlv
	HasFlags() bool
	LocalInterfaceId() int32
	SetLocalInterfaceId(value int32) BgpSrteSegmentETypeSubTlv
	HasLocalInterfaceId() bool
	Ipv4NodeAddress() string
	SetIpv4NodeAddress(value string) BgpSrteSegmentETypeSubTlv
	SrMplsSid() BgpSrteSrMplsSid
	SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentETypeSubTlv
	HasSrMplsSid() bool
}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentETypeSubTlv) Flags() string {

	return *obj.obj.Flags

}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentETypeSubTlv) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the string value in the BgpSrteSegmentETypeSubTlv object
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentETypeSubTlv) SetFlags(value string) BgpSrteSegmentETypeSubTlv {
	obj.obj.Flags = &value

	return obj
}

// LocalInterfaceId returns a int32
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentETypeSubTlv) LocalInterfaceId() int32 {

	if obj.obj.LocalInterfaceId == nil {
		*obj.obj.LocalInterfaceId = 0
	}

	return *obj.obj.LocalInterfaceId

}

// LocalInterfaceId returns a int32
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentETypeSubTlv) HasLocalInterfaceId() bool {
	return obj.obj.LocalInterfaceId != nil
}

// SetLocalInterfaceId sets the int32 value in the BgpSrteSegmentETypeSubTlv object
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentETypeSubTlv) SetLocalInterfaceId(value int32) BgpSrteSegmentETypeSubTlv {
	obj.obj.LocalInterfaceId = &value

	return obj
}

// Ipv4NodeAddress returns a string
//  IPv4 address representing a node.
func (obj *bgpSrteSegmentETypeSubTlv) Ipv4NodeAddress() string {

	return obj.obj.Ipv4NodeAddress
}

// SetIpv4NodeAddress sets the string value in the BgpSrteSegmentETypeSubTlv object
//  IPv4 address representing a node.
func (obj *bgpSrteSegmentETypeSubTlv) SetIpv4NodeAddress(value string) BgpSrteSegmentETypeSubTlv {
	obj.obj.Ipv4NodeAddress = value

	return obj
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentETypeSubTlv) SrMplsSid() BgpSrteSrMplsSid {
	if obj.obj.SrMplsSid == nil {
		obj.obj.SrMplsSid = NewBgpSrteSrMplsSid().Msg()
	}
	return &bgpSrteSrMplsSid{obj: obj.obj.SrMplsSid}
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentETypeSubTlv) HasSrMplsSid() bool {
	return obj.obj.SrMplsSid != nil
}

// SetSrMplsSid sets the BgpSrteSrMplsSid value in the BgpSrteSegmentETypeSubTlv object
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentETypeSubTlv) SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentETypeSubTlv {
	obj.SrMplsSid().SetMsg(value.Msg())

	return obj
}

func (obj *bgpSrteSegmentETypeSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		err := validateHex(obj.Flags())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Flags BgpSrteSegmentETypeSubTlv"))
		}
	}

	if obj.obj.LocalInterfaceId != nil {
		if *obj.obj.LocalInterfaceId < 0 || *obj.obj.LocalInterfaceId > 2147483647 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentETypeSubTlv.LocalInterfaceId <= 2147483647 but Got %d", *obj.obj.LocalInterfaceId))
		}

	}

	// Ipv4NodeAddress required
	if obj.obj.Ipv4NodeAddress == "" {
		validation = append(validation, "Ipv4NodeAddress is required field on interface BgpSrteSegmentETypeSubTlv")
	} else {
		err := validateIpv4(obj.Ipv4NodeAddress())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Ipv4NodeAddress BgpSrteSegmentETypeSubTlv"))
		}
	}

	if obj.obj.SrMplsSid != nil {
		obj.SrMplsSid().validateObj(set_default)
	}
}

func (obj *bgpSrteSegmentETypeSubTlv) setDefault() {
	if obj.obj.LocalInterfaceId == nil {
		obj.SetLocalInterfaceId(0)
	}

}

type bgpSrteSegmentFTypeSubTlv struct {
	obj *snappipb.BgpSrteSegmentFTypeSubTlv
}

func NewBgpSrteSegmentFTypeSubTlv() BgpSrteSegmentFTypeSubTlv {
	obj := bgpSrteSegmentFTypeSubTlv{obj: &snappipb.BgpSrteSegmentFTypeSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentFTypeSubTlv) Msg() *snappipb.BgpSrteSegmentFTypeSubTlv {
	return obj.obj
}

func (obj *bgpSrteSegmentFTypeSubTlv) SetMsg(msg *snappipb.BgpSrteSegmentFTypeSubTlv) BgpSrteSegmentFTypeSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentFTypeSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentFTypeSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentFTypeSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentFTypeSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentFTypeSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentFTypeSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentFTypeSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentFTypeSubTlv interface {
	Msg() *snappipb.BgpSrteSegmentFTypeSubTlv
	SetMsg(*snappipb.BgpSrteSegmentFTypeSubTlv) BgpSrteSegmentFTypeSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() string
	SetFlags(value string) BgpSrteSegmentFTypeSubTlv
	HasFlags() bool
	LocalIpv4Address() string
	SetLocalIpv4Address(value string) BgpSrteSegmentFTypeSubTlv
	RemoteIpv4Address() string
	SetRemoteIpv4Address(value string) BgpSrteSegmentFTypeSubTlv
	SrMplsSid() BgpSrteSrMplsSid
	SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentFTypeSubTlv
	HasSrMplsSid() bool
}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentFTypeSubTlv) Flags() string {

	return *obj.obj.Flags

}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentFTypeSubTlv) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the string value in the BgpSrteSegmentFTypeSubTlv object
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentFTypeSubTlv) SetFlags(value string) BgpSrteSegmentFTypeSubTlv {
	obj.obj.Flags = &value

	return obj
}

// LocalIpv4Address returns a string
//  Local IPv4 Address.
func (obj *bgpSrteSegmentFTypeSubTlv) LocalIpv4Address() string {

	return obj.obj.LocalIpv4Address
}

// SetLocalIpv4Address sets the string value in the BgpSrteSegmentFTypeSubTlv object
//  Local IPv4 Address.
func (obj *bgpSrteSegmentFTypeSubTlv) SetLocalIpv4Address(value string) BgpSrteSegmentFTypeSubTlv {
	obj.obj.LocalIpv4Address = value

	return obj
}

// RemoteIpv4Address returns a string
//  Remote IPv4 Address.
func (obj *bgpSrteSegmentFTypeSubTlv) RemoteIpv4Address() string {

	return obj.obj.RemoteIpv4Address
}

// SetRemoteIpv4Address sets the string value in the BgpSrteSegmentFTypeSubTlv object
//  Remote IPv4 Address.
func (obj *bgpSrteSegmentFTypeSubTlv) SetRemoteIpv4Address(value string) BgpSrteSegmentFTypeSubTlv {
	obj.obj.RemoteIpv4Address = value

	return obj
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentFTypeSubTlv) SrMplsSid() BgpSrteSrMplsSid {
	if obj.obj.SrMplsSid == nil {
		obj.obj.SrMplsSid = NewBgpSrteSrMplsSid().Msg()
	}
	return &bgpSrteSrMplsSid{obj: obj.obj.SrMplsSid}
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentFTypeSubTlv) HasSrMplsSid() bool {
	return obj.obj.SrMplsSid != nil
}

// SetSrMplsSid sets the BgpSrteSrMplsSid value in the BgpSrteSegmentFTypeSubTlv object
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentFTypeSubTlv) SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentFTypeSubTlv {
	obj.SrMplsSid().SetMsg(value.Msg())

	return obj
}

func (obj *bgpSrteSegmentFTypeSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		err := validateHex(obj.Flags())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Flags BgpSrteSegmentFTypeSubTlv"))
		}
	}

	// LocalIpv4Address required
	if obj.obj.LocalIpv4Address == "" {
		validation = append(validation, "LocalIpv4Address is required field on interface BgpSrteSegmentFTypeSubTlv")
	} else {
		err := validateIpv4(obj.LocalIpv4Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on LocalIpv4Address BgpSrteSegmentFTypeSubTlv"))
		}
	}

	// RemoteIpv4Address required
	if obj.obj.RemoteIpv4Address == "" {
		validation = append(validation, "RemoteIpv4Address is required field on interface BgpSrteSegmentFTypeSubTlv")
	} else {
		err := validateIpv4(obj.RemoteIpv4Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on RemoteIpv4Address BgpSrteSegmentFTypeSubTlv"))
		}
	}

	if obj.obj.SrMplsSid != nil {
		obj.SrMplsSid().validateObj(set_default)
	}
}

func (obj *bgpSrteSegmentFTypeSubTlv) setDefault() {

}

type bgpSrteSegmentGTypeSubTlv struct {
	obj *snappipb.BgpSrteSegmentGTypeSubTlv
}

func NewBgpSrteSegmentGTypeSubTlv() BgpSrteSegmentGTypeSubTlv {
	obj := bgpSrteSegmentGTypeSubTlv{obj: &snappipb.BgpSrteSegmentGTypeSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentGTypeSubTlv) Msg() *snappipb.BgpSrteSegmentGTypeSubTlv {
	return obj.obj
}

func (obj *bgpSrteSegmentGTypeSubTlv) SetMsg(msg *snappipb.BgpSrteSegmentGTypeSubTlv) BgpSrteSegmentGTypeSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentGTypeSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentGTypeSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentGTypeSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentGTypeSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentGTypeSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentGTypeSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentGTypeSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentGTypeSubTlv interface {
	Msg() *snappipb.BgpSrteSegmentGTypeSubTlv
	SetMsg(*snappipb.BgpSrteSegmentGTypeSubTlv) BgpSrteSegmentGTypeSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() string
	SetFlags(value string) BgpSrteSegmentGTypeSubTlv
	HasFlags() bool
	LocalInterfaceId() int32
	SetLocalInterfaceId(value int32) BgpSrteSegmentGTypeSubTlv
	HasLocalInterfaceId() bool
	LocalIpv6NodeAddress() string
	SetLocalIpv6NodeAddress(value string) BgpSrteSegmentGTypeSubTlv
	RemoteInterfaceId() int32
	SetRemoteInterfaceId(value int32) BgpSrteSegmentGTypeSubTlv
	HasRemoteInterfaceId() bool
	RemoteIpv6NodeAddress() string
	SetRemoteIpv6NodeAddress(value string) BgpSrteSegmentGTypeSubTlv
	SrMplsSid() BgpSrteSrMplsSid
	SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentGTypeSubTlv
	HasSrMplsSid() bool
}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentGTypeSubTlv) Flags() string {

	return *obj.obj.Flags

}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentGTypeSubTlv) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the string value in the BgpSrteSegmentGTypeSubTlv object
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentGTypeSubTlv) SetFlags(value string) BgpSrteSegmentGTypeSubTlv {
	obj.obj.Flags = &value

	return obj
}

// LocalInterfaceId returns a int32
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentGTypeSubTlv) LocalInterfaceId() int32 {

	if obj.obj.LocalInterfaceId == nil {
		*obj.obj.LocalInterfaceId = 0
	}

	return *obj.obj.LocalInterfaceId

}

// LocalInterfaceId returns a int32
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentGTypeSubTlv) HasLocalInterfaceId() bool {
	return obj.obj.LocalInterfaceId != nil
}

// SetLocalInterfaceId sets the int32 value in the BgpSrteSegmentGTypeSubTlv object
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentGTypeSubTlv) SetLocalInterfaceId(value int32) BgpSrteSegmentGTypeSubTlv {
	obj.obj.LocalInterfaceId = &value

	return obj
}

// LocalIpv6NodeAddress returns a string
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentGTypeSubTlv) LocalIpv6NodeAddress() string {

	return obj.obj.LocalIpv6NodeAddress
}

// SetLocalIpv6NodeAddress sets the string value in the BgpSrteSegmentGTypeSubTlv object
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentGTypeSubTlv) SetLocalIpv6NodeAddress(value string) BgpSrteSegmentGTypeSubTlv {
	obj.obj.LocalIpv6NodeAddress = value

	return obj
}

// RemoteInterfaceId returns a int32
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentGTypeSubTlv) RemoteInterfaceId() int32 {

	if obj.obj.RemoteInterfaceId == nil {
		*obj.obj.RemoteInterfaceId = 0
	}

	return *obj.obj.RemoteInterfaceId

}

// RemoteInterfaceId returns a int32
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentGTypeSubTlv) HasRemoteInterfaceId() bool {
	return obj.obj.RemoteInterfaceId != nil
}

// SetRemoteInterfaceId sets the int32 value in the BgpSrteSegmentGTypeSubTlv object
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentGTypeSubTlv) SetRemoteInterfaceId(value int32) BgpSrteSegmentGTypeSubTlv {
	obj.obj.RemoteInterfaceId = &value

	return obj
}

// RemoteIpv6NodeAddress returns a string
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentGTypeSubTlv) RemoteIpv6NodeAddress() string {

	return obj.obj.RemoteIpv6NodeAddress
}

// SetRemoteIpv6NodeAddress sets the string value in the BgpSrteSegmentGTypeSubTlv object
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentGTypeSubTlv) SetRemoteIpv6NodeAddress(value string) BgpSrteSegmentGTypeSubTlv {
	obj.obj.RemoteIpv6NodeAddress = value

	return obj
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentGTypeSubTlv) SrMplsSid() BgpSrteSrMplsSid {
	if obj.obj.SrMplsSid == nil {
		obj.obj.SrMplsSid = NewBgpSrteSrMplsSid().Msg()
	}
	return &bgpSrteSrMplsSid{obj: obj.obj.SrMplsSid}
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentGTypeSubTlv) HasSrMplsSid() bool {
	return obj.obj.SrMplsSid != nil
}

// SetSrMplsSid sets the BgpSrteSrMplsSid value in the BgpSrteSegmentGTypeSubTlv object
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentGTypeSubTlv) SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentGTypeSubTlv {
	obj.SrMplsSid().SetMsg(value.Msg())

	return obj
}

func (obj *bgpSrteSegmentGTypeSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		err := validateHex(obj.Flags())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Flags BgpSrteSegmentGTypeSubTlv"))
		}
	}

	if obj.obj.LocalInterfaceId != nil {
		if *obj.obj.LocalInterfaceId < 0 || *obj.obj.LocalInterfaceId > 2147483647 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentGTypeSubTlv.LocalInterfaceId <= 2147483647 but Got %d", *obj.obj.LocalInterfaceId))
		}

	}

	// LocalIpv6NodeAddress required
	if obj.obj.LocalIpv6NodeAddress == "" {
		validation = append(validation, "LocalIpv6NodeAddress is required field on interface BgpSrteSegmentGTypeSubTlv")
	} else {
		err := validateIpv6(obj.LocalIpv6NodeAddress())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on LocalIpv6NodeAddress BgpSrteSegmentGTypeSubTlv"))
		}
	}

	if obj.obj.RemoteInterfaceId != nil {
		if *obj.obj.RemoteInterfaceId < 0 || *obj.obj.RemoteInterfaceId > 2147483647 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentGTypeSubTlv.RemoteInterfaceId <= 2147483647 but Got %d", *obj.obj.RemoteInterfaceId))
		}

	}

	// RemoteIpv6NodeAddress required
	if obj.obj.RemoteIpv6NodeAddress == "" {
		validation = append(validation, "RemoteIpv6NodeAddress is required field on interface BgpSrteSegmentGTypeSubTlv")
	} else {
		err := validateIpv6(obj.RemoteIpv6NodeAddress())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on RemoteIpv6NodeAddress BgpSrteSegmentGTypeSubTlv"))
		}
	}

	if obj.obj.SrMplsSid != nil {
		obj.SrMplsSid().validateObj(set_default)
	}
}

func (obj *bgpSrteSegmentGTypeSubTlv) setDefault() {
	if obj.obj.LocalInterfaceId == nil {
		obj.SetLocalInterfaceId(0)
	}
	if obj.obj.RemoteInterfaceId == nil {
		obj.SetRemoteInterfaceId(0)
	}

}

type bgpSrteSegmentHTypeSubTlv struct {
	obj *snappipb.BgpSrteSegmentHTypeSubTlv
}

func NewBgpSrteSegmentHTypeSubTlv() BgpSrteSegmentHTypeSubTlv {
	obj := bgpSrteSegmentHTypeSubTlv{obj: &snappipb.BgpSrteSegmentHTypeSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentHTypeSubTlv) Msg() *snappipb.BgpSrteSegmentHTypeSubTlv {
	return obj.obj
}

func (obj *bgpSrteSegmentHTypeSubTlv) SetMsg(msg *snappipb.BgpSrteSegmentHTypeSubTlv) BgpSrteSegmentHTypeSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentHTypeSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentHTypeSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentHTypeSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentHTypeSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentHTypeSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentHTypeSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentHTypeSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentHTypeSubTlv interface {
	Msg() *snappipb.BgpSrteSegmentHTypeSubTlv
	SetMsg(*snappipb.BgpSrteSegmentHTypeSubTlv) BgpSrteSegmentHTypeSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() string
	SetFlags(value string) BgpSrteSegmentHTypeSubTlv
	HasFlags() bool
	LocalIpv6Address() string
	SetLocalIpv6Address(value string) BgpSrteSegmentHTypeSubTlv
	RemoteIpv6Address() string
	SetRemoteIpv6Address(value string) BgpSrteSegmentHTypeSubTlv
	SrMplsSid() BgpSrteSrMplsSid
	SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentHTypeSubTlv
	HasSrMplsSid() bool
}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentHTypeSubTlv) Flags() string {

	return *obj.obj.Flags

}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentHTypeSubTlv) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the string value in the BgpSrteSegmentHTypeSubTlv object
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentHTypeSubTlv) SetFlags(value string) BgpSrteSegmentHTypeSubTlv {
	obj.obj.Flags = &value

	return obj
}

// LocalIpv6Address returns a string
//  Local IPv6 Address.
func (obj *bgpSrteSegmentHTypeSubTlv) LocalIpv6Address() string {

	return obj.obj.LocalIpv6Address
}

// SetLocalIpv6Address sets the string value in the BgpSrteSegmentHTypeSubTlv object
//  Local IPv6 Address.
func (obj *bgpSrteSegmentHTypeSubTlv) SetLocalIpv6Address(value string) BgpSrteSegmentHTypeSubTlv {
	obj.obj.LocalIpv6Address = value

	return obj
}

// RemoteIpv6Address returns a string
//  Remote IPv6 Address.
func (obj *bgpSrteSegmentHTypeSubTlv) RemoteIpv6Address() string {

	return obj.obj.RemoteIpv6Address
}

// SetRemoteIpv6Address sets the string value in the BgpSrteSegmentHTypeSubTlv object
//  Remote IPv6 Address.
func (obj *bgpSrteSegmentHTypeSubTlv) SetRemoteIpv6Address(value string) BgpSrteSegmentHTypeSubTlv {
	obj.obj.RemoteIpv6Address = value

	return obj
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentHTypeSubTlv) SrMplsSid() BgpSrteSrMplsSid {
	if obj.obj.SrMplsSid == nil {
		obj.obj.SrMplsSid = NewBgpSrteSrMplsSid().Msg()
	}
	return &bgpSrteSrMplsSid{obj: obj.obj.SrMplsSid}
}

// SrMplsSid returns a BgpSrteSrMplsSid
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentHTypeSubTlv) HasSrMplsSid() bool {
	return obj.obj.SrMplsSid != nil
}

// SetSrMplsSid sets the BgpSrteSrMplsSid value in the BgpSrteSegmentHTypeSubTlv object
//  Optional SR-MPLS SID.
func (obj *bgpSrteSegmentHTypeSubTlv) SetSrMplsSid(value BgpSrteSrMplsSid) BgpSrteSegmentHTypeSubTlv {
	obj.SrMplsSid().SetMsg(value.Msg())

	return obj
}

func (obj *bgpSrteSegmentHTypeSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		err := validateHex(obj.Flags())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Flags BgpSrteSegmentHTypeSubTlv"))
		}
	}

	// LocalIpv6Address required
	if obj.obj.LocalIpv6Address == "" {
		validation = append(validation, "LocalIpv6Address is required field on interface BgpSrteSegmentHTypeSubTlv")
	} else {
		err := validateIpv6(obj.LocalIpv6Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on LocalIpv6Address BgpSrteSegmentHTypeSubTlv"))
		}
	}

	// RemoteIpv6Address required
	if obj.obj.RemoteIpv6Address == "" {
		validation = append(validation, "RemoteIpv6Address is required field on interface BgpSrteSegmentHTypeSubTlv")
	} else {
		err := validateIpv6(obj.RemoteIpv6Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on RemoteIpv6Address BgpSrteSegmentHTypeSubTlv"))
		}
	}

	if obj.obj.SrMplsSid != nil {
		obj.SrMplsSid().validateObj(set_default)
	}
}

func (obj *bgpSrteSegmentHTypeSubTlv) setDefault() {

}

type bgpSrteSegmentITypeSubTlv struct {
	obj *snappipb.BgpSrteSegmentITypeSubTlv
}

func NewBgpSrteSegmentITypeSubTlv() BgpSrteSegmentITypeSubTlv {
	obj := bgpSrteSegmentITypeSubTlv{obj: &snappipb.BgpSrteSegmentITypeSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentITypeSubTlv) Msg() *snappipb.BgpSrteSegmentITypeSubTlv {
	return obj.obj
}

func (obj *bgpSrteSegmentITypeSubTlv) SetMsg(msg *snappipb.BgpSrteSegmentITypeSubTlv) BgpSrteSegmentITypeSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentITypeSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentITypeSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentITypeSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentITypeSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentITypeSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentITypeSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentITypeSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentITypeSubTlv interface {
	Msg() *snappipb.BgpSrteSegmentITypeSubTlv
	SetMsg(*snappipb.BgpSrteSegmentITypeSubTlv) BgpSrteSegmentITypeSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() string
	SetFlags(value string) BgpSrteSegmentITypeSubTlv
	HasFlags() bool
	Ipv6NodeAddress() string
	SetIpv6NodeAddress(value string) BgpSrteSegmentITypeSubTlv
	Srv6Sid() string
	SetSrv6Sid(value string) BgpSrteSegmentITypeSubTlv
	HasSrv6Sid() bool
	Srv6SidEndpointBehavior() BgpSrteSRv6SIDEndpointBehaviorAndStructure
	SetSrv6SidEndpointBehavior(value BgpSrteSRv6SIDEndpointBehaviorAndStructure) BgpSrteSegmentITypeSubTlv
	HasSrv6SidEndpointBehavior() bool
}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentITypeSubTlv) Flags() string {

	return *obj.obj.Flags

}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentITypeSubTlv) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the string value in the BgpSrteSegmentITypeSubTlv object
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentITypeSubTlv) SetFlags(value string) BgpSrteSegmentITypeSubTlv {
	obj.obj.Flags = &value

	return obj
}

// Ipv6NodeAddress returns a string
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentITypeSubTlv) Ipv6NodeAddress() string {

	return obj.obj.Ipv6NodeAddress
}

// SetIpv6NodeAddress sets the string value in the BgpSrteSegmentITypeSubTlv object
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentITypeSubTlv) SetIpv6NodeAddress(value string) BgpSrteSegmentITypeSubTlv {
	obj.obj.Ipv6NodeAddress = value

	return obj
}

// Srv6Sid returns a string
//  Optional SRv6 SID.
func (obj *bgpSrteSegmentITypeSubTlv) Srv6Sid() string {

	return *obj.obj.Srv6Sid

}

// Srv6Sid returns a string
//  Optional SRv6 SID.
func (obj *bgpSrteSegmentITypeSubTlv) HasSrv6Sid() bool {
	return obj.obj.Srv6Sid != nil
}

// SetSrv6Sid sets the string value in the BgpSrteSegmentITypeSubTlv object
//  Optional SRv6 SID.
func (obj *bgpSrteSegmentITypeSubTlv) SetSrv6Sid(value string) BgpSrteSegmentITypeSubTlv {
	obj.obj.Srv6Sid = &value

	return obj
}

// Srv6SidEndpointBehavior returns a BgpSrteSRv6SIDEndpointBehaviorAndStructure
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentITypeSubTlv) Srv6SidEndpointBehavior() BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	if obj.obj.Srv6SidEndpointBehavior == nil {
		obj.obj.Srv6SidEndpointBehavior = NewBgpSrteSRv6SIDEndpointBehaviorAndStructure().Msg()
	}
	return &bgpSrteSRv6SIDEndpointBehaviorAndStructure{obj: obj.obj.Srv6SidEndpointBehavior}
}

// Srv6SidEndpointBehavior returns a BgpSrteSRv6SIDEndpointBehaviorAndStructure
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentITypeSubTlv) HasSrv6SidEndpointBehavior() bool {
	return obj.obj.Srv6SidEndpointBehavior != nil
}

// SetSrv6SidEndpointBehavior sets the BgpSrteSRv6SIDEndpointBehaviorAndStructure value in the BgpSrteSegmentITypeSubTlv object
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentITypeSubTlv) SetSrv6SidEndpointBehavior(value BgpSrteSRv6SIDEndpointBehaviorAndStructure) BgpSrteSegmentITypeSubTlv {
	obj.Srv6SidEndpointBehavior().SetMsg(value.Msg())

	return obj
}

func (obj *bgpSrteSegmentITypeSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		err := validateHex(obj.Flags())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Flags BgpSrteSegmentITypeSubTlv"))
		}
	}

	// Ipv6NodeAddress required
	if obj.obj.Ipv6NodeAddress == "" {
		validation = append(validation, "Ipv6NodeAddress is required field on interface BgpSrteSegmentITypeSubTlv")
	} else {
		err := validateIpv6(obj.Ipv6NodeAddress())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Ipv6NodeAddress BgpSrteSegmentITypeSubTlv"))
		}
	}

	if obj.obj.Srv6Sid != nil {
		err := validateIpv6(obj.Srv6Sid())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Srv6Sid BgpSrteSegmentITypeSubTlv"))
		}
	}

	if obj.obj.Srv6SidEndpointBehavior != nil {
		obj.Srv6SidEndpointBehavior().validateObj(set_default)
	}
}

func (obj *bgpSrteSegmentITypeSubTlv) setDefault() {

}

type bgpSrteSegmentJTypeSubTlv struct {
	obj *snappipb.BgpSrteSegmentJTypeSubTlv
}

func NewBgpSrteSegmentJTypeSubTlv() BgpSrteSegmentJTypeSubTlv {
	obj := bgpSrteSegmentJTypeSubTlv{obj: &snappipb.BgpSrteSegmentJTypeSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentJTypeSubTlv) Msg() *snappipb.BgpSrteSegmentJTypeSubTlv {
	return obj.obj
}

func (obj *bgpSrteSegmentJTypeSubTlv) SetMsg(msg *snappipb.BgpSrteSegmentJTypeSubTlv) BgpSrteSegmentJTypeSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentJTypeSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentJTypeSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentJTypeSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentJTypeSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentJTypeSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentJTypeSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentJTypeSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentJTypeSubTlv interface {
	Msg() *snappipb.BgpSrteSegmentJTypeSubTlv
	SetMsg(*snappipb.BgpSrteSegmentJTypeSubTlv) BgpSrteSegmentJTypeSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() string
	SetFlags(value string) BgpSrteSegmentJTypeSubTlv
	HasFlags() bool
	SrAlgorithm() int32
	SetSrAlgorithm(value int32) BgpSrteSegmentJTypeSubTlv
	HasSrAlgorithm() bool
	LocalInterfaceId() int32
	SetLocalInterfaceId(value int32) BgpSrteSegmentJTypeSubTlv
	HasLocalInterfaceId() bool
	LocalIpv6NodeAddress() string
	SetLocalIpv6NodeAddress(value string) BgpSrteSegmentJTypeSubTlv
	RemoteInterfaceId() int32
	SetRemoteInterfaceId(value int32) BgpSrteSegmentJTypeSubTlv
	HasRemoteInterfaceId() bool
	RemoteIpv6NodeAddress() string
	SetRemoteIpv6NodeAddress(value string) BgpSrteSegmentJTypeSubTlv
	Srv6Sid() string
	SetSrv6Sid(value string) BgpSrteSegmentJTypeSubTlv
	HasSrv6Sid() bool
	Srv6SidEndpointBehavior() BgpSrteSRv6SIDEndpointBehaviorAndStructure
	SetSrv6SidEndpointBehavior(value BgpSrteSRv6SIDEndpointBehaviorAndStructure) BgpSrteSegmentJTypeSubTlv
	HasSrv6SidEndpointBehavior() bool
}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentJTypeSubTlv) Flags() string {

	return *obj.obj.Flags

}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentJTypeSubTlv) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the string value in the BgpSrteSegmentJTypeSubTlv object
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentJTypeSubTlv) SetFlags(value string) BgpSrteSegmentJTypeSubTlv {
	obj.obj.Flags = &value

	return obj
}

// SrAlgorithm returns a int32
//  SR Algorithm identifier when A-Flag in on.
func (obj *bgpSrteSegmentJTypeSubTlv) SrAlgorithm() int32 {

	if obj.obj.SrAlgorithm == nil {
		*obj.obj.SrAlgorithm = 0
	}

	return *obj.obj.SrAlgorithm

}

// SrAlgorithm returns a int32
//  SR Algorithm identifier when A-Flag in on.
func (obj *bgpSrteSegmentJTypeSubTlv) HasSrAlgorithm() bool {
	return obj.obj.SrAlgorithm != nil
}

// SetSrAlgorithm sets the int32 value in the BgpSrteSegmentJTypeSubTlv object
//  SR Algorithm identifier when A-Flag in on.
func (obj *bgpSrteSegmentJTypeSubTlv) SetSrAlgorithm(value int32) BgpSrteSegmentJTypeSubTlv {
	obj.obj.SrAlgorithm = &value

	return obj
}

// LocalInterfaceId returns a int32
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentJTypeSubTlv) LocalInterfaceId() int32 {

	if obj.obj.LocalInterfaceId == nil {
		*obj.obj.LocalInterfaceId = 0
	}

	return *obj.obj.LocalInterfaceId

}

// LocalInterfaceId returns a int32
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentJTypeSubTlv) HasLocalInterfaceId() bool {
	return obj.obj.LocalInterfaceId != nil
}

// SetLocalInterfaceId sets the int32 value in the BgpSrteSegmentJTypeSubTlv object
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentJTypeSubTlv) SetLocalInterfaceId(value int32) BgpSrteSegmentJTypeSubTlv {
	obj.obj.LocalInterfaceId = &value

	return obj
}

// LocalIpv6NodeAddress returns a string
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentJTypeSubTlv) LocalIpv6NodeAddress() string {

	return obj.obj.LocalIpv6NodeAddress
}

// SetLocalIpv6NodeAddress sets the string value in the BgpSrteSegmentJTypeSubTlv object
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentJTypeSubTlv) SetLocalIpv6NodeAddress(value string) BgpSrteSegmentJTypeSubTlv {
	obj.obj.LocalIpv6NodeAddress = value

	return obj
}

// RemoteInterfaceId returns a int32
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentJTypeSubTlv) RemoteInterfaceId() int32 {

	if obj.obj.RemoteInterfaceId == nil {
		*obj.obj.RemoteInterfaceId = 0
	}

	return *obj.obj.RemoteInterfaceId

}

// RemoteInterfaceId returns a int32
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentJTypeSubTlv) HasRemoteInterfaceId() bool {
	return obj.obj.RemoteInterfaceId != nil
}

// SetRemoteInterfaceId sets the int32 value in the BgpSrteSegmentJTypeSubTlv object
//  Local Interface ID: The Interface Index as defined in [RFC8664].
func (obj *bgpSrteSegmentJTypeSubTlv) SetRemoteInterfaceId(value int32) BgpSrteSegmentJTypeSubTlv {
	obj.obj.RemoteInterfaceId = &value

	return obj
}

// RemoteIpv6NodeAddress returns a string
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentJTypeSubTlv) RemoteIpv6NodeAddress() string {

	return obj.obj.RemoteIpv6NodeAddress
}

// SetRemoteIpv6NodeAddress sets the string value in the BgpSrteSegmentJTypeSubTlv object
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentJTypeSubTlv) SetRemoteIpv6NodeAddress(value string) BgpSrteSegmentJTypeSubTlv {
	obj.obj.RemoteIpv6NodeAddress = value

	return obj
}

// Srv6Sid returns a string
//  Optional SRv6 SID.
func (obj *bgpSrteSegmentJTypeSubTlv) Srv6Sid() string {

	return *obj.obj.Srv6Sid

}

// Srv6Sid returns a string
//  Optional SRv6 SID.
func (obj *bgpSrteSegmentJTypeSubTlv) HasSrv6Sid() bool {
	return obj.obj.Srv6Sid != nil
}

// SetSrv6Sid sets the string value in the BgpSrteSegmentJTypeSubTlv object
//  Optional SRv6 SID.
func (obj *bgpSrteSegmentJTypeSubTlv) SetSrv6Sid(value string) BgpSrteSegmentJTypeSubTlv {
	obj.obj.Srv6Sid = &value

	return obj
}

// Srv6SidEndpointBehavior returns a BgpSrteSRv6SIDEndpointBehaviorAndStructure
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentJTypeSubTlv) Srv6SidEndpointBehavior() BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	if obj.obj.Srv6SidEndpointBehavior == nil {
		obj.obj.Srv6SidEndpointBehavior = NewBgpSrteSRv6SIDEndpointBehaviorAndStructure().Msg()
	}
	return &bgpSrteSRv6SIDEndpointBehaviorAndStructure{obj: obj.obj.Srv6SidEndpointBehavior}
}

// Srv6SidEndpointBehavior returns a BgpSrteSRv6SIDEndpointBehaviorAndStructure
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentJTypeSubTlv) HasSrv6SidEndpointBehavior() bool {
	return obj.obj.Srv6SidEndpointBehavior != nil
}

// SetSrv6SidEndpointBehavior sets the BgpSrteSRv6SIDEndpointBehaviorAndStructure value in the BgpSrteSegmentJTypeSubTlv object
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentJTypeSubTlv) SetSrv6SidEndpointBehavior(value BgpSrteSRv6SIDEndpointBehaviorAndStructure) BgpSrteSegmentJTypeSubTlv {
	obj.Srv6SidEndpointBehavior().SetMsg(value.Msg())

	return obj
}

func (obj *bgpSrteSegmentJTypeSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		err := validateHex(obj.Flags())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Flags BgpSrteSegmentJTypeSubTlv"))
		}
	}

	if obj.obj.SrAlgorithm != nil {
		if *obj.obj.SrAlgorithm < 0 || *obj.obj.SrAlgorithm > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentJTypeSubTlv.SrAlgorithm <= 255 but Got %d", *obj.obj.SrAlgorithm))
		}

	}

	if obj.obj.LocalInterfaceId != nil {
		if *obj.obj.LocalInterfaceId < 0 || *obj.obj.LocalInterfaceId > 2147483647 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentJTypeSubTlv.LocalInterfaceId <= 2147483647 but Got %d", *obj.obj.LocalInterfaceId))
		}

	}

	// LocalIpv6NodeAddress required
	if obj.obj.LocalIpv6NodeAddress == "" {
		validation = append(validation, "LocalIpv6NodeAddress is required field on interface BgpSrteSegmentJTypeSubTlv")
	} else {
		err := validateIpv6(obj.LocalIpv6NodeAddress())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on LocalIpv6NodeAddress BgpSrteSegmentJTypeSubTlv"))
		}
	}

	if obj.obj.RemoteInterfaceId != nil {
		if *obj.obj.RemoteInterfaceId < 0 || *obj.obj.RemoteInterfaceId > 2147483647 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentJTypeSubTlv.RemoteInterfaceId <= 2147483647 but Got %d", *obj.obj.RemoteInterfaceId))
		}

	}

	// RemoteIpv6NodeAddress required
	if obj.obj.RemoteIpv6NodeAddress == "" {
		validation = append(validation, "RemoteIpv6NodeAddress is required field on interface BgpSrteSegmentJTypeSubTlv")
	} else {
		err := validateIpv6(obj.RemoteIpv6NodeAddress())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on RemoteIpv6NodeAddress BgpSrteSegmentJTypeSubTlv"))
		}
	}

	if obj.obj.Srv6Sid != nil {
		err := validateIpv6(obj.Srv6Sid())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Srv6Sid BgpSrteSegmentJTypeSubTlv"))
		}
	}

	if obj.obj.Srv6SidEndpointBehavior != nil {
		obj.Srv6SidEndpointBehavior().validateObj(set_default)
	}
}

func (obj *bgpSrteSegmentJTypeSubTlv) setDefault() {
	if obj.obj.SrAlgorithm == nil {
		obj.SetSrAlgorithm(0)
	}
	if obj.obj.LocalInterfaceId == nil {
		obj.SetLocalInterfaceId(0)
	}
	if obj.obj.RemoteInterfaceId == nil {
		obj.SetRemoteInterfaceId(0)
	}

}

type bgpSrteSegmentKTypeSubTlv struct {
	obj *snappipb.BgpSrteSegmentKTypeSubTlv
}

func NewBgpSrteSegmentKTypeSubTlv() BgpSrteSegmentKTypeSubTlv {
	obj := bgpSrteSegmentKTypeSubTlv{obj: &snappipb.BgpSrteSegmentKTypeSubTlv{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSegmentKTypeSubTlv) Msg() *snappipb.BgpSrteSegmentKTypeSubTlv {
	return obj.obj
}

func (obj *bgpSrteSegmentKTypeSubTlv) SetMsg(msg *snappipb.BgpSrteSegmentKTypeSubTlv) BgpSrteSegmentKTypeSubTlv {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSegmentKTypeSubTlv) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSegmentKTypeSubTlv) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentKTypeSubTlv) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentKTypeSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSegmentKTypeSubTlv) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSegmentKTypeSubTlv) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSegmentKTypeSubTlv) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSegmentKTypeSubTlv interface {
	Msg() *snappipb.BgpSrteSegmentKTypeSubTlv
	SetMsg(*snappipb.BgpSrteSegmentKTypeSubTlv) BgpSrteSegmentKTypeSubTlv
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Flags() string
	SetFlags(value string) BgpSrteSegmentKTypeSubTlv
	HasFlags() bool
	SrAlgorithm() int32
	SetSrAlgorithm(value int32) BgpSrteSegmentKTypeSubTlv
	HasSrAlgorithm() bool
	LocalIpv6Address() string
	SetLocalIpv6Address(value string) BgpSrteSegmentKTypeSubTlv
	RemoteIpv6Address() string
	SetRemoteIpv6Address(value string) BgpSrteSegmentKTypeSubTlv
	Srv6Sid() string
	SetSrv6Sid(value string) BgpSrteSegmentKTypeSubTlv
	HasSrv6Sid() bool
	Srv6SidEndpointBehavior() BgpSrteSRv6SIDEndpointBehaviorAndStructure
	SetSrv6SidEndpointBehavior(value BgpSrteSRv6SIDEndpointBehaviorAndStructure) BgpSrteSegmentKTypeSubTlv
	HasSrv6SidEndpointBehavior() bool
}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentKTypeSubTlv) Flags() string {

	return *obj.obj.Flags

}

// Flags returns a string
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentKTypeSubTlv) HasFlags() bool {
	return obj.obj.Flags != nil
}

// SetFlags sets the string value in the BgpSrteSegmentKTypeSubTlv object
//  One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
func (obj *bgpSrteSegmentKTypeSubTlv) SetFlags(value string) BgpSrteSegmentKTypeSubTlv {
	obj.obj.Flags = &value

	return obj
}

// SrAlgorithm returns a int32
//  SR Algorithm identifier when A-Flag in on.
func (obj *bgpSrteSegmentKTypeSubTlv) SrAlgorithm() int32 {

	if obj.obj.SrAlgorithm == nil {
		*obj.obj.SrAlgorithm = 0
	}

	return *obj.obj.SrAlgorithm

}

// SrAlgorithm returns a int32
//  SR Algorithm identifier when A-Flag in on.
func (obj *bgpSrteSegmentKTypeSubTlv) HasSrAlgorithm() bool {
	return obj.obj.SrAlgorithm != nil
}

// SetSrAlgorithm sets the int32 value in the BgpSrteSegmentKTypeSubTlv object
//  SR Algorithm identifier when A-Flag in on.
func (obj *bgpSrteSegmentKTypeSubTlv) SetSrAlgorithm(value int32) BgpSrteSegmentKTypeSubTlv {
	obj.obj.SrAlgorithm = &value

	return obj
}

// LocalIpv6Address returns a string
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentKTypeSubTlv) LocalIpv6Address() string {

	return obj.obj.LocalIpv6Address
}

// SetLocalIpv6Address sets the string value in the BgpSrteSegmentKTypeSubTlv object
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentKTypeSubTlv) SetLocalIpv6Address(value string) BgpSrteSegmentKTypeSubTlv {
	obj.obj.LocalIpv6Address = value

	return obj
}

// RemoteIpv6Address returns a string
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentKTypeSubTlv) RemoteIpv6Address() string {

	return obj.obj.RemoteIpv6Address
}

// SetRemoteIpv6Address sets the string value in the BgpSrteSegmentKTypeSubTlv object
//  IPv6 address representing a node.
func (obj *bgpSrteSegmentKTypeSubTlv) SetRemoteIpv6Address(value string) BgpSrteSegmentKTypeSubTlv {
	obj.obj.RemoteIpv6Address = value

	return obj
}

// Srv6Sid returns a string
//  Optional SRv6 SID.
func (obj *bgpSrteSegmentKTypeSubTlv) Srv6Sid() string {

	return *obj.obj.Srv6Sid

}

// Srv6Sid returns a string
//  Optional SRv6 SID.
func (obj *bgpSrteSegmentKTypeSubTlv) HasSrv6Sid() bool {
	return obj.obj.Srv6Sid != nil
}

// SetSrv6Sid sets the string value in the BgpSrteSegmentKTypeSubTlv object
//  Optional SRv6 SID.
func (obj *bgpSrteSegmentKTypeSubTlv) SetSrv6Sid(value string) BgpSrteSegmentKTypeSubTlv {
	obj.obj.Srv6Sid = &value

	return obj
}

// Srv6SidEndpointBehavior returns a BgpSrteSRv6SIDEndpointBehaviorAndStructure
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentKTypeSubTlv) Srv6SidEndpointBehavior() BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	if obj.obj.Srv6SidEndpointBehavior == nil {
		obj.obj.Srv6SidEndpointBehavior = NewBgpSrteSRv6SIDEndpointBehaviorAndStructure().Msg()
	}
	return &bgpSrteSRv6SIDEndpointBehaviorAndStructure{obj: obj.obj.Srv6SidEndpointBehavior}
}

// Srv6SidEndpointBehavior returns a BgpSrteSRv6SIDEndpointBehaviorAndStructure
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentKTypeSubTlv) HasSrv6SidEndpointBehavior() bool {
	return obj.obj.Srv6SidEndpointBehavior != nil
}

// SetSrv6SidEndpointBehavior sets the BgpSrteSRv6SIDEndpointBehaviorAndStructure value in the BgpSrteSegmentKTypeSubTlv object
//  Optional SRv6 Endpoint Behavior and SID Structure.
func (obj *bgpSrteSegmentKTypeSubTlv) SetSrv6SidEndpointBehavior(value BgpSrteSRv6SIDEndpointBehaviorAndStructure) BgpSrteSegmentKTypeSubTlv {
	obj.Srv6SidEndpointBehavior().SetMsg(value.Msg())

	return obj
}

func (obj *bgpSrteSegmentKTypeSubTlv) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Flags != nil {
		err := validateHex(obj.Flags())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Flags BgpSrteSegmentKTypeSubTlv"))
		}
	}

	if obj.obj.SrAlgorithm != nil {
		if *obj.obj.SrAlgorithm < 0 || *obj.obj.SrAlgorithm > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSegmentKTypeSubTlv.SrAlgorithm <= 255 but Got %d", *obj.obj.SrAlgorithm))
		}

	}

	// LocalIpv6Address required
	if obj.obj.LocalIpv6Address == "" {
		validation = append(validation, "LocalIpv6Address is required field on interface BgpSrteSegmentKTypeSubTlv")
	} else {
		err := validateIpv6(obj.LocalIpv6Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on LocalIpv6Address BgpSrteSegmentKTypeSubTlv"))
		}
	}

	// RemoteIpv6Address required
	if obj.obj.RemoteIpv6Address == "" {
		validation = append(validation, "RemoteIpv6Address is required field on interface BgpSrteSegmentKTypeSubTlv")
	} else {
		err := validateIpv6(obj.RemoteIpv6Address())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on RemoteIpv6Address BgpSrteSegmentKTypeSubTlv"))
		}
	}

	if obj.obj.Srv6Sid != nil {
		err := validateIpv6(obj.Srv6Sid())
		if err != nil {
			validation = append(validation, fmt.Sprintf("%s %s", err.Error(), "on Srv6Sid BgpSrteSegmentKTypeSubTlv"))
		}
	}

	if obj.obj.Srv6SidEndpointBehavior != nil {
		obj.Srv6SidEndpointBehavior().validateObj(set_default)
	}
}

func (obj *bgpSrteSegmentKTypeSubTlv) setDefault() {
	if obj.obj.SrAlgorithm == nil {
		obj.SetSrAlgorithm(0)
	}

}

type bgpSrteSRv6SIDEndpointBehaviorAndStructure struct {
	obj *snappipb.BgpSrteSRv6SIDEndpointBehaviorAndStructure
}

func NewBgpSrteSRv6SIDEndpointBehaviorAndStructure() BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	obj := bgpSrteSRv6SIDEndpointBehaviorAndStructure{obj: &snappipb.BgpSrteSRv6SIDEndpointBehaviorAndStructure{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) Msg() *snappipb.BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	return obj.obj
}

func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) SetMsg(msg *snappipb.BgpSrteSRv6SIDEndpointBehaviorAndStructure) BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSRv6SIDEndpointBehaviorAndStructure interface {
	Msg() *snappipb.BgpSrteSRv6SIDEndpointBehaviorAndStructure
	SetMsg(*snappipb.BgpSrteSRv6SIDEndpointBehaviorAndStructure) BgpSrteSRv6SIDEndpointBehaviorAndStructure
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	LbLength() int32
	SetLbLength(value int32) BgpSrteSRv6SIDEndpointBehaviorAndStructure
	HasLbLength() bool
	LnLength() int32
	SetLnLength(value int32) BgpSrteSRv6SIDEndpointBehaviorAndStructure
	HasLnLength() bool
	FuncLength() int32
	SetFuncLength(value int32) BgpSrteSRv6SIDEndpointBehaviorAndStructure
	HasFuncLength() bool
	ArgLength() int32
	SetArgLength(value int32) BgpSrteSRv6SIDEndpointBehaviorAndStructure
	HasArgLength() bool
}

// LbLength returns a int32
//  SRv6 SID Locator Block length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) LbLength() int32 {

	if obj.obj.LbLength == nil {
		*obj.obj.LbLength = 0
	}

	return *obj.obj.LbLength

}

// LbLength returns a int32
//  SRv6 SID Locator Block length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) HasLbLength() bool {
	return obj.obj.LbLength != nil
}

// SetLbLength sets the int32 value in the BgpSrteSRv6SIDEndpointBehaviorAndStructure object
//  SRv6 SID Locator Block length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) SetLbLength(value int32) BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	obj.obj.LbLength = &value

	return obj
}

// LnLength returns a int32
//  SRv6 SID Locator Node length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) LnLength() int32 {

	if obj.obj.LnLength == nil {
		*obj.obj.LnLength = 0
	}

	return *obj.obj.LnLength

}

// LnLength returns a int32
//  SRv6 SID Locator Node length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) HasLnLength() bool {
	return obj.obj.LnLength != nil
}

// SetLnLength sets the int32 value in the BgpSrteSRv6SIDEndpointBehaviorAndStructure object
//  SRv6 SID Locator Node length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) SetLnLength(value int32) BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	obj.obj.LnLength = &value

	return obj
}

// FuncLength returns a int32
//  SRv6 SID Function length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) FuncLength() int32 {

	if obj.obj.FuncLength == nil {
		*obj.obj.FuncLength = 0
	}

	return *obj.obj.FuncLength

}

// FuncLength returns a int32
//  SRv6 SID Function length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) HasFuncLength() bool {
	return obj.obj.FuncLength != nil
}

// SetFuncLength sets the int32 value in the BgpSrteSRv6SIDEndpointBehaviorAndStructure object
//  SRv6 SID Function length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) SetFuncLength(value int32) BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	obj.obj.FuncLength = &value

	return obj
}

// ArgLength returns a int32
//  SRv6 SID Arguments length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) ArgLength() int32 {

	if obj.obj.ArgLength == nil {
		*obj.obj.ArgLength = 0
	}

	return *obj.obj.ArgLength

}

// ArgLength returns a int32
//  SRv6 SID Arguments length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) HasArgLength() bool {
	return obj.obj.ArgLength != nil
}

// SetArgLength sets the int32 value in the BgpSrteSRv6SIDEndpointBehaviorAndStructure object
//  SRv6 SID Arguments length in bits.
func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) SetArgLength(value int32) BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	obj.obj.ArgLength = &value

	return obj
}

func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.LbLength != nil {
		if *obj.obj.LbLength < 0 || *obj.obj.LbLength > 128 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSRv6SIDEndpointBehaviorAndStructure.LbLength <= 128 but Got %d", *obj.obj.LbLength))
		}

	}

	if obj.obj.LnLength != nil {
		if *obj.obj.LnLength < 0 || *obj.obj.LnLength > 128 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSRv6SIDEndpointBehaviorAndStructure.LnLength <= 128 but Got %d", *obj.obj.LnLength))
		}

	}

	if obj.obj.FuncLength != nil {
		if *obj.obj.FuncLength < 0 || *obj.obj.FuncLength > 128 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSRv6SIDEndpointBehaviorAndStructure.FuncLength <= 128 but Got %d", *obj.obj.FuncLength))
		}

	}

	if obj.obj.ArgLength != nil {
		if *obj.obj.ArgLength < 0 || *obj.obj.ArgLength > 128 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSRv6SIDEndpointBehaviorAndStructure.ArgLength <= 128 but Got %d", *obj.obj.ArgLength))
		}

	}

}

func (obj *bgpSrteSRv6SIDEndpointBehaviorAndStructure) setDefault() {
	if obj.obj.LbLength == nil {
		obj.SetLbLength(0)
	}
	if obj.obj.LnLength == nil {
		obj.SetLnLength(0)
	}
	if obj.obj.FuncLength == nil {
		obj.SetFuncLength(0)
	}
	if obj.obj.ArgLength == nil {
		obj.SetArgLength(0)
	}

}

type bgpSrteSrMplsSid struct {
	obj *snappipb.BgpSrteSrMplsSid
}

func NewBgpSrteSrMplsSid() BgpSrteSrMplsSid {
	obj := bgpSrteSrMplsSid{obj: &snappipb.BgpSrteSrMplsSid{}}
	obj.setDefault()
	return &obj
}

func (obj *bgpSrteSrMplsSid) Msg() *snappipb.BgpSrteSrMplsSid {
	return obj.obj
}

func (obj *bgpSrteSrMplsSid) SetMsg(msg *snappipb.BgpSrteSrMplsSid) BgpSrteSrMplsSid {
	proto.Merge(obj.obj, msg)
	return obj
}

func (obj *bgpSrteSrMplsSid) ToPbText() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	return proto.MarshalTextString(obj.Msg())
}

func (obj *bgpSrteSrMplsSid) FromPbText(value string) error {
	retObj := proto.UnmarshalText(value, obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSrMplsSid) ToYaml() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSrMplsSid) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(data), obj.Msg())
	if retObj != nil {
		return retObj
	}
	vErr := obj.Validate(true)
	if vErr != nil {
		return vErr
	}
	return retObj
}

func (obj *bgpSrteSrMplsSid) ToJson() string {
	vErr := obj.Validate()
	if vErr != nil {
		panic(vErr)
	}
	opts := protojson.MarshalOptions{
		UseProtoNames:   true,
		AllowPartial:    true,
		EmitUnpopulated: false,
		Indent:          "  ",
	}
	data, err := opts.Marshal(obj.Msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpSrteSrMplsSid) FromJson(value string) error {
	opts := protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	retObj := opts.Unmarshal([]byte(value), obj.Msg())
	if retObj != nil {
		return retObj
	}
	err := obj.Validate(true)
	if err != nil {
		return err
	}
	return retObj
}

func (obj *bgpSrteSrMplsSid) Validate(defaults ...bool) error {
	var set_default bool = false
	if len(defaults) > 0 {
		set_default = defaults[0]
	}
	obj.validateObj(set_default)
	return validationResult()
}

type BgpSrteSrMplsSid interface {
	Msg() *snappipb.BgpSrteSrMplsSid
	SetMsg(*snappipb.BgpSrteSrMplsSid) BgpSrteSrMplsSid
	ToPbText() string
	ToYaml() string
	ToJson() string
	FromPbText(value string) error
	FromYaml(value string) error
	FromJson(value string) error
	Validate(defaults ...bool) error
	validateObj(set_default bool)
	setDefault()
	Label() int32
	SetLabel(value int32) BgpSrteSrMplsSid
	HasLabel() bool
	Tc() int32
	SetTc(value int32) BgpSrteSrMplsSid
	HasTc() bool
	SBit() bool
	SetSBit(value bool) BgpSrteSrMplsSid
	HasSBit() bool
	Ttl() int32
	SetTtl(value int32) BgpSrteSrMplsSid
	HasTtl() bool
}

// Label returns a int32
//  Label value in [0, 2^20 -1].
func (obj *bgpSrteSrMplsSid) Label() int32 {

	return *obj.obj.Label

}

// Label returns a int32
//  Label value in [0, 2^20 -1].
func (obj *bgpSrteSrMplsSid) HasLabel() bool {
	return obj.obj.Label != nil
}

// SetLabel sets the int32 value in the BgpSrteSrMplsSid object
//  Label value in [0, 2^20 -1].
func (obj *bgpSrteSrMplsSid) SetLabel(value int32) BgpSrteSrMplsSid {
	obj.obj.Label = &value

	return obj
}

// Tc returns a int32
//  Traffic class in bits.
func (obj *bgpSrteSrMplsSid) Tc() int32 {

	return *obj.obj.Tc

}

// Tc returns a int32
//  Traffic class in bits.
func (obj *bgpSrteSrMplsSid) HasTc() bool {
	return obj.obj.Tc != nil
}

// SetTc sets the int32 value in the BgpSrteSrMplsSid object
//  Traffic class in bits.
func (obj *bgpSrteSrMplsSid) SetTc(value int32) BgpSrteSrMplsSid {
	obj.obj.Tc = &value

	return obj
}

// SBit returns a bool
//  Bottom-of-Stack bit.
func (obj *bgpSrteSrMplsSid) SBit() bool {

	return *obj.obj.SBit

}

// SBit returns a bool
//  Bottom-of-Stack bit.
func (obj *bgpSrteSrMplsSid) HasSBit() bool {
	return obj.obj.SBit != nil
}

// SetSBit sets the bool value in the BgpSrteSrMplsSid object
//  Bottom-of-Stack bit.
func (obj *bgpSrteSrMplsSid) SetSBit(value bool) BgpSrteSrMplsSid {
	obj.obj.SBit = &value

	return obj
}

// Ttl returns a int32
//  Time To Live.
func (obj *bgpSrteSrMplsSid) Ttl() int32 {

	return *obj.obj.Ttl

}

// Ttl returns a int32
//  Time To Live.
func (obj *bgpSrteSrMplsSid) HasTtl() bool {
	return obj.obj.Ttl != nil
}

// SetTtl sets the int32 value in the BgpSrteSrMplsSid object
//  Time To Live.
func (obj *bgpSrteSrMplsSid) SetTtl(value int32) BgpSrteSrMplsSid {
	obj.obj.Ttl = &value

	return obj
}

func (obj *bgpSrteSrMplsSid) validateObj(set_default bool) {
	if set_default {
		obj.setDefault()
	}

	if obj.obj.Label != nil {
		if *obj.obj.Label < 0 || *obj.obj.Label > 1048575 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSrMplsSid.Label <= 1048575 but Got %d", *obj.obj.Label))
		}

	}

	if obj.obj.Tc != nil {
		if *obj.obj.Tc < 0 || *obj.obj.Tc > 7 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSrMplsSid.Tc <= 7 but Got %d", *obj.obj.Tc))
		}

	}

	if obj.obj.Ttl != nil {
		if *obj.obj.Ttl < 0 || *obj.obj.Ttl > 255 {
			validation = append(
				validation, fmt.Sprintf("0 <= BgpSrteSrMplsSid.Ttl <= 255 but Got %d", *obj.obj.Ttl))
		}

	}

}

func (obj *bgpSrteSrMplsSid) setDefault() {

}
